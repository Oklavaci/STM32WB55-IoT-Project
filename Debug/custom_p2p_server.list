
custom_p2p_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001944  0800e02c  0800e02c  0001e02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f970  0800f970  0001f970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f978  0800f978  0001f978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f97c  0800f97c  0001f97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  0800f980  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800fa10  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000130  0800faa9  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000170  0800fae7  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 0000008a  20000184  0800faf8  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00026f70  20000210  0800fb82  00020210  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027180  0800fb82  00027180  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   0003cd54  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000765c  00000000  00000000  0005cf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003420  00000000  00000000  000645f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003118  00000000  00000000  00067a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00030b3e  00000000  00000000  0006ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003c284  00000000  00000000  0009b666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0010a21d  00000000  00000000  000d78ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001e1b07  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e5a8  00000000  00000000  001e1b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e014 	.word	0x0800e014

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800e014 	.word	0x0800e014

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b96:	f002 fb5b 	bl	8003250 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b9a:	f002 fb5f 	bl	800325c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	f7ff ffad 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ba6:	f009 fa8f 	bl	800a0c8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000baa:	f000 f821 	bl	8000bf0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bae:	f000 f8c3 	bl	8000d38 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <APPD_EnableCPU2+0x34>)
 8000bc0:	1d3c      	adds	r4, r7, #4
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bd6:	f009 f98b 	bl	8009ef0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 fc26 	bl	800942e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800e02c 	.word	0x0800e02c

08000bf0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
 8000c14:	e038      	b.n	8000c88 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01b      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x7a>
 8000c32:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d823      	bhi.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
 8000c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3c:	d003      	beq.n	8000c46 <APPD_SetCPU2GpioConfig+0x56>
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d009      	beq.n	8000c58 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c44:	e01c      	b.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	889a      	ldrh	r2, [r3, #4]
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	83bb      	strh	r3, [r7, #28]
          break;
 8000c56:	e014      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	889a      	ldrh	r2, [r3, #4]
 8000c62:	8b7b      	ldrh	r3, [r7, #26]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	837b      	strh	r3, [r7, #26]
          break;
 8000c68:	e00b      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	889a      	ldrh	r2, [r3, #4]
 8000c74:	8b3b      	ldrh	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	833b      	strh	r3, [r7, #24]
          break;
 8000c7a:	e002      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000c80:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	3301      	adds	r3, #1
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b25      	cmp	r3, #37	; 0x25
 8000c8c:	d9c3      	bls.n	8000c16 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff3f 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff55 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f002 ffa2 	bl	8003c00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f003 f90b 	bl	8003ee0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff ff27 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff ff3d 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000ce6:	f002 ff8b 	bl	8003c00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000cf2:	f003 f8f5 	bl	8003ee0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cfc:	8b3b      	ldrh	r3, [r7, #24]
 8000cfe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff11 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff ff27 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d12:	f002 ff75 	bl	8003c00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d1e:	f003 f8df 	bl	8003ee0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
}
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800f550 	.word	0x0800f550
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d4a:	f001 fd07 	bl	800275c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fad6 	bl	8002318 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_EXTI_EnableIT_32_63>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000daa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000800 	.word	0x58000800

08000dc8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cafecafe 	.word	0xcafecafe

08000e04 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_AHB3_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b29b      	uxth	r3, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e0042000 	.word	0xe0042000

08000f0c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <LL_LPM_EnableSleep+0x1c>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <LL_LPM_EnableSleep+0x1c>)
 8000fda:	f023 0304 	bic.w	r3, r3, #4
 8000fde:	6113      	str	r3, [r2, #16]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	22ca      	movs	r2, #202	; 0xca
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2253      	movs	r2, #83	; 0x53
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 0207 	bic.w	r2, r3, #7
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <MX_APPE_Config+0x18>)
 8001056:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800105a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800105c:	f000 f826 	bl	80010ac <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001060:	f000 f866 	bl	8001130 <Config_HSE>

  return;
 8001064:	bf00      	nop
}
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58004000 	.word	0x58004000

0800106c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001070:	f000 f872 	bl	8001158 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001074:	f000 f88a 	bl	800118c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001078:	4904      	ldr	r1, [pc, #16]	; (800108c <MX_APPE_Init+0x20>)
 800107a:	2000      	movs	r0, #0
 800107c:	f000 ff44 	bl	8001f08 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001080:	f7ff fd87 	bl	8000b92 <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001084:	f000 f890 	bl	80011a8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001088:	bf00      	nop
}
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002cc 	.word	0x200002cc

08001090 <Init_Smps>:

void Init_Smps(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001094:	bf00      	nop
}
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <Init_Exti>:

void Init_Exti(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010a2:	2050      	movs	r0, #80	; 0x50
 80010a4:	f7ff fe7c 	bl	8000da0 <LL_EXTI_EnableIT_32_63>

  return;
 80010a8:	bf00      	nop
}
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010b0:	f000 f804 	bl	80010bc <Reset_BackupDomain>

  Reset_IPCC();
 80010b4:	f000 f81a 	bl	80010ec <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010b8:	bf00      	nop
}
 80010ba:	bd80      	pop	{r7, pc}

080010bc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010c0:	f7ff fed6 	bl	8000e70 <LL_RCC_IsActiveFlag_PINRST>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <Reset_BackupDomain+0x2a>
 80010ca:	f7ff fee4 	bl	8000e96 <LL_RCC_IsActiveFlag_SFTRST>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010d4:	f003 fa1a 	bl	800450c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010d8:	f003 fa18 	bl	800450c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010dc:	f7ff fea6 	bl	8000e2c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010e0:	f7ff feb5 	bl	8000e4e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
}
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80010f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010f4:	f7ff fee2 	bl	8000ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010f8:	213f      	movs	r1, #63	; 0x3f
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <Reset_IPCC+0x40>)
 80010fc:	f7ff ff4c 	bl	8000f98 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001100:	213f      	movs	r1, #63	; 0x3f
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <Reset_IPCC+0x40>)
 8001104:	f7ff ff56 	bl	8000fb4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001108:	213f      	movs	r1, #63	; 0x3f
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <Reset_IPCC+0x40>)
 800110c:	f7ff fefe 	bl	8000f0c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001110:	213f      	movs	r1, #63	; 0x3f
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <Reset_IPCC+0x40>)
 8001114:	f7ff ff1d 	bl	8000f52 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001118:	213f      	movs	r1, #63	; 0x3f
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <Reset_IPCC+0x40>)
 800111c:	f7ff ff08 	bl	8000f30 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001120:	213f      	movs	r1, #63	; 0x3f
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <Reset_IPCC+0x40>)
 8001124:	f7ff ff27 	bl	8000f76 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001128:	bf00      	nop
}
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58000c00 	.word	0x58000c00

08001130 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f009 f844 	bl	800a1c4 <OTP_Read>
 800113c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe3d 	bl	8000dc8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800114e:	bf00      	nop
 8001150:	bf00      	nop
}
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <System_Init>:

static void System_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  Init_Smps();
 800115c:	f7ff ff98 	bl	8001090 <Init_Smps>

  Init_Exti();
 8001160:	f7ff ff9d 	bl	800109e <Init_Exti>

  Init_Rtc();
 8001164:	f000 f802 	bl	800116c <Init_Rtc>

  return;
 8001168:	bf00      	nop
}
 800116a:	bd80      	pop	{r7, pc}

0800116c <Init_Rtc>:

static void Init_Rtc(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <Init_Rtc+0x1c>)
 8001172:	f7ff ff4a 	bl	800100a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001176:	2100      	movs	r1, #0
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <Init_Rtc+0x1c>)
 800117a:	f7ff ff56 	bl	800102a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800117e:	4802      	ldr	r0, [pc, #8]	; (8001188 <Init_Rtc+0x1c>)
 8001180:	f7ff ff36 	bl	8000ff0 <LL_RTC_EnableWriteProtection>

  return;
 8001184:	bf00      	nop
}
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40002800 	.word	0x40002800

0800118c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001190:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001194:	f7ff fe36 	bl	8000e04 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001198:	f00b fbfa 	bl	800c990 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800119c:	2004      	movs	r0, #4
 800119e:	f7ff fde9 	bl	8000d74 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011a2:	bf00      	nop
}
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011ae:	f008 fce9 	bl	8009b84 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <appe_Tl_Init+0x50>)
 80011b4:	2100      	movs	r1, #0
 80011b6:	2080      	movs	r0, #128	; 0x80
 80011b8:	f00b fd28 	bl	800cc0c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <appe_Tl_Init+0x54>)
 80011be:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <appe_Tl_Init+0x58>)
 80011c2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <appe_Tl_Init+0x5c>)
 80011ca:	f008 fba1 	bl	8009910 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <appe_Tl_Init+0x60>)
 80011d0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <appe_Tl_Init+0x64>)
 80011d4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <appe_Tl_Init+0x68>)
 80011d8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011da:	f240 533c 	movw	r3, #1340	; 0x53c
 80011de:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4618      	mov	r0, r3
 80011e6:	f008 fe0f 	bl	8009e08 <TL_MM_Init>

  TL_Enable();
 80011ea:	f008 fcc5 	bl	8009b78 <TL_Enable>

  return;
 80011ee:	bf00      	nop
}
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08009949 	.word	0x08009949
 80011fc:	20030734 	.word	0x20030734
 8001200:	08001215 	.word	0x08001215
 8001204:	0800122d 	.word	0x0800122d
 8001208:	2003094c 	.word	0x2003094c
 800120c:	20030840 	.word	0x20030840
 8001210:	200301f8 	.word	0x200301f8

08001214 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800121e:	bf00      	nop
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	330b      	adds	r3, #11
 800123a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001246:	2b07      	cmp	r3, #7
 8001248:	f200 80d0 	bhi.w	80013ec <APPE_SysUserEvtRx+0x1c0>
 800124c:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <APPE_SysUserEvtRx+0x28>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001275 	.word	0x08001275
 8001258:	08001307 	.word	0x08001307
 800125c:	08001329 	.word	0x08001329
 8001260:	080013ed 	.word	0x080013ed
 8001264:	0800136d 	.word	0x0800136d
 8001268:	08001391 	.word	0x08001391
 800126c:	080013ad 	.word	0x080013ad
 8001270:	080013d1 	.word	0x080013d1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4618      	mov	r0, r3
 800127a:	f008 f905 	bl	8009488 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800127e:	485e      	ldr	r0, [pc, #376]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 8001280:	f008 fec2 	bl	800a008 <DbgTraceGetFileName>
 8001284:	4601      	mov	r1, r0
 8001286:	f240 135b 	movw	r3, #347	; 0x15b
 800128a:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 800128c:	485c      	ldr	r0, [pc, #368]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 800128e:	f00b fe3f 	bl	800cf10 <iprintf>
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	4619      	mov	r1, r3
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	461a      	mov	r2, r3
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	4859      	ldr	r0, [pc, #356]	; (8001404 <APPE_SysUserEvtRx+0x1d8>)
 800129e:	f00b fe37 	bl	800cf10 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012a2:	4855      	ldr	r0, [pc, #340]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 80012a4:	f008 feb0 	bl	800a008 <DbgTraceGetFileName>
 80012a8:	4601      	mov	r1, r0
 80012aa:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 80012ae:	4a53      	ldr	r2, [pc, #332]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 80012b0:	4853      	ldr	r0, [pc, #332]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80012b2:	f00b fe2d 	bl	800cf10 <iprintf>
 80012b6:	7c3b      	ldrb	r3, [r7, #16]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4853      	ldr	r0, [pc, #332]	; (8001408 <APPE_SysUserEvtRx+0x1dc>)
 80012bc:	f00b fe28 	bl	800cf10 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012c0:	484d      	ldr	r0, [pc, #308]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 80012c2:	f008 fea1 	bl	800a008 <DbgTraceGetFileName>
 80012c6:	4601      	mov	r1, r0
 80012c8:	f240 135d 	movw	r3, #349	; 0x15d
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 80012ce:	484c      	ldr	r0, [pc, #304]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80012d0:	f00b fe1e 	bl	800cf10 <iprintf>
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	4619      	mov	r1, r3
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	461a      	mov	r2, r3
 80012dc:	7e3b      	ldrb	r3, [r7, #24]
 80012de:	484b      	ldr	r0, [pc, #300]	; (800140c <APPE_SysUserEvtRx+0x1e0>)
 80012e0:	f00b fe16 	bl	800cf10 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e4:	4844      	ldr	r0, [pc, #272]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 80012e6:	f008 fe8f 	bl	800a008 <DbgTraceGetFileName>
 80012ea:	4601      	mov	r1, r0
 80012ec:	f240 135f 	movw	r3, #351	; 0x15f
 80012f0:	4a42      	ldr	r2, [pc, #264]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 80012f2:	4843      	ldr	r0, [pc, #268]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80012f4:	f00b fe0c 	bl	800cf10 <iprintf>
 80012f8:	4845      	ldr	r0, [pc, #276]	; (8001410 <APPE_SysUserEvtRx+0x1e4>)
 80012fa:	f00b fe09 	bl	800cf10 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f8e0 	bl	80014c4 <APPE_SysEvtReadyProcessing>
    break;
 8001304:	e073      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001306:	483c      	ldr	r0, [pc, #240]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 8001308:	f008 fe7e 	bl	800a008 <DbgTraceGetFileName>
 800130c:	4601      	mov	r1, r0
 800130e:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8001312:	4a3a      	ldr	r2, [pc, #232]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 8001314:	483a      	ldr	r0, [pc, #232]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 8001316:	f00b fdfb 	bl	800cf10 <iprintf>
 800131a:	483e      	ldr	r0, [pc, #248]	; (8001414 <APPE_SysUserEvtRx+0x1e8>)
 800131c:	f00b fdf8 	bl	800cf10 <iprintf>
    APPE_SysEvtError(pPayload);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f885 	bl	8001430 <APPE_SysEvtError>
    break;
 8001326:	e062      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001328:	4833      	ldr	r0, [pc, #204]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 800132a:	f008 fe6d 	bl	800a008 <DbgTraceGetFileName>
 800132e:	4601      	mov	r1, r0
 8001330:	f240 1369 	movw	r3, #361	; 0x169
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 8001336:	4832      	ldr	r0, [pc, #200]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 8001338:	f00b fdea 	bl	800cf10 <iprintf>
 800133c:	4836      	ldr	r0, [pc, #216]	; (8001418 <APPE_SysUserEvtRx+0x1ec>)
 800133e:	f00b fe83 	bl	800d048 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001342:	482d      	ldr	r0, [pc, #180]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 8001344:	f008 fe60 	bl	800a008 <DbgTraceGetFileName>
 8001348:	4601      	mov	r1, r0
 800134a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 8001350:	482b      	ldr	r0, [pc, #172]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 8001352:	f00b fddd 	bl	800cf10 <iprintf>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3302      	adds	r3, #2
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3302      	adds	r3, #2
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	461a      	mov	r2, r3
 8001364:	482d      	ldr	r0, [pc, #180]	; (800141c <APPE_SysUserEvtRx+0x1f0>)
 8001366:	f00b fdd3 	bl	800cf10 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800136a:	e040      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800136c:	4822      	ldr	r0, [pc, #136]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 800136e:	f008 fe4b 	bl	800a008 <DbgTraceGetFileName>
 8001372:	4601      	mov	r1, r0
 8001374:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 800137a:	4821      	ldr	r0, [pc, #132]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 800137c:	f00b fdc8 	bl	800cf10 <iprintf>
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3302      	adds	r3, #2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4825      	ldr	r0, [pc, #148]	; (8001420 <APPE_SysUserEvtRx+0x1f4>)
 800138a:	f00b fdc1 	bl	800cf10 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800138e:	e02e      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 8001392:	f008 fe39 	bl	800a008 <DbgTraceGetFileName>
 8001396:	4601      	mov	r1, r0
 8001398:	f240 1375 	movw	r3, #373	; 0x175
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80013a0:	f00b fdb6 	bl	800cf10 <iprintf>
 80013a4:	481f      	ldr	r0, [pc, #124]	; (8001424 <APPE_SysUserEvtRx+0x1f8>)
 80013a6:	f00b fdb3 	bl	800cf10 <iprintf>
    break;
 80013aa:	e020      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 80013ae:	f008 fe2b 	bl	800a008 <DbgTraceGetFileName>
 80013b2:	4601      	mov	r1, r0
 80013b4:	f240 1379 	movw	r3, #377	; 0x179
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80013bc:	f00b fda8 	bl	800cf10 <iprintf>
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3302      	adds	r3, #2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <APPE_SysUserEvtRx+0x1fc>)
 80013ca:	f00b fda1 	bl	800cf10 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013ce:	e00e      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <APPE_SysUserEvtRx+0x1cc>)
 80013d2:	f008 fe19 	bl	800a008 <DbgTraceGetFileName>
 80013d6:	4601      	mov	r1, r0
 80013d8:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <APPE_SysUserEvtRx+0x1d0>)
 80013de:	4808      	ldr	r0, [pc, #32]	; (8001400 <APPE_SysUserEvtRx+0x1d4>)
 80013e0:	f00b fd96 	bl	800cf10 <iprintf>
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <APPE_SysUserEvtRx+0x200>)
 80013e6:	f00b fd93 	bl	800cf10 <iprintf>
    break;
 80013ea:	e000      	b.n	80013ee <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013ec:	bf00      	nop
  }

  return;
 80013ee:	bf00      	nop
}
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800e048 	.word	0x0800e048
 80013fc:	0800f680 	.word	0x0800f680
 8001400:	0800e060 	.word	0x0800e060
 8001404:	0800e074 	.word	0x0800e074
 8001408:	0800e098 	.word	0x0800e098
 800140c:	0800e0b4 	.word	0x0800e0b4
 8001410:	0800e0cc 	.word	0x0800e0cc
 8001414:	0800e0ec 	.word	0x0800e0ec
 8001418:	0800e110 	.word	0x0800e110
 800141c:	0800e160 	.word	0x0800e160
 8001420:	0800e188 	.word	0x0800e188
 8001424:	0800e1c4 	.word	0x0800e1c4
 8001428:	0800e1e8 	.word	0x0800e1e8
 800142c:	0800e224 	.word	0x0800e224

08001430 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	330b      	adds	r3, #11
 800143e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3302      	adds	r3, #2
 8001444:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001446:	4819      	ldr	r0, [pc, #100]	; (80014ac <APPE_SysEvtError+0x7c>)
 8001448:	f008 fdde 	bl	800a008 <DbgTraceGetFileName>
 800144c:	4601      	mov	r1, r0
 800144e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <APPE_SysEvtError+0x80>)
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <APPE_SysEvtError+0x84>)
 8001456:	f00b fd5b 	bl	800cf10 <iprintf>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <APPE_SysEvtError+0x88>)
 8001462:	f00b fd55 	bl	800cf10 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800146e:	480f      	ldr	r0, [pc, #60]	; (80014ac <APPE_SysEvtError+0x7c>)
 8001470:	f008 fdca 	bl	800a008 <DbgTraceGetFileName>
 8001474:	4601      	mov	r1, r0
 8001476:	f240 139b 	movw	r3, #411	; 0x19b
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <APPE_SysEvtError+0x80>)
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <APPE_SysEvtError+0x84>)
 800147e:	f00b fd47 	bl	800cf10 <iprintf>
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <APPE_SysEvtError+0x8c>)
 8001484:	f00b fde0 	bl	800d048 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001488:	e00d      	b.n	80014a6 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <APPE_SysEvtError+0x7c>)
 800148c:	f008 fdbc 	bl	800a008 <DbgTraceGetFileName>
 8001490:	4601      	mov	r1, r0
 8001492:	f240 139f 	movw	r3, #415	; 0x19f
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <APPE_SysEvtError+0x80>)
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <APPE_SysEvtError+0x84>)
 800149a:	f00b fd39 	bl	800cf10 <iprintf>
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <APPE_SysEvtError+0x90>)
 80014a0:	f00b fdd2 	bl	800d048 <puts>
  return;
 80014a4:	bf00      	nop
}
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0800e048 	.word	0x0800e048
 80014b0:	0800f694 	.word	0x0800f694
 80014b4:	0800e060 	.word	0x0800e060
 80014b8:	0800e248 	.word	0x0800e248
 80014bc:	0800e278 	.word	0x0800e278
 80014c0:	0800e2b4 	.word	0x0800e2b4

080014c4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	330b      	adds	r3, #11
 80014e4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	3302      	adds	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d132      	bne.n	800155a <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014f4:	482c      	ldr	r0, [pc, #176]	; (80015a8 <APPE_SysEvtReadyProcessing+0xe4>)
 80014f6:	f008 fd87 	bl	800a008 <DbgTraceGetFileName>
 80014fa:	4601      	mov	r1, r0
 80014fc:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8001500:	4a2a      	ldr	r2, [pc, #168]	; (80015ac <APPE_SysEvtReadyProcessing+0xe8>)
 8001502:	482b      	ldr	r0, [pc, #172]	; (80015b0 <APPE_SysEvtReadyProcessing+0xec>)
 8001504:	f00b fd04 	bl	800cf10 <iprintf>
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <APPE_SysEvtReadyProcessing+0xf0>)
 800150a:	f00b fd9d 	bl	800d048 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800150e:	f7ff fb53 	bl	8000bb8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001512:	230d      	movs	r3, #13
 8001514:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001516:	237f      	movs	r3, #127	; 0x7f
 8001518:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800151a:	f7ff fce9 	bl	8000ef0 <LL_DBGMCU_GetRevisionID>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <APPE_SysEvtReadyProcessing+0xe4>)
 8001522:	f008 fd71 	bl	800a008 <DbgTraceGetFileName>
 8001526:	4601      	mov	r1, r0
 8001528:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800152c:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <APPE_SysEvtReadyProcessing+0xe8>)
 800152e:	4820      	ldr	r0, [pc, #128]	; (80015b0 <APPE_SysEvtReadyProcessing+0xec>)
 8001530:	f00b fcee 	bl	800cf10 <iprintf>
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <APPE_SysEvtReadyProcessing+0xf4>)
 8001538:	f00b fcea 	bl	800cf10 <iprintf>

    config_param.RevisionID = RevisionID;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	b29b      	uxth	r3, r3
 8001540:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4618      	mov	r0, r3
 8001548:	f007 ff88 	bl	800945c <SHCI_C2_Config>

    APP_BLE_Init();
 800154c:	f009 fb46 	bl	800abdc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001550:	2100      	movs	r1, #0
 8001552:	2001      	movs	r0, #1
 8001554:	f00b fa2e 	bl	800c9b4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001558:	e022      	b.n	80015a0 <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d110      	bne.n	8001584 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <APPE_SysEvtReadyProcessing+0xe4>)
 8001564:	f008 fd50 	bl	800a008 <DbgTraceGetFileName>
 8001568:	4601      	mov	r1, r0
 800156a:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <APPE_SysEvtReadyProcessing+0xe8>)
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <APPE_SysEvtReadyProcessing+0xec>)
 8001572:	f00b fccd 	bl	800cf10 <iprintf>
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <APPE_SysEvtReadyProcessing+0xf8>)
 8001578:	f00b fcca 	bl	800cf10 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
  return;
 8001582:	e00d      	b.n	80015a0 <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <APPE_SysEvtReadyProcessing+0xe4>)
 8001586:	f008 fd3f 	bl	800a008 <DbgTraceGetFileName>
 800158a:	4601      	mov	r1, r0
 800158c:	f240 13e1 	movw	r3, #481	; 0x1e1
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <APPE_SysEvtReadyProcessing+0xe8>)
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <APPE_SysEvtReadyProcessing+0xec>)
 8001594:	f00b fcbc 	bl	800cf10 <iprintf>
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <APPE_SysEvtReadyProcessing+0xfc>)
 800159a:	f00b fcb9 	bl	800cf10 <iprintf>
  return;
 800159e:	bf00      	nop
}
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800e048 	.word	0x0800e048
 80015ac:	0800f6a8 	.word	0x0800f6a8
 80015b0:	0800e060 	.word	0x0800e060
 80015b4:	0800e2ec 	.word	0x0800e2ec
 80015b8:	0800e308 	.word	0x0800e308
 80015bc:	0800e32c 	.word	0x0800e32c
 80015c0:	0800e360 	.word	0x0800e360

080015c4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f001 fe1c 	bl	8003208 <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d00a      	beq.n	80015f4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80015de:	f001 fe2b 	bl	8003238 <HAL_GetTickFreq>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ec:	e002      	b.n	80015f4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80015ee:	f7ff fcef 	bl	8000fd0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80015f2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80015f4:	f001 fe08 	bl	8003208 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f4      	bhi.n	80015ee <HAL_Delay+0x2a>
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001612:	f04f 30ff 	mov.w	r0, #4294967295
 8001616:	f00b f9fd 	bl	800ca14 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}

0800161e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001622:	bf00      	nop
}
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001636:	f04f 30ff 	mov.w	r0, #4294967295
 800163a:	f00b f9eb 	bl	800ca14 <UTIL_SEQ_Run>

  return;
 800163e:	bf00      	nop
}
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800164e:	2100      	movs	r1, #0
 8001650:	2080      	movs	r0, #128	; 0x80
 8001652:	f00b fafd 	bl	800cc50 <UTIL_SEQ_SetTask>
  return;
 8001656:	bf00      	nop
}
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001666:	2002      	movs	r0, #2
 8001668:	f00b fb5e 	bl	800cd28 <UTIL_SEQ_SetEvt>
  return;
 800166c:	bf00      	nop
}
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800167c:	2002      	movs	r0, #2
 800167e:	f00b fb73 	bl	800cd68 <UTIL_SEQ_WaitEvt>
  return;
 8001682:	bf00      	nop
}
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d004      	beq.n	80016a4 <HAL_GPIO_EXTI_Callback+0x1a>
 800169a:	2b10      	cmp	r3, #16
 800169c:	d105      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x20>
  {
    case SW1_User_Pin:
      APP_BLE_Key_Button1_Action();
 800169e:	f00a fa49 	bl	800bb34 <APP_BLE_Key_Button1_Action>
      break;
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_EXTI_Callback+0x22>
    case SW2_User_Pin:
	  APP_BLE_Key_Button2_Action();
 80016a4:	f00a fa4c 	bl	800bb40 <APP_BLE_Key_Button2_Action>
	  break;
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_EXTI_Callback+0x22>
    /*case SW3_User_Pin:
      APP_BLE_Key_Button3_Action();
	  break;
*/
    default:
      break;
 80016aa:	bf00      	nop
  }
  return;
 80016ac:	bf00      	nop
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <LL_EXTI_EnableIT_0_31>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80016be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016c2:	4905      	ldr	r1, [pc, #20]	; (80016d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	58000800 	.word	0x58000800

080016dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4904      	ldr	r1, [pc, #16]	; (80016fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]

}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58000800 	.word	0x58000800

08001700 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <ReadRtcSsrValue+0x3c>)
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	b29b      	uxth	r3, r3
 800170c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <ReadRtcSsrValue+0x3c>)
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	b29b      	uxth	r3, r3
 8001714:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001716:	e005      	b.n	8001724 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <ReadRtcSsrValue+0x3c>)
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	b29b      	uxth	r3, r3
 8001722:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d1f5      	bne.n	8001718 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800172c:	683b      	ldr	r3, [r7, #0]
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40002800 	.word	0x40002800

08001740 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001750:	79ba      	ldrb	r2, [r7, #6]
 8001752:	491d      	ldr	r1, [pc, #116]	; (80017c8 <LinkTimerAfter+0x88>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3315      	adds	r3, #21
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d009      	beq.n	800177e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	4916      	ldr	r1, [pc, #88]	; (80017c8 <LinkTimerAfter+0x88>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3314      	adds	r3, #20
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4911      	ldr	r1, [pc, #68]	; (80017c8 <LinkTimerAfter+0x88>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3315      	adds	r3, #21
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <LinkTimerAfter+0x88>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3314      	adds	r3, #20
 80017a2:	79ba      	ldrb	r2, [r7, #6]
 80017a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80017a6:	79ba      	ldrb	r2, [r7, #6]
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <LinkTimerAfter+0x88>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	3315      	adds	r3, #21
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	701a      	strb	r2, [r3, #0]

  return;
 80017ba:	bf00      	nop
}
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000094 	.word	0x20000094

080017cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	4613      	mov	r3, r2
 80017da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <LinkTimerBefore+0xb8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	79ba      	ldrb	r2, [r7, #6]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d032      	beq.n	800184e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	4927      	ldr	r1, [pc, #156]	; (8001888 <LinkTimerBefore+0xbc>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3314      	adds	r3, #20
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	4922      	ldr	r1, [pc, #136]	; (8001888 <LinkTimerBefore+0xbc>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3315      	adds	r3, #21
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	491d      	ldr	r1, [pc, #116]	; (8001888 <LinkTimerBefore+0xbc>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3315      	adds	r3, #21
 8001820:	79ba      	ldrb	r2, [r7, #6]
 8001822:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	4918      	ldr	r1, [pc, #96]	; (8001888 <LinkTimerBefore+0xbc>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3314      	adds	r3, #20
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <LinkTimerBefore+0xbc>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3314      	adds	r3, #20
 8001848:	79fa      	ldrb	r2, [r7, #7]
 800184a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800184c:	e014      	b.n	8001878 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	490d      	ldr	r1, [pc, #52]	; (8001888 <LinkTimerBefore+0xbc>)
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3315      	adds	r3, #21
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <LinkTimerBefore+0xbc>)
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3314      	adds	r3, #20
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	701a      	strb	r2, [r3, #0]
  return;
 8001876:	bf00      	nop
}
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000124 	.word	0x20000124
 8001888:	20000094 	.word	0x20000094

0800188c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <linkTimer+0x144>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b06      	cmp	r3, #6
 800189e:	d118      	bne.n	80018d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <linkTimer+0x144>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <linkTimer+0x148>)
 80018a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80018aa:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <linkTimer+0x144>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	4949      	ldr	r1, [pc, #292]	; (80019d8 <linkTimer+0x14c>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	3315      	adds	r3, #21
 80018c0:	2206      	movs	r2, #6
 80018c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018c4:	4b45      	ldr	r3, [pc, #276]	; (80019dc <linkTimer+0x150>)
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	81fb      	strh	r3, [r7, #14]
 80018d0:	e078      	b.n	80019c4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80018d2:	f000 f909 	bl	8001ae8 <ReturnTimeElapsed>
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	493e      	ldr	r1, [pc, #248]	; (80019d8 <linkTimer+0x14c>)
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3308      	adds	r3, #8
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4419      	add	r1, r3
 80018f2:	4839      	ldr	r0, [pc, #228]	; (80019d8 <linkTimer+0x14c>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4403      	add	r3, r0
 80018fe:	3308      	adds	r3, #8
 8001900:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	4934      	ldr	r1, [pc, #208]	; (80019d8 <linkTimer+0x14c>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3308      	adds	r3, #8
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <linkTimer+0x144>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <linkTimer+0x14c>)
 8001920:	460b      	mov	r3, r1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	440b      	add	r3, r1
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	3308      	adds	r3, #8
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	429a      	cmp	r2, r3
 8001932:	d337      	bcc.n	80019a4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <linkTimer+0x144>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800193a:	7b7a      	ldrb	r2, [r7, #13]
 800193c:	4926      	ldr	r1, [pc, #152]	; (80019d8 <linkTimer+0x14c>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3315      	adds	r3, #21
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800194e:	e013      	b.n	8001978 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001950:	7b7a      	ldrb	r2, [r7, #13]
 8001952:	4921      	ldr	r1, [pc, #132]	; (80019d8 <linkTimer+0x14c>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3315      	adds	r3, #21
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001964:	7b7a      	ldrb	r2, [r7, #13]
 8001966:	491c      	ldr	r1, [pc, #112]	; (80019d8 <linkTimer+0x14c>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3315      	adds	r3, #21
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001978:	7b3b      	ldrb	r3, [r7, #12]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d00b      	beq.n	8001996 <linkTimer+0x10a>
 800197e:	7b3a      	ldrb	r2, [r7, #12]
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <linkTimer+0x14c>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3308      	adds	r3, #8
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	d2dc      	bcs.n	8001950 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001996:	7b7a      	ldrb	r2, [r7, #13]
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fecf 	bl	8001740 <LinkTimerAfter>
 80019a2:	e00f      	b.n	80019c4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <linkTimer+0x144>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff0c 	bl	80017cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <linkTimer+0x144>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <linkTimer+0x148>)
 80019bc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <linkTimer+0x144>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80019c4:	89fb      	ldrh	r3, [r7, #14]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000124 	.word	0x20000124
 80019d4:	20000125 	.word	0x20000125
 80019d8:	20000094 	.word	0x20000094
 80019dc:	20000128 	.word	0x20000128

080019e0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	460a      	mov	r2, r1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <UnlinkTimer+0xf8>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d111      	bne.n	8001a20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <UnlinkTimer+0xf8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <UnlinkTimer+0xfc>)
 8001a04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3315      	adds	r3, #21
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <UnlinkTimer+0xf8>)
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e03e      	b.n	8001a9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	492f      	ldr	r1, [pc, #188]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3314      	adds	r3, #20
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	492a      	ldr	r1, [pc, #168]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	3315      	adds	r3, #21
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001a48:	79f9      	ldrb	r1, [r7, #7]
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a4e:	460b      	mov	r3, r1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	440b      	add	r3, r1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4403      	add	r3, r0
 8001a58:	3315      	adds	r3, #21
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	4920      	ldr	r1, [pc, #128]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	3315      	adds	r3, #21
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d013      	beq.n	8001a9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001a76:	79f9      	ldrb	r1, [r7, #7]
 8001a78:	7bba      	ldrb	r2, [r7, #14]
 8001a7a:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	440b      	add	r3, r1
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4403      	add	r3, r0
 8001a86:	3314      	adds	r3, #20
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2d8      	uxtb	r0, r3
 8001a8c:	4914      	ldr	r1, [pc, #80]	; (8001ae0 <UnlinkTimer+0x100>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	3314      	adds	r3, #20
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	490f      	ldr	r1, [pc, #60]	; (8001ae0 <UnlinkTimer+0x100>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	330c      	adds	r3, #12
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <UnlinkTimer+0xf8>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b06      	cmp	r3, #6
 8001aba:	d107      	bne.n	8001acc <UnlinkTimer+0xec>
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d104      	bne.n	8001acc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <UnlinkTimer+0x104>)
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
}
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000124 	.word	0x20000124
 8001adc:	20000125 	.word	0x20000125
 8001ae0:	20000094 	.word	0x20000094
 8001ae4:	20000128 	.word	0x20000128

08001ae8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <ReturnTimeElapsed+0x70>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af6:	d026      	beq.n	8001b46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001af8:	f7ff fe02 	bl	8001700 <ReadRtcSsrValue>
 8001afc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <ReturnTimeElapsed+0x70>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d805      	bhi.n	8001b14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <ReturnTimeElapsed+0x70>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	e00a      	b.n	8001b2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <ReturnTimeElapsed+0x74>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <ReturnTimeElapsed+0x70>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <ReturnTimeElapsed+0x78>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <ReturnTimeElapsed+0x7c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	40d3      	lsrs	r3, r2
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	e001      	b.n	8001b4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b29b      	uxth	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000128 	.word	0x20000128
 8001b5c:	20000232 	.word	0x20000232
 8001b60:	20000231 	.word	0x20000231
 8001b64:	20000230 	.word	0x20000230

08001b68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d108      	bne.n	8001b8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001b78:	f7ff fdc2 	bl	8001700 <ReadRtcSsrValue>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <RestartWakeupCounter+0xa8>)
 8001b80:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f001 fced 	bl	8003562 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001b88:	e03e      	b.n	8001c08 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d803      	bhi.n	8001b98 <RestartWakeupCounter+0x30>
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <RestartWakeupCounter+0xac>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d002      	beq.n	8001b9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b9e:	bf00      	nop
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <RestartWakeupCounter+0xb0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f7      	beq.n	8001ba0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <RestartWakeupCounter+0xb0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <RestartWakeupCounter+0xb0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bc4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <RestartWakeupCounter+0xb4>)
 8001bc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bcc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f001 fcd5 	bl	800357e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <RestartWakeupCounter+0xb8>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	4910      	ldr	r1, [pc, #64]	; (8001c20 <RestartWakeupCounter+0xb8>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001be4:	f7ff fd8c 	bl	8001700 <ReadRtcSsrValue>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <RestartWakeupCounter+0xa8>)
 8001bec:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <RestartWakeupCounter+0xb0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <RestartWakeupCounter+0xb0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c00:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001c02:	f3af 8000 	nop.w
  return ;
 8001c06:	bf00      	nop
}
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000128 	.word	0x20000128
 8001c14:	20000230 	.word	0x20000230
 8001c18:	2000022c 	.word	0x2000022c
 8001c1c:	58000800 	.word	0x58000800
 8001c20:	40002800 	.word	0x40002800

08001c24 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <RescheduleTimerList+0x124>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d108      	bne.n	8001c4a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001c38:	bf00      	nop
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <RescheduleTimerList+0x128>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f7      	bne.n	8001c3a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <RescheduleTimerList+0x128>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <RescheduleTimerList+0x128>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <RescheduleTimerList+0x12c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	493b      	ldr	r1, [pc, #236]	; (8001d54 <RescheduleTimerList+0x130>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3308      	adds	r3, #8
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001c78:	f7ff ff36 	bl	8001ae8 <ReturnTimeElapsed>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d205      	bcs.n	8001c94 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <RescheduleTimerList+0x134>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e04d      	b.n	8001d30 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4a31      	ldr	r2, [pc, #196]	; (8001d5c <RescheduleTimerList+0x138>)
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d906      	bls.n	8001cb4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <RescheduleTimerList+0x138>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <RescheduleTimerList+0x134>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e03d      	b.n	8001d30 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <RescheduleTimerList+0x134>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cc4:	e034      	b.n	8001d30 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	4922      	ldr	r1, [pc, #136]	; (8001d54 <RescheduleTimerList+0x130>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d20a      	bcs.n	8001cf4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	491c      	ldr	r1, [pc, #112]	; (8001d54 <RescheduleTimerList+0x130>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3308      	adds	r3, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e013      	b.n	8001d1c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	4917      	ldr	r1, [pc, #92]	; (8001d54 <RescheduleTimerList+0x130>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3308      	adds	r3, #8
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	1ac9      	subs	r1, r1, r3
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <RescheduleTimerList+0x130>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4403      	add	r3, r0
 8001d18:	3308      	adds	r3, #8
 8001d1a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <RescheduleTimerList+0x130>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3315      	adds	r3, #21
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d1c7      	bne.n	8001cc6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001d36:	89bb      	ldrh	r3, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff15 	bl	8001b68 <RestartWakeupCounter>

  return ;
 8001d3e:	bf00      	nop
}
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40002800 	.word	0x40002800
 8001d4c:	2000022c 	.word	0x2000022c
 8001d50:	20000124 	.word	0x20000124
 8001d54:	20000094 	.word	0x20000094
 8001d58:	2000012c 	.word	0x2000012c
 8001d5c:	20000234 	.word	0x20000234

08001d60 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d66:	f3ef 8310 	mrs	r3, PRIMASK
 8001d6a:	617b      	str	r3, [r7, #20]
  return(result);
 8001d6c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d74:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	22ca      	movs	r2, #202	; 0xca
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2253      	movs	r2, #83	; 0x53
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001d88:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001d9c:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001da4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001da8:	4954      	ldr	r1, [pc, #336]	; (8001efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	330c      	adds	r3, #12
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d172      	bne.n	8001ea4 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001dbe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001dc2:	494e      	ldr	r1, [pc, #312]	; (8001efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001dd2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001dd6:	4949      	ldr	r1, [pc, #292]	; (8001efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	3310      	adds	r3, #16
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001de8:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d050      	beq.n	8001e94 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001df2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001df6:	4941      	ldr	r1, [pc, #260]	; (8001efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	330d      	adds	r3, #13
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d126      	bne.n	8001e5a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fde4 	bl	80019e0 <UnlinkTimer>
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f383 8810 	msr	PRIMASK, r3
}
 8001e22:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001e24:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e28:	4934      	ldr	r1, [pc, #208]	; (8001efc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3304      	adds	r3, #4
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f9d4 	bl	80021ec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	22ca      	movs	r2, #202	; 0xca
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2253      	movs	r2, #83	; 0x53
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
 8001e58:	e014      	b.n	8001e84 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f383 8810 	msr	PRIMASK, r3
}
 8001e64:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f932 	bl	80020d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	22ca      	movs	r2, #202	; 0xca
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2253      	movs	r2, #83	; 0x53
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	69b8      	ldr	r0, [r7, #24]
 8001e8e:	f000 fa35 	bl	80022fc <HW_TS_RTC_Int_AppNot>
 8001e92:	e025      	b.n	8001ee0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001e94:	f7ff fec6 	bl	8001c24 <RescheduleTimerList>
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f383 8810 	msr	PRIMASK, r3
}
 8001ea2:	e01d      	b.n	8001ee0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001ea4:	bf00      	nop
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f7      	beq.n	8001ea6 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001eca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001ece:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f383 8810 	msr	PRIMASK, r3
}
 8001ede:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001eea:	bf00      	nop
}
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000022c 	.word	0x2000022c
 8001ef8:	20000124 	.word	0x20000124
 8001efc:	20000094 	.word	0x20000094
 8001f00:	2000012c 	.word	0x2000012c
 8001f04:	58000800 	.word	0x58000800

08001f08 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001f14:	4a64      	ldr	r2, [pc, #400]	; (80020a8 <HW_TS_Init+0x1a0>)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HW_TS_Init+0x1a0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	22ca      	movs	r2, #202	; 0xca
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HW_TS_Init+0x1a0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2253      	movs	r2, #83	; 0x53
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <HW_TS_Init+0x1a4>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HW_TS_Init+0x1a4>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HW_TS_Init+0x1a4>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f1c3 0304 	rsb	r3, r3, #4
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HW_TS_Init+0x1a8>)
 8001f4e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001f50:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HW_TS_Init+0x1a4>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f58:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001f5c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d101      	bne.n	8001f74 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001f70:	2220      	movs	r2, #32
 8001f72:	e003      	b.n	8001f7c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	40d3      	lsrs	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HW_TS_Init+0x1ac>)
 8001f86:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <HW_TS_Init+0x1a4>)
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HW_TS_Init+0x1b0>)
 8001f9a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HW_TS_Init+0x1b0>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4a44      	ldr	r2, [pc, #272]	; (80020b4 <HW_TS_Init+0x1ac>)
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HW_TS_Init+0x1a8>)
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d904      	bls.n	8001fca <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001fc0:	4b3e      	ldr	r3, [pc, #248]	; (80020bc <HW_TS_Init+0x1b4>)
 8001fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc6:	801a      	strh	r2, [r3, #0]
 8001fc8:	e003      	b.n	8001fd2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HW_TS_Init+0x1b4>)
 8001fd0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001fd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fd6:	f7ff fb81 	bl	80016dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001fda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fde:	f7ff fb69 	bl	80016b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d143      	bne.n	8002070 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HW_TS_Init+0x1b8>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HW_TS_Init+0x1bc>)
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	77fb      	strb	r3, [r7, #31]
 8001ffa:	e00c      	b.n	8002016 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ffc:	7ffa      	ldrb	r2, [r7, #31]
 8001ffe:	4932      	ldr	r1, [pc, #200]	; (80020c8 <HW_TS_Init+0x1c0>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	330c      	adds	r3, #12
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002010:	7ffb      	ldrb	r3, [r7, #31]
 8002012:	3301      	adds	r3, #1
 8002014:	77fb      	strb	r3, [r7, #31]
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d9ef      	bls.n	8001ffc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HW_TS_Init+0x1c4>)
 800201e:	2206      	movs	r2, #6
 8002020:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002022:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HW_TS_Init+0x1a0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002034:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800204a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HW_TS_Init+0x1c8>)
 800204e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002052:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002054:	2003      	movs	r0, #3
 8002056:	f001 fa92 	bl	800357e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HW_TS_Init+0x1a0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	e00a      	b.n	8002086 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002080:	2003      	movs	r0, #3
 8002082:	f001 fa6e 	bl	8003562 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HW_TS_Init+0x1a0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	22ff      	movs	r2, #255	; 0xff
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002090:	2200      	movs	r2, #0
 8002092:	2103      	movs	r1, #3
 8002094:	2003      	movs	r0, #3
 8002096:	f001 fa22 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800209a:	2003      	movs	r0, #3
 800209c:	f001 fa39 	bl	8003512 <HAL_NVIC_EnableIRQ>

  return;
 80020a0:	bf00      	nop
}
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000022c 	.word	0x2000022c
 80020ac:	40002800 	.word	0x40002800
 80020b0:	20000230 	.word	0x20000230
 80020b4:	20000231 	.word	0x20000231
 80020b8:	20000232 	.word	0x20000232
 80020bc:	20000234 	.word	0x20000234
 80020c0:	2000012c 	.word	0x2000012c
 80020c4:	20000128 	.word	0x20000128
 80020c8:	20000094 	.word	0x20000094
 80020cc:	20000124 	.word	0x20000124
 80020d0:	58000800 	.word	0x58000800

080020d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020de:	f3ef 8310 	mrs	r3, PRIMASK
 80020e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80020e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80020ec:	2003      	movs	r0, #3
 80020ee:	f001 fa1e 	bl	800352e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HW_TS_Stop+0x100>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22ca      	movs	r2, #202	; 0xca
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HW_TS_Stop+0x100>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2253      	movs	r2, #83	; 0x53
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	4933      	ldr	r1, [pc, #204]	; (80021d8 <HW_TS_Stop+0x104>)
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	330c      	adds	r3, #12
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d148      	bne.n	80021b0 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fc5c 	bl	80019e0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002128:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HW_TS_Stop+0x108>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d135      	bne.n	80021a0 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HW_TS_Stop+0x10c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d108      	bne.n	8002154 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002142:	bf00      	nop
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HW_TS_Stop+0x100>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f7      	bne.n	8002144 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HW_TS_Stop+0x100>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HW_TS_Stop+0x100>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002168:	bf00      	nop
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HW_TS_Stop+0x100>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f7      	beq.n	800216a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HW_TS_Stop+0x100>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HW_TS_Stop+0x100>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800218e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HW_TS_Stop+0x110>)
 8002192:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002196:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002198:	2003      	movs	r0, #3
 800219a:	f001 f9f0 	bl	800357e <HAL_NVIC_ClearPendingIRQ>
 800219e:	e007      	b.n	80021b0 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HW_TS_Stop+0x114>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	7cfa      	ldrb	r2, [r7, #19]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80021ac:	f7ff fd3a 	bl	8001c24 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HW_TS_Stop+0x100>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021ba:	2003      	movs	r0, #3
 80021bc:	f001 f9a9 	bl	8003512 <HAL_NVIC_EnableIRQ>
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f383 8810 	msr	PRIMASK, r3
}
 80021ca:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80021cc:	bf00      	nop
}
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000022c 	.word	0x2000022c
 80021d8:	20000094 	.word	0x20000094
 80021dc:	20000124 	.word	0x20000124
 80021e0:	40002800 	.word	0x40002800
 80021e4:	58000800 	.word	0x58000800
 80021e8:	20000125 	.word	0x20000125

080021ec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021f8:	79fa      	ldrb	r2, [r7, #7]
 80021fa:	493c      	ldr	r1, [pc, #240]	; (80022ec <HW_TS_Start+0x100>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	330c      	adds	r3, #12
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d103      	bne.n	8002218 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff5e 	bl	80020d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002218:	f3ef 8310 	mrs	r3, PRIMASK
 800221c:	60fb      	str	r3, [r7, #12]
  return(result);
 800221e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002220:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002222:	b672      	cpsid	i
}
 8002224:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002226:	2003      	movs	r0, #3
 8002228:	f001 f981 	bl	800352e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HW_TS_Start+0x104>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22ca      	movs	r2, #202	; 0xca
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HW_TS_Start+0x104>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2253      	movs	r2, #83	; 0x53
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	492a      	ldr	r1, [pc, #168]	; (80022ec <HW_TS_Start+0x100>)
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	330c      	adds	r3, #12
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	4925      	ldr	r1, [pc, #148]	; (80022ec <HW_TS_Start+0x100>)
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3308      	adds	r3, #8
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4920      	ldr	r1, [pc, #128]	; (80022ec <HW_TS_Start+0x100>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3304      	adds	r3, #4
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb04 	bl	800188c <linkTimer>
 8002284:	4603      	mov	r3, r0
 8002286:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HW_TS_Start+0x108>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HW_TS_Start+0x10c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	7c7a      	ldrb	r2, [r7, #17]
 8002296:	429a      	cmp	r2, r3
 8002298:	d002      	beq.n	80022a0 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800229a:	f7ff fcc3 	bl	8001c24 <RescheduleTimerList>
 800229e:	e013      	b.n	80022c8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80022a0:	79fa      	ldrb	r2, [r7, #7]
 80022a2:	4912      	ldr	r1, [pc, #72]	; (80022ec <HW_TS_Start+0x100>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3308      	adds	r3, #8
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	8a7b      	ldrh	r3, [r7, #18]
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	1ac9      	subs	r1, r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <HW_TS_Start+0x100>)
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4403      	add	r3, r0
 80022c4:	3308      	adds	r3, #8
 80022c6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HW_TS_Start+0x104>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022d2:	2003      	movs	r0, #3
 80022d4:	f001 f91d 	bl	8003512 <HAL_NVIC_EnableIRQ>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f383 8810 	msr	PRIMASK, r3
}
 80022e2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022e4:	bf00      	nop
}
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000094 	.word	0x20000094
 80022f0:	2000022c 	.word	0x2000022c
 80022f4:	20000124 	.word	0x20000124
 80022f8:	20000125 	.word	0x20000125

080022fc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	460b      	mov	r3, r1
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4798      	blx	r3

  return;
 800230e:	bf00      	nop
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	4613      	mov	r3, r2
 8002328:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800232e:	2300      	movs	r3, #0
 8002330:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10e      	bne.n	8002356 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HW_UART_Transmit_DMA+0x80>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HW_UART_Transmit_DMA+0x84>)
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HW_UART_Transmit_DMA+0x88>)
 8002342:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4814      	ldr	r0, [pc, #80]	; (800239c <HW_UART_Transmit_DMA+0x84>)
 800234c:	f004 fb6c 	bl	8006a28 <HAL_UART_Transmit_DMA>
 8002350:	4603      	mov	r3, r0
 8002352:	75fb      	strb	r3, [r7, #23]
            break;
 8002354:	e000      	b.n	8002358 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002356:	bf00      	nop
    }

    switch (hal_status)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d816      	bhi.n	800238c <HW_UART_Transmit_DMA+0x74>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HW_UART_Transmit_DMA+0x4c>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002375 	.word	0x08002375
 8002368:	0800237b 	.word	0x0800237b
 800236c:	08002381 	.word	0x08002381
 8002370:	08002387 	.word	0x08002387
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002374:	2300      	movs	r3, #0
 8002376:	75bb      	strb	r3, [r7, #22]
            break;
 8002378:	e009      	b.n	800238e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800237a:	2301      	movs	r3, #1
 800237c:	75bb      	strb	r3, [r7, #22]
            break;
 800237e:	e006      	b.n	800238e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002380:	2302      	movs	r3, #2
 8002382:	75bb      	strb	r3, [r7, #22]
            break;
 8002384:	e003      	b.n	800238e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002386:	2303      	movs	r3, #3
 8002388:	75bb      	strb	r3, [r7, #22]
            break;
 800238a:	e000      	b.n	800238e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800238c:	bf00      	nop
    }

    return hw_status;
 800238e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000238 	.word	0x20000238
 800239c:	2000033c 	.word	0x2000033c
 80023a0:	40013800 	.word	0x40013800

080023a4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_UART_TxCpltCallback+0x34>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_UART_TxCpltCallback+0x38>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_UART_TxCpltCallback+0x38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4798      	blx	r3
            }
            break;
 80023c6:	e001      	b.n	80023cc <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <HAL_UART_TxCpltCallback+0x2a>
            break;
 80023cc:	bf00      	nop
    }

    return;
 80023ce:	bf00      	nop
}
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40013800 	.word	0x40013800
 80023dc:	20000238 	.word	0x20000238

080023e0 <LL_RCC_LSE_SetDriveCapability>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f023 0218 	bic.w	r2, r3, #24
 80023f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_AHB1_GRP1_EnableClock>:
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002430:	68fb      	ldr	r3, [r7, #12]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_AHB2_GRP1_EnableClock>:
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800244c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4013      	ands	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002474:	f000 fe5a 	bl	800312c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002478:	f7fe fdea 	bl	8001050 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247c:	f000 f818 	bl	80024b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002480:	f000 f894 	bl	80025ac <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002484:	f000 f8f2 	bl	800266c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002488:	f000 f9f0 	bl	800286c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800248c:	f000 f9b4 	bl	80027f8 <MX_USB_PCD_Init>
  MX_I2C3_Init();
 8002490:	f000 f8ac 	bl	80025ec <MX_I2C3_Init>
  MX_RF_Init();
 8002494:	f000 f8fe 	bl	8002694 <MX_RF_Init>
  MX_RTC_Init();
 8002498:	f000 f904 	bl	80026a4 <MX_RTC_Init>
  MX_DMA_Init();
 800249c:	f000 f9d4 	bl	8002848 <MX_DMA_Init>
  MX_TIM16_Init();
 80024a0:	f000 f934 	bl	800270c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start_IT(&htim16);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80024a4:	f7fe fde2 	bl	800106c <MX_APPE_Init>


  while(1){

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80024a8:	f7ff f8b1 	bl	800160e <MX_APPE_Process>
 80024ac:	e7fc      	b.n	80024a8 <main+0x38>
	...

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b09a      	sub	sp, #104	; 0x68
 80024b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	2248      	movs	r2, #72	; 0x48
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f00a fd1e 	bl	800cf00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 0303 	bic.w	r3, r3, #3
 80024f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024fa:	f002 f807 	bl	800450c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff ff6e 	bl	80023e0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <SystemClock_Config+0xf8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <SystemClock_Config+0xf8>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <SystemClock_Config+0xf8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002520:	2327      	movs	r3, #39	; 0x27
 8002522:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800252a:	2301      	movs	r3, #1
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800252e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002534:	2301      	movs	r3, #1
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800253c:	2300      	movs	r3, #0
 800253e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002540:	2360      	movs	r3, #96	; 0x60
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002544:	2300      	movs	r3, #0
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fb87 	bl	8004c60 <HAL_RCC_OscConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002558:	f000 fa2c 	bl	80029b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800255c:	236f      	movs	r3, #111	; 0x6f
 800255e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002560:	2302      	movs	r3, #2
 8002562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2101      	movs	r1, #1
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fee3 	bl	8005348 <HAL_RCC_ClockConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002588:	f000 fa14 	bl	80029b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 800258c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002590:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002598:	f003 f816 	bl	80055c8 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800259c:	f003 fce8 	bl	8005f70 <HAL_RCCEx_EnableMSIPLLMode>
}
 80025a0:	bf00      	nop
 80025a2:	3768      	adds	r7, #104	; 0x68
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58000400 	.word	0x58000400

080025ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b094      	sub	sp, #80	; 0x50
 80025b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b2:	463b      	mov	r3, r7
 80025b4:	2250      	movs	r2, #80	; 0x50
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00a fca1 	bl	800cf00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80025be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025c2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80025c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80025ca:	2302      	movs	r3, #2
 80025cc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d2:	463b      	mov	r3, r7
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fb55 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80025e0:	f000 f9e8 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80025e4:	bf00      	nop
 80025e6:	3750      	adds	r7, #80	; 0x50
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <MX_I2C3_Init+0x74>)
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <MX_I2C3_Init+0x78>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_I2C3_Init+0x74>)
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <MX_I2C3_Init+0x7c>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <MX_I2C3_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <MX_I2C3_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <MX_I2C3_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_I2C3_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <MX_I2C3_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <MX_I2C3_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <MX_I2C3_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002626:	480e      	ldr	r0, [pc, #56]	; (8002660 <MX_I2C3_Init+0x74>)
 8002628:	f001 fcae 	bl	8003f88 <HAL_I2C_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002632:	f000 f9bf 	bl	80029b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <MX_I2C3_Init+0x74>)
 800263a:	f001 fd34 	bl	80040a6 <HAL_I2CEx_ConfigAnalogFilter>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002644:	f000 f9b6 	bl	80029b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_I2C3_Init+0x74>)
 800264c:	f001 fd76 	bl	800413c <HAL_I2CEx_ConfigDigitalFilter>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002656:	f000 f9ad 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000023c 	.word	0x2000023c
 8002664:	40005c00 	.word	0x40005c00
 8002668:	00707cbb 	.word	0x00707cbb

0800266c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <MX_IPCC_Init+0x20>)
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <MX_IPCC_Init+0x24>)
 8002674:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_IPCC_Init+0x20>)
 8002678:	f001 fdac 	bl	80041d4 <HAL_IPCC_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002682:	f000 f997 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000290 	.word	0x20000290
 8002690:	58000c00 	.word	0x58000c00

08002694 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <MX_RTC_Init+0x60>)
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <MX_RTC_Init+0x64>)
 80026ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_RTC_Init+0x60>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <MX_RTC_Init+0x60>)
 80026b6:	220f      	movs	r2, #15
 80026b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_RTC_Init+0x60>)
 80026bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <MX_RTC_Init+0x60>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_RTC_Init+0x60>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <MX_RTC_Init+0x60>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <MX_RTC_Init+0x60>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026da:	480a      	ldr	r0, [pc, #40]	; (8002704 <MX_RTC_Init+0x60>)
 80026dc:	f003 fd5f 	bl	800619e <HAL_RTC_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80026e6:	f000 f965 	bl	80029b4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <MX_RTC_Init+0x60>)
 80026f0:	f003 fe44 	bl	800637c <HAL_RTCEx_SetWakeUpTimer_IT>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80026fa:	f000 f95b 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200002cc 	.word	0x200002cc
 8002708:	40002800 	.word	0x40002800

0800270c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_TIM16_Init+0x48>)
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <MX_TIM16_Init+0x4c>)
 8002714:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_TIM16_Init+0x48>)
 8002718:	f640 427f 	movw	r2, #3199	; 0xc7f
 800271c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <MX_TIM16_Init+0x48>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_TIM16_Init+0x48>)
 8002726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_TIM16_Init+0x48>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_TIM16_Init+0x48>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_TIM16_Init+0x48>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_TIM16_Init+0x48>)
 8002740:	f003 fed8 	bl	80064f4 <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800274a:	f000 f933 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200002f0 	.word	0x200002f0
 8002758:	40014400 	.word	0x40014400

0800275c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <MX_USART1_UART_Init+0x98>)
 8002764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800276c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002782:	220c      	movs	r2, #12
 8002784:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 800278e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002792:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 80027a8:	f004 f8ee 	bl	8006988 <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80027b2:	f000 f8ff 	bl	80029b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 80027ba:	f005 fab4 	bl	8007d26 <HAL_UARTEx_SetTxFifoThreshold>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80027c4:	f000 f8f6 	bl	80029b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 80027cc:	f005 fae9 	bl	8007da2 <HAL_UARTEx_SetRxFifoThreshold>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80027d6:	f000 f8ed 	bl	80029b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART1_UART_Init+0x94>)
 80027dc:	f005 fa6a 	bl	8007cb4 <HAL_UARTEx_DisableFifoMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80027e6:	f000 f8e5 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000033c 	.word	0x2000033c
 80027f4:	40013800 	.word	0x40013800

080027f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_USB_PCD_Init+0x48>)
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <MX_USB_PCD_Init+0x4c>)
 8002800:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_USB_PCD_Init+0x48>)
 8002804:	2208      	movs	r2, #8
 8002806:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <MX_USB_PCD_Init+0x48>)
 800280a:	2202      	movs	r2, #2
 800280c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_USB_PCD_Init+0x48>)
 8002810:	2202      	movs	r2, #2
 8002812:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <MX_USB_PCD_Init+0x48>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_USB_PCD_Init+0x48>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <MX_USB_PCD_Init+0x48>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_USB_PCD_Init+0x48>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_USB_PCD_Init+0x48>)
 800282e:	f001 fd57 	bl	80042e0 <HAL_PCD_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002838:	f000 f8bc 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000042c 	.word	0x2000042c
 8002844:	40006800 	.word	0x40006800

08002848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800284c:	2004      	movs	r0, #4
 800284e:	f7ff fddd 	bl	800240c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fdda 	bl	800240c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	210f      	movs	r1, #15
 800285c:	200b      	movs	r0, #11
 800285e:	f000 fe3e 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002862:	200b      	movs	r0, #11
 8002864:	f000 fe55 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002880:	2004      	movs	r0, #4
 8002882:	f7ff fddc 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	2002      	movs	r0, #2
 8002888:	f7ff fdd9 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800288c:	2001      	movs	r0, #1
 800288e:	f7ff fdd6 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002892:	2008      	movs	r0, #8
 8002894:	f7ff fdd3 	bl	800243e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	2123      	movs	r1, #35	; 0x23
 800289c:	4842      	ldr	r0, [pc, #264]	; (80029a8 <MX_GPIO_Init+0x13c>)
 800289e:	f001 fb1f 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : vsync_Pin hsync_Pin pxclk_Pin */
  GPIO_InitStruct.Pin = vsync_Pin|hsync_Pin|pxclk_Pin;
 80028a2:	f44f 7344 	mov.w	r3, #784	; 0x310
 80028a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	483c      	ldr	r0, [pc, #240]	; (80029a8 <MX_GPIO_Init+0x13c>)
 80028b6:	f001 f9a3 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028ba:	23ff      	movs	r3, #255	; 0xff
 80028bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ce:	f001 f997 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f0:	f001 f986 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 80028f4:	2310      	movs	r3, #16
 80028f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fe:	2301      	movs	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4829      	ldr	r0, [pc, #164]	; (80029ac <MX_GPIO_Init+0x140>)
 8002908:	f001 f97a 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800290c:	2303      	movs	r3, #3
 800290e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002910:	2301      	movs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4821      	ldr	r0, [pc, #132]	; (80029a8 <MX_GPIO_Init+0x13c>)
 8002922:	f001 f96d 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_User_Pin */
  GPIO_InitStruct.Pin = SW2_User_Pin;
 8002926:	2301      	movs	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800292a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800292e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW2_User_GPIO_Port, &GPIO_InitStruct);
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	4619      	mov	r1, r3
 8002938:	481d      	ldr	r0, [pc, #116]	; (80029b0 <MX_GPIO_Init+0x144>)
 800293a:	f001 f961 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_User_Pin */
  GPIO_InitStruct.Pin = SW3_User_Pin;
 800293e:	2302      	movs	r3, #2
 8002940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW3_User_GPIO_Port, &GPIO_InitStruct);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	4817      	ldr	r0, [pc, #92]	; (80029b0 <MX_GPIO_Init+0x144>)
 8002952:	f001 f955 	bl	8003c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Led_Pin */
  GPIO_InitStruct.Pin = Blue_Led_Pin;
 8002956:	2320      	movs	r3, #32
 8002958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002962:	2302      	movs	r3, #2
 8002964:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Blue_Led_GPIO_Port, &GPIO_InitStruct);
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	480f      	ldr	r0, [pc, #60]	; (80029a8 <MX_GPIO_Init+0x13c>)
 800296c:	f001 f948 	bl	8003c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	2006      	movs	r0, #6
 8002976:	f000 fdb2 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800297a:	2006      	movs	r0, #6
 800297c:	f000 fdc9 	bl	8003512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2007      	movs	r0, #7
 8002986:	f000 fdaa 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800298a:	2007      	movs	r0, #7
 800298c:	f000 fdc1 	bl	8003512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2100      	movs	r1, #0
 8002994:	200a      	movs	r0, #10
 8002996:	f000 fda2 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800299a:	200a      	movs	r0, #10
 800299c:	f000 fdb9 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 80029a0:	bf00      	nop
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	48000400 	.word	0x48000400
 80029ac:	48000800 	.word	0x48000800
 80029b0:	48000c00 	.word	0x48000c00

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029bc:	e7fe      	b.n	80029bc <Error_Handler+0x8>

080029be <LL_RCC_EnableRTC>:
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_AHB2_GRP1_EnableClock>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a04:	68fb      	ldr	r3, [r7, #12]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_AHB3_GRP1_EnableClock>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4013      	ands	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_APB1_GRP1_EnableClock>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_APB2_GRP1_EnableClock>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002aac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ab0:	f7ff ffaf 	bl	8002a12 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	202e      	movs	r0, #46	; 0x2e
 8002aba:	f000 fd10 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002abe:	202e      	movs	r0, #46	; 0x2e
 8002ac0:	f000 fd27 	bl	8003512 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b09c      	sub	sp, #112	; 0x70
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2250      	movs	r2, #80	; 0x50
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f00a fa09 	bl	800cf00 <memset>
  if(hi2c->Instance==I2C3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_I2C_MspInit+0x84>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d125      	bne.n	8002b44 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002af8:	2308      	movs	r3, #8
 8002afa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002afc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 f8bc 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b12:	f7ff ff4f 	bl	80029b4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b16:	2004      	movs	r0, #4
 8002b18:	f7ff ff62 	bl	80029e0 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b20:	2312      	movs	r3, #18
 8002b22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b34:	4619      	mov	r1, r3
 8002b36:	4806      	ldr	r0, [pc, #24]	; (8002b50 <HAL_I2C_MspInit+0x88>)
 8002b38:	f001 f862 	bl	8003c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b3c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b40:	f7ff ff80 	bl	8002a44 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b44:	bf00      	nop
 8002b46:	3770      	adds	r7, #112	; 0x70
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40005c00 	.word	0x40005c00
 8002b50:	48000800 	.word	0x48000800

08002b54 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <HAL_IPCC_MspInit+0x44>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b6a:	f7ff ff52 	bl	8002a12 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	202c      	movs	r0, #44	; 0x2c
 8002b74:	f000 fcb3 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	f000 fcca 	bl	8003512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	202d      	movs	r0, #45	; 0x2d
 8002b84:	f000 fcab 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b88:	202d      	movs	r0, #45	; 0x2d
 8002b8a:	f000 fcc2 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	58000c00 	.word	0x58000c00

08002b9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b096      	sub	sp, #88	; 0x58
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	2250      	movs	r2, #80	; 0x50
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00a f9a7 	bl	800cf00 <memset>
  if(hrtc->Instance==RTC)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_RTC_MspInit+0x64>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d11d      	bne.n	8002bf8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f859 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002bd8:	f7ff feec 	bl	80029b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bdc:	f7ff feef 	bl	80029be <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002be0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002be4:	f7ff ff2e 	bl	8002a44 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2100      	movs	r1, #0
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 fc76 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	f000 fc8d 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	3758      	adds	r7, #88	; 0x58
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40002800 	.word	0x40002800

08002c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_TIM_Base_MspInit+0x34>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10b      	bne.n	8002c2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c1a:	f7ff ff2c 	bl	8002a76 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	2019      	movs	r0, #25
 8002c24:	f000 fc5b 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c28:	2019      	movs	r0, #25
 8002c2a:	f000 fc72 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40014400 	.word	0x40014400

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b09c      	sub	sp, #112	; 0x70
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2250      	movs	r2, #80	; 0x50
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f00a f94f 	bl	800cf00 <memset>
  if(huart->Instance==USART1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_UART_MspInit+0xe4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d155      	bne.n	8002d18 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 f803 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c84:	f7ff fe96 	bl	80029b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c8c:	f7ff fef3 	bl	8002a76 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7ff fea5 	bl	80029e0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c96:	23c0      	movs	r3, #192	; 0xc0
 8002c98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481c      	ldr	r0, [pc, #112]	; (8002d24 <HAL_UART_MspInit+0xe8>)
 8002cb2:	f000 ffa5 	bl	8003c00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_UART_MspInit+0xf0>)
 8002cba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cec:	480e      	ldr	r0, [pc, #56]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002cee:	f000 fc55 	bl	800359c <HAL_DMA_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002cf8:	f7ff fe5c 	bl	80029b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002d00:	679a      	str	r2, [r3, #120]	; 0x78
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_UART_MspInit+0xec>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2024      	movs	r0, #36	; 0x24
 8002d0e:	f000 fbe6 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d12:	2024      	movs	r0, #36	; 0x24
 8002d14:	f000 fbfd 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3770      	adds	r7, #112	; 0x70
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	48000400 	.word	0x48000400
 8002d28:	200003cc 	.word	0x200003cc
 8002d2c:	40020008 	.word	0x40020008

08002d30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b09c      	sub	sp, #112	; 0x70
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2250      	movs	r2, #80	; 0x50
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00a f8d5 	bl	800cf00 <memset>
  if(hpcd->Instance==USB)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_PCD_MspInit+0xa8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d136      	bne.n	8002dce <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002d66:	2318      	movs	r3, #24
 8002d68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 ff79 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002d98:	f7ff fe0c 	bl	80029b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff fe1f 	bl	80029e0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002da2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002db4:	230a      	movs	r3, #10
 8002db6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc2:	f000 ff1d 	bl	8003c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002dc6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002dca:	f7ff fe3b 	bl	8002a44 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	3770      	adds	r7, #112	; 0x70
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40006800 	.word	0x40006800

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler+0x4>

08002dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <BusFault_Handler+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <UsageFault_Handler+0x4>

08002dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 f9da 	bl	80031e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e34:	f7fe ff94 	bl	8001d60 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_User_Pin);
 8002e40:	2001      	movs	r0, #1
 8002e42:	f001 f865 	bl	8003f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_User_Pin);
 8002e4e:	2002      	movs	r0, #2
 8002e50:	f001 f85e 	bl	8003f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8002e5c:	2010      	movs	r0, #16
 8002e5e:	f001 f857 	bl	8003f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA1_Channel1_IRQHandler+0x10>)
 8002e6e:	f000 fd76 	bl	800395e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200003cc 	.word	0x200003cc

08002e7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e82:	f003 fb8e 	bl	80065a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200002f0 	.word	0x200002f0

08002e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <USART1_IRQHandler+0x10>)
 8002e96:	f003 fe59 	bl	8006b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000033c 	.word	0x2000033c

08002ea4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002ea8:	f009 fc2e 	bl	800c708 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002eb4:	f009 fc60 	bl	800c778 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002ec0:	f001 f83e 	bl	8003f40 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eda:	f3af 8000 	nop.w
 8002ede:	4601      	mov	r1, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	b2ca      	uxtb	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf0      	blt.n	8002eda <_read+0x12>
	}

return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_isatty>:

int _isatty(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	return 1;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f009 ff78 	bl	800ce90 <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20030000 	.word	0x20030000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20000724 	.word	0x20000724
 8002fd4:	20027180 	.word	0x20027180

08002fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <SystemInit+0x98>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a23      	ldr	r2, [pc, #140]	; (8003070 <SystemInit+0x98>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003004:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <SystemInit+0x9c>)
 8003012:	4013      	ands	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003022:	f023 0305 	bic.w	r3, r3, #5
 8003026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <SystemInit+0xa0>)
 8003044:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <SystemInit+0xa0>)
 800304c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00
 8003074:	faf6fefb 	.word	0xfaf6fefb
 8003078:	22041000 	.word	0x22041000

0800307c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800307c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003080:	3304      	adds	r3, #4

08003082 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003082:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003084:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003086:	d3f9      	bcc.n	800307c <CopyDataInit>
  bx lr
 8003088:	4770      	bx	lr

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800308a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800308c:	3004      	adds	r0, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800308e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>
  bx lr
 8003092:	4770      	bx	lr

08003094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003096:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003098:	f7ff ff9e 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <LoopForever+0x8>)
 800309e:	490c      	ldr	r1, [pc, #48]	; (80030d0 <LoopForever+0xc>)
 80030a0:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <LoopForever+0x10>)
 80030a2:	2300      	movs	r3, #0
 80030a4:	f7ff ffed 	bl	8003082 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <LoopForever+0x14>)
 80030aa:	490c      	ldr	r1, [pc, #48]	; (80030dc <LoopForever+0x18>)
 80030ac:	2300      	movs	r3, #0
 80030ae:	f7ff ffee 	bl	800308e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <LoopForever+0x1c>)
 80030b4:	490b      	ldr	r1, [pc, #44]	; (80030e4 <LoopForever+0x20>)
 80030b6:	2300      	movs	r3, #0
 80030b8:	f7ff ffe9 	bl	800308e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030bc:	f009 feee 	bl	800ce9c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80030c0:	f7ff f9d6 	bl	8002470 <main>

080030c4 <LoopForever>:

LoopForever:
  b LoopForever
 80030c4:	e7fe      	b.n	80030c4 <LoopForever>
 80030c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80030c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80030cc:	20000004 	.word	0x20000004
 80030d0:	20000094 	.word	0x20000094
 80030d4:	0800f980 	.word	0x0800f980
  INIT_BSS _sbss, _ebss
 80030d8:	20000210 	.word	0x20000210
 80030dc:	20027180 	.word	0x20027180
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80030e0:	200301e4 	.word	0x200301e4
 80030e4:	20030a67 	.word	0x20030a67

080030e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_IRQHandler>
	...

080030ec <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6053      	str	r3, [r2, #4]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e0042000 	.word	0xe0042000

0800310c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	6053      	str	r3, [r2, #4]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e0042000 	.word	0xe0042000

0800312c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_Init+0x3c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_Init+0x3c>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003142:	2003      	movs	r0, #3
 8003144:	f000 f9c0 	bl	80034c8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003148:	2000      	movs	r0, #0
 800314a:	f000 f80f 	bl	800316c <HAL_InitTick>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	e001      	b.n	800315e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800315a:	f7ff fca5 	bl	8002aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800315e:	79fb      	ldrb	r3, [r7, #7]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	58004000 	.word	0x58004000

0800316c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_InitTick+0x6c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d024      	beq.n	80031ca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003180:	f002 fae0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_InitTick+0x6c>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	4619      	mov	r1, r3
 800318c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003190:	fbb3 f3f1 	udiv	r3, r3, r1
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f9d6 	bl	800354a <HAL_SYSTICK_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d809      	bhi.n	80031be <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031aa:	2200      	movs	r2, #0
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	f000 f994 	bl	80034de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_InitTick+0x70>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e007      	b.n	80031ce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e004      	b.n	80031ce <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e001      	b.n	80031ce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000008 	.word	0x20000008

080031e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_IncTick+0x20>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_IncTick+0x24>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_IncTick+0x24>)
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000000c 	.word	0x2000000c
 8003204:	20000728 	.word	0x20000728

08003208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return uwTick;
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_GetTick+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000728 	.word	0x20000728

08003220 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_GetTickPrio+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000008 	.word	0x20000008

08003238 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_GetTickFreq+0x14>)
 800323e:	781b      	ldrb	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	2000000c 	.word	0x2000000c

08003250 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003254:	f7ff ff4a 	bl	80030ec <LL_DBGMCU_EnableDBGSleepMode>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003260:	f7ff ff54 	bl	800310c <LL_DBGMCU_EnableDBGStopMode>
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}

08003268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003284:	4013      	ands	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	60d3      	str	r3, [r2, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <__NVIC_GetPriorityGrouping+0x18>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 0307 	and.w	r3, r3, #7
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0b      	blt.n	80032f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4907      	ldr	r1, [pc, #28]	; (8003304 <__NVIC_EnableIRQ+0x38>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2001      	movs	r0, #1
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100

08003308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db12      	blt.n	8003340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	490a      	ldr	r1, [pc, #40]	; (800334c <__NVIC_DisableIRQ+0x44>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	3320      	adds	r3, #32
 8003330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003334:	f3bf 8f4f 	dsb	sy
}
 8003338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800333a:	f3bf 8f6f 	isb	sy
}
 800333e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0c      	blt.n	800337c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_SetPendingIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	3340      	adds	r3, #64	; 0x40
 8003378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0c      	blt.n	80033b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <__NVIC_ClearPendingIRQ+0x38>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	3360      	adds	r3, #96	; 0x60
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100

080033c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db0a      	blt.n	80033f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	490c      	ldr	r1, [pc, #48]	; (8003414 <__NVIC_SetPriority+0x4c>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	440b      	add	r3, r1
 80033ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f0:	e00a      	b.n	8003408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <__NVIC_SetPriority+0x50>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3b04      	subs	r3, #4
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	440b      	add	r3, r1
 8003406:	761a      	strb	r2, [r3, #24]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf28      	it	cs
 800343a:	2304      	movcs	r3, #4
 800343c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	2b06      	cmp	r3, #6
 8003444:	d902      	bls.n	800344c <NVIC_EncodePriority+0x30>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3b03      	subs	r3, #3
 800344a:	e000      	b.n	800344e <NVIC_EncodePriority+0x32>
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43d9      	mvns	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	4313      	orrs	r3, r2
         );
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003494:	d301      	bcc.n	800349a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003496:	2301      	movs	r3, #1
 8003498:	e00f      	b.n	80034ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <SysTick_Config+0x40>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a2:	210f      	movs	r1, #15
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f7ff ff8e 	bl	80033c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <SysTick_Config+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <SysTick_Config+0x40>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fec9 	bl	8003268 <__NVIC_SetPriorityGrouping>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff fee0 	bl	80032b0 <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff90 	bl	800341c <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5f 	bl	80033c8 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fed3 	bl	80032cc <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fee3 	bl	8003308 <__NVIC_DisableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff96 	bl	8003484 <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff feed 	bl	8003350 <__NVIC_SetPendingIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fefd 	bl	800338c <__NVIC_ClearPendingIRQ>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e08e      	b.n	80036cc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_DMA_Init+0x138>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d80f      	bhi.n	80035da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	4b45      	ldr	r3, [pc, #276]	; (80036d8 <HAL_DMA_Init+0x13c>)
 80035c2:	4413      	add	r3, r2
 80035c4:	4a45      	ldr	r2, [pc, #276]	; (80036dc <HAL_DMA_Init+0x140>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	009a      	lsls	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a42      	ldr	r2, [pc, #264]	; (80036e0 <HAL_DMA_Init+0x144>)
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
 80035d8:	e00e      	b.n	80035f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_DMA_Init+0x148>)
 80035e2:	4413      	add	r3, r2
 80035e4:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <HAL_DMA_Init+0x140>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	009a      	lsls	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <HAL_DMA_Init+0x14c>)
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800361c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa74 	bl	8003b38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003658:	d102      	bne.n	8003660 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003668:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800366c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003676:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_DMA_Init+0x106>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d80c      	bhi.n	80036a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa93 	bl	8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e008      	b.n	80036b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40020407 	.word	0x40020407
 80036d8:	bffdfff8 	.word	0xbffdfff8
 80036dc:	cccccccd 	.word	0xcccccccd
 80036e0:	40020000 	.word	0x40020000
 80036e4:	bffdfbf8 	.word	0xbffdfbf8
 80036e8:	40020400 	.word	0x40020400

080036ec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_DMA_Start_IT+0x20>
 8003708:	2302      	movs	r3, #2
 800370a:	e066      	b.n	80037da <HAL_DMA_Start_IT+0xee>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d155      	bne.n	80037cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f9b9 	bl	8003abc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 020e 	orr.w	r2, r2, #14
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e00f      	b.n	8003784 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0204 	bic.w	r2, r2, #4
 8003772:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 020a 	orr.w	r2, r2, #10
 8003782:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e005      	b.n	80037d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04f      	b.n	8003894 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d008      	beq.n	8003812 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2204      	movs	r2, #4
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e040      	b.n	8003894 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020e 	bic.w	r2, r2, #14
 8003820:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f003 021c 	and.w	r2, r3, #28
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800385e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003880:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d005      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e047      	b.n	8003954 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 020e 	bic.w	r2, r2, #14
 80038d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 021c 	and.w	r2, r3, #28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003910:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003932:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
    }
  }
  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 031c 	and.w	r3, r3, #28
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d026      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x7a>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0204 	bic.w	r2, r2, #4
 80039b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021c 	and.w	r2, r3, #28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2104      	movs	r1, #4
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d071      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039d6:	e06c      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f003 031c 	and.w	r3, r3, #28
 80039e0:	2202      	movs	r2, #2
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02e      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xec>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d029      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 020a 	bic.w	r2, r2, #10
 8003a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f003 021c 	and.w	r2, r3, #28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	2102      	movs	r1, #2
 8003a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d038      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a48:	e033      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 031c 	and.w	r3, r3, #28
 8003a52:	2208      	movs	r2, #8
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d025      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020e 	bic.w	r2, r2, #14
 8003a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
}
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 021c 	and.w	r2, r3, #28
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d108      	bne.n	8003b1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b1a:	e007      	b.n	8003b2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d80a      	bhi.n	8003b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6493      	str	r3, [r2, #72]	; 0x48
 8003b60:	e007      	b.n	8003b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b08      	subs	r3, #8
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40020407 	.word	0x40020407
 8003ba8:	4002081c 	.word	0x4002081c
 8003bac:	cccccccd 	.word	0xcccccccd
 8003bb0:	40020880 	.word	0x40020880

08003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	461a      	mov	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2201      	movs	r2, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	1000823f 	.word	0x1000823f
 8003bfc:	40020940 	.word	0x40020940

08003c00 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0e:	e14c      	b.n	8003eaa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 813e 	beq.w	8003ea4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d005      	beq.n	8003c40 <HAL_GPIO_Init+0x40>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d130      	bne.n	8003ca2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c76:	2201      	movs	r2, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0201 	and.w	r2, r3, #1
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d017      	beq.n	8003cde <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d123      	bne.n	8003d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	6939      	ldr	r1, [r7, #16]
 8003d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0203 	and.w	r2, r3, #3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8098 	beq.w	8003ea4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d74:	4a54      	ldr	r2, [pc, #336]	; (8003ec8 <HAL_GPIO_Init+0x2c8>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d9e:	d019      	beq.n	8003dd4 <HAL_GPIO_Init+0x1d4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <HAL_GPIO_Init+0x2cc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_GPIO_Init+0x1d0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_GPIO_Init+0x2d0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00d      	beq.n	8003dcc <HAL_GPIO_Init+0x1cc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_GPIO_Init+0x2d4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <HAL_GPIO_Init+0x1c8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_GPIO_Init+0x2d8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_GPIO_Init+0x1c4>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e008      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	e006      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e004      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_GPIO_Init+0x1d6>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	f002 0203 	and.w	r2, r2, #3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4093      	lsls	r3, r2
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003de6:	4938      	ldr	r1, [pc, #224]	; (8003ec8 <HAL_GPIO_Init+0x2c8>)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	3302      	adds	r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e42:	4a26      	ldr	r2, [pc, #152]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <HAL_GPIO_Init+0x2dc>)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f aeab 	bne.w	8003c10 <HAL_GPIO_Init+0x10>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	48000400 	.word	0x48000400
 8003ed0:	48000800 	.word	0x48000800
 8003ed4:	48000c00 	.word	0x48000c00
 8003ed8:	48001000 	.word	0x48001000
 8003edc:	58000800 	.word	0x58000800

08003ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
 8003eec:	4613      	mov	r3, r2
 8003eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef0:	787b      	ldrb	r3, [r7, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003efc:	e002      	b.n	8003f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fbab 	bl	800168a <HAL_GPIO_EXTI_Callback>
  }
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58000800 	.word	0x58000800

08003f40 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_HSEM_IRQHandler+0x30>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_HSEM_IRQHandler+0x30>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	4906      	ldr	r1, [pc, #24]	; (8003f70 <HAL_HSEM_IRQHandler+0x30>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <HAL_HSEM_IRQHandler+0x30>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f807 	bl	8003f74 <HAL_HSEM_FreeCallback>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	58001500 	.word	0x58001500

08003f74 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e081      	b.n	800409e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe fd8a 	bl	8002ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e006      	b.n	8004010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800400e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d104      	bne.n	8004022 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d138      	bne.n	800412e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e032      	b.n	8004130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b20      	cmp	r3, #32
 8004150:	d139      	bne.n	80041c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800415c:	2302      	movs	r3, #2
 800415e:	e033      	b.n	80041c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800418e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01e      	beq.n	8004224 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <HAL_IPCC_Init+0x60>)
 80041e8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe fcac 	bl	8002b54 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f000 f85b 	bl	80042b8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f82c 	bl	800426c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004222:	e001      	b.n	8004228 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	58000c00 	.word	0x58000c00

08004238 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e00f      	b.n	800429a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <IPCC_SetDefaultCallbacks+0x44>)
 8004284:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3306      	adds	r3, #6
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <IPCC_SetDefaultCallbacks+0x48>)
 8004292:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d9ec      	bls.n	800427a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	08004239 	.word	0x08004239
 80042b4:	08004253 	.word	0x08004253

080042b8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80042cc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	223f      	movs	r2, #63	; 0x3f
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	b08b      	sub	sp, #44	; 0x2c
 80042e4:	af06      	add	r7, sp, #24
 80042e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0dd      	b.n	80044ae <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe fd12 	bl	8002d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f003 fdcc 	bl	8007ebc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e04d      	b.n	80043c6 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	3305      	adds	r3, #5
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	3304      	adds	r3, #4
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	b298      	uxth	r0, r3
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	333a      	adds	r3, #58	; 0x3a
 800436a:	4602      	mov	r2, r0
 800436c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	3307      	adds	r3, #7
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	333c      	adds	r3, #60	; 0x3c
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	3340      	adds	r3, #64	; 0x40
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	440b      	add	r3, r1
 80043ba:	3344      	adds	r3, #68	; 0x44
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3ac      	bcc.n	800432a <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e044      	b.n	8004460 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	440b      	add	r3, r1
 8004426:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	3301      	adds	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3b5      	bcc.n	80043d6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	687e      	ldr	r6, [r7, #4]
 8004472:	466d      	mov	r5, sp
 8004474:	f106 0410 	add.w	r4, r6, #16
 8004478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004480:	e885 0003 	stmia.w	r5, {r0, r1}
 8004484:	1d33      	adds	r3, r6, #4
 8004486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004488:	6838      	ldr	r0, [r7, #0]
 800448a:	f003 fd32 	bl	8007ef2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f805 	bl	80044b6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	58000400 	.word	0x58000400

0800452c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_PWREx_GetVoltageRange+0x18>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	58000400 	.word	0x58000400

08004548 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d101      	bne.n	8004560 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_RCC_HSE_Enable>:
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_RCC_HSE_Disable>:
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800458e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_RCC_HSE_IsReady>:
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ba:	d101      	bne.n	80045c0 <LL_RCC_HSE_IsReady+0x18>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <LL_RCC_HSE_IsReady+0x1a>
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_RCC_HSI_Enable>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_HSI_Disable>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	6013      	str	r3, [r2, #0]
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <LL_RCC_HSI_IsReady>:
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800460c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d101      	bne.n	8004620 <LL_RCC_HSI_IsReady+0x18>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <LL_RCC_HSI_IsReady+0x1a>
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_RCC_HSI_SetCalibTrimming>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_HSI48_Enable>:
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <LL_RCC_HSI48_Disable>:
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_RCC_HSI48_IsReady>:
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d101      	bne.n	80046b2 <LL_RCC_HSI48_IsReady+0x18>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <LL_RCC_HSI48_IsReady+0x1a>
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_LSE_Enable>:
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_LSE_Disable>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_RCC_LSE_EnableBypass>:
{
 8004702:	b480      	push	{r7}
 8004704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_LSE_DisableBypass>:
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_RCC_LSE_IsReady>:
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d101      	bne.n	800475e <LL_RCC_LSE_IsReady+0x18>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <LL_RCC_LSE_IsReady+0x1a>
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_RCC_LSI1_Enable>:
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_LSI1_Disable>:
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_LSI1_IsReady>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d101      	bne.n	80047c6 <LL_RCC_LSI1_IsReady+0x18>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_RCC_LSI1_IsReady+0x1a>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_RCC_LSI2_Enable>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_RCC_LSI2_Disable>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_RCC_LSI2_IsReady>:
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b08      	cmp	r3, #8
 8004828:	d101      	bne.n	800482e <LL_RCC_LSI2_IsReady+0x18>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_RCC_LSI2_IsReady+0x1a>
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_LSI2_SetTrimming>:
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_MSI_Enable>:
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6013      	str	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_MSI_Disable>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_RCC_MSI_IsReady>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d101      	bne.n	80048ba <LL_RCC_MSI_IsReady+0x16>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <LL_RCC_MSI_IsReady+0x18>
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LL_RCC_MSI_SetRange>:
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80048ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <LL_RCC_MSI_GetRange>:
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2bb0      	cmp	r3, #176	; 0xb0
 8004904:	d901      	bls.n	800490a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004906:	23b0      	movs	r3, #176	; 0xb0
 8004908:	607b      	str	r3, [r7, #4]
  return msiRange;
 800490a:	687b      	ldr	r3, [r7, #4]
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_SetSysClkSource>:
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 0203 	bic.w	r2, r3, #3
 8004954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_GetSysClkSource>:
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
}
 8004978:	4618      	mov	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_SetAHBPrescaler>:
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80049b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_RCC_SetAHB4Prescaler>:
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_RCC_SetAPB1Prescaler>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_RCC_SetAPB2Prescaler>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_GetAHBPrescaler>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_GetAHB4Prescaler>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_GetAPB1Prescaler>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_GetAPB2Prescaler>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_RCC_ConfigMCO>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_PLL_Enable>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_PLL_Disable>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_PLL_IsReady>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_PLL_IsReady+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_PLL_IsReady+0x1a>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_RCC_PLL_GetN>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_PLL_GetR>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_PLL_GetDivider>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_PLL_GetMainSource>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d101      	bne.n	8004bc0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be0:	d101      	bne.n	8004be6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c06:	d101      	bne.n	8004c0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c2a:	d101      	bne.n	8004c30 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4e:	d101      	bne.n	8004c54 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b08d      	sub	sp, #52	; 0x34
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e363      	b.n	800533a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 808d 	beq.w	8004d9a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c80:	f7ff fe73 	bl	800496a <LL_RCC_GetSysClkSource>
 8004c84:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c86:	f7ff ff83 	bl	8004b90 <LL_RCC_PLL_GetMainSource>
 8004c8a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x3e>
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d147      	bne.n	8004d28 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d144      	bne.n	8004d28 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e347      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004cae:	f7ff fe1e 	bl	80048ee <LL_RCC_MSI_GetRange>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	d914      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fd81 	bl	80057c4 <RCC_SetFlashLatencyFromMSIRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e336      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fdf8 	bl	80048c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fe1c 	bl	8004918 <LL_RCC_MSI_SetCalibTrimming>
 8004ce0:	e013      	b.n	8004d0a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fded 	bl	80048c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fe11 	bl	8004918 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd62 	bl	80057c4 <RCC_SetFlashLatencyFromMSIRange>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e317      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d0a:	f000 fd1b 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4aa4      	ldr	r2, [pc, #656]	; (8004fa4 <HAL_RCC_OscConfig+0x344>)
 8004d12:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d14:	4ba4      	ldr	r3, [pc, #656]	; (8004fa8 <HAL_RCC_OscConfig+0x348>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fa27 	bl	800316c <HAL_InitTick>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d039      	beq.n	8004d98 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e308      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01e      	beq.n	8004d6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d30:	f7ff fd9a 	bl	8004868 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d34:	f7fe fa68 	bl	8003208 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3c:	f7fe fa64 	bl	8003208 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e2f5      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d4e:	f7ff fda9 	bl	80048a4 <LL_RCC_MSI_IsReady>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f1      	beq.n	8004d3c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fdb2 	bl	80048c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fdd6 	bl	8004918 <LL_RCC_MSI_SetCalibTrimming>
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d6e:	f7ff fd8a 	bl	8004886 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d72:	f7fe fa49 	bl	8003208 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d7a:	f7fe fa45 	bl	8003208 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e2d6      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d8c:	f7ff fd8a 	bl	80048a4 <LL_RCC_MSI_IsReady>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f1      	bne.n	8004d7a <HAL_RCC_OscConfig+0x11a>
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d047      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da6:	f7ff fde0 	bl	800496a <LL_RCC_GetSysClkSource>
 8004daa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dac:	f7ff fef0 	bl	8004b90 <LL_RCC_PLL_GetMainSource>
 8004db0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x164>
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d108      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d134      	bne.n	8004e36 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e2b4      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d102      	bne.n	8004de0 <HAL_RCC_OscConfig+0x180>
 8004dda:	f7ff fbc7 	bl	800456c <LL_RCC_HSE_Enable>
 8004dde:	e001      	b.n	8004de4 <HAL_RCC_OscConfig+0x184>
 8004de0:	f7ff fbd3 	bl	800458a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe fa0c 	bl	8003208 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fe fa08 	bl	8003208 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e299      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e06:	f7ff fbcf 	bl	80045a8 <LL_RCC_HSE_IsReady>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f1      	beq.n	8004df4 <HAL_RCC_OscConfig+0x194>
 8004e10:	e011      	b.n	8004e36 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe f9f9 	bl	8003208 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1a:	f7fe f9f5 	bl	8003208 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e286      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e2c:	f7ff fbbc 	bl	80045a8 <LL_RCC_HSE_IsReady>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f1      	bne.n	8004e1a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04c      	beq.n	8004edc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e42:	f7ff fd92 	bl	800496a <LL_RCC_GetSysClkSource>
 8004e46:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	f7ff fea2 	bl	8004b90 <LL_RCC_PLL_GetMainSource>
 8004e4c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_OscConfig+0x200>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d10e      	bne.n	8004e78 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e266      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fbdb 	bl	800462c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e76:	e031      	b.n	8004edc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d019      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	f7ff fba4 	bl	80045cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe f9c0 	bl	8003208 <HAL_GetTick>
 8004e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8c:	f7fe f9bc 	bl	8003208 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e24d      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e9e:	f7ff fbb3 	bl	8004608 <LL_RCC_HSI_IsReady>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f1      	beq.n	8004e8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fbbd 	bl	800462c <LL_RCC_HSI_SetCalibTrimming>
 8004eb2:	e013      	b.n	8004edc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb4:	f7ff fb99 	bl	80045ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fe f9a6 	bl	8003208 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fe f9a2 	bl	8003208 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e233      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ed2:	f7ff fb99 	bl	8004608 <LL_RCC_HSI_IsReady>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f1      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a3 	beq.w	800503c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d076      	beq.n	8004fec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d046      	beq.n	8004f98 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f0a:	f7ff fc50 	bl	80047ae <LL_RCC_LSI1_IsReady>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f14:	f7ff fc29 	bl	800476a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f18:	f7fe f976 	bl	8003208 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f20:	f7fe f972 	bl	8003208 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e203      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f32:	f7ff fc3c 	bl	80047ae <LL_RCC_LSI1_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f1      	beq.n	8004f20 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f3c:	f7ff fc49 	bl	80047d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fe f962 	bl	8003208 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f48:	f7fe f95e 	bl	8003208 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1ef      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f5a:	f7ff fc5c 	bl	8004816 <LL_RCC_LSI2_IsReady>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f1      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fc66 	bl	800483a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f6e:	f7ff fc0d 	bl	800478c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fe f949 	bl	8003208 <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f7a:	f7fe f945 	bl	8003208 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1d6      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f8c:	f7ff fc0f 	bl	80047ae <LL_RCC_LSI1_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <HAL_RCC_OscConfig+0x31a>
 8004f96:	e051      	b.n	800503c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f98:	f7ff fbe7 	bl	800476a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fe f934 	bl	8003208 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fa2:	e00c      	b.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004fa4:	20000004 	.word	0x20000004
 8004fa8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fac:	f7fe f92c 	bl	8003208 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1bd      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fbe:	f7ff fbf6 	bl	80047ae <LL_RCC_LSI1_IsReady>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f1      	beq.n	8004fac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004fc8:	f7ff fc14 	bl	80047f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fce:	f7fe f91b 	bl	8003208 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e1ac      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fe0:	f7ff fc19 	bl	8004816 <LL_RCC_LSI2_IsReady>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f1      	bne.n	8004fce <HAL_RCC_OscConfig+0x36e>
 8004fea:	e027      	b.n	800503c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004fec:	f7ff fc02 	bl	80047f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fe f90a 	bl	8003208 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ff8:	f7fe f906 	bl	8003208 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e197      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800500a:	f7ff fc04 	bl	8004816 <LL_RCC_LSI2_IsReady>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f1      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005014:	f7ff fbba 	bl	800478c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fe f8f6 	bl	8003208 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005020:	f7fe f8f2 	bl	8003208 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e183      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005032:	f7ff fbbc 	bl	80047ae <LL_RCC_LSI1_IsReady>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f1      	bne.n	8005020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05b      	beq.n	8005100 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005048:	4ba7      	ldr	r3, [pc, #668]	; (80052e8 <HAL_RCC_OscConfig+0x688>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d114      	bne.n	800507e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005054:	f7ff fa5a 	bl	800450c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005058:	f7fe f8d6 	bl	8003208 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fe f8d2 	bl	8003208 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e163      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005072:	4b9d      	ldr	r3, [pc, #628]	; (80052e8 <HAL_RCC_OscConfig+0x688>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x42c>
 8005086:	f7ff fb1a 	bl	80046be <LL_RCC_LSE_Enable>
 800508a:	e00c      	b.n	80050a6 <HAL_RCC_OscConfig+0x446>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d104      	bne.n	800509e <HAL_RCC_OscConfig+0x43e>
 8005094:	f7ff fb35 	bl	8004702 <LL_RCC_LSE_EnableBypass>
 8005098:	f7ff fb11 	bl	80046be <LL_RCC_LSE_Enable>
 800509c:	e003      	b.n	80050a6 <HAL_RCC_OscConfig+0x446>
 800509e:	f7ff fb1f 	bl	80046e0 <LL_RCC_LSE_Disable>
 80050a2:	f7ff fb3f 	bl	8004724 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ae:	f7fe f8ab 	bl	8003208 <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80050b4:	e00a      	b.n	80050cc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fe f8a7 	bl	8003208 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e136      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80050cc:	f7ff fb3b 	bl	8004746 <LL_RCC_LSE_IsReady>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ef      	beq.n	80050b6 <HAL_RCC_OscConfig+0x456>
 80050d6:	e013      	b.n	8005100 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fe f896 	bl	8003208 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fe f892 	bl	8003208 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e121      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80050f6:	f7ff fb26 	bl	8004746 <LL_RCC_LSE_IsReady>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ef      	bne.n	80050e0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02c      	beq.n	8005166 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d014      	beq.n	800513e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005114:	f7ff fa9f 	bl	8004656 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fe f876 	bl	8003208 <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005120:	f7fe f872 	bl	8003208 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e103      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005132:	f7ff fab2 	bl	800469a <LL_RCC_HSI48_IsReady>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f1      	beq.n	8005120 <HAL_RCC_OscConfig+0x4c0>
 800513c:	e013      	b.n	8005166 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800513e:	f7ff fa9b 	bl	8004678 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fe f861 	bl	8003208 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800514a:	f7fe f85d 	bl	8003208 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e0ee      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800515c:	f7ff fa9d 	bl	800469a <LL_RCC_HSI48_IsReady>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f1      	bne.n	800514a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80e4 	beq.w	8005338 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005170:	f7ff fbfb 	bl	800496a <LL_RCC_GetSysClkSource>
 8005174:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	2b02      	cmp	r3, #2
 8005184:	f040 80b4 	bne.w	80052f0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	429a      	cmp	r2, r3
 8005194:	d123      	bne.n	80051de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d11c      	bne.n	80051de <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d114      	bne.n	80051de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d10d      	bne.n	80051de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d106      	bne.n	80051de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d05d      	beq.n	800529a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b0c      	cmp	r3, #12
 80051e2:	d058      	beq.n	8005296 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0a1      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051f6:	f7ff fc85 	bl	8004b04 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051fa:	f7fe f805 	bl	8003208 <HAL_GetTick>
 80051fe:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005202:	f7fe f801 	bl	8003208 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e092      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1ef      	bne.n	8005202 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCC_OscConfig+0x68c>)
 800522a:	4013      	ands	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800523a:	0212      	lsls	r2, r2, #8
 800523c:	4311      	orrs	r1, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005242:	4311      	orrs	r1, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005248:	4311      	orrs	r1, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800524e:	430a      	orrs	r2, r1
 8005250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005254:	4313      	orrs	r3, r2
 8005256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005258:	f7ff fc45 	bl	8004ae6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800526c:	f7fd ffcc 	bl	8003208 <HAL_GetTick>
 8005270:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005274:	f7fd ffc8 	bl	8003208 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e059      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005294:	e050      	b.n	8005338 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e04f      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d147      	bne.n	8005338 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052a8:	f7ff fc1d 	bl	8004ae6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052bc:	f7fd ffa4 	bl	8003208 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd ffa0 	bl	8003208 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e031      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ef      	beq.n	80052c4 <HAL_RCC_OscConfig+0x664>
 80052e4:	e028      	b.n	8005338 <HAL_RCC_OscConfig+0x6d8>
 80052e6:	bf00      	nop
 80052e8:	58000400 	.word	0x58000400
 80052ec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d01e      	beq.n	8005334 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f6:	f7ff fc05 	bl	8004b04 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fd ff85 	bl	8003208 <HAL_GetTick>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fd ff81 	bl	8003208 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e012      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ef      	bne.n	8005302 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_OscConfig+0x6e4>)
 800532e:	4013      	ands	r3, r2
 8005330:	60cb      	str	r3, [r1, #12]
 8005332:	e001      	b.n	8005338 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3734      	adds	r7, #52	; 0x34
 800533e:	46bd      	mov	sp, r7
 8005340:	bd90      	pop	{r4, r7, pc}
 8005342:	bf00      	nop
 8005344:	eefefffc 	.word	0xeefefffc

08005348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e12d      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800535c:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d91b      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b95      	ldr	r3, [pc, #596]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 0207 	bic.w	r2, r3, #7
 8005372:	4993      	ldr	r1, [pc, #588]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537a:	f7fd ff45 	bl	8003208 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005380:	e008      	b.n	8005394 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005382:	f7fd ff41 	bl	8003208 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e111      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005394:	4b8a      	ldr	r3, [pc, #552]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1ef      	bne.n	8005382 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fae5 	bl	8004982 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053b8:	f7fd ff26 	bl	8003208 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053c0:	f7fd ff22 	bl	8003208 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0f2      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053d2:	f7ff fbe9 	bl	8004ba8 <LL_RCC_IsActiveFlag_HPRE>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f1      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d016      	beq.n	8005416 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fadc 	bl	80049aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053f2:	f7fd ff09 	bl	8003208 <HAL_GetTick>
 80053f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053f8:	e008      	b.n	800540c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053fa:	f7fd ff05 	bl	8003208 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0d5      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800540c:	f7ff fbde 	bl	8004bcc <LL_RCC_IsActiveFlag_C2HPRE>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f1      	beq.n	80053fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fad5 	bl	80049d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800542c:	f7fd feec 	bl	8003208 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005434:	f7fd fee8 	bl	8003208 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e0b8      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005446:	f7ff fbd4 	bl	8004bf2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f1      	beq.n	8005434 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d016      	beq.n	800548a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff facf 	bl	8004a04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005466:	f7fd fecf 	bl	8003208 <HAL_GetTick>
 800546a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800546e:	f7fd fecb 	bl	8003208 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e09b      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005480:	f7ff fbca 	bl	8004c18 <LL_RCC_IsActiveFlag_PPRE1>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f1      	beq.n	800546e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d017      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fac5 	bl	8004a2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054a2:	f7fd feb1 	bl	8003208 <HAL_GetTick>
 80054a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054aa:	f7fd fead 	bl	8003208 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e07d      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054bc:	f7ff fbbe 	bl	8004c3c <LL_RCC_IsActiveFlag_PPRE2>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f1      	beq.n	80054aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d043      	beq.n	800555a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054da:	f7ff f865 	bl	80045a8 <LL_RCC_HSE_IsReady>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11e      	bne.n	8005522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e067      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d106      	bne.n	80054fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80054f0:	f7ff fb17 	bl	8004b22 <LL_RCC_PLL_IsReady>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d113      	bne.n	8005522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e05c      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005506:	f7ff f9cd 	bl	80048a4 <LL_RCC_MSI_IsReady>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e051      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005514:	f7ff f878 	bl	8004608 <LL_RCC_HSI_IsReady>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e04a      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fa0b 	bl	8004942 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552c:	f7fd fe6c 	bl	8003208 <HAL_GetTick>
 8005530:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005532:	e00a      	b.n	800554a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005534:	f7fd fe68 	bl	8003208 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e036      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554a:	f7ff fa0e 	bl	800496a <LL_RCC_GetSysClkSource>
 800554e:	4602      	mov	r2, r0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	429a      	cmp	r2, r3
 8005558:	d1ec      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800555a:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d21b      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 0207 	bic.w	r2, r3, #7
 8005570:	4913      	ldr	r1, [pc, #76]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fd fe46 	bl	8003208 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	e008      	b.n	8005592 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005580:	f7fd fe42 	bl	8003208 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e012      	b.n	80055b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_ClockConfig+0x278>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d1ef      	bne.n	8005580 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055a0:	f000 f8d0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <HAL_RCC_ClockConfig+0x27c>)
 80055a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80055aa:	f7fd fe39 	bl	8003220 <HAL_GetTickPrio>
 80055ae:	4603      	mov	r3, r0
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fd fddb 	bl	800316c <HAL_InitTick>
 80055b6:	4603      	mov	r3, r0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58004000 	.word	0x58004000
 80055c4:	20000004 	.word	0x20000004

080055c8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08c      	sub	sp, #48	; 0x30
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80055d4:	2302      	movs	r3, #2
 80055d6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005608:	2101      	movs	r1, #1
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005614:	4313      	orrs	r3, r2
 8005616:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	b29b      	uxth	r3, r3
 800561c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	0d1b      	lsrs	r3, r3, #20
 8005622:	b2db      	uxtb	r3, r3
 8005624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	4619      	mov	r1, r3
 800562c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562e:	f7fe fae7 	bl	8003c00 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f7ff fa3c 	bl	8004ab8 <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 8005640:	e010      	b.n	8005664 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005648:	d104      	bne.n	8005654 <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f7ff fa33 	bl	8004ab8 <LL_RCC_ConfigMCO>
}
 8005652:	e007      	b.n	8005664 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565a:	d103      	bne.n	8005664 <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f7ff fa2a 	bl	8004ab8 <LL_RCC_ConfigMCO>
}
 8005664:	bf00      	nop
 8005666:	3730      	adds	r7, #48	; 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005672:	f7ff f97a 	bl	800496a <LL_RCC_GetSysClkSource>
 8005676:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800567e:	f7ff f936 	bl	80048ee <LL_RCC_MSI_GetRange>
 8005682:	4603      	mov	r3, r0
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	4a2b      	ldr	r2, [pc, #172]	; (8005738 <HAL_RCC_GetSysClockFreq+0xcc>)
 800568c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e04b      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d102      	bne.n	80056a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800569a:	4b28      	ldr	r3, [pc, #160]	; (800573c <HAL_RCC_GetSysClockFreq+0xd0>)
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e045      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d10a      	bne.n	80056bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056a6:	f7fe ff4f 	bl	8004548 <LL_RCC_HSE_IsEnabledDiv2>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d102      	bne.n	80056b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056b0:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e03a      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e037      	b.n	800572c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056bc:	f7ff fa68 	bl	8004b90 <LL_RCC_PLL_GetMainSource>
 80056c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d003      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x64>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80056ce:	e00d      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056d2:	60bb      	str	r3, [r7, #8]
        break;
 80056d4:	e015      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056d6:	f7fe ff37 	bl	8004548 <LL_RCC_HSE_IsEnabledDiv2>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056e0:	4b16      	ldr	r3, [pc, #88]	; (800573c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056e4:	e00d      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056e6:	4b16      	ldr	r3, [pc, #88]	; (8005740 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056e8:	60bb      	str	r3, [r7, #8]
        break;
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056ec:	f7ff f8ff 	bl	80048ee <LL_RCC_MSI_GetRange>
 80056f0:	4603      	mov	r3, r0
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	4a0f      	ldr	r2, [pc, #60]	; (8005738 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fe:	60bb      	str	r3, [r7, #8]
        break;
 8005700:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005702:	f7ff fa20 	bl	8004b46 <LL_RCC_PLL_GetN>
 8005706:	4602      	mov	r2, r0
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	fb03 f402 	mul.w	r4, r3, r2
 800570e:	f7ff fa33 	bl	8004b78 <LL_RCC_PLL_GetDivider>
 8005712:	4603      	mov	r3, r0
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	3301      	adds	r3, #1
 8005718:	fbb4 f4f3 	udiv	r4, r4, r3
 800571c:	f7ff fa20 	bl	8004b60 <LL_RCC_PLL_GetR>
 8005720:	4603      	mov	r3, r0
 8005722:	0f5b      	lsrs	r3, r3, #29
 8005724:	3301      	adds	r3, #1
 8005726:	fbb4 f3f3 	udiv	r3, r4, r3
 800572a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	0800f724 	.word	0x0800f724
 800573c:	00f42400 	.word	0x00f42400
 8005740:	01e84800 	.word	0x01e84800

08005744 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b598      	push	{r3, r4, r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005748:	f7ff ff90 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800574c:	4604      	mov	r4, r0
 800574e:	f7ff f981 	bl	8004a54 <LL_RCC_GetAHBPrescaler>
 8005752:	4603      	mov	r3, r0
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	4a03      	ldr	r2, [pc, #12]	; (8005768 <HAL_RCC_GetHCLKFreq+0x24>)
 800575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005760:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd98      	pop	{r3, r4, r7, pc}
 8005768:	0800f6c4 	.word	0x0800f6c4

0800576c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800576c:	b598      	push	{r3, r4, r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005770:	f7ff ffe8 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005774:	4604      	mov	r4, r0
 8005776:	f7ff f987 	bl	8004a88 <LL_RCC_GetAPB1Prescaler>
 800577a:	4603      	mov	r3, r0
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	4a04      	ldr	r2, [pc, #16]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005790:	4618      	mov	r0, r3
 8005792:	bd98      	pop	{r3, r4, r7, pc}
 8005794:	0800f704 	.word	0x0800f704

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b598      	push	{r3, r4, r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800579c:	f7ff ffd2 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 80057a0:	4604      	mov	r4, r0
 80057a2:	f7ff f97d 	bl	8004aa0 <LL_RCC_GetAPB2Prescaler>
 80057a6:	4603      	mov	r3, r0
 80057a8:	0adb      	lsrs	r3, r3, #11
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd98      	pop	{r3, r4, r7, pc}
 80057c0:	0800f704 	.word	0x0800f704

080057c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2bb0      	cmp	r3, #176	; 0xb0
 80057d0:	d903      	bls.n	80057da <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e007      	b.n	80057ea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80057ea:	f7ff f93f 	bl	8004a6c <LL_RCC_GetAHB4Prescaler>
 80057ee:	4603      	mov	r3, r0
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	4a0d      	ldr	r2, [pc, #52]	; (800582c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80057f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	0c9c      	lsrs	r4, r3, #18
 800580e:	f7fe fe8d 	bl	800452c <HAL_PWREx_GetVoltageRange>
 8005812:	4603      	mov	r3, r0
 8005814:	4619      	mov	r1, r3
 8005816:	4620      	mov	r0, r4
 8005818:	f000 f80c 	bl	8005834 <RCC_SetFlashLatency>
 800581c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	bd90      	pop	{r4, r7, pc}
 8005826:	bf00      	nop
 8005828:	0800f724 	.word	0x0800f724
 800582c:	0800f6c4 	.word	0x0800f6c4
 8005830:	431bde83 	.word	0x431bde83

08005834 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b093      	sub	sp, #76	; 0x4c
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <RCC_SetFlashLatency+0xe8>)
 8005840:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800584a:	4a35      	ldr	r2, [pc, #212]	; (8005920 <RCC_SetFlashLatency+0xec>)
 800584c:	f107 031c 	add.w	r3, r7, #28
 8005850:	ca07      	ldmia	r2, {r0, r1, r2}
 8005852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005856:	4b33      	ldr	r3, [pc, #204]	; (8005924 <RCC_SetFlashLatency+0xf0>)
 8005858:	f107 040c 	add.w	r4, r7, #12
 800585c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800585e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005862:	2300      	movs	r3, #0
 8005864:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d11a      	bne.n	80058a4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800586e:	2300      	movs	r3, #0
 8005870:	643b      	str	r3, [r7, #64]	; 0x40
 8005872:	e013      	b.n	800589c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	3348      	adds	r3, #72	; 0x48
 800587a:	443b      	add	r3, r7
 800587c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d807      	bhi.n	8005896 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3348      	adds	r3, #72	; 0x48
 800588c:	443b      	add	r3, r7
 800588e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005894:	e020      	b.n	80058d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005898:	3301      	adds	r3, #1
 800589a:	643b      	str	r3, [r7, #64]	; 0x40
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d9e8      	bls.n	8005874 <RCC_SetFlashLatency+0x40>
 80058a2:	e019      	b.n	80058d8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a8:	e013      	b.n	80058d2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	3348      	adds	r3, #72	; 0x48
 80058b0:	443b      	add	r3, r7
 80058b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d807      	bhi.n	80058cc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	3348      	adds	r3, #72	; 0x48
 80058c2:	443b      	add	r3, r7
 80058c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80058ca:	e005      	b.n	80058d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	3301      	adds	r3, #1
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d9e8      	bls.n	80058aa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <RCC_SetFlashLatency+0xf4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 0207 	bic.w	r2, r3, #7
 80058e0:	4911      	ldr	r1, [pc, #68]	; (8005928 <RCC_SetFlashLatency+0xf4>)
 80058e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058e8:	f7fd fc8e 	bl	8003208 <HAL_GetTick>
 80058ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058ee:	e008      	b.n	8005902 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058f0:	f7fd fc8a 	bl	8003208 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e007      	b.n	8005912 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <RCC_SetFlashLatency+0xf4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800590c:	429a      	cmp	r2, r3
 800590e:	d1ef      	bne.n	80058f0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	374c      	adds	r7, #76	; 0x4c
 8005916:	46bd      	mov	sp, r7
 8005918:	bd90      	pop	{r4, r7, pc}
 800591a:	bf00      	nop
 800591c:	0800e394 	.word	0x0800e394
 8005920:	0800e3a4 	.word	0x0800e3a4
 8005924:	0800e3b0 	.word	0x0800e3b0
 8005928:	58004000 	.word	0x58004000

0800592c <LL_RCC_LSE_IsEnabled>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <LL_RCC_LSE_IsEnabled+0x18>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <LL_RCC_LSE_IsEnabled+0x1a>
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_LSE_IsReady>:
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d101      	bne.n	8005968 <LL_RCC_LSE_IsReady+0x18>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <LL_RCC_LSE_IsReady+0x1a>
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <LL_RCC_MSI_EnablePLLMode>:
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005982:	f043 0304 	orr.w	r3, r3, #4
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_RCC_SetRFWKPClockSource>:
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_RCC_SetSMPSClockSource>:
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f023 0203 	bic.w	r2, r3, #3
 80059d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <LL_RCC_SetSMPSPrescaler>:
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_SetUSARTClockSource>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_SetLPUARTClockSource>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <LL_RCC_SetI2CClockSource>:
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	401a      	ands	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_SetLPTIMClockSource>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	401a      	ands	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_SetSAIClockSource>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_RCC_SetRNGClockSource>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <LL_RCC_SetCLK48ClockSource>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <LL_RCC_SetUSBClockSource>:
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff ffe3 	bl	8005b2c <LL_RCC_SetCLK48ClockSource>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <LL_RCC_SetADCClockSource>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <LL_RCC_SetRTCClockSource>:
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_GetRTCClockSource>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_ForceBackupDomainReset>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_RCC_PLLSAI1_Enable>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c36:	6013      	str	r3, [r2, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_PLLSAI1_Disable>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c54:	6013      	str	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_PLLSAI1_IsReady>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c72:	d101      	bne.n	8005c78 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c90:	2300      	movs	r3, #0
 8005c92:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d034      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ca8:	d021      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cae:	d81b      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cba:	d815      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc4:	d110      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cd6:	e00d      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 f94d 	bl	8005f7c <RCCEx_PLLSAI1_ConfigNP>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce6:	e005      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
        break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fee8 	bl	8005ad4 <LL_RCC_SetSAIClockSource>
 8005d04:	e001      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d046      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d16:	f7ff ff56 	bl	8005bc6 <LL_RCC_GetRTCClockSource>
 8005d1a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d03c      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d26:	f7fe fbf1 	bl	800450c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff30 	bl	8005b9a <LL_RCC_SetRTCClockSource>
 8005d3a:	e02e      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d44:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005d46:	f7ff ff4b 	bl	8005be0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005d4a:	f7ff ff5a 	bl	8005c02 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005d66:	f7ff fde1 	bl	800592c <LL_RCC_LSE_IsEnabled>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d114      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d70:	f7fd fa4a 	bl	8003208 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d76:	e00b      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fd fa46 	bl	8003208 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d902      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	77fb      	strb	r3, [r7, #31]
              break;
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d90:	f7ff fdde 	bl	8005950 <LL_RCC_LSE_IsReady>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d1ee      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	77bb      	strb	r3, [r7, #30]
 8005d9e:	e001      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	7ffb      	ldrb	r3, [r7, #31]
 8005da2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fe2a 	bl	8005a0e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fe35 	bl	8005a3a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fe5d 	bl	8005aa0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fe52 	bl	8005aa0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fe2a 	bl	8005a66 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fe1f 	bl	8005a66 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d022      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff fe8d 	bl	8005b58 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e46:	d107      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e56:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e60:	d10b      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f8e3 	bl	8006032 <RCCEx_PLLSAI1_ConfigNQ>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e70:	7ffb      	ldrb	r3, [r7, #31]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02b      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe2a 	bl	8005b00 <LL_RCC_SetRNGClockSource>
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f7ff fe21 	bl	8005b00 <LL_RCC_SetRNGClockSource>
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fe34 	bl	8005b2c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005ecc:	d107      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005edc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d022      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fe3d 	bl	8005b6e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efc:	d107      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f8e3 	bl	80060e8 <RCCEx_PLLSAI1_ConfigNR>
 8005f22:	4603      	mov	r3, r0
 8005f24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005f2c:	7ffb      	ldrb	r3, [r7, #31]
 8005f2e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fd26 	bl	8005992 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fd45 	bl	80059e6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fd2c 	bl	80059be <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005f66:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005f74:	f7ff fcfe 	bl	8005974 <LL_RCC_MSI_EnablePLLMode>
}
 8005f78:	bf00      	nop
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f88:	f7ff fe5b 	bl	8005c42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f8c:	f7fd f93c 	bl	8003208 <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f92:	e009      	b.n	8005fa8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f94:	f7fd f938 	bl	8003208 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d902      	bls.n	8005fa8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa6:	e004      	b.n	8005fb2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fa8:	f7ff fe5a 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d137      	bne.n	8006028 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fe6:	f7ff fe1d 	bl	8005c24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fea:	f7fd f90d 	bl	8003208 <HAL_GetTick>
 8005fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff0:	e009      	b.n	8006006 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff2:	f7fd f909 	bl	8003208 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d902      	bls.n	8006006 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	73fb      	strb	r3, [r7, #15]
        break;
 8006004:	e004      	b.n	8006010 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006006:	f7ff fe2b 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d1f0      	bne.n	8005ff2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d108      	bne.n	8006028 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006024:	4313      	orrs	r3, r2
 8006026:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800603e:	f7ff fe00 	bl	8005c42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006042:	f7fd f8e1 	bl	8003208 <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006048:	e009      	b.n	800605e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800604a:	f7fd f8dd 	bl	8003208 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d902      	bls.n	800605e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	73fb      	strb	r3, [r7, #15]
      break;
 800605c:	e004      	b.n	8006068 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800605e:	f7ff fdff 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f0      	bne.n	800604a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d137      	bne.n	80060de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006082:	4313      	orrs	r3, r2
 8006084:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800609c:	f7ff fdc2 	bl	8005c24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a0:	f7fd f8b2 	bl	8003208 <HAL_GetTick>
 80060a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060a6:	e009      	b.n	80060bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060a8:	f7fd f8ae 	bl	8003208 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d902      	bls.n	80060bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ba:	e004      	b.n	80060c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060bc:	f7ff fdd0 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d1f0      	bne.n	80060a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d108      	bne.n	80060de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060da:	4313      	orrs	r3, r2
 80060dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060f4:	f7ff fda5 	bl	8005c42 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060f8:	f7fd f886 	bl	8003208 <HAL_GetTick>
 80060fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060fe:	e009      	b.n	8006114 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006100:	f7fd f882 	bl	8003208 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d902      	bls.n	8006114 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	73fb      	strb	r3, [r7, #15]
      break;
 8006112:	e004      	b.n	800611e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006114:	f7ff fda4 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d137      	bne.n	8006194 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006138:	4313      	orrs	r3, r2
 800613a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006152:	f7ff fd67 	bl	8005c24 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fd f857 	bl	8003208 <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800615c:	e009      	b.n	8006172 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800615e:	f7fd f853 	bl	8003208 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d902      	bls.n	8006172 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	73fb      	strb	r3, [r7, #15]
        break;
 8006170:	e004      	b.n	800617c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006172:	f7ff fd75 	bl	8005c60 <LL_RCC_PLLSAI1_IsReady>
 8006176:	4603      	mov	r3, r0
 8006178:	2b01      	cmp	r3, #1
 800617a:	d1f0      	bne.n	800615e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e090      	b.n	80062d2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fc fce9 	bl	8002b9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	22ca      	movs	r2, #202	; 0xca
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2253      	movs	r2, #83	; 0x53
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f89f 	bl	8006326 <RTC_EnterInitMode>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2204      	movs	r2, #4
 80061fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e067      	b.n	80062d2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68d2      	ldr	r2, [r2, #12]
 800623c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6919      	ldr	r1, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	041a      	lsls	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006260:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0203 	bic.w	r2, r2, #3
 8006270:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d113      	bne.n	80062c0 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f81e 	bl	80062da <HAL_RTC_WaitForSynchro>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e008      	b.n	80062d2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	22ff      	movs	r2, #255	; 0xff
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062f2:	f7fc ff89 	bl	8003208 <HAL_GetTick>
 80062f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062f8:	e009      	b.n	800630e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062fa:	f7fc ff85 	bl	8003208 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006308:	d901      	bls.n	800630e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e007      	b.n	800631e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0ee      	beq.n	80062fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d119      	bne.n	8006370 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006346:	f7fc ff5f 	bl	8003208 <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800634c:	e009      	b.n	8006362 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800634e:	f7fc ff5b 	bl	8003208 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635c:	d901      	bls.n	8006362 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e007      	b.n	8006372 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006392:	2302      	movs	r3, #2
 8006394:	e0a8      	b.n	80064e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	22ca      	movs	r2, #202	; 0xca
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2253      	movs	r2, #83	; 0x53
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80063c4:	f7fc ff20 	bl	8003208 <HAL_GetTick>
 80063c8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80063ca:	e015      	b.n	80063f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063cc:	f7fc ff1c 	bl	8003208 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063da:	d90d      	bls.n	80063f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2203      	movs	r2, #3
 80063e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e077      	b.n	80064e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e2      	bne.n	80063cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006414:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006426:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006428:	f7fc feee 	bl	8003208 <HAL_GetTick>
 800642c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800642e:	e015      	b.n	800645c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006430:	f7fc feea 	bl	8003208 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800643e:	d90d      	bls.n	800645c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	22ff      	movs	r2, #255	; 0xff
 8006446:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2203      	movs	r2, #3
 800644c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e045      	b.n	80064e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0e2      	beq.n	8006430 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0207 	bic.w	r2, r2, #7
 8006480:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	430a      	orrs	r2, r1
 8006490:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006492:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800649a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800649e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a12      	ldr	r2, [pc, #72]	; (80064f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80064a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ac:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064bc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064cc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	22ff      	movs	r2, #255	; 0xff
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	58000800 	.word	0x58000800

080064f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e049      	b.n	800659a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fc fb72 	bl	8002c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 f986 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d122      	bne.n	80065fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d11b      	bne.n	80065fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0202 	mvn.w	r2, #2
 80065ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f90f 	bl	8006808 <HAL_TIM_IC_CaptureCallback>
 80065ea:	e005      	b.n	80065f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f901 	bl	80067f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f912 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d122      	bne.n	8006652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d11b      	bne.n	8006652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0204 	mvn.w	r2, #4
 8006622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8e5 	bl	8006808 <HAL_TIM_IC_CaptureCallback>
 800663e:	e005      	b.n	800664c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8d7 	bl	80067f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8e8 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d122      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b08      	cmp	r3, #8
 800666c:	d11b      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0208 	mvn.w	r2, #8
 8006676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2204      	movs	r2, #4
 800667c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f8bb 	bl	8006808 <HAL_TIM_IC_CaptureCallback>
 8006692:	e005      	b.n	80066a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8ad 	bl	80067f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f8be 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d122      	bne.n	80066fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d11b      	bne.n	80066fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0210 	mvn.w	r2, #16
 80066ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2208      	movs	r2, #8
 80066d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f891 	bl	8006808 <HAL_TIM_IC_CaptureCallback>
 80066e6:	e005      	b.n	80066f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f883 	bl	80067f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f894 	bl	800681c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d10e      	bne.n	8006726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f06f 0201 	mvn.w	r2, #1
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f85d 	bl	80067e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d10e      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f8e7 	bl	8006920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006760:	d10e      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d107      	bne.n	8006780 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8da 	bl	8006934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d10e      	bne.n	80067ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d107      	bne.n	80067ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f842 	bl	8006830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0220 	mvn.w	r2, #32
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f89a 	bl	800690c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <TIM_Base_SetConfig+0xbc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0x20>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006862:	d108      	bne.n	8006876 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <TIM_Base_SetConfig+0xbc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_Base_SetConfig+0x52>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d007      	beq.n	8006896 <TIM_Base_SetConfig+0x52>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <TIM_Base_SetConfig+0xc0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0x52>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <TIM_Base_SetConfig+0xc4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <TIM_Base_SetConfig+0xbc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0xa0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <TIM_Base_SetConfig+0xc0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0xa0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <TIM_Base_SetConfig+0xc4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d103      	bne.n	80068ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	615a      	str	r2, [r3, #20]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <LL_RCC_GetUSARTClockSource>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4013      	ands	r3, r2
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <LL_RCC_GetLPUARTClockSource>:
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006974:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e042      	b.n	8006a20 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fc f945 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2224      	movs	r2, #36	; 0x24
 80069b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fbf6 	bl	80071bc <UART_SetConfig>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e022      	b.n	8006a20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fe10 	bl	8007608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fe97 	bl	800774c <UART_CheckIdleState>
 8006a1e:	4603      	mov	r3, r0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	; 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d17a      	bne.n	8006b36 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_UART_Transmit_DMA+0x24>
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e073      	b.n	8006b38 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Transmit_DMA+0x36>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e06c      	b.n	8006b38 <HAL_UART_Transmit_DMA+0x110>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2221      	movs	r2, #33	; 0x21
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02c      	beq.n	8006aee <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a98:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <HAL_UART_Transmit_DMA+0x118>)
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa0:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <HAL_UART_Transmit_DMA+0x11c>)
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa8:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <HAL_UART_Transmit_DMA+0x120>)
 8006aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	4619      	mov	r1, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3328      	adds	r3, #40	; 0x28
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	f7fc fe10 	bl	80036ec <HAL_DMA_Start_IT>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e024      	b.n	8006b38 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	623a      	str	r2, [r7, #32]
 8006b20:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	69f9      	ldr	r1, [r7, #28]
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
  }
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3728      	adds	r7, #40	; 0x28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08007ac1 	.word	0x08007ac1
 8006b44:	08007b5b 	.word	0x08007b5b
 8006b48:	08007b77 	.word	0x08007b77

08006b4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0ba      	sub	sp, #232	; 0xe8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b76:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11b      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d009      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 82d6 	beq.w	8007162 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
      }
      return;
 8006bbe:	e2d0      	b.n	8007162 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 811f 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bce:	4b8b      	ldr	r3, [pc, #556]	; (8006dfc <HAL_UART_IRQHandler+0x2b0>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bda:	4b89      	ldr	r3, [pc, #548]	; (8006e00 <HAL_UART_IRQHandler+0x2b4>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8112 	beq.w	8006e08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d011      	beq.n	8006c14 <HAL_UART_IRQHandler+0xc8>
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2201      	movs	r2, #1
 8006c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0a:	f043 0201 	orr.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d011      	beq.n	8006c44 <HAL_UART_IRQHandler+0xf8>
 8006c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2202      	movs	r2, #2
 8006c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f043 0204 	orr.w	r2, r3, #4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d011      	beq.n	8006c74 <HAL_UART_IRQHandler+0x128>
 8006c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2204      	movs	r2, #4
 8006c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6a:	f043 0202 	orr.w	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c90:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <HAL_UART_IRQHandler+0x2b0>)
 8006c92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca6:	f043 0208 	orr.w	r2, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d012      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x196>
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 823c 	beq.w	8007166 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d013      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d04f      	beq.n	8006de6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fe54 	bl	80079f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d141      	bne.n	8006dde <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d9      	bne.n	8006d5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d013      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db2:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <HAL_UART_IRQHandler+0x2b8>)
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fc fd70 	bl	80038a0 <HAL_DMA_Abort_IT>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e00f      	b.n	8006df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9da 	bl	8007190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	e00b      	b.n	8006df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9d6 	bl	8007190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e007      	b.n	8006df6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f9d2 	bl	8007190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006df4:	e1b7      	b.n	8007166 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df6:	bf00      	nop
    return;
 8006df8:	e1b5      	b.n	8007166 <HAL_UART_IRQHandler+0x61a>
 8006dfa:	bf00      	nop
 8006dfc:	10000001 	.word	0x10000001
 8006e00:	04000120 	.word	0x04000120
 8006e04:	08007bf7 	.word	0x08007bf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 814a 	bne.w	80070a6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8143 	beq.w	80070a6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 813c 	beq.w	80070a6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	f040 80b5 	bne.w	8006fb0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8187 	beq.w	800716a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e66:	429a      	cmp	r2, r3
 8006e68:	f080 817f 	bcs.w	800716a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 8086 	bne.w	8006f94 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eb6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1da      	bne.n	8006e88 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ef6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006efa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e1      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e3      	bne.n	8006f0e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f64:	f023 0310 	bic.w	r3, r3, #16
 8006f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e4      	bne.n	8006f54 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fc fc27 	bl	80037e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8fb 	bl	80071a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006fae:	e0dc      	b.n	800716a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80ce 	beq.w	800716e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80c9 	beq.w	800716e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8007000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e4      	bne.n	8006fdc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	623b      	str	r3, [r7, #32]
   return(result);
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800703a:	633a      	str	r2, [r7, #48]	; 0x30
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e1      	bne.n	8007012 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	617b      	str	r3, [r7, #20]
   return(result);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e4      	bne.n	8007062 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f880 	bl	80071a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80070a4:	e063      	b.n	800716e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <HAL_UART_IRQHandler+0x584>
 80070b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fdd5 	bl	8007c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ce:	e051      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d014      	beq.n	8007106 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d105      	bne.n	80070f4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d03a      	beq.n	8007172 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
    }
    return;
 8007104:	e035      	b.n	8007172 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_UART_IRQHandler+0x5da>
 8007112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fd7f 	bl	8007c22 <UART_EndTransmit_IT>
    return;
 8007124:	e026      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_UART_IRQHandler+0x5fa>
 8007132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007136:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fdae 	bl	8007ca0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007144:	e016      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <HAL_UART_IRQHandler+0x628>
 8007152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007156:	2b00      	cmp	r3, #0
 8007158:	da0c      	bge.n	8007174 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd96 	bl	8007c8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007160:	e008      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
      return;
 8007162:	bf00      	nop
 8007164:	e006      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
    return;
 8007166:	bf00      	nop
 8007168:	e004      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
      return;
 800716a:	bf00      	nop
 800716c:	e002      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
      return;
 800716e:	bf00      	nop
 8007170:	e000      	b.n	8007174 <HAL_UART_IRQHandler+0x628>
    return;
 8007172:	bf00      	nop
  }
}
 8007174:	37e8      	adds	r7, #232	; 0xe8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop

0800717c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c0:	b08c      	sub	sp, #48	; 0x30
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	431a      	orrs	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4baf      	ldr	r3, [pc, #700]	; (80074a8 <UART_SetConfig+0x2ec>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4aa4      	ldr	r2, [pc, #656]	; (80074ac <UART_SetConfig+0x2f0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007224:	4313      	orrs	r3, r2
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007232:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	6812      	ldr	r2, [r2, #0]
 800723a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800723c:	430b      	orrs	r3, r1
 800723e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	f023 010f 	bic.w	r1, r3, #15
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a95      	ldr	r2, [pc, #596]	; (80074b0 <UART_SetConfig+0x2f4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d125      	bne.n	80072ac <UART_SetConfig+0xf0>
 8007260:	2003      	movs	r0, #3
 8007262:	f7ff fb71 	bl	8006948 <LL_RCC_GetUSARTClockSource>
 8007266:	4603      	mov	r3, r0
 8007268:	2b03      	cmp	r3, #3
 800726a:	d81b      	bhi.n	80072a4 <UART_SetConfig+0xe8>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0xb8>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	08007285 	.word	0x08007285
 8007278:	08007295 	.word	0x08007295
 800727c:	0800728d 	.word	0x0800728d
 8007280:	0800729d 	.word	0x0800729d
 8007284:	2301      	movs	r3, #1
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e042      	b.n	8007312 <UART_SetConfig+0x156>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e03e      	b.n	8007312 <UART_SetConfig+0x156>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e03a      	b.n	8007312 <UART_SetConfig+0x156>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e036      	b.n	8007312 <UART_SetConfig+0x156>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e032      	b.n	8007312 <UART_SetConfig+0x156>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a7e      	ldr	r2, [pc, #504]	; (80074ac <UART_SetConfig+0x2f0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d12a      	bne.n	800730c <UART_SetConfig+0x150>
 80072b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80072ba:	f7ff fb55 	bl	8006968 <LL_RCC_GetLPUARTClockSource>
 80072be:	4603      	mov	r3, r0
 80072c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c4:	d01a      	beq.n	80072fc <UART_SetConfig+0x140>
 80072c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ca:	d81b      	bhi.n	8007304 <UART_SetConfig+0x148>
 80072cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d0:	d00c      	beq.n	80072ec <UART_SetConfig+0x130>
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d6:	d815      	bhi.n	8007304 <UART_SetConfig+0x148>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <UART_SetConfig+0x128>
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e0:	d008      	beq.n	80072f4 <UART_SetConfig+0x138>
 80072e2:	e00f      	b.n	8007304 <UART_SetConfig+0x148>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e012      	b.n	8007312 <UART_SetConfig+0x156>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e00e      	b.n	8007312 <UART_SetConfig+0x156>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e00a      	b.n	8007312 <UART_SetConfig+0x156>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e006      	b.n	8007312 <UART_SetConfig+0x156>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730a:	e002      	b.n	8007312 <UART_SetConfig+0x156>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a65      	ldr	r2, [pc, #404]	; (80074ac <UART_SetConfig+0x2f0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f040 8097 	bne.w	800744c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007322:	2b08      	cmp	r3, #8
 8007324:	d823      	bhi.n	800736e <UART_SetConfig+0x1b2>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x170>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007351 	.word	0x08007351
 8007330:	0800736f 	.word	0x0800736f
 8007334:	08007359 	.word	0x08007359
 8007338:	0800736f 	.word	0x0800736f
 800733c:	0800735f 	.word	0x0800735f
 8007340:	0800736f 	.word	0x0800736f
 8007344:	0800736f 	.word	0x0800736f
 8007348:	0800736f 	.word	0x0800736f
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fe fa0c 	bl	800576c <HAL_RCC_GetPCLK1Freq>
 8007354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007356:	e010      	b.n	800737a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b56      	ldr	r3, [pc, #344]	; (80074b4 <UART_SetConfig+0x2f8>)
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800735c:	e00d      	b.n	800737a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fe f985 	bl	800566c <HAL_RCC_GetSysClockFreq>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007364:	e009      	b.n	800737a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800736c:	e005      	b.n	800737a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 812a 	beq.w	80075d6 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	4a4c      	ldr	r2, [pc, #304]	; (80074b8 <UART_SetConfig+0x2fc>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	461a      	mov	r2, r3
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	fbb3 f3f2 	udiv	r3, r3, r2
 8007394:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4413      	add	r3, r2
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d305      	bcc.n	80073b2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d903      	bls.n	80073ba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073b8:	e10d      	b.n	80075d6 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	2200      	movs	r2, #0
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	60fa      	str	r2, [r7, #12]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <UART_SetConfig+0x2fc>)
 80073c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2200      	movs	r2, #0
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073dc:	f7f9 fa0e 	bl	80007fc <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	020b      	lsls	r3, r1, #8
 80073f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073f6:	0202      	lsls	r2, r0, #8
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	0849      	lsrs	r1, r1, #1
 80073fe:	2000      	movs	r0, #0
 8007400:	460c      	mov	r4, r1
 8007402:	4605      	mov	r5, r0
 8007404:	eb12 0804 	adds.w	r8, r2, r4
 8007408:	eb43 0905 	adc.w	r9, r3, r5
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	469a      	mov	sl, r3
 8007414:	4693      	mov	fp, r2
 8007416:	4652      	mov	r2, sl
 8007418:	465b      	mov	r3, fp
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f9ed 	bl	80007fc <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4613      	mov	r3, r2
 8007428:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d308      	bcc.n	8007444 <UART_SetConfig+0x288>
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007438:	d204      	bcs.n	8007444 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	e0c8      	b.n	80075d6 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800744a:	e0c4      	b.n	80075d6 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007454:	d16d      	bne.n	8007532 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800745a:	3b01      	subs	r3, #1
 800745c:	2b07      	cmp	r3, #7
 800745e:	d82d      	bhi.n	80074bc <UART_SetConfig+0x300>
 8007460:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <UART_SetConfig+0x2ac>)
 8007462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007466:	bf00      	nop
 8007468:	08007489 	.word	0x08007489
 800746c:	08007491 	.word	0x08007491
 8007470:	080074bd 	.word	0x080074bd
 8007474:	08007497 	.word	0x08007497
 8007478:	080074bd 	.word	0x080074bd
 800747c:	080074bd 	.word	0x080074bd
 8007480:	080074bd 	.word	0x080074bd
 8007484:	0800749f 	.word	0x0800749f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007488:	f7fe f986 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 800748c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800748e:	e01b      	b.n	80074c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <UART_SetConfig+0x2f8>)
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007494:	e018      	b.n	80074c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007496:	f7fe f8e9 	bl	800566c <HAL_RCC_GetSysClockFreq>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800749c:	e014      	b.n	80074c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074a4:	e010      	b.n	80074c8 <UART_SetConfig+0x30c>
 80074a6:	bf00      	nop
 80074a8:	cfff69f3 	.word	0xcfff69f3
 80074ac:	40008000 	.word	0x40008000
 80074b0:	40013800 	.word	0x40013800
 80074b4:	00f42400 	.word	0x00f42400
 80074b8:	0800f764 	.word	0x0800f764
      default:
        pclk = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 8083 	beq.w	80075d6 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	4a4a      	ldr	r2, [pc, #296]	; (8007600 <UART_SetConfig+0x444>)
 80074d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074da:	461a      	mov	r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e2:	005a      	lsls	r2, r3, #1
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	441a      	add	r2, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	2b0f      	cmp	r3, #15
 80074fa:	d916      	bls.n	800752a <UART_SetConfig+0x36e>
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007502:	d212      	bcs.n	800752a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f023 030f 	bic.w	r3, r3, #15
 800750c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	b29a      	uxth	r2, r3
 800751a:	8bfb      	ldrh	r3, [r7, #30]
 800751c:	4313      	orrs	r3, r2
 800751e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	8bfa      	ldrh	r2, [r7, #30]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e055      	b.n	80075d6 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007530:	e051      	b.n	80075d6 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007536:	3b01      	subs	r3, #1
 8007538:	2b07      	cmp	r3, #7
 800753a:	d822      	bhi.n	8007582 <UART_SetConfig+0x3c6>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x388>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007565 	.word	0x08007565
 8007548:	0800756d 	.word	0x0800756d
 800754c:	08007583 	.word	0x08007583
 8007550:	08007573 	.word	0x08007573
 8007554:	08007583 	.word	0x08007583
 8007558:	08007583 	.word	0x08007583
 800755c:	08007583 	.word	0x08007583
 8007560:	0800757b 	.word	0x0800757b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007564:	f7fe f918 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8007568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800756a:	e010      	b.n	800758e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800756c:	4b25      	ldr	r3, [pc, #148]	; (8007604 <UART_SetConfig+0x448>)
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007570:	e00d      	b.n	800758e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007572:	f7fe f87b 	bl	800566c <HAL_RCC_GetSysClockFreq>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007578:	e009      	b.n	800758e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007580:	e005      	b.n	800758e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800758c:	bf00      	nop
    }

    if (pclk != 0U)
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d020      	beq.n	80075d6 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	4a19      	ldr	r2, [pc, #100]	; (8007600 <UART_SetConfig+0x444>)
 800759a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759e:	461a      	mov	r2, r3
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	085b      	lsrs	r3, r3, #1
 80075ac:	441a      	add	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	2b0f      	cmp	r3, #15
 80075bc:	d908      	bls.n	80075d0 <UART_SetConfig+0x414>
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c4:	d204      	bcs.n	80075d0 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6a3a      	ldr	r2, [r7, #32]
 80075cc:	60da      	str	r2, [r3, #12]
 80075ce:	e002      	b.n	80075d6 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2201      	movs	r2, #1
 80075da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2200      	movs	r2, #0
 80075f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3730      	adds	r7, #48	; 0x30
 80075fa:	46bd      	mov	sp, r7
 80075fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007600:	0800f764 	.word	0x0800f764
 8007604:	00f42400 	.word	0x00f42400

08007608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01a      	beq.n	800771e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007706:	d10a      	bne.n	800771e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af02      	add	r7, sp, #8
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800775c:	f7fb fd54 	bl	8003208 <HAL_GetTick>
 8007760:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d10e      	bne.n	800778e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f82f 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e025      	b.n	80077da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d10e      	bne.n	80077ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800779c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f819 	bl	80077e2 <UART_WaitOnFlagUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e00f      	b.n	80077da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b09c      	sub	sp, #112	; 0x70
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f2:	e0a9      	b.n	8007948 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	f000 80a5 	beq.w	8007948 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fe:	f7fb fd03 	bl	8003208 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800780a:	429a      	cmp	r2, r3
 800780c:	d302      	bcc.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
 800780e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007810:	2b00      	cmp	r3, #0
 8007812:	d140      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007828:	667b      	str	r3, [r7, #100]	; 0x64
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	663b      	str	r3, [r7, #96]	; 0x60
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007866:	64ba      	str	r2, [r7, #72]	; 0x48
 8007868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800786c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e069      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d051      	beq.n	8007948 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b2:	d149      	bne.n	8007948 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
 80078de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	66bb      	str	r3, [r7, #104]	; 0x68
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3308      	adds	r3, #8
 800790e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007910:	623a      	str	r2, [r7, #32]
 8007912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	69f9      	ldr	r1, [r7, #28]
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	61bb      	str	r3, [r7, #24]
   return(result);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e5      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e010      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69da      	ldr	r2, [r3, #28]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4013      	ands	r3, r2
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	429a      	cmp	r2, r3
 8007964:	f43f af46 	beq.w	80077f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3770      	adds	r7, #112	; 0x70
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007972:	b480      	push	{r7}
 8007974:	b08f      	sub	sp, #60	; 0x3c
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800799a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079cc:	61ba      	str	r2, [r7, #24]
 80079ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6979      	ldr	r1, [r7, #20]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	613b      	str	r3, [r7, #16]
   return(result);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80079e8:	bf00      	nop
 80079ea:	373c      	adds	r7, #60	; 0x3c
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b095      	sub	sp, #84	; 0x54
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e3      	bne.n	8007a2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d118      	bne.n	8007aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f023 0310 	bic.w	r3, r3, #16
 8007a82:	647b      	str	r3, [r7, #68]	; 0x44
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a8c:	61bb      	str	r3, [r7, #24]
 8007a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6979      	ldr	r1, [r7, #20]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e6      	bne.n	8007a6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007ab4:	bf00      	nop
 8007ab6:	3754      	adds	r7, #84	; 0x54
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b090      	sub	sp, #64	; 0x40
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d137      	bne.n	8007b4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	623b      	str	r3, [r7, #32]
   return(result);
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b04:	633a      	str	r2, [r7, #48]	; 0x30
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	617b      	str	r3, [r7, #20]
   return(result);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e6      	bne.n	8007b18 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b4a:	e002      	b.n	8007b52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b4e:	f7fa fc29 	bl	80023a4 <HAL_UART_TxCpltCallback>
}
 8007b52:	bf00      	nop
 8007b54:	3740      	adds	r7, #64	; 0x40
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fb07 	bl	800717c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b086      	sub	sp, #24
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d109      	bne.n	8007bb6 <UART_DMAError+0x40>
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b21      	cmp	r3, #33	; 0x21
 8007ba6:	d106      	bne.n	8007bb6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f7ff fede 	bl	8007972 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d109      	bne.n	8007bd8 <UART_DMAError+0x62>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b22      	cmp	r3, #34	; 0x22
 8007bc8:	d106      	bne.n	8007bd8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007bd2:	6978      	ldr	r0, [r7, #20]
 8007bd4:	f7ff ff0e 	bl	80079f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bde:	f043 0210 	orr.w	r2, r3, #16
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007be8:	6978      	ldr	r0, [r7, #20]
 8007bea:	f7ff fad1 	bl	8007190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bee:	bf00      	nop
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fabb 	bl	8007190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b088      	sub	sp, #32
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6979      	ldr	r1, [r7, #20]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	613b      	str	r3, [r7, #16]
   return(result);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa fb9a 	bl	80023a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UARTEx_DisableFifoMode+0x16>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e027      	b.n	8007d1a <HAL_UARTEx_DisableFifoMode+0x66>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e02d      	b.n	8007d9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2224      	movs	r2, #36	; 0x24
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0201 	bic.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f850 	bl	8007e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e02d      	b.n	8007e16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2224      	movs	r2, #36	; 0x24
 8007dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f812 	bl	8007e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d108      	bne.n	8007e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e40:	e031      	b.n	8007ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e42:	2308      	movs	r3, #8
 8007e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e46:	2308      	movs	r3, #8
 8007e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	0e5b      	lsrs	r3, r3, #25
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	0f5b      	lsrs	r3, r3, #29
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	7b3a      	ldrb	r2, [r7, #12]
 8007e6e:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e70:	5c8a      	ldrb	r2, [r1, r2]
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e76:	7b3a      	ldrb	r2, [r7, #12]
 8007e78:	490f      	ldr	r1, [pc, #60]	; (8007eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	7b7a      	ldrb	r2, [r7, #13]
 8007e8c:	4909      	ldr	r1, [pc, #36]	; (8007eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e8e:	5c8a      	ldrb	r2, [r1, r2]
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e94:	7b7a      	ldrb	r2, [r7, #13]
 8007e96:	4908      	ldr	r1, [pc, #32]	; (8007eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8007e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	0800f77c 	.word	0x0800f77c
 8007eb8:	0800f784 	.word	0x0800f784

08007ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ec4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ec8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	43db      	mvns	r3, r3
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4013      	ands	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	f107 0014 	add.w	r0, r7, #20
 8007f00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	b004      	add	sp, #16
 8007f32:	4770      	bx	lr

08007f34 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	2218      	movs	r2, #24
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f92c 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f4c:	233f      	movs	r3, #63	; 0x3f
 8007f4e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007f50:	2381      	movs	r3, #129	; 0x81
 8007f52:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f54:	1dfb      	adds	r3, r7, #7
 8007f56:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 fba8 	bl	80096b8 <hci_send_req>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da01      	bge.n	8007f72 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f6e:	23ff      	movs	r3, #255	; 0xff
 8007f70:	e000      	b.n	8007f74 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007f72:	79fb      	ldrb	r3, [r7, #7]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3720      	adds	r7, #32
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007f7c:	b5b0      	push	{r4, r5, r7, lr}
 8007f7e:	b0ce      	sub	sp, #312	; 0x138
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4605      	mov	r5, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f8e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007f92:	462a      	mov	r2, r5
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f9a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fa6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007faa:	4602      	mov	r2, r0
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fb2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007fb6:	460a      	mov	r2, r1
 8007fb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007fc2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	f107 0210 	add.w	r2, r7, #16
 8007fcc:	4413      	add	r3, r2
 8007fce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007fd2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007fd6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007fda:	4413      	add	r3, r2
 8007fdc:	3309      	adds	r3, #9
 8007fde:	f107 0210 	add.w	r2, r7, #16
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fe8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ffe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008002:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800800a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800800e:	3301      	adds	r3, #1
 8008010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008014:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008018:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800801c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008020:	8812      	ldrh	r2, [r2, #0]
 8008022:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800802a:	3302      	adds	r3, #2
 800802c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008030:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008034:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008038:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800803c:	8812      	ldrh	r2, [r2, #0]
 800803e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008046:	3302      	adds	r3, #2
 8008048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800804c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008050:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008054:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800805c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008060:	3301      	adds	r3, #1
 8008062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800806a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800806e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008074:	3301      	adds	r3, #1
 8008076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800807a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800807e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008082:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008088:	3301      	adds	r3, #1
 800808a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800808e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008092:	3308      	adds	r3, #8
 8008094:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008098:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f871 	bl	8009184 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80080a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80080a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080aa:	4413      	add	r3, r2
 80080ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80080b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080b4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80080b8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80080ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80080c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080c8:	3301      	adds	r3, #1
 80080ca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80080ce:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 f856 	bl	8009184 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80080d8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80080dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080e0:	4413      	add	r3, r2
 80080e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80080e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ea:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80080ee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80080f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080f4:	3302      	adds	r3, #2
 80080f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80080fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080fe:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008102:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008108:	3302      	adds	r3, #2
 800810a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800810e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008112:	2218      	movs	r2, #24
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f001 f844 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800811c:	233f      	movs	r3, #63	; 0x3f
 800811e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008122:	2383      	movs	r3, #131	; 0x83
 8008124:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008128:	f107 0310 	add.w	r3, r7, #16
 800812c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008130:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008134:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008138:	f107 030f 	add.w	r3, r7, #15
 800813c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008140:	2301      	movs	r3, #1
 8008142:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800814a:	2100      	movs	r1, #0
 800814c:	4618      	mov	r0, r3
 800814e:	f001 fab3 	bl	80096b8 <hci_send_req>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	da01      	bge.n	800815c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008158:	23ff      	movs	r3, #255	; 0xff
 800815a:	e004      	b.n	8008166 <aci_gap_set_discoverable+0x1ea>
  return status;
 800815c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008160:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008164:	781b      	ldrb	r3, [r3, #0]
}
 8008166:	4618      	mov	r0, r3
 8008168:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800816c:	46bd      	mov	sp, r7
 800816e:	bdb0      	pop	{r4, r5, r7, pc}

08008170 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b0cc      	sub	sp, #304	; 0x130
 8008174:	af00      	add	r7, sp, #0
 8008176:	4602      	mov	r2, r0
 8008178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008180:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008182:	f107 0310 	add.w	r3, r7, #16
 8008186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800819c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081b0:	3301      	adds	r3, #1
 80081b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ba:	2218      	movs	r2, #24
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fff0 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081c4:	233f      	movs	r3, #63	; 0x3f
 80081c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80081ca:	2385      	movs	r3, #133	; 0x85
 80081cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081e0:	f107 030f 	add.w	r3, r7, #15
 80081e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fa5f 	bl	80096b8 <hci_send_req>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da01      	bge.n	8008204 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008200:	23ff      	movs	r3, #255	; 0xff
 8008202:	e004      	b.n	800820e <aci_gap_set_io_capability+0x9e>
  return status;
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800820c:	781b      	ldrb	r3, [r3, #0]
}
 800820e:	4618      	mov	r0, r3
 8008210:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008218:	b5b0      	push	{r4, r5, r7, lr}
 800821a:	b0cc      	sub	sp, #304	; 0x130
 800821c:	af00      	add	r7, sp, #0
 800821e:	4605      	mov	r5, r0
 8008220:	460c      	mov	r4, r1
 8008222:	4610      	mov	r0, r2
 8008224:	4619      	mov	r1, r3
 8008226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800822e:	462a      	mov	r2, r5
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800823a:	4622      	mov	r2, r4
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008246:	4602      	mov	r2, r0
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008252:	460a      	mov	r2, r1
 8008254:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008274:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008278:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008284:	3301      	adds	r3, #1
 8008286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008292:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800829a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829e:	3301      	adds	r3, #1
 80082a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80082a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082ac:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80082b0:	7812      	ldrb	r2, [r2, #0]
 80082b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80082b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082b8:	3301      	adds	r3, #1
 80082ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80082be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80082ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d2:	3301      	adds	r3, #1
 80082d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80082d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082dc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80082e0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80082e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e6:	3301      	adds	r3, #1
 80082e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80082ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80082f4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80082f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fa:	3301      	adds	r3, #1
 80082fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008304:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008308:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800830a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800830e:	3301      	adds	r3, #1
 8008310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008318:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800831c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008324:	3304      	adds	r3, #4
 8008326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800832a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008332:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008338:	3301      	adds	r3, #1
 800833a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800833e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008342:	2218      	movs	r2, #24
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f000 ff2c 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800834c:	233f      	movs	r3, #63	; 0x3f
 800834e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008352:	2386      	movs	r3, #134	; 0x86
 8008354:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008364:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008368:	f107 030f 	add.w	r3, r7, #15
 800836c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008370:	2301      	movs	r3, #1
 8008372:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800837a:	2100      	movs	r1, #0
 800837c:	4618      	mov	r0, r3
 800837e:	f001 f99b 	bl	80096b8 <hci_send_req>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	da01      	bge.n	800838c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008388:	23ff      	movs	r3, #255	; 0xff
 800838a:	e004      	b.n	8008396 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008394:	781b      	ldrb	r3, [r3, #0]
}
 8008396:	4618      	mov	r0, r3
 8008398:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800839c:	46bd      	mov	sp, r7
 800839e:	bdb0      	pop	{r4, r5, r7, pc}

080083a0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b0cc      	sub	sp, #304	; 0x130
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4602      	mov	r2, r0
 80083a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b0:	6019      	str	r1, [r3, #0]
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80083d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083de:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80083e2:	8812      	ldrh	r2, [r2, #0]
 80083e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80083e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083ea:	3302      	adds	r3, #2
 80083ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80083f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083f8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008406:	3304      	adds	r3, #4
 8008408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800840c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008410:	2218      	movs	r2, #24
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fec5 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800841a:	233f      	movs	r3, #63	; 0x3f
 800841c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008420:	2388      	movs	r3, #136	; 0x88
 8008422:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008426:	f107 0310 	add.w	r3, r7, #16
 800842a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800842e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008432:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008436:	f107 030f 	add.w	r3, r7, #15
 800843a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800843e:	2301      	movs	r3, #1
 8008440:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008448:	2100      	movs	r1, #0
 800844a:	4618      	mov	r0, r3
 800844c:	f001 f934 	bl	80096b8 <hci_send_req>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	da01      	bge.n	800845a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008456:	23ff      	movs	r3, #255	; 0xff
 8008458:	e004      	b.n	8008464 <aci_gap_pass_key_resp+0xc4>
  return status;
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008462:	781b      	ldrb	r3, [r3, #0]
}
 8008464:	4618      	mov	r0, r3
 8008466:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800846e:	b590      	push	{r4, r7, lr}
 8008470:	b0cd      	sub	sp, #308	; 0x134
 8008472:	af00      	add	r7, sp, #0
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800847e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800848c:	4622      	mov	r2, r4
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008498:	4602      	mov	r2, r0
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80084a4:	460a      	mov	r2, r1
 80084a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	2207      	movs	r2, #7
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fe73 	bl	80091a4 <Osal_MemSet>
  int index_input = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80084c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80084d0:	7812      	ldrb	r2, [r2, #0]
 80084d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d8:	3301      	adds	r3, #1
 80084da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80084de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084f2:	3301      	adds	r3, #1
 80084f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80084f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008500:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800850c:	3301      	adds	r3, #1
 800850e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008516:	2218      	movs	r2, #24
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fe42 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008520:	233f      	movs	r3, #63	; 0x3f
 8008522:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008526:	238a      	movs	r3, #138	; 0x8a
 8008528:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800852c:	f107 0310 	add.w	r3, r7, #16
 8008530:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008538:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008544:	2307      	movs	r3, #7
 8008546:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800854a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f8b1 	bl	80096b8 <hci_send_req>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	da01      	bge.n	8008560 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800855c:	23ff      	movs	r3, #255	; 0xff
 800855e:	e02e      	b.n	80085be <aci_gap_init+0x150>
  if ( resp.Status )
 8008560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008564:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <aci_gap_init+0x10c>
    return resp.Status;
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	e021      	b.n	80085be <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800857a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008582:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008586:	b29a      	uxth	r2, r3
 8008588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800859c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80085a6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085b0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80085ba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd90      	pop	{r4, r7, pc}

080085c8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0cc      	sub	sp, #304	; 0x130
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4602      	mov	r2, r0
 80085d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d8:	6019      	str	r1, [r3, #0]
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80085e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80085e4:	f107 0310 	add.w	r3, r7, #16
 80085e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80085fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008602:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008606:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800860a:	7812      	ldrb	r2, [r2, #0]
 800860c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800860e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008612:	3301      	adds	r3, #1
 8008614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800861c:	1c58      	adds	r0, r3, #1
 800861e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008622:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	f000 fda7 	bl	8009184 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008644:	4413      	add	r3, r2
 8008646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800864a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800864e:	2218      	movs	r2, #24
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fda6 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008658:	233f      	movs	r3, #63	; 0x3f
 800865a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800865e:	238e      	movs	r3, #142	; 0x8e
 8008660:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008664:	f107 0310 	add.w	r3, r7, #16
 8008668:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800866c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008670:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008674:	f107 030f 	add.w	r3, r7, #15
 8008678:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800867c:	2301      	movs	r3, #1
 800867e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 f815 	bl	80096b8 <hci_send_req>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	da01      	bge.n	8008698 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008694:	23ff      	movs	r3, #255	; 0xff
 8008696:	e004      	b.n	80086a2 <aci_gap_update_adv_data+0xda>
  return status;
 8008698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086a0:	781b      	ldrb	r3, [r3, #0]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	2218      	movs	r2, #24
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fd70 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086c4:	233f      	movs	r3, #63	; 0x3f
 80086c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80086c8:	2392      	movs	r3, #146	; 0x92
 80086ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80086cc:	1dfb      	adds	r3, r7, #7
 80086ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80086d0:	2301      	movs	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086d4:	f107 0308 	add.w	r3, r7, #8
 80086d8:	2100      	movs	r1, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 ffec 	bl	80096b8 <hci_send_req>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da01      	bge.n	80086ea <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80086e6:	23ff      	movs	r3, #255	; 0xff
 80086e8:	e000      	b.n	80086ec <aci_gap_configure_whitelist+0x40>
  return status;
 80086ea:	79fb      	ldrb	r3, [r7, #7]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b0cc      	sub	sp, #304	; 0x130
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4602      	mov	r2, r0
 80086fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008700:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008704:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008728:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800872c:	8812      	ldrh	r2, [r2, #0]
 800872e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008734:	3302      	adds	r3, #2
 8008736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800873a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800873e:	2218      	movs	r2, #24
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fd2e 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008748:	233f      	movs	r3, #63	; 0x3f
 800874a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800874e:	2395      	movs	r3, #149	; 0x95
 8008750:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008754:	f107 0310 	add.w	r3, r7, #16
 8008758:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800875c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008760:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008764:	f107 030f 	add.w	r3, r7, #15
 8008768:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800876c:	2301      	movs	r3, #1
 800876e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008776:	2100      	movs	r1, #0
 8008778:	4618      	mov	r0, r3
 800877a:	f000 ff9d 	bl	80096b8 <hci_send_req>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	da01      	bge.n	8008788 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8008784:	23ff      	movs	r3, #255	; 0xff
 8008786:	e004      	b.n	8008792 <aci_gap_allow_rebond+0x9e>
  return status;
 8008788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008790:	781b      	ldrb	r3, [r3, #0]
}
 8008792:	4618      	mov	r0, r3
 8008794:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b0cc      	sub	sp, #304	; 0x130
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4602      	mov	r2, r0
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80087b6:	460a      	mov	r2, r1
 80087b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80087ba:	f107 0310 	add.w	r3, r7, #16
 80087be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087e0:	8812      	ldrh	r2, [r2, #0]
 80087e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e8:	3302      	adds	r3, #2
 80087ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80087ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087f6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80087fa:	7812      	ldrb	r2, [r2, #0]
 80087fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008802:	3301      	adds	r3, #1
 8008804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008808:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800880c:	2218      	movs	r2, #24
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fcc7 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008816:	233f      	movs	r3, #63	; 0x3f
 8008818:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800881c:	23a5      	movs	r3, #165	; 0xa5
 800881e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800882a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800882e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008832:	f107 030f 	add.w	r3, r7, #15
 8008836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800883a:	2301      	movs	r3, #1
 800883c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f000 ff36 	bl	80096b8 <hci_send_req>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	da01      	bge.n	8008856 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008852:	23ff      	movs	r3, #255	; 0xff
 8008854:	e004      	b.n	8008860 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800885e:	781b      	ldrb	r3, [r3, #0]
}
 8008860:	4618      	mov	r0, r3
 8008862:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b088      	sub	sp, #32
 800886e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008874:	f107 0308 	add.w	r3, r7, #8
 8008878:	2218      	movs	r2, #24
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fc91 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008882:	233f      	movs	r3, #63	; 0x3f
 8008884:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008886:	f240 1301 	movw	r3, #257	; 0x101
 800888a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800888c:	1dfb      	adds	r3, r7, #7
 800888e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008890:	2301      	movs	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008894:	f107 0308 	add.w	r3, r7, #8
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f000 ff0c 	bl	80096b8 <hci_send_req>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da01      	bge.n	80088aa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80088a6:	23ff      	movs	r3, #255	; 0xff
 80088a8:	e000      	b.n	80088ac <aci_gatt_init+0x42>
  return status;
 80088aa:	79fb      	ldrb	r3, [r7, #7]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b0cf      	sub	sp, #316	; 0x13c
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80088c0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80088c4:	6001      	str	r1, [r0, #0]
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088ce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80088d2:	4622      	mov	r2, r4
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80088de:	4602      	mov	r2, r0
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088e6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80088ea:	460a      	mov	r2, r1
 80088ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80088f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d00a      	beq.n	800891a <aci_gatt_add_service+0x66>
 8008904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008908:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d101      	bne.n	8008916 <aci_gatt_add_service+0x62>
 8008912:	2311      	movs	r3, #17
 8008914:	e002      	b.n	800891c <aci_gatt_add_service+0x68>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <aci_gatt_add_service+0x68>
 800891a:	2303      	movs	r3, #3
 800891c:	f107 0210 	add.w	r2, r7, #16
 8008920:	4413      	add	r3, r2
 8008922:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	2203      	movs	r2, #3
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fc38 	bl	80091a4 <Osal_MemSet>
  int index_input = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800893a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800893e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008942:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800894a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800894e:	3301      	adds	r3, #1
 8008950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008958:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d002      	beq.n	8008968 <aci_gatt_add_service+0xb4>
 8008962:	2b02      	cmp	r3, #2
 8008964:	d004      	beq.n	8008970 <aci_gatt_add_service+0xbc>
 8008966:	e007      	b.n	8008978 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008968:	2302      	movs	r3, #2
 800896a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800896e:	e005      	b.n	800897c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008976:	e001      	b.n	800897c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008978:	2397      	movs	r3, #151	; 0x97
 800897a:	e06c      	b.n	8008a56 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800897c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008980:	1c58      	adds	r0, r3, #1
 8008982:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008986:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800898a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	f000 fbf8 	bl	8009184 <Osal_MemCpy>
    index_input += size;
 8008994:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008998:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800899c:	4413      	add	r3, r2
 800899e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80089a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089aa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80089ae:	7812      	ldrb	r2, [r2, #0]
 80089b0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80089b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089b6:	3301      	adds	r3, #1
 80089b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80089bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089c4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80089cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d0:	3301      	adds	r3, #1
 80089d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089da:	2218      	movs	r2, #24
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fbe0 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089e4:	233f      	movs	r3, #63	; 0x3f
 80089e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80089ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 80089ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089f2:	f107 0310 	add.w	r3, r7, #16
 80089f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008a02:	f107 030c 	add.w	r3, r7, #12
 8008a06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fe4e 	bl	80096b8 <hci_send_req>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da01      	bge.n	8008a26 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008a22:	23ff      	movs	r3, #255	; 0xff
 8008a24:	e017      	b.n	8008a56 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008a26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008a34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	e00a      	b.n	8008a56 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008a40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008a52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b0d1      	sub	sp, #324	; 0x144
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008a6e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008a72:	600a      	str	r2, [r1, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a7a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008a7e:	4622      	mov	r2, r4
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a86:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a92:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008a96:	460a      	mov	r2, r1
 8008a98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008a9a:	f107 0318 	add.w	r3, r7, #24
 8008a9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008aa2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008aa6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d00a      	beq.n	8008ac6 <aci_gatt_add_char+0x66>
 8008ab0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ab4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d101      	bne.n	8008ac2 <aci_gatt_add_char+0x62>
 8008abe:	2313      	movs	r3, #19
 8008ac0:	e002      	b.n	8008ac8 <aci_gatt_add_char+0x68>
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e000      	b.n	8008ac8 <aci_gatt_add_char+0x68>
 8008ac6:	2305      	movs	r3, #5
 8008ac8:	f107 0218 	add.w	r2, r7, #24
 8008acc:	4413      	add	r3, r2
 8008ace:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008ad2:	f107 0314 	add.w	r3, r7, #20
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fb62 	bl	80091a4 <Osal_MemSet>
  int index_input = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008aea:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008aee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008af2:	8812      	ldrh	r2, [r2, #0]
 8008af4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008af6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008afa:	3302      	adds	r3, #2
 8008afc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008b00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008b04:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008b08:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b14:	3301      	adds	r3, #1
 8008b16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008b1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b1e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d002      	beq.n	8008b2e <aci_gatt_add_char+0xce>
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d004      	beq.n	8008b36 <aci_gatt_add_char+0xd6>
 8008b2c:	e007      	b.n	8008b3e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008b2e:	2302      	movs	r3, #2
 8008b30:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008b34:	e005      	b.n	8008b42 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008b36:	2310      	movs	r3, #16
 8008b38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008b3c:	e001      	b.n	8008b42 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008b3e:	2397      	movs	r3, #151	; 0x97
 8008b40:	e091      	b.n	8008c66 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008b42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008b46:	1cd8      	adds	r0, r3, #3
 8008b48:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008b4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b50:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008b54:	6819      	ldr	r1, [r3, #0]
 8008b56:	f000 fb15 	bl	8009184 <Osal_MemCpy>
    index_input += size;
 8008b5a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008b5e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008b62:	4413      	add	r3, r2
 8008b64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b6c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008b70:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008b74:	8812      	ldrh	r2, [r2, #0]
 8008b76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008b78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b86:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008b8a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008b8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b90:	3301      	adds	r3, #1
 8008b92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b9a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b9e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bae:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008bb2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008bb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bc2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008bc6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008bc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bcc:	3301      	adds	r3, #1
 8008bce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bd6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008bda:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008bdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008be0:	3301      	adds	r3, #1
 8008be2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008be6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008bea:	2218      	movs	r2, #24
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fad8 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bf4:	233f      	movs	r3, #63	; 0x3f
 8008bf6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008bfa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008bfe:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008c02:	f107 0318 	add.w	r3, r7, #24
 8008c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008c0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008c12:	f107 0314 	add.w	r3, r7, #20
 8008c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c20:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fd46 	bl	80096b8 <hci_send_req>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da01      	bge.n	8008c36 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008c32:	23ff      	movs	r3, #255	; 0xff
 8008c34:	e017      	b.n	8008c66 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008c36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008c44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	e00a      	b.n	8008c66 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008c50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008c62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd90      	pop	{r4, r7, pc}

08008c70 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008c70:	b5b0      	push	{r4, r5, r7, lr}
 8008c72:	b0cc      	sub	sp, #304	; 0x130
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4605      	mov	r5, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c82:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008c86:	462a      	mov	r2, r5
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c92:	4622      	mov	r2, r4
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008caa:	460a      	mov	r2, r1
 8008cac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008cae:	f107 0310 	add.w	r3, r7, #16
 8008cb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ccc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cd0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008cd4:	8812      	ldrh	r2, [r2, #0]
 8008cd6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cdc:	3302      	adds	r3, #2
 8008cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d04:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d10:	3301      	adds	r3, #1
 8008d12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d1e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008d22:	7812      	ldrb	r2, [r2, #0]
 8008d24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d34:	1d98      	adds	r0, r3, #6
 8008d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008d46:	f000 fa1d 	bl	8009184 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d58:	4413      	add	r3, r2
 8008d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d62:	2218      	movs	r2, #24
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fa1c 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d6c:	233f      	movs	r3, #63	; 0x3f
 8008d6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008d72:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008d76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d7a:	f107 0310 	add.w	r3, r7, #16
 8008d7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d8a:	f107 030f 	add.w	r3, r7, #15
 8008d8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fc8a 	bl	80096b8 <hci_send_req>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da01      	bge.n	8008dae <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008daa:	23ff      	movs	r3, #255	; 0xff
 8008dac:	e004      	b.n	8008db8 <aci_gatt_update_char_value+0x148>
  return status;
 8008dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008db6:	781b      	ldrb	r3, [r3, #0]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdb0      	pop	{r4, r5, r7, pc}

08008dc2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b0cc      	sub	sp, #304	; 0x130
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008dda:	4602      	mov	r2, r0
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008de6:	460a      	mov	r2, r1
 8008de8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008dea:	f107 0310 	add.w	r3, r7, #16
 8008dee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e0c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e18:	3301      	adds	r3, #1
 8008e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e32:	3301      	adds	r3, #1
 8008e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3c:	1c98      	adds	r0, r3, #2
 8008e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e50:	6819      	ldr	r1, [r3, #0]
 8008e52:	f000 f997 	bl	8009184 <Osal_MemCpy>
  index_input += Length;
 8008e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e64:	4413      	add	r3, r2
 8008e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e6e:	2218      	movs	r2, #24
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f996 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e78:	233f      	movs	r3, #63	; 0x3f
 8008e7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008e7e:	230c      	movs	r3, #12
 8008e80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e84:	f107 0310 	add.w	r3, r7, #16
 8008e88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e94:	f107 030f 	add.w	r3, r7, #15
 8008e98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fc05 	bl	80096b8 <hci_send_req>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da01      	bge.n	8008eb8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008eb4:	23ff      	movs	r3, #255	; 0xff
 8008eb6:	e004      	b.n	8008ec2 <aci_hal_write_config_data+0x100>
  return status;
 8008eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ec0:	781b      	ldrb	r3, [r3, #0]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b0cc      	sub	sp, #304	; 0x130
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008eea:	f107 0310 	add.w	r3, r7, #16
 8008eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f0c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f32:	3301      	adds	r3, #1
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f3c:	2218      	movs	r2, #24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f92f 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f46:	233f      	movs	r3, #63	; 0x3f
 8008f48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008f4c:	230f      	movs	r3, #15
 8008f4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f62:	f107 030f 	add.w	r3, r7, #15
 8008f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb9e 	bl	80096b8 <hci_send_req>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	da01      	bge.n	8008f86 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008f82:	23ff      	movs	r3, #255	; 0xff
 8008f84:	e004      	b.n	8008f90 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f8e:	781b      	ldrb	r3, [r3, #0]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b0cc      	sub	sp, #304	; 0x130
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008faa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008fac:	f107 0310 	add.w	r3, r7, #16
 8008fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008fd2:	8812      	ldrh	r2, [r2, #0]
 8008fd4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fda:	3302      	adds	r3, #2
 8008fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fe0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fe4:	2218      	movs	r2, #24
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f8db 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fee:	233f      	movs	r3, #63	; 0x3f
 8008ff0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008ff4:	2318      	movs	r3, #24
 8008ff6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ffa:	f107 0310 	add.w	r3, r7, #16
 8008ffe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009006:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800900a:	f107 030f 	add.w	r3, r7, #15
 800900e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009018:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800901c:	2100      	movs	r1, #0
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fb4a 	bl	80096b8 <hci_send_req>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	da01      	bge.n	800902e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800902a:	23ff      	movs	r3, #255	; 0xff
 800902c:	e004      	b.n	8009038 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800902e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009032:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009036:	781b      	ldrb	r3, [r3, #0]
}
 8009038:	4618      	mov	r0, r3
 800903a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b088      	sub	sp, #32
 8009046:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800904c:	f107 0308 	add.w	r3, r7, #8
 8009050:	2218      	movs	r2, #24
 8009052:	2100      	movs	r1, #0
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f8a5 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x03;
 800905a:	2303      	movs	r3, #3
 800905c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800905e:	2303      	movs	r3, #3
 8009060:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009062:	1dfb      	adds	r3, r7, #7
 8009064:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009066:	2301      	movs	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fb21 	bl	80096b8 <hci_send_req>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	da01      	bge.n	8009080 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800907c:	23ff      	movs	r3, #255	; 0xff
 800907e:	e000      	b.n	8009082 <hci_reset+0x40>
  return status;
 8009080:	79fb      	ldrb	r3, [r7, #7]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800908a:	b590      	push	{r4, r7, lr}
 800908c:	b0cd      	sub	sp, #308	; 0x134
 800908e:	af00      	add	r7, sp, #0
 8009090:	4604      	mov	r4, r0
 8009092:	4608      	mov	r0, r1
 8009094:	4611      	mov	r1, r2
 8009096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800909e:	4622      	mov	r2, r4
 80090a0:	701a      	strb	r2, [r3, #0]
 80090a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090aa:	4602      	mov	r2, r0
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80090b6:	460a      	mov	r2, r1
 80090b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80090ba:	f107 0310 	add.w	r3, r7, #16
 80090be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80090d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090dc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80090e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090e8:	3301      	adds	r3, #1
 80090ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80090ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090f6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80090fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009102:	3301      	adds	r3, #1
 8009104:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009110:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800911c:	3301      	adds	r3, #1
 800911e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009126:	2218      	movs	r2, #24
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f83a 	bl	80091a4 <Osal_MemSet>
  rq.ogf = 0x08;
 8009130:	2308      	movs	r3, #8
 8009132:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009136:	2331      	movs	r3, #49	; 0x31
 8009138:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800913c:	f107 0310 	add.w	r3, r7, #16
 8009140:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009148:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800914c:	f107 030f 	add.w	r3, r7, #15
 8009150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009154:	2301      	movs	r3, #1
 8009156:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800915a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f000 faa9 	bl	80096b8 <hci_send_req>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	da01      	bge.n	8009170 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800916c:	23ff      	movs	r3, #255	; 0xff
 800916e:	e004      	b.n	800917a <hci_le_set_default_phy+0xf0>
  return status;
 8009170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009174:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009178:	781b      	ldrb	r3, [r3, #0]
}
 800917a:	4618      	mov	r0, r3
 800917c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009180:	46bd      	mov	sp, r7
 8009182:	bd90      	pop	{r4, r7, pc}

08009184 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f003 fea5 	bl	800cee4 <memcpy>
 800919a:	4603      	mov	r3, r0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f003 fea3 	bl	800cf00 <memset>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return;
 80091c8:	bf00      	nop
}
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80091d2:	b480      	push	{r7}
 80091d4:	af00      	add	r7, sp, #0
  return;
 80091d6:	bf00      	nop
}
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  return;
 80091e4:	bf00      	nop
}
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0
  return;
 80091f2:	bf00      	nop
}
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  return;
 8009200:	bf00      	nop
}
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800920a:	b480      	push	{r7}
 800920c:	af00      	add	r7, sp, #0
  return;
 800920e:	bf00      	nop
}
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  return;
 800921c:	bf00      	nop
}
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009226:	b480      	push	{r7}
 8009228:	af00      	add	r7, sp, #0
  return;
 800922a:	bf00      	nop
}
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return;
 8009238:	bf00      	nop
}
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009242:	b480      	push	{r7}
 8009244:	af00      	add	r7, sp, #0
  return;
 8009246:	bf00      	nop
}
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  return;
 8009254:	bf00      	nop
}
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800925e:	b480      	push	{r7}
 8009260:	af00      	add	r7, sp, #0
  return;
 8009262:	bf00      	nop
}
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  return;
 8009270:	bf00      	nop
}
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800927a:	b480      	push	{r7}
 800927c:	af00      	add	r7, sp, #0
  return;
 800927e:	bf00      	nop
}
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return;
 800928c:	bf00      	nop
}
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009296:	b480      	push	{r7}
 8009298:	af00      	add	r7, sp, #0
  return;
 800929a:	bf00      	nop
}
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  return;
 80092a8:	bf00      	nop
}
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <SVCCTL_Init+0x18>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <SVCCTL_Init+0x1c>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80092c4:	f000 f806 	bl	80092d4 <SVCCTL_SvcInit>

  return;
 80092c8:	bf00      	nop
}
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000130 	.word	0x20000130
 80092d0:	20000150 	.word	0x20000150

080092d4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  BAS_Init();
 80092d8:	f7ff ff74 	bl	80091c4 <BAS_Init>

  BLS_Init();
 80092dc:	f7ff ff79 	bl	80091d2 <BLS_Init>

  CRS_STM_Init();
 80092e0:	f7ff ff7e 	bl	80091e0 <CRS_STM_Init>

  DIS_Init();
 80092e4:	f7ff ff83 	bl	80091ee <DIS_Init>

  EDS_STM_Init();
 80092e8:	f7ff ff88 	bl	80091fc <EDS_STM_Init>

  HIDS_Init();
 80092ec:	f7ff ff8d 	bl	800920a <HIDS_Init>

  HRS_Init();
 80092f0:	f7ff ff92 	bl	8009218 <HRS_Init>

  HTS_Init();
 80092f4:	f7ff ff97 	bl	8009226 <HTS_Init>

  IAS_Init();
 80092f8:	f7ff ff9c 	bl	8009234 <IAS_Init>

  LLS_Init();
 80092fc:	f7ff ffa1 	bl	8009242 <LLS_Init>

  TPS_Init();
 8009300:	f7ff ffa6 	bl	8009250 <TPS_Init>

  MOTENV_STM_Init();
 8009304:	f7ff ffab 	bl	800925e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009308:	f7ff ffb0 	bl	800926c <P2PS_STM_Init>

  ZDD_STM_Init();
 800930c:	f7ff ffb5 	bl	800927a <ZDD_STM_Init>

  OTAS_STM_Init();
 8009310:	f7ff ffba 	bl	8009288 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009314:	f7ff ffc6 	bl	80092a4 <BVOPUS_STM_Init>

  MESH_Init();
 8009318:	f7ff ffbd 	bl	8009296 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800931c:	f002 ff42 	bl	800c1a4 <SVCCTL_InitCustomSvc>
  
  return;
 8009320:	bf00      	nop
}
 8009322:	bd80      	pop	{r7, pc}

08009324 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800932c:	4b09      	ldr	r3, [pc, #36]	; (8009354 <SVCCTL_RegisterSvcHandler+0x30>)
 800932e:	7f1b      	ldrb	r3, [r3, #28]
 8009330:	4619      	mov	r1, r3
 8009332:	4a08      	ldr	r2, [pc, #32]	; (8009354 <SVCCTL_RegisterSvcHandler+0x30>)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <SVCCTL_RegisterSvcHandler+0x30>)
 800933c:	7f1b      	ldrb	r3, [r3, #28]
 800933e:	3301      	adds	r3, #1
 8009340:	b2da      	uxtb	r2, r3
 8009342:	4b04      	ldr	r3, [pc, #16]	; (8009354 <SVCCTL_RegisterSvcHandler+0x30>)
 8009344:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009346:	bf00      	nop
}
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000130 	.word	0x20000130

08009358 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3301      	adds	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2bff      	cmp	r3, #255	; 0xff
 8009370:	d125      	bne.n	80093be <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3302      	adds	r3, #2
 8009376:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009386:	d118      	bne.n	80093ba <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009388:	2300      	movs	r3, #0
 800938a:	757b      	strb	r3, [r7, #21]
 800938c:	e00d      	b.n	80093aa <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800938e:	7d7b      	ldrb	r3, [r7, #21]
 8009390:	4a1a      	ldr	r2, [pc, #104]	; (80093fc <SVCCTL_UserEvtRx+0xa4>)
 8009392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80093a4:	7d7b      	ldrb	r3, [r7, #21]
 80093a6:	3301      	adds	r3, #1
 80093a8:	757b      	strb	r3, [r7, #21]
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <SVCCTL_UserEvtRx+0xa4>)
 80093ac:	7f1b      	ldrb	r3, [r3, #28]
 80093ae:	7d7a      	ldrb	r2, [r7, #21]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d3ec      	bcc.n	800938e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80093b4:	e002      	b.n	80093bc <SVCCTL_UserEvtRx+0x64>
              break;
 80093b6:	bf00      	nop
          break;
 80093b8:	e000      	b.n	80093bc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80093ba:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80093bc:	e000      	b.n	80093c0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80093be:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d00f      	beq.n	80093e6 <SVCCTL_UserEvtRx+0x8e>
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	dc10      	bgt.n	80093ec <SVCCTL_UserEvtRx+0x94>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <SVCCTL_UserEvtRx+0x7c>
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d006      	beq.n	80093e0 <SVCCTL_UserEvtRx+0x88>
 80093d2:	e00b      	b.n	80093ec <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fcb3 	bl	800ad40 <SVCCTL_App_Notification>
 80093da:	4603      	mov	r3, r0
 80093dc:	75bb      	strb	r3, [r7, #22]
      break;
 80093de:	e008      	b.n	80093f2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093e0:	2301      	movs	r3, #1
 80093e2:	75bb      	strb	r3, [r7, #22]
      break;
 80093e4:	e005      	b.n	80093f2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75bb      	strb	r3, [r7, #22]
      break;
 80093ea:	e002      	b.n	80093f2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093ec:	2301      	movs	r3, #1
 80093ee:	75bb      	strb	r3, [r7, #22]
      break;
 80093f0:	bf00      	nop
  }

  return (return_status);
 80093f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000130 	.word	0x20000130

08009400 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	212c      	movs	r1, #44	; 0x2c
 8009418:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800941c:	f000 fae2 	bl	80099e4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	330b      	adds	r3, #11
 8009424:	78db      	ldrb	r3, [r3, #3]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b088      	sub	sp, #32
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009436:	f107 030c 	add.w	r3, r7, #12
 800943a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	210f      	movs	r1, #15
 8009446:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800944a:	f000 facb 	bl	80099e4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	330b      	adds	r3, #11
 8009452:	78db      	ldrb	r3, [r3, #3]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	210e      	movs	r1, #14
 8009470:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009474:	f000 fab6 	bl	80099e4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	330b      	adds	r3, #11
 800947c:	78db      	ldrb	r3, [r3, #3]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009488:	b480      	push	{r7}
 800948a:	b08b      	sub	sp, #44	; 0x2c
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80094b0:	4b4a      	ldr	r3, [pc, #296]	; (80095dc <SHCI_GetWirelessFwInfo+0x154>)
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80094b8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80094c2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a44      	ldr	r2, [pc, #272]	; (80095e0 <SHCI_GetWirelessFwInfo+0x158>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d10f      	bne.n	80094f4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	e01a      	b.n	800952a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80094fc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009500:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	0e1b      	lsrs	r3, r3, #24
 800952e:	b2da      	uxtb	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	0c1b      	lsrs	r3, r3, #16
 8009538:	b2da      	uxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	0a1b      	lsrs	r3, r3, #8
 8009542:	b2da      	uxtb	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	091b      	lsrs	r3, r3, #4
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	b2da      	uxtb	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	b2da      	uxtb	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	0e1b      	lsrs	r3, r3, #24
 800956a:	b2da      	uxtb	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	b2da      	uxtb	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800957a:	6a3b      	ldr	r3, [r7, #32]
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	b2da      	uxtb	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	b2da      	uxtb	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	0c1b      	lsrs	r3, r3, #16
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	0e1b      	lsrs	r3, r3, #24
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	372c      	adds	r7, #44	; 0x2c
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	58004000 	.word	0x58004000
 80095e0:	a94656b9 	.word	0xa94656b9

080095e4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	4a08      	ldr	r2, [pc, #32]	; (8009614 <hci_init+0x30>)
 80095f4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80095f6:	4a08      	ldr	r2, [pc, #32]	; (8009618 <hci_init+0x34>)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80095fc:	4806      	ldr	r0, [pc, #24]	; (8009618 <hci_init+0x34>)
 80095fe:	f000 f973 	bl	80098e8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f8d4 	bl	80097b4 <TlInit>

  return;
 800960c:	bf00      	nop
}
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000754 	.word	0x20000754
 8009618:	2000072c 	.word	0x2000072c

0800961c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009622:	4822      	ldr	r0, [pc, #136]	; (80096ac <hci_user_evt_proc+0x90>)
 8009624:	f000 fe06 	bl	800a234 <LST_is_empty>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d12b      	bne.n	8009686 <hci_user_evt_proc+0x6a>
 800962e:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <hci_user_evt_proc+0x94>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d027      	beq.n	8009686 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009636:	f107 030c 	add.w	r3, r7, #12
 800963a:	4619      	mov	r1, r3
 800963c:	481b      	ldr	r0, [pc, #108]	; (80096ac <hci_user_evt_proc+0x90>)
 800963e:	f000 fe88 	bl	800a352 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009642:	4b1c      	ldr	r3, [pc, #112]	; (80096b4 <hci_user_evt_proc+0x98>)
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800964e:	2301      	movs	r3, #1
 8009650:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009652:	4b18      	ldr	r3, [pc, #96]	; (80096b4 <hci_user_evt_proc+0x98>)
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	1d3a      	adds	r2, r7, #4
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800965c:	793a      	ldrb	r2, [r7, #4]
 800965e:	4b14      	ldr	r3, [pc, #80]	; (80096b0 <hci_user_evt_proc+0x94>)
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e002      	b.n	800966a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009664:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <hci_user_evt_proc+0x94>)
 8009666:	2201      	movs	r2, #1
 8009668:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800966a:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <hci_user_evt_proc+0x94>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fc03 	bl	8009e80 <TL_MM_EvtDone>
 800967a:	e004      	b.n	8009686 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4619      	mov	r1, r3
 8009680:	480a      	ldr	r0, [pc, #40]	; (80096ac <hci_user_evt_proc+0x90>)
 8009682:	f000 fdf9 	bl	800a278 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009686:	4809      	ldr	r0, [pc, #36]	; (80096ac <hci_user_evt_proc+0x90>)
 8009688:	f000 fdd4 	bl	800a234 <LST_is_empty>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d107      	bne.n	80096a2 <hci_user_evt_proc+0x86>
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <hci_user_evt_proc+0x94>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <hci_user_evt_proc+0x90>)
 800969c:	f002 fa56 	bl	800bb4c <hci_notify_asynch_evt>
  }


  return;
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
}
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000158 	.word	0x20000158
 80096b0:	20000164 	.word	0x20000164
 80096b4:	2000072c 	.word	0x2000072c

080096b8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80096c4:	2000      	movs	r0, #0
 80096c6:	f000 f8cb 	bl	8009860 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80096ca:	2300      	movs	r3, #0
 80096cc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	885b      	ldrh	r3, [r3, #2]
 80096d2:	b21b      	sxth	r3, r3
 80096d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096d8:	b21a      	sxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	029b      	lsls	r3, r3, #10
 80096e0:	b21b      	sxth	r3, r3
 80096e2:	4313      	orrs	r3, r2
 80096e4:	b21b      	sxth	r3, r3
 80096e6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	b2d9      	uxtb	r1, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	8bbb      	ldrh	r3, [r7, #28]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f88d 	bl	8009814 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80096fa:	e04e      	b.n	800979a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80096fc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009700:	f002 fa3b 	bl	800bb7a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009704:	e043      	b.n	800978e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009706:	f107 030c 	add.w	r3, r7, #12
 800970a:	4619      	mov	r1, r3
 800970c:	4828      	ldr	r0, [pc, #160]	; (80097b0 <hci_send_req+0xf8>)
 800970e:	f000 fe20 	bl	800a352 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	7a5b      	ldrb	r3, [r3, #9]
 8009716:	2b0f      	cmp	r3, #15
 8009718:	d114      	bne.n	8009744 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	330b      	adds	r3, #11
 800971e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	b29b      	uxth	r3, r3
 8009726:	8bba      	ldrh	r2, [r7, #28]
 8009728:	429a      	cmp	r2, r3
 800972a:	d104      	bne.n	8009736 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	7812      	ldrb	r2, [r2, #0]
 8009734:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d027      	beq.n	800978e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800973e:	2301      	movs	r3, #1
 8009740:	77fb      	strb	r3, [r7, #31]
 8009742:	e024      	b.n	800978e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	330b      	adds	r3, #11
 8009748:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009750:	b29b      	uxth	r3, r3
 8009752:	8bba      	ldrh	r2, [r7, #28]
 8009754:	429a      	cmp	r2, r3
 8009756:	d114      	bne.n	8009782 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	7a9b      	ldrb	r3, [r3, #10]
 800975c:	3b03      	subs	r3, #3
 800975e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695a      	ldr	r2, [r3, #20]
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	429a      	cmp	r2, r3
 8009768:	bfa8      	it	ge
 800976a:	461a      	movge	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6918      	ldr	r0, [r3, #16]
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	1cd9      	adds	r1, r3, #3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	461a      	mov	r2, r3
 800977e:	f003 fbb1 	bl	800cee4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800978a:	2301      	movs	r3, #1
 800978c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800978e:	4808      	ldr	r0, [pc, #32]	; (80097b0 <hci_send_req+0xf8>)
 8009790:	f000 fd50 	bl	800a234 <LST_is_empty>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0b5      	beq.n	8009706 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800979a:	7ffb      	ldrb	r3, [r7, #31]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0ad      	beq.n	80096fc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80097a0:	2001      	movs	r0, #1
 80097a2:	f000 f85d 	bl	8009860 <NotifyCmdStatus>

  return 0;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	2000074c 	.word	0x2000074c

080097b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80097bc:	480f      	ldr	r0, [pc, #60]	; (80097fc <TlInit+0x48>)
 80097be:	f000 fd29 	bl	800a214 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80097c2:	4a0f      	ldr	r2, [pc, #60]	; (8009800 <TlInit+0x4c>)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80097c8:	480e      	ldr	r0, [pc, #56]	; (8009804 <TlInit+0x50>)
 80097ca:	f000 fd23 	bl	800a214 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <TlInit+0x54>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80097d4:	4b0d      	ldr	r3, [pc, #52]	; (800980c <TlInit+0x58>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <TlInit+0x5c>)
 80097e2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <TlInit+0x58>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f107 0208 	add.w	r2, r7, #8
 80097ec:	4610      	mov	r0, r2
 80097ee:	4798      	blx	r3
  }

  return;
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
}
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	2000074c 	.word	0x2000074c
 8009800:	20000160 	.word	0x20000160
 8009804:	20000158 	.word	0x20000158
 8009808:	20000164 	.word	0x20000164
 800980c:	2000072c 	.word	0x2000072c
 8009810:	080098a1 	.word	0x080098a1

08009814 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	603a      	str	r2, [r7, #0]
 800981e:	80fb      	strh	r3, [r7, #6]
 8009820:	460b      	mov	r3, r1
 8009822:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <SendCmd+0x44>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <SendCmd+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	797a      	ldrb	r2, [r7, #5]
 8009834:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009836:	4b08      	ldr	r3, [pc, #32]	; (8009858 <SendCmd+0x44>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	797a      	ldrb	r2, [r7, #5]
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f003 fb4f 	bl	800cee4 <memcpy>

  hciContext.io.Send(0,0);
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <SendCmd+0x48>)
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2100      	movs	r1, #0
 800984c:	2000      	movs	r0, #0
 800984e:	4798      	blx	r3

  return;
 8009850:	bf00      	nop
}
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000160 	.word	0x20000160
 800985c:	2000072c 	.word	0x2000072c

08009860 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d108      	bne.n	8009882 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <NotifyCmdStatus+0x3c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00d      	beq.n	8009894 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009878:	4b08      	ldr	r3, [pc, #32]	; (800989c <NotifyCmdStatus+0x3c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2000      	movs	r0, #0
 800987e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009880:	e008      	b.n	8009894 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009882:	4b06      	ldr	r3, [pc, #24]	; (800989c <NotifyCmdStatus+0x3c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800988a:	4b04      	ldr	r3, [pc, #16]	; (800989c <NotifyCmdStatus+0x3c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2001      	movs	r0, #1
 8009890:	4798      	blx	r3
  return;
 8009892:	bf00      	nop
 8009894:	bf00      	nop
}
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20000754 	.word	0x20000754

080098a0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7a5b      	ldrb	r3, [r3, #9]
 80098ac:	2b0f      	cmp	r3, #15
 80098ae:	d003      	beq.n	80098b8 <TlEvtReceived+0x18>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7a5b      	ldrb	r3, [r3, #9]
 80098b4:	2b0e      	cmp	r3, #14
 80098b6:	d107      	bne.n	80098c8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4809      	ldr	r0, [pc, #36]	; (80098e0 <TlEvtReceived+0x40>)
 80098bc:	f000 fd02 	bl	800a2c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80098c0:	2000      	movs	r0, #0
 80098c2:	f002 f94f 	bl	800bb64 <hci_cmd_resp_release>
 80098c6:	e006      	b.n	80098d6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	4806      	ldr	r0, [pc, #24]	; (80098e4 <TlEvtReceived+0x44>)
 80098cc:	f000 fcfa 	bl	800a2c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80098d0:	4804      	ldr	r0, [pc, #16]	; (80098e4 <TlEvtReceived+0x44>)
 80098d2:	f002 f93b 	bl	800bb4c <hci_notify_asynch_evt>
  }

  return;
 80098d6:	bf00      	nop
}
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	2000074c 	.word	0x2000074c
 80098e4:	20000158 	.word	0x20000158

080098e8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a05      	ldr	r2, [pc, #20]	; (8009908 <hci_register_io_bus+0x20>)
 80098f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a04      	ldr	r2, [pc, #16]	; (800990c <hci_register_io_bus+0x24>)
 80098fa:	611a      	str	r2, [r3, #16]

  return;
 80098fc:	bf00      	nop
}
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	08009bf9 	.word	0x08009bf9
 800990c:	08009c61 	.word	0x08009c61

08009910 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	4a08      	ldr	r2, [pc, #32]	; (8009940 <shci_init+0x30>)
 8009920:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009922:	4a08      	ldr	r2, [pc, #32]	; (8009944 <shci_init+0x34>)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009928:	4806      	ldr	r0, [pc, #24]	; (8009944 <shci_init+0x34>)
 800992a:	f000 f911 	bl	8009b50 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f894 	bl	8009a60 <TlInit>

  return;
 8009938:	bf00      	nop
}
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000778 	.word	0x20000778
 8009944:	20000758 	.word	0x20000758

08009948 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800994e:	4822      	ldr	r0, [pc, #136]	; (80099d8 <shci_user_evt_proc+0x90>)
 8009950:	f000 fc70 	bl	800a234 <LST_is_empty>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d12b      	bne.n	80099b2 <shci_user_evt_proc+0x6a>
 800995a:	4b20      	ldr	r3, [pc, #128]	; (80099dc <shci_user_evt_proc+0x94>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d027      	beq.n	80099b2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	4619      	mov	r1, r3
 8009968:	481b      	ldr	r0, [pc, #108]	; (80099d8 <shci_user_evt_proc+0x90>)
 800996a:	f000 fcf2 	bl	800a352 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800996e:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <shci_user_evt_proc+0x98>)
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00c      	beq.n	8009990 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800997a:	2301      	movs	r3, #1
 800997c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800997e:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <shci_user_evt_proc+0x98>)
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	1d3a      	adds	r2, r7, #4
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009988:	793a      	ldrb	r2, [r7, #4]
 800998a:	4b14      	ldr	r3, [pc, #80]	; (80099dc <shci_user_evt_proc+0x94>)
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e002      	b.n	8009996 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009990:	4b12      	ldr	r3, [pc, #72]	; (80099dc <shci_user_evt_proc+0x94>)
 8009992:	2201      	movs	r2, #1
 8009994:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <shci_user_evt_proc+0x94>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fa6d 	bl	8009e80 <TL_MM_EvtDone>
 80099a6:	e004      	b.n	80099b2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4619      	mov	r1, r3
 80099ac:	480a      	ldr	r0, [pc, #40]	; (80099d8 <shci_user_evt_proc+0x90>)
 80099ae:	f000 fc63 	bl	800a278 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80099b2:	4809      	ldr	r0, [pc, #36]	; (80099d8 <shci_user_evt_proc+0x90>)
 80099b4:	f000 fc3e 	bl	800a234 <LST_is_empty>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d107      	bne.n	80099ce <shci_user_evt_proc+0x86>
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <shci_user_evt_proc+0x94>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80099c6:	4804      	ldr	r0, [pc, #16]	; (80099d8 <shci_user_evt_proc+0x90>)
 80099c8:	f7f7 fe3d 	bl	8001646 <shci_notify_asynch_evt>
  }


  return;
 80099cc:	bf00      	nop
 80099ce:	bf00      	nop
}
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20000170 	.word	0x20000170
 80099dc:	20000180 	.word	0x20000180
 80099e0:	20000758 	.word	0x20000758

080099e4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60ba      	str	r2, [r7, #8]
 80099ec:	607b      	str	r3, [r7, #4]
 80099ee:	4603      	mov	r3, r0
 80099f0:	81fb      	strh	r3, [r7, #14]
 80099f2:	460b      	mov	r3, r1
 80099f4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80099f6:	2000      	movs	r0, #0
 80099f8:	f000 f864 	bl	8009ac4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80099fc:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <shci_send+0x74>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	89fa      	ldrh	r2, [r7, #14]
 8009a02:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <shci_send+0x74>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	7b7a      	ldrb	r2, [r7, #13]
 8009a0c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <shci_send+0x74>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	330c      	adds	r3, #12
 8009a14:	7b7a      	ldrb	r2, [r7, #13]
 8009a16:	68b9      	ldr	r1, [r7, #8]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f003 fa63 	bl	800cee4 <memcpy>

  shciContext.io.Send(0,0);
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <shci_send+0x78>)
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2100      	movs	r1, #0
 8009a24:	2000      	movs	r0, #0
 8009a26:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009a28:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009a2c:	f7f7 fe22 	bl	8001674 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f103 0008 	add.w	r0, r3, #8
 8009a36:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <shci_send+0x74>)
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <shci_send+0x74>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	3303      	adds	r3, #3
 8009a42:	461a      	mov	r2, r3
 8009a44:	f003 fa4e 	bl	800cee4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f000 f83b 	bl	8009ac4 <Cmd_SetStatus>

  return;
 8009a4e:	bf00      	nop
}
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	2000017c 	.word	0x2000017c
 8009a5c:	20000758 	.word	0x20000758

08009a60 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009a68:	4a10      	ldr	r2, [pc, #64]	; (8009aac <TlInit+0x4c>)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009a6e:	4810      	ldr	r0, [pc, #64]	; (8009ab0 <TlInit+0x50>)
 8009a70:	f000 fbd0 	bl	800a214 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a74:	2001      	movs	r0, #1
 8009a76:	f000 f825 	bl	8009ac4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a7a:	4b0e      	ldr	r3, [pc, #56]	; (8009ab4 <TlInit+0x54>)
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009a80:	4b0d      	ldr	r3, [pc, #52]	; (8009ab8 <TlInit+0x58>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <TlInit+0x5c>)
 8009a8e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <TlInit+0x60>)
 8009a92:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <TlInit+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f107 020c 	add.w	r2, r7, #12
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
  }

  return;
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
}
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	2000017c 	.word	0x2000017c
 8009ab0:	20000170 	.word	0x20000170
 8009ab4:	20000180 	.word	0x20000180
 8009ab8:	20000758 	.word	0x20000758
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b2d 	.word	0x08009b2d

08009ac4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009ad4:	4b0d      	ldr	r3, [pc, #52]	; (8009b0c <Cmd_SetStatus+0x48>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009adc:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <Cmd_SetStatus+0x48>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <Cmd_SetStatus+0x4c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009aea:	e00b      	b.n	8009b04 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009aec:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <Cmd_SetStatus+0x4c>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009af2:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <Cmd_SetStatus+0x48>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009afa:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <Cmd_SetStatus+0x48>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2001      	movs	r0, #1
 8009b00:	4798      	blx	r3
  return;
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
}
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20000778 	.word	0x20000778
 8009b10:	20000178 	.word	0x20000178

08009b14 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	f7f7 fd9e 	bl	800165e <shci_cmd_resp_release>

  return;
 8009b22:	bf00      	nop
}
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4805      	ldr	r0, [pc, #20]	; (8009b4c <TlUserEvtReceived+0x20>)
 8009b38:	f000 fbc4 	bl	800a2c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009b3c:	4803      	ldr	r0, [pc, #12]	; (8009b4c <TlUserEvtReceived+0x20>)
 8009b3e:	f7f7 fd82 	bl	8001646 <shci_notify_asynch_evt>

  return;
 8009b42:	bf00      	nop
}
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20000170 	.word	0x20000170

08009b50 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a05      	ldr	r2, [pc, #20]	; (8009b70 <shci_register_io_bus+0x20>)
 8009b5c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a04      	ldr	r2, [pc, #16]	; (8009b74 <shci_register_io_bus+0x24>)
 8009b62:	611a      	str	r2, [r3, #16]

  return;
 8009b64:	bf00      	nop
}
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	08009d0d 	.word	0x08009d0d
 8009b74:	08009d61 	.word	0x08009d61

08009b78 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009b7c:	f002 fe36 	bl	800c7ec <HW_IPCC_Enable>

  return;
 8009b80:	bf00      	nop
}
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <TL_Init>:


void TL_Init( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <TL_Init+0x48>)
 8009b8a:	4a11      	ldr	r2, [pc, #68]	; (8009bd0 <TL_Init+0x4c>)
 8009b8c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <TL_Init+0x48>)
 8009b90:	4a10      	ldr	r2, [pc, #64]	; (8009bd4 <TL_Init+0x50>)
 8009b92:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009b94:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <TL_Init+0x48>)
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <TL_Init+0x54>)
 8009b98:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <TL_Init+0x48>)
 8009b9c:	4a0f      	ldr	r2, [pc, #60]	; (8009bdc <TL_Init+0x58>)
 8009b9e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <TL_Init+0x48>)
 8009ba2:	4a0f      	ldr	r2, [pc, #60]	; (8009be0 <TL_Init+0x5c>)
 8009ba4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <TL_Init+0x48>)
 8009ba8:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <TL_Init+0x60>)
 8009baa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <TL_Init+0x48>)
 8009bae:	4a0e      	ldr	r2, [pc, #56]	; (8009be8 <TL_Init+0x64>)
 8009bb0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009bb2:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <TL_Init+0x48>)
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	; (8009bec <TL_Init+0x68>)
 8009bb6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <TL_Init+0x48>)
 8009bba:	4a0d      	ldr	r2, [pc, #52]	; (8009bf0 <TL_Init+0x6c>)
 8009bbc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <TL_Init+0x48>)
 8009bc0:	4a0c      	ldr	r2, [pc, #48]	; (8009bf4 <TL_Init+0x70>)
 8009bc2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009bc4:	f002 fe26 	bl	800c814 <HW_IPCC_Init>

  return;
 8009bc8:	bf00      	nop
}
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20030000 	.word	0x20030000
 8009bd0:	20030028 	.word	0x20030028
 8009bd4:	20030048 	.word	0x20030048
 8009bd8:	20030058 	.word	0x20030058
 8009bdc:	20030068 	.word	0x20030068
 8009be0:	20030070 	.word	0x20030070
 8009be4:	20030078 	.word	0x20030078
 8009be8:	20030080 	.word	0x20030080
 8009bec:	2003009c 	.word	0x2003009c
 8009bf0:	200300a0 	.word	0x200300a0
 8009bf4:	200300ac 	.word	0x200300ac

08009bf8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009c04:	4811      	ldr	r0, [pc, #68]	; (8009c4c <TL_BLE_Init+0x54>)
 8009c06:	f000 fb05 	bl	800a214 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009c0a:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <TL_BLE_Init+0x58>)
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <TL_BLE_Init+0x5c>)
 8009c24:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	4a08      	ldr	r2, [pc, #32]	; (8009c4c <TL_BLE_Init+0x54>)
 8009c2a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009c2c:	f002 fe08 	bl	800c840 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <TL_BLE_Init+0x60>)
 8009c36:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	4a07      	ldr	r2, [pc, #28]	; (8009c5c <TL_BLE_Init+0x64>)
 8009c3e:	6013      	str	r3, [r2, #0]

  return 0;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200300c8 	.word	0x200300c8
 8009c50:	20030000 	.word	0x20030000
 8009c54:	20030a58 	.word	0x20030a58
 8009c58:	20000784 	.word	0x20000784
 8009c5c:	20000788 	.word	0x20000788

08009c60 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <TL_BLE_SendCmd+0x34>)
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2201      	movs	r2, #1
 8009c74:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009c76:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <TL_BLE_SendCmd+0x34>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	2001      	movs	r0, #1
 8009c80:	f000 f96c 	bl	8009f5c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009c84:	f002 fde6 	bl	800c854 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20030000 	.word	0x20030000

08009c98 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c9e:	e01c      	b.n	8009cda <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009ca0:	1d3b      	adds	r3, r7, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4812      	ldr	r0, [pc, #72]	; (8009cf0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009ca6:	f000 fb54 	bl	800a352 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7a5b      	ldrb	r3, [r3, #9]
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d003      	beq.n	8009cba <HW_IPCC_BLE_RxEvtNot+0x22>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	2b0e      	cmp	r3, #14
 8009cb8:	d105      	bne.n	8009cc6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f000 f94c 	bl	8009f5c <OutputDbgTrace>
 8009cc4:	e004      	b.n	8009cd0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2003      	movs	r0, #3
 8009ccc:	f000 f946 	bl	8009f5c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009cd0:	4b08      	ldr	r3, [pc, #32]	; (8009cf4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009cda:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009cdc:	f000 faaa 	bl	800a234 <LST_is_empty>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d0dc      	beq.n	8009ca0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009ce6:	bf00      	nop
}
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	200300c8 	.word	0x200300c8
 8009cf4:	20000784 	.word	0x20000784

08009cf8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4798      	blx	r3

  return;
 8009d02:	bf00      	nop
}
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000788 	.word	0x20000788

08009d0c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009d18:	480d      	ldr	r0, [pc, #52]	; (8009d50 <TL_SYS_Init+0x44>)
 8009d1a:	f000 fa7b 	bl	800a214 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <TL_SYS_Init+0x48>)
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a08      	ldr	r2, [pc, #32]	; (8009d50 <TL_SYS_Init+0x44>)
 8009d30:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009d32:	f002 fdb1 	bl	800c898 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a07      	ldr	r2, [pc, #28]	; (8009d58 <TL_SYS_Init+0x4c>)
 8009d3c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <TL_SYS_Init+0x50>)
 8009d44:	6013      	str	r3, [r2, #0]

  return 0;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	200300d0 	.word	0x200300d0
 8009d54:	20030000 	.word	0x20030000
 8009d58:	2000078c 	.word	0x2000078c
 8009d5c:	20000790 	.word	0x20000790

08009d60 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009d6c:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <TL_SYS_SendCmd+0x34>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2210      	movs	r2, #16
 8009d74:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <TL_SYS_SendCmd+0x34>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	2004      	movs	r0, #4
 8009d80:	f000 f8ec 	bl	8009f5c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009d84:	f002 fd92 	bl	800c8ac <HW_IPCC_SYS_SendCmd>

  return 0;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20030000 	.word	0x20030000

08009d98 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4619      	mov	r1, r3
 8009da4:	2005      	movs	r0, #5
 8009da6:	f000 f8d9 	bl	8009f5c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a03      	ldr	r2, [pc, #12]	; (8009dbc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009db0:	68d2      	ldr	r2, [r2, #12]
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3

  return;
 8009db8:	bf00      	nop
}
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20030000 	.word	0x20030000
 8009dc0:	2000078c 	.word	0x2000078c

08009dc4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dca:	e00e      	b.n	8009dea <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009dcc:	1d3b      	adds	r3, r7, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	480b      	ldr	r0, [pc, #44]	; (8009e00 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009dd2:	f000 fabe 	bl	800a352 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2006      	movs	r0, #6
 8009ddc:	f000 f8be 	bl	8009f5c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009de0:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <HW_IPCC_SYS_EvtNot+0x40>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4610      	mov	r0, r2
 8009de8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dea:	4805      	ldr	r0, [pc, #20]	; (8009e00 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009dec:	f000 fa22 	bl	800a234 <LST_is_empty>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0ea      	beq.n	8009dcc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009df6:	bf00      	nop
}
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200300d0 	.word	0x200300d0
 8009e04:	20000790 	.word	0x20000790

08009e08 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009e10:	4817      	ldr	r0, [pc, #92]	; (8009e70 <TL_MM_Init+0x68>)
 8009e12:	f000 f9ff 	bl	800a214 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009e16:	4817      	ldr	r0, [pc, #92]	; (8009e74 <TL_MM_Init+0x6c>)
 8009e18:	f000 f9fc 	bl	800a214 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009e1c:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <TL_MM_Init+0x70>)
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <TL_MM_Init+0x74>)
 8009e22:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009e24:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <TL_MM_Init+0x74>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6892      	ldr	r2, [r2, #8]
 8009e2c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009e2e:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <TL_MM_Init+0x74>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68d2      	ldr	r2, [r2, #12]
 8009e36:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009e38:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <TL_MM_Init+0x74>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <TL_MM_Init+0x68>)
 8009e3e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <TL_MM_Init+0x74>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6812      	ldr	r2, [r2, #0]
 8009e48:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009e4a:	4b0c      	ldr	r3, [pc, #48]	; (8009e7c <TL_MM_Init+0x74>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6852      	ldr	r2, [r2, #4]
 8009e52:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009e54:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <TL_MM_Init+0x74>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6912      	ldr	r2, [r2, #16]
 8009e5c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009e5e:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <TL_MM_Init+0x74>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6952      	ldr	r2, [r2, #20]
 8009e66:	619a      	str	r2, [r3, #24]

  return;
 8009e68:	bf00      	nop
}
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	200300b8 	.word	0x200300b8
 8009e74:	2000077c 	.word	0x2000077c
 8009e78:	20030000 	.word	0x20030000
 8009e7c:	20000794 	.word	0x20000794

08009e80 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4807      	ldr	r0, [pc, #28]	; (8009ea8 <TL_MM_EvtDone+0x28>)
 8009e8c:	f000 fa1a 	bl	800a2c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	2000      	movs	r0, #0
 8009e94:	f000 f862 	bl	8009f5c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e98:	4804      	ldr	r0, [pc, #16]	; (8009eac <TL_MM_EvtDone+0x2c>)
 8009e9a:	f002 fd2d 	bl	800c8f8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e9e:	bf00      	nop
}
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000077c 	.word	0x2000077c
 8009eac:	08009eb1 	.word	0x08009eb1

08009eb0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009eb6:	e00c      	b.n	8009ed2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	480a      	ldr	r0, [pc, #40]	; (8009ee8 <SendFreeBuf+0x38>)
 8009ebe:	f000 fa48 	bl	800a352 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <SendFreeBuf+0x3c>)
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f9f9 	bl	800a2c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009ed2:	4805      	ldr	r0, [pc, #20]	; (8009ee8 <SendFreeBuf+0x38>)
 8009ed4:	f000 f9ae 	bl	800a234 <LST_is_empty>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ec      	beq.n	8009eb8 <SendFreeBuf+0x8>
  }

  return;
 8009ede:	bf00      	nop
}
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000077c 	.word	0x2000077c
 8009eec:	20030000 	.word	0x20030000

08009ef0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009ef4:	4805      	ldr	r0, [pc, #20]	; (8009f0c <TL_TRACES_Init+0x1c>)
 8009ef6:	f000 f98d 	bl	800a214 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009efa:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <TL_TRACES_Init+0x20>)
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	4a03      	ldr	r2, [pc, #12]	; (8009f0c <TL_TRACES_Init+0x1c>)
 8009f00:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009f02:	f002 fd2f 	bl	800c964 <HW_IPCC_TRACES_Init>

  return;
 8009f06:	bf00      	nop
}
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200300c0 	.word	0x200300c0
 8009f10:	20030000 	.word	0x20030000

08009f14 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f1a:	e008      	b.n	8009f2e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009f1c:	1d3b      	adds	r3, r7, #4
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4808      	ldr	r0, [pc, #32]	; (8009f44 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f22:	f000 fa16 	bl	800a352 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 f80d 	bl	8009f48 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f2e:	4805      	ldr	r0, [pc, #20]	; (8009f44 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f30:	f000 f980 	bl	800a234 <LST_is_empty>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0f0      	beq.n	8009f1c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009f3a:	bf00      	nop
}
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	200300c0 	.word	0x200300c0

08009f48 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	4603      	mov	r3, r0
 8009f64:	6039      	str	r1, [r7, #0]
 8009f66:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	2b06      	cmp	r3, #6
 8009f6c:	d845      	bhi.n	8009ffa <OutputDbgTrace+0x9e>
 8009f6e:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <OutputDbgTrace+0x18>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009fb5 	.word	0x08009fb5
 8009f7c:	08009fbb 	.word	0x08009fbb
 8009f80:	08009fcf 	.word	0x08009fcf
 8009f84:	08009fdb 	.word	0x08009fdb
 8009f88:	08009fe1 	.word	0x08009fe1
 8009f8c:	08009fef 	.word	0x08009fef
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	7a5b      	ldrb	r3, [r3, #9]
 8009f98:	2bff      	cmp	r3, #255	; 0xff
 8009f9a:	d005      	beq.n	8009fa8 <OutputDbgTrace+0x4c>
 8009f9c:	2bff      	cmp	r3, #255	; 0xff
 8009f9e:	dc05      	bgt.n	8009fac <OutputDbgTrace+0x50>
 8009fa0:	2b0e      	cmp	r3, #14
 8009fa2:	d005      	beq.n	8009fb0 <OutputDbgTrace+0x54>
 8009fa4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009fa6:	e001      	b.n	8009fac <OutputDbgTrace+0x50>
          break;
 8009fa8:	bf00      	nop
 8009faa:	e027      	b.n	8009ffc <OutputDbgTrace+0xa0>
          break;
 8009fac:	bf00      	nop
 8009fae:	e025      	b.n	8009ffc <OutputDbgTrace+0xa0>
          break;
 8009fb0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009fb2:	e023      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fb8:	e020      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	7a5b      	ldrb	r3, [r3, #9]
 8009fc2:	2b0e      	cmp	r3, #14
 8009fc4:	d001      	beq.n	8009fca <OutputDbgTrace+0x6e>
 8009fc6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fc8:	e000      	b.n	8009fcc <OutputDbgTrace+0x70>
          break;
 8009fca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fcc:	e016      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	7a5b      	ldrb	r3, [r3, #9]
 8009fd6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fd8:	e010      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fde:	e00d      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	7a5b      	ldrb	r3, [r3, #9]
 8009fe8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fec:	e006      	b.n	8009ffc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	7a5b      	ldrb	r3, [r3, #9]
 8009ff6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ff8:	e000      	b.n	8009ffc <OutputDbgTrace+0xa0>

    default:
      break;
 8009ffa:	bf00      	nop
  }

  return;
 8009ffc:	bf00      	nop
}
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800a014:	215c      	movs	r1, #92	; 0x5c
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f003 f81e 	bl	800d058 <strrchr>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800a022:	215c      	movs	r1, #92	; 0x5c
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f003 f817 	bl	800d058 <strrchr>
 800a02a:	4603      	mov	r3, r0
 800a02c:	3301      	adds	r3, #1
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	e00d      	b.n	800a04e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a032:	212f      	movs	r1, #47	; 0x2f
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f003 f80f 	bl	800d058 <strrchr>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800a040:	212f      	movs	r1, #47	; 0x2f
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f003 f808 	bl	800d058 <strrchr>
 800a048:	4603      	mov	r3, r0
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05e:	f3ef 8310 	mrs	r3, PRIMASK
 800a062:	60fb      	str	r3, [r7, #12]
  return(result);
 800a064:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a068:	b672      	cpsid	i
}
 800a06a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a06c:	1cbb      	adds	r3, r7, #2
 800a06e:	4619      	mov	r1, r3
 800a070:	4812      	ldr	r0, [pc, #72]	; (800a0bc <DbgTrace_TxCpltCallback+0x64>)
 800a072:	f000 fbe6 	bl	800a842 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a076:	1cbb      	adds	r3, r7, #2
 800a078:	4619      	mov	r1, r3
 800a07a:	4810      	ldr	r0, [pc, #64]	; (800a0bc <DbgTrace_TxCpltCallback+0x64>)
 800a07c:	f000 fcd2 	bl	800aa24 <CircularQueue_Sense>
 800a080:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00c      	beq.n	800a0a2 <DbgTrace_TxCpltCallback+0x4a>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f383 8810 	msr	PRIMASK, r3
}
 800a092:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a094:	887b      	ldrh	r3, [r7, #2]
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <DbgTrace_TxCpltCallback+0x68>)
 800a098:	4619      	mov	r1, r3
 800a09a:	6938      	ldr	r0, [r7, #16]
 800a09c:	f7f6 fe59 	bl	8000d52 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a0a0:	e008      	b.n	800a0b4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <DbgTrace_TxCpltCallback+0x6c>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f383 8810 	msr	PRIMASK, r3
}
 800a0b2:	bf00      	nop
}
 800a0b4:	bf00      	nop
 800a0b6:	3718      	adds	r7, #24
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000798 	.word	0x20000798
 800a0c0:	0800a059 	.word	0x0800a059
 800a0c4:	2000000d 	.word	0x2000000d

0800a0c8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a0ce:	f7f6 fe3a 	bl	8000d46 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0dc:	4903      	ldr	r1, [pc, #12]	; (800a0ec <DbgTraceInit+0x24>)
 800a0de:	4804      	ldr	r0, [pc, #16]	; (800a0f0 <DbgTraceInit+0x28>)
 800a0e0:	f000 f956 	bl	800a390 <CircularQueue_Init>
#endif 
#endif
  return;
 800a0e4:	bf00      	nop
}
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200007b8 	.word	0x200007b8
 800a0f0:	20000798 	.word	0x20000798

0800a0f4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f805 	bl	800a114 <DbgTraceWrite>
 800a10a:	4603      	mov	r3, r0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08a      	sub	sp, #40	; 0x28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a124:	f3ef 8310 	mrs	r3, PRIMASK
 800a128:	61bb      	str	r3, [r7, #24]
  return(result);
 800a12a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a12c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d102      	bne.n	800a13c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a136:	2300      	movs	r3, #0
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
 800a13a:	e037      	b.n	800a1ac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d006      	beq.n	800a150 <DbgTraceWrite+0x3c>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d003      	beq.n	800a150 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
 800a14e:	e02d      	b.n	800a1ac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d02a      	beq.n	800a1ac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a15a:	b672      	cpsid	i
}
 800a15c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	b29a      	uxth	r2, r3
 800a162:	2301      	movs	r3, #1
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	4814      	ldr	r0, [pc, #80]	; (800a1b8 <DbgTraceWrite+0xa4>)
 800a168:	f000 f944 	bl	800a3f4 <CircularQueue_Add>
 800a16c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d015      	beq.n	800a1a0 <DbgTraceWrite+0x8c>
 800a174:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <DbgTraceWrite+0xa8>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d010      	beq.n	800a1a0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a17e:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <DbgTraceWrite+0xa8>)
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f383 8810 	msr	PRIMASK, r3
}
 800a18e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	b29b      	uxth	r3, r3
 800a194:	4a0a      	ldr	r2, [pc, #40]	; (800a1c0 <DbgTraceWrite+0xac>)
 800a196:	4619      	mov	r1, r3
 800a198:	69f8      	ldr	r0, [r7, #28]
 800a19a:	f7f6 fdda 	bl	8000d52 <DbgOutputTraces>
 800a19e:	e005      	b.n	800a1ac <DbgTraceWrite+0x98>
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f383 8810 	msr	PRIMASK, r3
}
 800a1aa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	; 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000798 	.word	0x20000798
 800a1bc:	2000000d 	.word	0x2000000d
 800a1c0:	0800a059 	.word	0x0800a059

0800a1c4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <OTP_Read+0x48>)
 800a1d0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1d2:	e002      	b.n	800a1da <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3b08      	subs	r3, #8
 800a1d8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3307      	adds	r3, #7
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	79fa      	ldrb	r2, [r7, #7]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d003      	beq.n	800a1ee <OTP_Read+0x2a>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <OTP_Read+0x4c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d1f2      	bne.n	800a1d4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	79fa      	ldrb	r2, [r7, #7]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d001      	beq.n	800a1fe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	1fff73f8 	.word	0x1fff73f8
 800a210:	1fff7000 	.word	0x1fff7000

0800a214 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	605a      	str	r2, [r3, #4]
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23c:	f3ef 8310 	mrs	r3, PRIMASK
 800a240:	60fb      	str	r3, [r7, #12]
  return(result);
 800a242:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a244:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a246:	b672      	cpsid	i
}
 800a248:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d102      	bne.n	800a25a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
 800a258:	e001      	b.n	800a25e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	75fb      	strb	r3, [r7, #23]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f383 8810 	msr	PRIMASK, r3
}
 800a268:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a282:	f3ef 8310 	mrs	r3, PRIMASK
 800a286:	60fb      	str	r3, [r7, #12]
  return(result);
 800a288:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a28a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a28c:	b672      	cpsid	i
}
 800a28e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	605a      	str	r2, [r3, #4]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f383 8810 	msr	PRIMASK, r3
}
 800a2b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2b8:	bf00      	nop
 800a2ba:	371c      	adds	r7, #28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2d8:	b672      	cpsid	i
}
 800a2da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f383 8810 	msr	PRIMASK, r3
}
 800a302:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a304:	bf00      	nop
 800a306:	371c      	adds	r7, #28
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a318:	f3ef 8310 	mrs	r3, PRIMASK
 800a31c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a31e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a322:	b672      	cpsid	i
}
 800a324:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6852      	ldr	r2, [r2, #4]
 800a338:	605a      	str	r2, [r3, #4]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	f383 8810 	msr	PRIMASK, r3
}
 800a344:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a346:	bf00      	nop
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a35c:	f3ef 8310 	mrs	r3, PRIMASK
 800a360:	60fb      	str	r3, [r7, #12]
  return(result);
 800a362:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a366:	b672      	cpsid	i
}
 800a368:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff ffca 	bl	800a310 <LST_remove_node>
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f383 8810 	msr	PRIMASK, r3
}
 800a386:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a388:	bf00      	nop
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	887a      	ldrh	r2, [r7, #2]
 800a3c6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	7e3a      	ldrb	r2, [r7, #24]
 800a3cc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a3ce:	7e3b      	ldrb	r3, [r7, #24]
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d006      	beq.n	800a3e6 <CircularQueue_Init+0x56>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	891b      	ldrh	r3, [r3, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e4:	e000      	b.n	800a3e8 <CircularQueue_Init+0x58>
  }
  return 0;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08e      	sub	sp, #56	; 0x38
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4613      	mov	r3, r2
 800a402:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a408:	2300      	movs	r3, #0
 800a40a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a40c:	2300      	movs	r3, #0
 800a40e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a410:	2300      	movs	r3, #0
 800a412:	62bb      	str	r3, [r7, #40]	; 0x28
 800a414:	2300      	movs	r3, #0
 800a416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a418:	2300      	movs	r3, #0
 800a41a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a41c:	2300      	movs	r3, #0
 800a41e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	891b      	ldrh	r3, [r3, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <CircularQueue_Add+0x38>
 800a428:	2302      	movs	r3, #2
 800a42a:	e000      	b.n	800a42e <CircularQueue_Add+0x3a>
 800a42c:	2300      	movs	r3, #0
 800a42e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d02a      	beq.n	800a48e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	891b      	ldrh	r3, [r3, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d123      	bne.n	800a488 <CircularQueue_Add+0x94>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	4413      	add	r3, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6819      	ldr	r1, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	1c58      	adds	r0, r3, #1
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	4298      	cmp	r0, r3
 800a45e:	d306      	bcc.n	800a46e <CircularQueue_Add+0x7a>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6918      	ldr	r0, [r3, #16]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	1ac3      	subs	r3, r0, r3
 800a46a:	3301      	adds	r3, #1
 800a46c:	e002      	b.n	800a474 <CircularQueue_Add+0x80>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	3301      	adds	r3, #1
 800a474:	440b      	add	r3, r1
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4413      	add	r3, r2
 800a480:	b29b      	uxth	r3, r3
 800a482:	3302      	adds	r3, #2
 800a484:	b29b      	uxth	r3, r3
 800a486:	e001      	b.n	800a48c <CircularQueue_Add+0x98>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	891b      	ldrh	r3, [r3, #8]
 800a48c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	891b      	ldrh	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	891b      	ldrh	r3, [r3, #8]
 800a49a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d307      	bcc.n	800a4b8 <CircularQueue_Add+0xc4>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6919      	ldr	r1, [r3, #16]
 800a4b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4b2:	440b      	add	r3, r1
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	e000      	b.n	800a4ba <CircularQueue_Add+0xc6>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a4bc:	88fa      	ldrh	r2, [r7, #6]
 800a4be:	7ffb      	ldrb	r3, [r7, #31]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d80b      	bhi.n	800a4e8 <CircularQueue_Add+0xf4>
 800a4d0:	88fa      	ldrh	r2, [r7, #6]
 800a4d2:	7ffb      	ldrb	r3, [r7, #31]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4de:	fb01 f202 	mul.w	r2, r1, r2
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e000      	b.n	800a4ea <CircularQueue_Add+0xf6>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a4ec:	7dfa      	ldrb	r2, [r7, #23]
 800a4ee:	7ffb      	ldrb	r3, [r7, #31]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bf8c      	ite	hi
 800a4f4:	2301      	movhi	r3, #1
 800a4f6:	2300      	movls	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a4fc:	7fbb      	ldrb	r3, [r7, #30]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d008      	beq.n	800a514 <CircularQueue_Add+0x120>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	7f1b      	ldrb	r3, [r3, #28]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <CircularQueue_Add+0x120>
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	b29b      	uxth	r3, r3
 800a512:	e000      	b.n	800a516 <CircularQueue_Add+0x122>
 800a514:	8bbb      	ldrh	r3, [r7, #28]
 800a516:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a518:	7fbb      	ldrb	r3, [r7, #30]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d008      	beq.n	800a530 <CircularQueue_Add+0x13c>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	7f1b      	ldrb	r3, [r3, #28]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <CircularQueue_Add+0x13c>
 800a52a:	7ffb      	ldrb	r3, [r7, #31]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	e000      	b.n	800a532 <CircularQueue_Add+0x13e>
 800a530:	8bbb      	ldrh	r3, [r7, #28]
 800a532:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 817e 	beq.w	800a838 <CircularQueue_Add+0x444>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	695a      	ldr	r2, [r3, #20]
 800a540:	88f9      	ldrh	r1, [r7, #6]
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	440b      	add	r3, r1
 800a546:	4619      	mov	r1, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	fb01 f303 	mul.w	r3, r1, r3
 800a54e:	441a      	add	r2, r3
 800a550:	8bbb      	ldrh	r3, [r7, #28]
 800a552:	441a      	add	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	f200 816d 	bhi.w	800a838 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a55e:	2300      	movs	r3, #0
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a562:	e14a      	b.n	800a7fa <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	691a      	ldr	r2, [r3, #16]
 800a568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a56a:	441a      	add	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d307      	bcc.n	800a584 <CircularQueue_Add+0x190>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a57a:	441a      	add	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	e003      	b.n	800a58c <CircularQueue_Add+0x198>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	691a      	ldr	r2, [r3, #16]
 800a588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a58a:	4413      	add	r3, r2
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	891b      	ldrh	r3, [r3, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d130      	bne.n	800a600 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	6339      	str	r1, [r7, #48]	; 0x30
 800a5a8:	4413      	add	r3, r2
 800a5aa:	88fa      	ldrh	r2, [r7, #6]
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d304      	bcc.n	800a5c4 <CircularQueue_Add+0x1d0>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	e000      	b.n	800a5c6 <CircularQueue_Add+0x1d2>
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a5c8:	88fb      	ldrh	r3, [r7, #6]
 800a5ca:	0a1b      	lsrs	r3, r3, #8
 800a5cc:	b298      	uxth	r0, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	1c59      	adds	r1, r3, #1
 800a5d6:	6339      	str	r1, [r7, #48]	; 0x30
 800a5d8:	4413      	add	r3, r2
 800a5da:	b2c2      	uxtb	r2, r0
 800a5dc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d304      	bcc.n	800a5f2 <CircularQueue_Add+0x1fe>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	e000      	b.n	800a5f4 <CircularQueue_Add+0x200>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	1c9a      	adds	r2, r3, #2
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a600:	88fa      	ldrh	r2, [r7, #6]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6859      	ldr	r1, [r3, #4]
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	1acb      	subs	r3, r1, r3
 800a60a:	4293      	cmp	r3, r2
 800a60c:	bf28      	it	cs
 800a60e:	4613      	movcs	r3, r2
 800a610:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a616:	429a      	cmp	r2, r3
 800a618:	d007      	beq.n	800a62a <CircularQueue_Add+0x236>
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61e:	429a      	cmp	r2, r3
 800a620:	d225      	bcs.n	800a66e <CircularQueue_Add+0x27a>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	7f1b      	ldrb	r3, [r3, #28]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d121      	bne.n	800a66e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	18d0      	adds	r0, r2, r3
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a636:	fb02 f303 	mul.w	r3, r2, r3
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4413      	add	r3, r2
 800a63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a640:	4619      	mov	r1, r3
 800a642:	f002 fc4f 	bl	800cee4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	695a      	ldr	r2, [r3, #20]
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	441a      	add	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a652:	2300      	movs	r3, #0
 800a654:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a65a:	88fa      	ldrh	r2, [r7, #6]
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a662:	7ffb      	ldrb	r3, [r7, #31]
 800a664:	b29a      	uxth	r2, r3
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	4413      	add	r3, r2
 800a66a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a66c:	e0a4      	b.n	800a7b8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 80a1 	beq.w	800a7b8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	7f1b      	ldrb	r3, [r3, #28]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d03a      	beq.n	800a6f8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	891b      	ldrh	r3, [r3, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10d      	bne.n	800a6a6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	3b02      	subs	r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	22ff      	movs	r2, #255	; 0xff
 800a696:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	22ff      	movs	r2, #255	; 0xff
 800a6a4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	695a      	ldr	r2, [r3, #20]
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	441a      	add	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	891b      	ldrh	r3, [r3, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d16f      	bne.n	800a7a6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	6339      	str	r1, [r7, #48]	; 0x30
 800a6d0:	4413      	add	r3, r2
 800a6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d4:	b2d2      	uxtb	r2, r2
 800a6d6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	0a18      	lsrs	r0, r3, #8
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	6339      	str	r1, [r7, #48]	; 0x30
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b2c2      	uxtb	r2, r0
 800a6ea:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	1c9a      	adds	r2, r3, #2
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	615a      	str	r2, [r3, #20]
 800a6f6:	e056      	b.n	800a7a6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	7f1b      	ldrb	r3, [r3, #28]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d050      	beq.n	800a7a6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	891b      	ldrh	r3, [r3, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d14a      	bne.n	800a7a2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	3b02      	subs	r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	0a19      	lsrs	r1, r3, #8
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	3b01      	subs	r3, #1
 800a728:	4413      	add	r3, r2
 800a72a:	b2ca      	uxtb	r2, r1
 800a72c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	18d0      	adds	r0, r2, r3
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a73a:	fb02 f303 	mul.w	r3, r2, r3
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	4413      	add	r3, r2
 800a742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a744:	4619      	mov	r1, r3
 800a746:	f002 fbcd 	bl	800cee4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	695a      	ldr	r2, [r3, #20]
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a76c:	2300      	movs	r3, #0
 800a76e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	1c59      	adds	r1, r3, #1
 800a778:	6339      	str	r1, [r7, #48]	; 0x30
 800a77a:	4413      	add	r3, r2
 800a77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	0a18      	lsrs	r0, r3, #8
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	1c59      	adds	r1, r3, #1
 800a78e:	6339      	str	r1, [r7, #48]	; 0x30
 800a790:	4413      	add	r3, r2
 800a792:	b2c2      	uxtb	r2, r0
 800a794:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	1c9a      	adds	r2, r3, #2
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	615a      	str	r2, [r3, #20]
 800a7a0:	e001      	b.n	800a7a6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e049      	b.n	800a83a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a7a6:	7ffb      	ldrb	r3, [r7, #31]
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	4413      	add	r3, r2
 800a7b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d015      	beq.n	800a7ea <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	18d0      	adds	r0, r2, r3
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ca:	fb03 f202 	mul.w	r2, r3, r2
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	4413      	add	r3, r2
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d8:	4619      	mov	r1, r3
 800a7da:	f002 fb83 	bl	800cee4 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	695a      	ldr	r2, [r3, #20]
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	441a      	add	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	f4ff aeb0 	bcc.w	800a564 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6919      	ldr	r1, [r3, #16]
 800a80c:	7ffb      	ldrb	r3, [r7, #31]
 800a80e:	4419      	add	r1, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4299      	cmp	r1, r3
 800a816:	d307      	bcc.n	800a828 <CircularQueue_Add+0x434>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6919      	ldr	r1, [r3, #16]
 800a81c:	7ffb      	ldrb	r3, [r7, #31]
 800a81e:	4419      	add	r1, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	1acb      	subs	r3, r1, r3
 800a826:	e003      	b.n	800a830 <CircularQueue_Add+0x43c>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6919      	ldr	r1, [r3, #16]
 800a82c:	7ffb      	ldrb	r3, [r7, #31]
 800a82e:	440b      	add	r3, r1
 800a830:	4413      	add	r3, r2
 800a832:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	e000      	b.n	800a83a <CircularQueue_Add+0x446>
    return NULL;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3738      	adds	r7, #56	; 0x38
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	891b      	ldrh	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <CircularQueue_Remove+0x1e>
 800a85c:	2302      	movs	r3, #2
 800a85e:	e000      	b.n	800a862 <CircularQueue_Remove+0x20>
 800a860:	2300      	movs	r3, #0
 800a862:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80cc 	beq.w	800aa0a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	891b      	ldrh	r3, [r3, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d121      	bne.n	800a8be <CircularQueue_Remove+0x7c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	4413      	add	r3, r2
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6819      	ldr	r1, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	1c58      	adds	r0, r3, #1
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	4298      	cmp	r0, r3
 800a898:	d306      	bcc.n	800a8a8 <CircularQueue_Remove+0x66>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68d8      	ldr	r0, [r3, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	1ac3      	subs	r3, r0, r3
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	e002      	b.n	800a8ae <CircularQueue_Remove+0x6c>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	440b      	add	r3, r1
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	021b      	lsls	r3, r3, #8
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	e001      	b.n	800a8c2 <CircularQueue_Remove+0x80>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	891b      	ldrh	r3, [r3, #8]
 800a8c2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7f1b      	ldrb	r3, [r3, #28]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d057      	beq.n	800a980 <CircularQueue_Remove+0x13e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	7f1b      	ldrb	r3, [r3, #28]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d151      	bne.n	800a980 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8dc:	897b      	ldrh	r3, [r7, #10]
 800a8de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d103      	bne.n	800a8ee <CircularQueue_Remove+0xac>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	891b      	ldrh	r3, [r3, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d012      	beq.n	800a914 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d942      	bls.n	800a980 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	891b      	ldrh	r3, [r3, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d03e      	beq.n	800a980 <CircularQueue_Remove+0x13e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	8912      	ldrh	r2, [r2, #8]
 800a910:	4293      	cmp	r3, r2
 800a912:	d235      	bcs.n	800a980 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	695a      	ldr	r2, [r3, #20]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68d9      	ldr	r1, [r3, #12]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	1acb      	subs	r3, r1, r3
 800a922:	441a      	add	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	891b      	ldrh	r3, [r3, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d121      	bne.n	800a97a <CircularQueue_Remove+0x138>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6819      	ldr	r1, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	1c58      	adds	r0, r3, #1
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	4298      	cmp	r0, r3
 800a954:	d306      	bcc.n	800a964 <CircularQueue_Remove+0x122>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68d8      	ldr	r0, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	1ac3      	subs	r3, r0, r3
 800a960:	3301      	adds	r3, #1
 800a962:	e002      	b.n	800a96a <CircularQueue_Remove+0x128>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	440b      	add	r3, r1
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	b29b      	uxth	r3, r3
 800a974:	4413      	add	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	e001      	b.n	800a97e <CircularQueue_Remove+0x13c>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	891b      	ldrh	r3, [r3, #8]
 800a97e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68d9      	ldr	r1, [r3, #12]
 800a988:	7a7b      	ldrb	r3, [r7, #9]
 800a98a:	4419      	add	r1, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	4299      	cmp	r1, r3
 800a992:	d307      	bcc.n	800a9a4 <CircularQueue_Remove+0x162>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68d9      	ldr	r1, [r3, #12]
 800a998:	7a7b      	ldrb	r3, [r7, #9]
 800a99a:	4419      	add	r1, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	1acb      	subs	r3, r1, r3
 800a9a2:	e003      	b.n	800a9ac <CircularQueue_Remove+0x16a>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68d9      	ldr	r1, [r3, #12]
 800a9a8:	7a7b      	ldrb	r3, [r7, #9]
 800a9aa:	440b      	add	r3, r1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	8979      	ldrh	r1, [r7, #10]
 800a9b6:	7a7a      	ldrb	r2, [r7, #9]
 800a9b8:	440a      	add	r2, r1
 800a9ba:	1a9a      	subs	r2, r3, r2
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01b      	beq.n	800aa00 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	897b      	ldrh	r3, [r7, #10]
 800a9ce:	441a      	add	r2, r3
 800a9d0:	7a7b      	ldrb	r3, [r7, #9]
 800a9d2:	441a      	add	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d309      	bcc.n	800a9f0 <CircularQueue_Remove+0x1ae>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68da      	ldr	r2, [r3, #12]
 800a9e0:	897b      	ldrh	r3, [r7, #10]
 800a9e2:	441a      	add	r2, r3
 800a9e4:	7a7b      	ldrb	r3, [r7, #9]
 800a9e6:	441a      	add	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	e005      	b.n	800a9fc <CircularQueue_Remove+0x1ba>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	897b      	ldrh	r3, [r7, #10]
 800a9f6:	441a      	add	r2, r3
 800a9f8:	7a7b      	ldrb	r3, [r7, #9]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	1e5a      	subs	r2, r3, #1
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	897a      	ldrh	r2, [r7, #10]
 800aa14:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800aa16:	68fb      	ldr	r3, [r7, #12]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	891b      	ldrh	r3, [r3, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <CircularQueue_Sense+0x1e>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e000      	b.n	800aa44 <CircularQueue_Sense+0x20>
 800aa42:	2300      	movs	r3, #0
 800aa44:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 8090 	beq.w	800ab78 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	891b      	ldrh	r3, [r3, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d121      	bne.n	800aaaa <CircularQueue_Sense+0x86>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6819      	ldr	r1, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	1c58      	adds	r0, r3, #1
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	4298      	cmp	r0, r3
 800aa84:	d306      	bcc.n	800aa94 <CircularQueue_Sense+0x70>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68d8      	ldr	r0, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	1ac3      	subs	r3, r0, r3
 800aa90:	3301      	adds	r3, #1
 800aa92:	e002      	b.n	800aa9a <CircularQueue_Sense+0x76>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	440b      	add	r3, r1
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	e001      	b.n	800aaae <CircularQueue_Sense+0x8a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7f1b      	ldrb	r3, [r3, #28]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d048      	beq.n	800ab4e <CircularQueue_Sense+0x12a>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7f1b      	ldrb	r3, [r3, #28]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d142      	bne.n	800ab4e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aac8:	8a7b      	ldrh	r3, [r7, #18]
 800aaca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aace:	4293      	cmp	r3, r2
 800aad0:	d103      	bne.n	800aada <CircularQueue_Sense+0xb6>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	891b      	ldrh	r3, [r3, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d012      	beq.n	800ab00 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68da      	ldr	r2, [r3, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d933      	bls.n	800ab4e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	891b      	ldrh	r3, [r3, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d02f      	beq.n	800ab4e <CircularQueue_Sense+0x12a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	8912      	ldrh	r2, [r2, #8]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d226      	bcs.n	800ab4e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	891b      	ldrh	r3, [r3, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d11d      	bne.n	800ab48 <CircularQueue_Sense+0x124>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6819      	ldr	r1, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	1c58      	adds	r0, r3, #1
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	4298      	cmp	r0, r3
 800ab26:	d305      	bcc.n	800ab34 <CircularQueue_Sense+0x110>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	1ac3      	subs	r3, r0, r3
 800ab30:	3301      	adds	r3, #1
 800ab32:	e001      	b.n	800ab38 <CircularQueue_Sense+0x114>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3301      	adds	r3, #1
 800ab38:	440b      	add	r3, r1
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	4413      	add	r3, r2
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	e001      	b.n	800ab4c <CircularQueue_Sense+0x128>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	891b      	ldrh	r3, [r3, #8]
 800ab4c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	7af9      	ldrb	r1, [r7, #11]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4419      	add	r1, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d306      	bcc.n	800ab6e <CircularQueue_Sense+0x14a>
 800ab60:	7af9      	ldrb	r1, [r7, #11]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4419      	add	r1, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	1acb      	subs	r3, r1, r3
 800ab6c:	e002      	b.n	800ab74 <CircularQueue_Sense+0x150>
 800ab6e:	7af9      	ldrb	r1, [r7, #11]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	440b      	add	r3, r1
 800ab74:	4413      	add	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	8a7a      	ldrh	r2, [r7, #18]
 800ab82:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ab84:	697b      	ldr	r3, [r7, #20]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ab98:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <LL_FLASH_GetUDN+0x14>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	1fff7580 	.word	0x1fff7580

0800abac <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800abb0:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <LL_FLASH_GetDeviceID+0x14>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	b2db      	uxtb	r3, r3
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	1fff7584 	.word	0x1fff7584

0800abc4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800abc8:	4b03      	ldr	r3, [pc, #12]	; (800abd8 <LL_FLASH_GetSTCompanyID+0x14>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	0a1b      	lsrs	r3, r3, #8
}
 800abce:	4618      	mov	r0, r3
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	1fff7584 	.word	0x1fff7584

0800abdc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800abdc:	b5b0      	push	{r4, r5, r7, lr}
 800abde:	b090      	sub	sp, #64	; 0x40
 800abe0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800abe2:	2392      	movs	r3, #146	; 0x92
 800abe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800abe8:	4b48      	ldr	r3, [pc, #288]	; (800ad0c <APP_BLE_Init+0x130>)
 800abea:	1d3c      	adds	r4, r7, #4
 800abec:	461d      	mov	r5, r3
 800abee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800abfe:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ac02:	f000 fbd3 	bl	800b3ac <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ac06:	2101      	movs	r1, #1
 800ac08:	2002      	movs	r0, #2
 800ac0a:	f001 fed3 	bl	800c9b4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ac0e:	4a40      	ldr	r2, [pc, #256]	; (800ad10 <APP_BLE_Init+0x134>)
 800ac10:	2100      	movs	r1, #0
 800ac12:	2004      	movs	r0, #4
 800ac14:	f001 fffa 	bl	800cc0c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ac18:	1d3b      	adds	r3, r7, #4
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe fbf0 	bl	8009400 <SHCI_C2_BLE_Init>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800ac26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d012      	beq.n	800ac54 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800ac2e:	4839      	ldr	r0, [pc, #228]	; (800ad14 <APP_BLE_Init+0x138>)
 800ac30:	f7ff f9ea 	bl	800a008 <DbgTraceGetFileName>
 800ac34:	4601      	mov	r1, r0
 800ac36:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800ac3a:	4a37      	ldr	r2, [pc, #220]	; (800ad18 <APP_BLE_Init+0x13c>)
 800ac3c:	4837      	ldr	r0, [pc, #220]	; (800ad1c <APP_BLE_Init+0x140>)
 800ac3e:	f002 f967 	bl	800cf10 <iprintf>
 800ac42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac46:	4619      	mov	r1, r3
 800ac48:	4835      	ldr	r0, [pc, #212]	; (800ad20 <APP_BLE_Init+0x144>)
 800ac4a:	f002 f961 	bl	800cf10 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ac4e:	f7f7 feb1 	bl	80029b4 <Error_Handler>
 800ac52:	e00c      	b.n	800ac6e <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800ac54:	482f      	ldr	r0, [pc, #188]	; (800ad14 <APP_BLE_Init+0x138>)
 800ac56:	f7ff f9d7 	bl	800a008 <DbgTraceGetFileName>
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800ac60:	4a2d      	ldr	r2, [pc, #180]	; (800ad18 <APP_BLE_Init+0x13c>)
 800ac62:	482e      	ldr	r0, [pc, #184]	; (800ad1c <APP_BLE_Init+0x140>)
 800ac64:	f002 f954 	bl	800cf10 <iprintf>
 800ac68:	482e      	ldr	r0, [pc, #184]	; (800ad24 <APP_BLE_Init+0x148>)
 800ac6a:	f002 f951 	bl	800cf10 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ac6e:	f000 fbb3 	bl	800b3d8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ac72:	f7fe fb1f 	bl	80092b4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac76:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <APP_BLE_Init+0x14c>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ac7e:	4b2a      	ldr	r3, [pc, #168]	; (800ad28 <APP_BLE_Init+0x14c>)
 800ac80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac84:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ac86:	4a29      	ldr	r2, [pc, #164]	; (800ad2c <APP_BLE_Init+0x150>)
 800ac88:	2100      	movs	r1, #0
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	f001 ffbe 	bl	800cc0c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ac90:	2006      	movs	r0, #6
 800ac92:	f7fe f982 	bl	8008f9a <aci_hal_set_radio_activity_mask>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ac9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d010      	beq.n	800acc6 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800aca4:	481b      	ldr	r0, [pc, #108]	; (800ad14 <APP_BLE_Init+0x138>)
 800aca6:	f7ff f9af 	bl	800a008 <DbgTraceGetFileName>
 800acaa:	4601      	mov	r1, r0
 800acac:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800acb0:	4a19      	ldr	r2, [pc, #100]	; (800ad18 <APP_BLE_Init+0x13c>)
 800acb2:	481a      	ldr	r0, [pc, #104]	; (800ad1c <APP_BLE_Init+0x140>)
 800acb4:	f002 f92c 	bl	800cf10 <iprintf>
 800acb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acbc:	4619      	mov	r1, r3
 800acbe:	481c      	ldr	r0, [pc, #112]	; (800ad30 <APP_BLE_Init+0x154>)
 800acc0:	f002 f926 	bl	800cf10 <iprintf>
 800acc4:	e00c      	b.n	800ace0 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800acc6:	4813      	ldr	r0, [pc, #76]	; (800ad14 <APP_BLE_Init+0x138>)
 800acc8:	f7ff f99e 	bl	800a008 <DbgTraceGetFileName>
 800accc:	4601      	mov	r1, r0
 800acce:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800acd2:	4a11      	ldr	r2, [pc, #68]	; (800ad18 <APP_BLE_Init+0x13c>)
 800acd4:	4811      	ldr	r0, [pc, #68]	; (800ad1c <APP_BLE_Init+0x140>)
 800acd6:	f002 f91b 	bl	800cf10 <iprintf>
 800acda:	4816      	ldr	r0, [pc, #88]	; (800ad34 <APP_BLE_Init+0x158>)
 800acdc:	f002 f918 	bl	800cf10 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800ace0:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <APP_BLE_Init+0x15c>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800ace6:	4b15      	ldr	r3, [pc, #84]	; (800ad3c <APP_BLE_Init+0x160>)
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800acec:	f000 ffe2 	bl	800bcb4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800acf0:	4b0d      	ldr	r3, [pc, #52]	; (800ad28 <APP_BLE_Init+0x14c>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <APP_BLE_Init+0x14c>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800acfc:	2001      	movs	r0, #1
 800acfe:	f000 fdff 	bl	800b900 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ad02:	bf00      	nop
}
 800ad04:	3740      	adds	r7, #64	; 0x40
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bdb0      	pop	{r4, r5, r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0800e4cc 	.word	0x0800e4cc
 800ad10:	0800961d 	.word	0x0800961d
 800ad14:	0800e3c0 	.word	0x0800e3c0
 800ad18:	0800f7b4 	.word	0x0800f7b4
 800ad1c:	0800e3dc 	.word	0x0800e3dc
 800ad20:	0800e3f0 	.word	0x0800e3f0
 800ad24:	0800e428 	.word	0x0800e428
 800ad28:	20000184 	.word	0x20000184
 800ad2c:	0800ba85 	.word	0x0800ba85
 800ad30:	0800e450 	.word	0x0800e450
 800ad34:	0800e494 	.word	0x0800e494
 800ad38:	20026fc4 	.word	0x20026fc4
 800ad3c:	20026fc5 	.word	0x20026fc5

0800ad40 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ad40:	b5b0      	push	{r4, r5, r7, lr}
 800ad42:	b08e      	sub	sp, #56	; 0x38
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ad48:	2392      	movs	r3, #146	; 0x92
 800ad4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3301      	adds	r3, #1
 800ad52:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2bff      	cmp	r3, #255	; 0xff
 800ad5a:	f000 811d 	beq.w	800af98 <SVCCTL_App_Notification+0x258>
 800ad5e:	2bff      	cmp	r3, #255	; 0xff
 800ad60:	f300 82e9 	bgt.w	800b336 <SVCCTL_App_Notification+0x5f6>
 800ad64:	2b05      	cmp	r3, #5
 800ad66:	d002      	beq.n	800ad6e <SVCCTL_App_Notification+0x2e>
 800ad68:	2b3e      	cmp	r3, #62	; 0x3e
 800ad6a:	d042      	beq.n	800adf2 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ad6c:	e2e3      	b.n	800b336 <SVCCTL_App_Notification+0x5f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	3302      	adds	r3, #2
 800ad72:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	4bb2      	ldr	r3, [pc, #712]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800ad7e:	8adb      	ldrh	r3, [r3, #22]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d128      	bne.n	800add6 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ad84:	4bb0      	ldr	r3, [pc, #704]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ad8a:	4baf      	ldr	r3, [pc, #700]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ad92:	48ae      	ldr	r0, [pc, #696]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800ad94:	f7ff f938 	bl	800a008 <DbgTraceGetFileName>
 800ad98:	4601      	mov	r1, r0
 800ad9a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800ad9e:	4aac      	ldr	r2, [pc, #688]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800ada0:	48ac      	ldr	r0, [pc, #688]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800ada2:	f002 f8b5 	bl	800cf10 <iprintf>
 800ada6:	48ac      	ldr	r0, [pc, #688]	; (800b058 <SVCCTL_App_Notification+0x318>)
 800ada8:	f002 f94e 	bl	800d048 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800adac:	48a7      	ldr	r0, [pc, #668]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800adae:	f7ff f92b 	bl	800a008 <DbgTraceGetFileName>
 800adb2:	4601      	mov	r1, r0
 800adb4:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 800adb8:	4aa5      	ldr	r2, [pc, #660]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800adba:	48a6      	ldr	r0, [pc, #664]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800adbc:	f002 f8a8 	bl	800cf10 <iprintf>
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	4619      	mov	r1, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	78db      	ldrb	r3, [r3, #3]
 800adce:	461a      	mov	r2, r3
 800add0:	48a2      	ldr	r0, [pc, #648]	; (800b05c <SVCCTL_App_Notification+0x31c>)
 800add2:	f002 f89d 	bl	800cf10 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800add6:	2001      	movs	r0, #1
 800add8:	f000 fd92 	bl	800b900 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800addc:	4ba0      	ldr	r3, [pc, #640]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800adde:	2201      	movs	r2, #1
 800ade0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ade2:	4b99      	ldr	r3, [pc, #612]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800ade4:	8ada      	ldrh	r2, [r3, #22]
 800ade6:	4b9e      	ldr	r3, [pc, #632]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800ade8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800adea:	489d      	ldr	r0, [pc, #628]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800adec:	f000 ff4e 	bl	800bc8c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800adf0:	e2a4      	b.n	800b33c <SVCCTL_App_Notification+0x5fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	3302      	adds	r3, #2
 800adf6:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d042      	beq.n	800ae86 <SVCCTL_App_Notification+0x146>
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	f040 80c7 	bne.w	800af94 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ae0c:	488f      	ldr	r0, [pc, #572]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800ae0e:	f7ff f8fb 	bl	800a008 <DbgTraceGetFileName>
 800ae12:	4601      	mov	r1, r0
 800ae14:	f240 13d3 	movw	r3, #467	; 0x1d3
 800ae18:	4a8d      	ldr	r2, [pc, #564]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800ae1a:	488e      	ldr	r0, [pc, #568]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800ae1c:	f002 f878 	bl	800cf10 <iprintf>
 800ae20:	4890      	ldr	r0, [pc, #576]	; (800b064 <SVCCTL_App_Notification+0x324>)
 800ae22:	f002 f911 	bl	800d048 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ae26:	4889      	ldr	r0, [pc, #548]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800ae28:	f7ff f8ee 	bl	800a008 <DbgTraceGetFileName>
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 800ae32:	4a87      	ldr	r2, [pc, #540]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800ae34:	4887      	ldr	r0, [pc, #540]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800ae36:	f002 f86b 	bl	800cf10 <iprintf>
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f5 fc70 	bl	8000728 <__aeabi_i2d>
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	4b86      	ldr	r3, [pc, #536]	; (800b068 <SVCCTL_App_Notification+0x328>)
 800ae4e:	f7f5 f9ef 	bl	8000230 <__aeabi_dmul>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4610      	mov	r0, r2
 800ae58:	4619      	mov	r1, r3
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	461c      	mov	r4, r3
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	9400      	str	r4, [sp, #0]
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	487b      	ldr	r0, [pc, #492]	; (800b06c <SVCCTL_App_Notification+0x32c>)
 800ae80:	f002 f846 	bl	800cf10 <iprintf>
          break;
 800ae84:	e087      	b.n	800af96 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800ae8c:	486f      	ldr	r0, [pc, #444]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800ae8e:	f7ff f8bb 	bl	800a008 <DbgTraceGetFileName>
 800ae92:	4601      	mov	r1, r0
 800ae94:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 800ae98:	4a6d      	ldr	r2, [pc, #436]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800ae9a:	486e      	ldr	r0, [pc, #440]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800ae9c:	f002 f838 	bl	800cf10 <iprintf>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4871      	ldr	r0, [pc, #452]	; (800b070 <SVCCTL_App_Notification+0x330>)
 800aeac:	f002 f830 	bl	800cf10 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800aeb0:	4866      	ldr	r0, [pc, #408]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800aeb2:	f7ff f8a9 	bl	800a008 <DbgTraceGetFileName>
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	f240 13e7 	movw	r3, #487	; 0x1e7
 800aebc:	4a64      	ldr	r2, [pc, #400]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800aebe:	4865      	ldr	r0, [pc, #404]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800aec0:	f002 f826 	bl	800cf10 <iprintf>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	7a9b      	ldrb	r3, [r3, #10]
 800aec8:	4618      	mov	r0, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	7a5b      	ldrb	r3, [r3, #9]
 800aece:	461c      	mov	r4, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	7a1b      	ldrb	r3, [r3, #8]
 800aed4:	461d      	mov	r5, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	79db      	ldrb	r3, [r3, #7]
 800aeda:	461a      	mov	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	799b      	ldrb	r3, [r3, #6]
 800aee0:	4619      	mov	r1, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	795b      	ldrb	r3, [r3, #5]
 800aee6:	9302      	str	r3, [sp, #8]
 800aee8:	9101      	str	r1, [sp, #4]
 800aeea:	9200      	str	r2, [sp, #0]
 800aeec:	462b      	mov	r3, r5
 800aeee:	4622      	mov	r2, r4
 800aef0:	4601      	mov	r1, r0
 800aef2:	4860      	ldr	r0, [pc, #384]	; (800b074 <SVCCTL_App_Notification+0x334>)
 800aef4:	f002 f80c 	bl	800cf10 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800aef8:	4854      	ldr	r0, [pc, #336]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800aefa:	f7ff f885 	bl	800a008 <DbgTraceGetFileName>
 800aefe:	4601      	mov	r1, r0
 800af00:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800af04:	4a52      	ldr	r2, [pc, #328]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800af06:	4853      	ldr	r0, [pc, #332]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800af08:	f002 f802 	bl	800cf10 <iprintf>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800af12:	b29b      	uxth	r3, r3
 800af14:	4618      	mov	r0, r3
 800af16:	f7f5 fc07 	bl	8000728 <__aeabi_i2d>
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	4b52      	ldr	r3, [pc, #328]	; (800b068 <SVCCTL_App_Notification+0x328>)
 800af20:	f7f5 f986 	bl	8000230 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4610      	mov	r0, r2
 800af2a:	4619      	mov	r1, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800af32:	b29b      	uxth	r3, r3
 800af34:	461c      	mov	r4, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	461a      	mov	r2, r3
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	9400      	str	r4, [sp, #0]
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4846      	ldr	r0, [pc, #280]	; (800b06c <SVCCTL_App_Notification+0x32c>)
 800af52:	f001 ffdd 	bl	800cf10 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800af56:	4b3c      	ldr	r3, [pc, #240]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800af58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af5c:	2b04      	cmp	r3, #4
 800af5e:	d104      	bne.n	800af6a <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800af60:	4b39      	ldr	r3, [pc, #228]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800af62:	2206      	movs	r2, #6
 800af64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800af68:	e003      	b.n	800af72 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800af6a:	4b37      	ldr	r3, [pc, #220]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800af6c:	2205      	movs	r2, #5
 800af6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af78:	b29a      	uxth	r2, r3
 800af7a:	4b33      	ldr	r3, [pc, #204]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800af7c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800af7e:	4b38      	ldr	r3, [pc, #224]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800af80:	2200      	movs	r2, #0
 800af82:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800af84:	4b30      	ldr	r3, [pc, #192]	; (800b048 <SVCCTL_App_Notification+0x308>)
 800af86:	8ada      	ldrh	r2, [r3, #22]
 800af88:	4b35      	ldr	r3, [pc, #212]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800af8a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800af8c:	4834      	ldr	r0, [pc, #208]	; (800b060 <SVCCTL_App_Notification+0x320>)
 800af8e:	f000 fe7d 	bl	800bc8c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800af92:	e000      	b.n	800af96 <SVCCTL_App_Notification+0x256>
          break;
 800af94:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800af96:	e1d1      	b.n	800b33c <SVCCTL_App_Notification+0x5fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	3302      	adds	r3, #2
 800af9c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afa8:	f000 80be 	beq.w	800b128 <SVCCTL_App_Notification+0x3e8>
 800afac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb0:	f300 81c3 	bgt.w	800b33a <SVCCTL_App_Notification+0x5fa>
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	f000 80c9 	beq.w	800b14c <SVCCTL_App_Notification+0x40c>
 800afba:	2b04      	cmp	r3, #4
 800afbc:	f2c0 81bd 	blt.w	800b33a <SVCCTL_App_Notification+0x5fa>
 800afc0:	f240 420a 	movw	r2, #1034	; 0x40a
 800afc4:	4293      	cmp	r3, r2
 800afc6:	f300 81b8 	bgt.w	800b33a <SVCCTL_App_Notification+0x5fa>
 800afca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afce:	f2c0 81b4 	blt.w	800b33a <SVCCTL_App_Notification+0x5fa>
 800afd2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800afd6:	2b0a      	cmp	r3, #10
 800afd8:	f200 81af 	bhi.w	800b33a <SVCCTL_App_Notification+0x5fa>
 800afdc:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <SVCCTL_App_Notification+0x2a4>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b011 	.word	0x0800b011
 800afe8:	0800b2af 	.word	0x0800b2af
 800afec:	0800b183 	.word	0x0800b183
 800aff0:	0800b02d 	.word	0x0800b02d
 800aff4:	0800b081 	.word	0x0800b081
 800aff8:	0800b09d 	.word	0x0800b09d
 800affc:	0800b33b 	.word	0x0800b33b
 800b000:	0800b131 	.word	0x0800b131
 800b004:	0800b10d 	.word	0x0800b10d
 800b008:	0800b1f5 	.word	0x0800b1f5
 800b00c:	0800b167 	.word	0x0800b167
                APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800b010:	480e      	ldr	r0, [pc, #56]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800b012:	f7fe fff9 	bl	800a008 <DbgTraceGetFileName>
 800b016:	4601      	mov	r1, r0
 800b018:	f240 2323 	movw	r3, #547	; 0x223
 800b01c:	4a0c      	ldr	r2, [pc, #48]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800b01e:	480d      	ldr	r0, [pc, #52]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800b020:	f001 ff76 	bl	800cf10 <iprintf>
 800b024:	4814      	ldr	r0, [pc, #80]	; (800b078 <SVCCTL_App_Notification+0x338>)
 800b026:	f002 f80f 	bl	800d048 <puts>
                break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800b02a:	e183      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
                APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800b02c:	4807      	ldr	r0, [pc, #28]	; (800b04c <SVCCTL_App_Notification+0x30c>)
 800b02e:	f7fe ffeb 	bl	800a008 <DbgTraceGetFileName>
 800b032:	4601      	mov	r1, r0
 800b034:	f240 2327 	movw	r3, #551	; 0x227
 800b038:	4a05      	ldr	r2, [pc, #20]	; (800b050 <SVCCTL_App_Notification+0x310>)
 800b03a:	4806      	ldr	r0, [pc, #24]	; (800b054 <SVCCTL_App_Notification+0x314>)
 800b03c:	f001 ff68 	bl	800cf10 <iprintf>
 800b040:	480e      	ldr	r0, [pc, #56]	; (800b07c <SVCCTL_App_Notification+0x33c>)
 800b042:	f002 f801 	bl	800d048 <puts>
                break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800b046:	e175      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
 800b048:	20000184 	.word	0x20000184
 800b04c:	0800e3c0 	.word	0x0800e3c0
 800b050:	0800f7c4 	.word	0x0800f7c4
 800b054:	0800e3dc 	.word	0x0800e3dc
 800b058:	0800e504 	.word	0x0800e504
 800b05c:	0800e530 	.word	0x0800e530
 800b060:	20026fc0 	.word	0x20026fc0
 800b064:	0800e56c 	.word	0x0800e56c
 800b068:	3ff40000 	.word	0x3ff40000
 800b06c:	0800e5a0 	.word	0x0800e5a0
 800b070:	0800e60c 	.word	0x0800e60c
 800b074:	0800e654 	.word	0x0800e654
 800b078:	0800e6a4 	.word	0x0800e6a4
 800b07c:	0800e6d4 	.word	0x0800e6d4
                APP_DBG_MSG("==>> ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 800b080:	48b1      	ldr	r0, [pc, #708]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b082:	f7fe ffc1 	bl	800a008 <DbgTraceGetFileName>
 800b086:	4601      	mov	r1, r0
 800b088:	f240 232b 	movw	r3, #555	; 0x22b
 800b08c:	4aaf      	ldr	r2, [pc, #700]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b08e:	48b0      	ldr	r0, [pc, #704]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b090:	f001 ff3e 	bl	800cf10 <iprintf>
 800b094:	48af      	ldr	r0, [pc, #700]	; (800b354 <SVCCTL_App_Notification+0x614>)
 800b096:	f001 ffd7 	bl	800d048 <puts>
                break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 800b09a:	e14b      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
                APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800b09c:	48aa      	ldr	r0, [pc, #680]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b09e:	f7fe ffb3 	bl	800a008 <DbgTraceGetFileName>
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	f240 232f 	movw	r3, #559	; 0x22f
 800b0a8:	4aa8      	ldr	r2, [pc, #672]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b0aa:	48a9      	ldr	r0, [pc, #676]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b0ac:	f001 ff30 	bl	800cf10 <iprintf>
 800b0b0:	48a9      	ldr	r0, [pc, #676]	; (800b358 <SVCCTL_App_Notification+0x618>)
 800b0b2:	f001 ffc9 	bl	800d048 <puts>
                ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800b0b6:	4ba9      	ldr	r3, [pc, #676]	; (800b35c <SVCCTL_App_Notification+0x61c>)
 800b0b8:	8adb      	ldrh	r3, [r3, #22]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fd fb1a 	bl	80086f4 <aci_gap_allow_rebond>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (ret != BLE_STATUS_SUCCESS)
 800b0c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d010      	beq.n	800b0f0 <SVCCTL_App_Notification+0x3b0>
                  APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800b0ce:	489e      	ldr	r0, [pc, #632]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b0d0:	f7fe ff9a 	bl	800a008 <DbgTraceGetFileName>
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	f240 2333 	movw	r3, #563	; 0x233
 800b0da:	4a9c      	ldr	r2, [pc, #624]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b0dc:	489c      	ldr	r0, [pc, #624]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b0de:	f001 ff17 	bl	800cf10 <iprintf>
 800b0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	489d      	ldr	r0, [pc, #628]	; (800b360 <SVCCTL_App_Notification+0x620>)
 800b0ea:	f001 ff11 	bl	800cf10 <iprintf>
                break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800b0ee:	e121      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
                  APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800b0f0:	4895      	ldr	r0, [pc, #596]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b0f2:	f7fe ff89 	bl	800a008 <DbgTraceGetFileName>
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	f240 2337 	movw	r3, #567	; 0x237
 800b0fc:	4a93      	ldr	r2, [pc, #588]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b0fe:	4894      	ldr	r0, [pc, #592]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b100:	f001 ff06 	bl	800cf10 <iprintf>
 800b104:	4897      	ldr	r0, [pc, #604]	; (800b364 <SVCCTL_App_Notification+0x624>)
 800b106:	f001 ff9f 	bl	800d048 <puts>
                break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800b10a:	e113      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
                APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800b10c:	488e      	ldr	r0, [pc, #568]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b10e:	f7fe ff7b 	bl	800a008 <DbgTraceGetFileName>
 800b112:	4601      	mov	r1, r0
 800b114:	f44f 730f 	mov.w	r3, #572	; 0x23c
 800b118:	4a8c      	ldr	r2, [pc, #560]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b11a:	488d      	ldr	r0, [pc, #564]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b11c:	f001 fef8 	bl	800cf10 <iprintf>
 800b120:	4891      	ldr	r0, [pc, #580]	; (800b368 <SVCCTL_App_Notification+0x628>)
 800b122:	f001 ff91 	bl	800d048 <puts>
                break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800b126:	e105      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          mutex = 1;
 800b128:	4b90      	ldr	r3, [pc, #576]	; (800b36c <SVCCTL_App_Notification+0x62c>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
          break;
 800b12e:	e101      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800b130:	4885      	ldr	r0, [pc, #532]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b132:	f7fe ff69 	bl	800a008 <DbgTraceGetFileName>
 800b136:	4601      	mov	r1, r0
 800b138:	f240 234f 	movw	r3, #591	; 0x24f
 800b13c:	4a83      	ldr	r2, [pc, #524]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b13e:	4884      	ldr	r0, [pc, #528]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b140:	f001 fee6 	bl	800cf10 <iprintf>
 800b144:	488a      	ldr	r0, [pc, #552]	; (800b370 <SVCCTL_App_Notification+0x630>)
 800b146:	f001 fee3 	bl	800cf10 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b14a:	e0f3      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800b14c:	2201      	movs	r2, #1
 800b14e:	2102      	movs	r1, #2
 800b150:	4888      	ldr	r0, [pc, #544]	; (800b374 <SVCCTL_App_Notification+0x634>)
 800b152:	f7f8 fec5 	bl	8003ee0 <HAL_GPIO_WritePin>
        	HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800b156:	4b81      	ldr	r3, [pc, #516]	; (800b35c <SVCCTL_App_Notification+0x61c>)
 800b158:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800b15c:	210a      	movs	r1, #10
 800b15e:	4618      	mov	r0, r3
 800b160:	f7f7 f844 	bl	80021ec <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b164:	e0e6      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800b166:	4878      	ldr	r0, [pc, #480]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b168:	f7fe ff4e 	bl	800a008 <DbgTraceGetFileName>
 800b16c:	4601      	mov	r1, r0
 800b16e:	f44f 7318 	mov.w	r3, #608	; 0x260
 800b172:	4a76      	ldr	r2, [pc, #472]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b174:	4876      	ldr	r0, [pc, #472]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b176:	f001 fecb 	bl	800cf10 <iprintf>
 800b17a:	487f      	ldr	r0, [pc, #508]	; (800b378 <SVCCTL_App_Notification+0x638>)
 800b17c:	f001 ff64 	bl	800d048 <puts>
          break;
 800b180:	e0d8      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b182:	4871      	ldr	r0, [pc, #452]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b184:	f7fe ff40 	bl	800a008 <DbgTraceGetFileName>
 800b188:	4601      	mov	r1, r0
 800b18a:	f240 2367 	movw	r3, #615	; 0x267
 800b18e:	4a6f      	ldr	r2, [pc, #444]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b190:	486f      	ldr	r0, [pc, #444]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b192:	f001 febd 	bl	800cf10 <iprintf>
 800b196:	4879      	ldr	r0, [pc, #484]	; (800b37c <SVCCTL_App_Notification+0x63c>)
 800b198:	f001 ff56 	bl	800d048 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b19c:	4b6f      	ldr	r3, [pc, #444]	; (800b35c <SVCCTL_App_Notification+0x61c>)
 800b19e:	8adb      	ldrh	r3, [r3, #22]
 800b1a0:	4977      	ldr	r1, [pc, #476]	; (800b380 <SVCCTL_App_Notification+0x640>)
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fd f8fc 	bl	80083a0 <aci_gap_pass_key_resp>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d010      	beq.n	800b1d8 <SVCCTL_App_Notification+0x498>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b1b6:	4864      	ldr	r0, [pc, #400]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b1b8:	f7fe ff26 	bl	800a008 <DbgTraceGetFileName>
 800b1bc:	4601      	mov	r1, r0
 800b1be:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800b1c2:	4a62      	ldr	r2, [pc, #392]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b1c4:	4862      	ldr	r0, [pc, #392]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b1c6:	f001 fea3 	bl	800cf10 <iprintf>
 800b1ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	486c      	ldr	r0, [pc, #432]	; (800b384 <SVCCTL_App_Notification+0x644>)
 800b1d2:	f001 fe9d 	bl	800cf10 <iprintf>
          break;
 800b1d6:	e0ad      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800b1d8:	485b      	ldr	r0, [pc, #364]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b1da:	f7fe ff15 	bl	800a008 <DbgTraceGetFileName>
 800b1de:	4601      	mov	r1, r0
 800b1e0:	f44f 731c 	mov.w	r3, #624	; 0x270
 800b1e4:	4a59      	ldr	r2, [pc, #356]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b1e6:	485a      	ldr	r0, [pc, #360]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b1e8:	f001 fe92 	bl	800cf10 <iprintf>
 800b1ec:	4866      	ldr	r0, [pc, #408]	; (800b388 <SVCCTL_App_Notification+0x648>)
 800b1ee:	f001 ff2b 	bl	800d048 <puts>
          break;
 800b1f2:	e09f      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800b1f4:	4854      	ldr	r0, [pc, #336]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b1f6:	f7fe ff07 	bl	800a008 <DbgTraceGetFileName>
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	f44f 731e 	mov.w	r3, #632	; 0x278
 800b200:	4a52      	ldr	r2, [pc, #328]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b202:	4853      	ldr	r0, [pc, #332]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b204:	f001 fe84 	bl	800cf10 <iprintf>
 800b208:	4860      	ldr	r0, [pc, #384]	; (800b38c <SVCCTL_App_Notification+0x64c>)
 800b20a:	f001 ff1d 	bl	800d048 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800b20e:	484e      	ldr	r0, [pc, #312]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b210:	f7fe fefa 	bl	800a008 <DbgTraceGetFileName>
 800b214:	4601      	mov	r1, r0
 800b216:	f240 2379 	movw	r3, #633	; 0x279
 800b21a:	4a4c      	ldr	r2, [pc, #304]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b21c:	484c      	ldr	r0, [pc, #304]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b21e:	f001 fe77 	bl	800cf10 <iprintf>
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	3302      	adds	r3, #2
 800b226:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b22a:	4619      	mov	r1, r3
 800b22c:	4858      	ldr	r0, [pc, #352]	; (800b390 <SVCCTL_App_Notification+0x650>)
 800b22e:	f001 fe6f 	bl	800cf10 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800b232:	4845      	ldr	r0, [pc, #276]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b234:	f7fe fee8 	bl	800a008 <DbgTraceGetFileName>
 800b238:	4601      	mov	r1, r0
 800b23a:	f240 237b 	movw	r3, #635	; 0x27b
 800b23e:	4a43      	ldr	r2, [pc, #268]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b240:	4843      	ldr	r0, [pc, #268]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b242:	f001 fe65 	bl	800cf10 <iprintf>
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	3302      	adds	r3, #2
 800b24a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b24e:	4619      	mov	r1, r3
 800b250:	4850      	ldr	r0, [pc, #320]	; (800b394 <SVCCTL_App_Notification+0x654>)
 800b252:	f001 fe5d 	bl	800cf10 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b256:	4b41      	ldr	r3, [pc, #260]	; (800b35c <SVCCTL_App_Notification+0x61c>)
 800b258:	8adb      	ldrh	r3, [r3, #22]
 800b25a:	2101      	movs	r1, #1
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fd fa9d 	bl	800879c <aci_gap_numeric_comparison_value_confirm_yesno>
 800b262:	4603      	mov	r3, r0
 800b264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d010      	beq.n	800b292 <SVCCTL_App_Notification+0x552>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800b270:	4835      	ldr	r0, [pc, #212]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b272:	f7fe fec9 	bl	800a008 <DbgTraceGetFileName>
 800b276:	4601      	mov	r1, r0
 800b278:	f44f 7320 	mov.w	r3, #640	; 0x280
 800b27c:	4a33      	ldr	r2, [pc, #204]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b27e:	4834      	ldr	r0, [pc, #208]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b280:	f001 fe46 	bl	800cf10 <iprintf>
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b288:	4619      	mov	r1, r3
 800b28a:	4843      	ldr	r0, [pc, #268]	; (800b398 <SVCCTL_App_Notification+0x658>)
 800b28c:	f001 fe40 	bl	800cf10 <iprintf>
          break;
 800b290:	e050      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800b292:	482d      	ldr	r0, [pc, #180]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b294:	f7fe feb8 	bl	800a008 <DbgTraceGetFileName>
 800b298:	4601      	mov	r1, r0
 800b29a:	f44f 7321 	mov.w	r3, #644	; 0x284
 800b29e:	4a2b      	ldr	r2, [pc, #172]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b2a0:	482b      	ldr	r0, [pc, #172]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b2a2:	f001 fe35 	bl	800cf10 <iprintf>
 800b2a6:	483d      	ldr	r0, [pc, #244]	; (800b39c <SVCCTL_App_Notification+0x65c>)
 800b2a8:	f001 fece 	bl	800d048 <puts>
          break;
 800b2ac:	e042      	b.n	800b334 <SVCCTL_App_Notification+0x5f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	3302      	adds	r3, #2
 800b2b2:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800b2b4:	4824      	ldr	r0, [pc, #144]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b2b6:	f7fe fea7 	bl	800a008 <DbgTraceGetFileName>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	f240 238e 	movw	r3, #654	; 0x28e
 800b2c0:	4a22      	ldr	r2, [pc, #136]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b2c2:	4823      	ldr	r0, [pc, #140]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b2c4:	f001 fe24 	bl	800cf10 <iprintf>
 800b2c8:	4835      	ldr	r0, [pc, #212]	; (800b3a0 <SVCCTL_App_Notification+0x660>)
 800b2ca:	f001 febd 	bl	800d048 <puts>
          if (p_pairing_complete->Status != 0)
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	789b      	ldrb	r3, [r3, #2]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d013      	beq.n	800b2fe <SVCCTL_App_Notification+0x5be>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800b2d6:	481c      	ldr	r0, [pc, #112]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b2d8:	f7fe fe96 	bl	800a008 <DbgTraceGetFileName>
 800b2dc:	4601      	mov	r1, r0
 800b2de:	f240 2391 	movw	r3, #657	; 0x291
 800b2e2:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b2e4:	481a      	ldr	r0, [pc, #104]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b2e6:	f001 fe13 	bl	800cf10 <iprintf>
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	789b      	ldrb	r3, [r3, #2]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	78db      	ldrb	r3, [r3, #3]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	482b      	ldr	r0, [pc, #172]	; (800b3a4 <SVCCTL_App_Notification+0x664>)
 800b2f8:	f001 fe0a 	bl	800cf10 <iprintf>
 800b2fc:	e00c      	b.n	800b318 <SVCCTL_App_Notification+0x5d8>
            APP_DBG_MSG("     - Pairing Success\n");
 800b2fe:	4812      	ldr	r0, [pc, #72]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b300:	f7fe fe82 	bl	800a008 <DbgTraceGetFileName>
 800b304:	4601      	mov	r1, r0
 800b306:	f240 2395 	movw	r3, #661	; 0x295
 800b30a:	4a10      	ldr	r2, [pc, #64]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b30c:	4810      	ldr	r0, [pc, #64]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b30e:	f001 fdff 	bl	800cf10 <iprintf>
 800b312:	4825      	ldr	r0, [pc, #148]	; (800b3a8 <SVCCTL_App_Notification+0x668>)
 800b314:	f001 fe98 	bl	800d048 <puts>
          APP_DBG_MSG("\n");
 800b318:	480b      	ldr	r0, [pc, #44]	; (800b348 <SVCCTL_App_Notification+0x608>)
 800b31a:	f7fe fe75 	bl	800a008 <DbgTraceGetFileName>
 800b31e:	4601      	mov	r1, r0
 800b320:	f240 2397 	movw	r3, #663	; 0x297
 800b324:	4a09      	ldr	r2, [pc, #36]	; (800b34c <SVCCTL_App_Notification+0x60c>)
 800b326:	480a      	ldr	r0, [pc, #40]	; (800b350 <SVCCTL_App_Notification+0x610>)
 800b328:	f001 fdf2 	bl	800cf10 <iprintf>
 800b32c:	200a      	movs	r0, #10
 800b32e:	f001 fe07 	bl	800cf40 <putchar>
          break;
 800b332:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b334:	e001      	b.n	800b33a <SVCCTL_App_Notification+0x5fa>
      break;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <SVCCTL_App_Notification+0x5fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b33a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b33c:	2301      	movs	r3, #1
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3728      	adds	r7, #40	; 0x28
 800b342:	46bd      	mov	sp, r7
 800b344:	bdb0      	pop	{r4, r5, r7, pc}
 800b346:	bf00      	nop
 800b348:	0800e3c0 	.word	0x0800e3c0
 800b34c:	0800f7c4 	.word	0x0800f7c4
 800b350:	0800e3dc 	.word	0x0800e3dc
 800b354:	0800e700 	.word	0x0800e700
 800b358:	0800e734 	.word	0x0800e734
 800b35c:	20000184 	.word	0x20000184
 800b360:	0800e758 	.word	0x0800e758
 800b364:	0800e788 	.word	0x0800e788
 800b368:	0800e7b0 	.word	0x0800e7b0
 800b36c:	20026fc5 	.word	0x20026fc5
 800b370:	0800e7dc 	.word	0x0800e7dc
 800b374:	48000400 	.word	0x48000400
 800b378:	0800e804 	.word	0x0800e804
 800b37c:	0800e834 	.word	0x0800e834
 800b380:	0001b207 	.word	0x0001b207
 800b384:	0800e85c 	.word	0x0800e85c
 800b388:	0800e890 	.word	0x0800e890
 800b38c:	0800e8b8 	.word	0x0800e8b8
 800b390:	0800e8ec 	.word	0x0800e8ec
 800b394:	0800e908 	.word	0x0800e908
 800b398:	0800e920 	.word	0x0800e920
 800b39c:	0800e970 	.word	0x0800e970
 800b3a0:	0800e9b8 	.word	0x0800e9b8
 800b3a4:	0800e9e4 	.word	0x0800e9e4
 800b3a8:	0800ea20 	.word	0x0800ea20

0800b3ac <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <Ble_Tl_Init+0x20>)
 800b3b4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <Ble_Tl_Init+0x24>)
 800b3b8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4805      	ldr	r0, [pc, #20]	; (800b3d4 <Ble_Tl_Init+0x28>)
 800b3c0:	f7fe f910 	bl	80095e4 <hci_init>

  return;
 800b3c4:	bf00      	nop
}
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200300d8 	.word	0x200300d8
 800b3d0:	0800bbc9 	.word	0x0800bbc9
 800b3d4:	0800bb91 	.word	0x0800bb91

0800b3d8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3da:	b08d      	sub	sp, #52	; 0x34
 800b3dc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b3de:	2300      	movs	r3, #0
 800b3e0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b3e2:	2392      	movs	r3, #146	; 0x92
 800b3e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b3e6:	48a3      	ldr	r0, [pc, #652]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b3e8:	f7fe fe0e 	bl	800a008 <DbgTraceGetFileName>
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	f240 23d7 	movw	r3, #727	; 0x2d7
 800b3f2:	4aa1      	ldr	r2, [pc, #644]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3f4:	48a1      	ldr	r0, [pc, #644]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3f6:	f001 fd8b 	bl	800cf10 <iprintf>
 800b3fa:	48a1      	ldr	r0, [pc, #644]	; (800b680 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b3fc:	f001 fe24 	bl	800d048 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b400:	f7fd fe1f 	bl	8009042 <hci_reset>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00f      	beq.n	800b42e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b40e:	4899      	ldr	r0, [pc, #612]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b410:	f7fe fdfa 	bl	800a008 <DbgTraceGetFileName>
 800b414:	4601      	mov	r1, r0
 800b416:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800b41a:	4a97      	ldr	r2, [pc, #604]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b41c:	4897      	ldr	r0, [pc, #604]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b41e:	f001 fd77 	bl	800cf10 <iprintf>
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	4619      	mov	r1, r3
 800b426:	4897      	ldr	r0, [pc, #604]	; (800b684 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b428:	f001 fd72 	bl	800cf10 <iprintf>
 800b42c:	e00c      	b.n	800b448 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b42e:	4891      	ldr	r0, [pc, #580]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b430:	f7fe fdea 	bl	800a008 <DbgTraceGetFileName>
 800b434:	4601      	mov	r1, r0
 800b436:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 800b43a:	4a8f      	ldr	r2, [pc, #572]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b43c:	488f      	ldr	r0, [pc, #572]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b43e:	f001 fd67 	bl	800cf10 <iprintf>
 800b442:	4891      	ldr	r0, [pc, #580]	; (800b688 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b444:	f001 fe00 	bl	800d048 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b448:	f000 fad8 	bl	800b9fc <BleGetBdAddress>
 800b44c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	2106      	movs	r1, #6
 800b452:	2000      	movs	r0, #0
 800b454:	f7fd fcb5 	bl	8008dc2 <aci_hal_write_config_data>
 800b458:	4603      	mov	r3, r0
 800b45a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00f      	beq.n	800b482 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b462:	4884      	ldr	r0, [pc, #528]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b464:	f7fe fdd0 	bl	800a008 <DbgTraceGetFileName>
 800b468:	4601      	mov	r1, r0
 800b46a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800b46e:	4a82      	ldr	r2, [pc, #520]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b470:	4882      	ldr	r0, [pc, #520]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b472:	f001 fd4d 	bl	800cf10 <iprintf>
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	4619      	mov	r1, r3
 800b47a:	4884      	ldr	r0, [pc, #528]	; (800b68c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b47c:	f001 fd48 	bl	800cf10 <iprintf>
 800b480:	e035      	b.n	800b4ee <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b482:	487c      	ldr	r0, [pc, #496]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b484:	f7fe fdc0 	bl	800a008 <DbgTraceGetFileName>
 800b488:	4601      	mov	r1, r0
 800b48a:	f240 23f2 	movw	r3, #754	; 0x2f2
 800b48e:	4a7a      	ldr	r2, [pc, #488]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b490:	487a      	ldr	r0, [pc, #488]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b492:	f001 fd3d 	bl	800cf10 <iprintf>
 800b496:	487e      	ldr	r0, [pc, #504]	; (800b690 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b498:	f001 fdd6 	bl	800d048 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b49c:	4875      	ldr	r0, [pc, #468]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b49e:	f7fe fdb3 	bl	800a008 <DbgTraceGetFileName>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	f240 23f3 	movw	r3, #755	; 0x2f3
 800b4a8:	4a73      	ldr	r2, [pc, #460]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b4aa:	4874      	ldr	r0, [pc, #464]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b4ac:	f001 fd30 	bl	800cf10 <iprintf>
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	3305      	adds	r3, #5
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461c      	mov	r4, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3303      	adds	r3, #3
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	461d      	mov	r5, r3
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	3302      	adds	r3, #2
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	9101      	str	r1, [sp, #4]
 800b4e0:	9200      	str	r2, [sp, #0]
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	486a      	ldr	r0, [pc, #424]	; (800b694 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b4ea:	f001 fd11 	bl	800cf10 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b4ee:	4a6a      	ldr	r2, [pc, #424]	; (800b698 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b4f0:	2110      	movs	r1, #16
 800b4f2:	2018      	movs	r0, #24
 800b4f4:	f7fd fc65 	bl	8008dc2 <aci_hal_write_config_data>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00f      	beq.n	800b522 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b502:	485c      	ldr	r0, [pc, #368]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b504:	f7fe fd80 	bl	800a008 <DbgTraceGetFileName>
 800b508:	4601      	mov	r1, r0
 800b50a:	f240 333a 	movw	r3, #826	; 0x33a
 800b50e:	4a5a      	ldr	r2, [pc, #360]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b510:	485a      	ldr	r0, [pc, #360]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b512:	f001 fcfd 	bl	800cf10 <iprintf>
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	4619      	mov	r1, r3
 800b51a:	4860      	ldr	r0, [pc, #384]	; (800b69c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b51c:	f001 fcf8 	bl	800cf10 <iprintf>
 800b520:	e00c      	b.n	800b53c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b522:	4854      	ldr	r0, [pc, #336]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b524:	f7fe fd70 	bl	800a008 <DbgTraceGetFileName>
 800b528:	4601      	mov	r1, r0
 800b52a:	f240 333e 	movw	r3, #830	; 0x33e
 800b52e:	4a52      	ldr	r2, [pc, #328]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b530:	4852      	ldr	r0, [pc, #328]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b532:	f001 fced 	bl	800cf10 <iprintf>
 800b536:	485a      	ldr	r0, [pc, #360]	; (800b6a0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b538:	f001 fd86 	bl	800d048 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b53c:	4a59      	ldr	r2, [pc, #356]	; (800b6a4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b53e:	2110      	movs	r1, #16
 800b540:	2008      	movs	r0, #8
 800b542:	f7fd fc3e 	bl	8008dc2 <aci_hal_write_config_data>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00f      	beq.n	800b570 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b550:	4848      	ldr	r0, [pc, #288]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b552:	f7fe fd59 	bl	800a008 <DbgTraceGetFileName>
 800b556:	4601      	mov	r1, r0
 800b558:	f240 3347 	movw	r3, #839	; 0x347
 800b55c:	4a46      	ldr	r2, [pc, #280]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b55e:	4847      	ldr	r0, [pc, #284]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b560:	f001 fcd6 	bl	800cf10 <iprintf>
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	4619      	mov	r1, r3
 800b568:	484f      	ldr	r0, [pc, #316]	; (800b6a8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b56a:	f001 fcd1 	bl	800cf10 <iprintf>
 800b56e:	e00c      	b.n	800b58a <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b570:	4840      	ldr	r0, [pc, #256]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b572:	f7fe fd49 	bl	800a008 <DbgTraceGetFileName>
 800b576:	4601      	mov	r1, r0
 800b578:	f240 334b 	movw	r3, #843	; 0x34b
 800b57c:	4a3e      	ldr	r2, [pc, #248]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b57e:	483f      	ldr	r0, [pc, #252]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b580:	f001 fcc6 	bl	800cf10 <iprintf>
 800b584:	4849      	ldr	r0, [pc, #292]	; (800b6ac <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b586:	f001 fd5f 	bl	800d048 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b58a:	2118      	movs	r1, #24
 800b58c:	2001      	movs	r0, #1
 800b58e:	f7fd fc9d 	bl	8008ecc <aci_hal_set_tx_power_level>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00f      	beq.n	800b5bc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b59c:	4835      	ldr	r0, [pc, #212]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b59e:	f7fe fd33 	bl	800a008 <DbgTraceGetFileName>
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	f44f 7355 	mov.w	r3, #852	; 0x354
 800b5a8:	4a33      	ldr	r2, [pc, #204]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b5aa:	4834      	ldr	r0, [pc, #208]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b5ac:	f001 fcb0 	bl	800cf10 <iprintf>
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	483e      	ldr	r0, [pc, #248]	; (800b6b0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b5b6:	f001 fcab 	bl	800cf10 <iprintf>
 800b5ba:	e00c      	b.n	800b5d6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b5bc:	482d      	ldr	r0, [pc, #180]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b5be:	f7fe fd23 	bl	800a008 <DbgTraceGetFileName>
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	f44f 7356 	mov.w	r3, #856	; 0x358
 800b5c8:	4a2b      	ldr	r2, [pc, #172]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b5ca:	482c      	ldr	r0, [pc, #176]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b5cc:	f001 fca0 	bl	800cf10 <iprintf>
 800b5d0:	4838      	ldr	r0, [pc, #224]	; (800b6b4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b5d2:	f001 fd39 	bl	800d048 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b5d6:	f7fd f948 	bl	800886a <aci_gatt_init>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00f      	beq.n	800b604 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b5e4:	4823      	ldr	r0, [pc, #140]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b5e6:	f7fe fd0f 	bl	800a008 <DbgTraceGetFileName>
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	f240 3361 	movw	r3, #865	; 0x361
 800b5f0:	4a21      	ldr	r2, [pc, #132]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b5f2:	4822      	ldr	r0, [pc, #136]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b5f4:	f001 fc8c 	bl	800cf10 <iprintf>
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	482e      	ldr	r0, [pc, #184]	; (800b6b8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b5fe:	f001 fc87 	bl	800cf10 <iprintf>
 800b602:	e00c      	b.n	800b61e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b604:	481b      	ldr	r0, [pc, #108]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b606:	f7fe fcff 	bl	800a008 <DbgTraceGetFileName>
 800b60a:	4601      	mov	r1, r0
 800b60c:	f240 3365 	movw	r3, #869	; 0x365
 800b610:	4a19      	ldr	r2, [pc, #100]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b612:	481a      	ldr	r0, [pc, #104]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b614:	f001 fc7c 	bl	800cf10 <iprintf>
 800b618:	4828      	ldr	r0, [pc, #160]	; (800b6bc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b61a:	f001 fd15 	bl	800d048 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b622:	7bfb      	ldrb	r3, [r7, #15]
 800b624:	f043 0301 	orr.w	r3, r3, #1
 800b628:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d069      	beq.n	800b704 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b630:	4b23      	ldr	r3, [pc, #140]	; (800b6c0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b632:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b634:	1dba      	adds	r2, r7, #6
 800b636:	7bf8      	ldrb	r0, [r7, #15]
 800b638:	1cbb      	adds	r3, r7, #2
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	1d3b      	adds	r3, r7, #4
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	4613      	mov	r3, r2
 800b642:	2205      	movs	r2, #5
 800b644:	2100      	movs	r1, #0
 800b646:	f7fc ff12 	bl	800846e <aci_gap_init>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b64e:	7dfb      	ldrb	r3, [r7, #23]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d039      	beq.n	800b6c8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b654:	4807      	ldr	r0, [pc, #28]	; (800b674 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b656:	f7fe fcd7 	bl	800a008 <DbgTraceGetFileName>
 800b65a:	4601      	mov	r1, r0
 800b65c:	f240 3385 	movw	r3, #901	; 0x385
 800b660:	4a05      	ldr	r2, [pc, #20]	; (800b678 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b662:	4806      	ldr	r0, [pc, #24]	; (800b67c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b664:	f001 fc54 	bl	800cf10 <iprintf>
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	4619      	mov	r1, r3
 800b66c:	4815      	ldr	r0, [pc, #84]	; (800b6c4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b66e:	f001 fc4f 	bl	800cf10 <iprintf>
 800b672:	e036      	b.n	800b6e2 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800b674:	0800e3c0 	.word	0x0800e3c0
 800b678:	0800f7dc 	.word	0x0800f7dc
 800b67c:	0800e3dc 	.word	0x0800e3dc
 800b680:	0800ea38 	.word	0x0800ea38
 800b684:	0800ea64 	.word	0x0800ea64
 800b688:	0800ea94 	.word	0x0800ea94
 800b68c:	0800eab4 	.word	0x0800eab4
 800b690:	0800eb10 	.word	0x0800eb10
 800b694:	0800eb5c 	.word	0x0800eb5c
 800b698:	0800f794 	.word	0x0800f794
 800b69c:	0800eb98 	.word	0x0800eb98
 800b6a0:	0800ebf0 	.word	0x0800ebf0
 800b6a4:	0800f7a4 	.word	0x0800f7a4
 800b6a8:	0800ec38 	.word	0x0800ec38
 800b6ac:	0800ec90 	.word	0x0800ec90
 800b6b0:	0800ecd8 	.word	0x0800ecd8
 800b6b4:	0800ed18 	.word	0x0800ed18
 800b6b8:	0800ed48 	.word	0x0800ed48
 800b6bc:	0800ed7c 	.word	0x0800ed7c
 800b6c0:	0800eda0 	.word	0x0800eda0
 800b6c4:	0800eda8 	.word	0x0800eda8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b6c8:	487e      	ldr	r0, [pc, #504]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b6ca:	f7fe fc9d 	bl	800a008 <DbgTraceGetFileName>
 800b6ce:	4601      	mov	r1, r0
 800b6d0:	f240 3389 	movw	r3, #905	; 0x389
 800b6d4:	4a7c      	ldr	r2, [pc, #496]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b6d6:	487d      	ldr	r0, [pc, #500]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b6d8:	f001 fc1a 	bl	800cf10 <iprintf>
 800b6dc:	487c      	ldr	r0, [pc, #496]	; (800b8d0 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800b6de:	f001 fcb3 	bl	800d048 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b6e2:	88fc      	ldrh	r4, [r7, #6]
 800b6e4:	88bd      	ldrh	r5, [r7, #4]
 800b6e6:	68b8      	ldr	r0, [r7, #8]
 800b6e8:	f7f4 fd4a 	bl	8000180 <strlen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7fd fab8 	bl	8008c70 <aci_gatt_update_char_value>
 800b700:	4603      	mov	r3, r0
 800b702:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b704:	88f8      	ldrh	r0, [r7, #6]
 800b706:	8879      	ldrh	r1, [r7, #2]
 800b708:	463b      	mov	r3, r7
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	2302      	movs	r3, #2
 800b70e:	2200      	movs	r2, #0
 800b710:	f7fd faae 	bl	8008c70 <aci_gatt_update_char_value>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b718:	2202      	movs	r2, #2
 800b71a:	2102      	movs	r1, #2
 800b71c:	2000      	movs	r0, #0
 800b71e:	f7fd fcb4 	bl	800908a <hci_le_set_default_phy>
 800b722:	4603      	mov	r3, r0
 800b724:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00f      	beq.n	800b74c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b72c:	4865      	ldr	r0, [pc, #404]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b72e:	f7fe fc6b 	bl	800a008 <DbgTraceGetFileName>
 800b732:	4601      	mov	r1, r0
 800b734:	f240 33ab 	movw	r3, #939	; 0x3ab
 800b738:	4a63      	ldr	r2, [pc, #396]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b73a:	4864      	ldr	r0, [pc, #400]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b73c:	f001 fbe8 	bl	800cf10 <iprintf>
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	4619      	mov	r1, r3
 800b744:	4863      	ldr	r0, [pc, #396]	; (800b8d4 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800b746:	f001 fbe3 	bl	800cf10 <iprintf>
 800b74a:	e00c      	b.n	800b766 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b74c:	485d      	ldr	r0, [pc, #372]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b74e:	f7fe fc5b 	bl	800a008 <DbgTraceGetFileName>
 800b752:	4601      	mov	r1, r0
 800b754:	f240 33af 	movw	r3, #943	; 0x3af
 800b758:	4a5b      	ldr	r2, [pc, #364]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b75a:	485c      	ldr	r0, [pc, #368]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b75c:	f001 fbd8 	bl	800cf10 <iprintf>
 800b760:	485d      	ldr	r0, [pc, #372]	; (800b8d8 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800b762:	f001 fc71 	bl	800d048 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b766:	4b5d      	ldr	r3, [pc, #372]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b768:	2201      	movs	r2, #1
 800b76a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b76c:	4b5b      	ldr	r3, [pc, #364]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4618      	mov	r0, r3
 800b772:	f7fc fcfd 	bl	8008170 <aci_gap_set_io_capability>
 800b776:	4603      	mov	r3, r0
 800b778:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00f      	beq.n	800b7a0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b780:	4850      	ldr	r0, [pc, #320]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b782:	f7fe fc41 	bl	800a008 <DbgTraceGetFileName>
 800b786:	4601      	mov	r1, r0
 800b788:	f240 33b9 	movw	r3, #953	; 0x3b9
 800b78c:	4a4e      	ldr	r2, [pc, #312]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b78e:	484f      	ldr	r0, [pc, #316]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b790:	f001 fbbe 	bl	800cf10 <iprintf>
 800b794:	7dfb      	ldrb	r3, [r7, #23]
 800b796:	4619      	mov	r1, r3
 800b798:	4851      	ldr	r0, [pc, #324]	; (800b8e0 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800b79a:	f001 fbb9 	bl	800cf10 <iprintf>
 800b79e:	e00c      	b.n	800b7ba <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b7a0:	4848      	ldr	r0, [pc, #288]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b7a2:	f7fe fc31 	bl	800a008 <DbgTraceGetFileName>
 800b7a6:	4601      	mov	r1, r0
 800b7a8:	f240 33bd 	movw	r3, #957	; 0x3bd
 800b7ac:	4a46      	ldr	r2, [pc, #280]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b7ae:	4847      	ldr	r0, [pc, #284]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b7b0:	f001 fbae 	bl	800cf10 <iprintf>
 800b7b4:	484b      	ldr	r0, [pc, #300]	; (800b8e4 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800b7b6:	f001 fc47 	bl	800d048 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b7ba:	4b48      	ldr	r3, [pc, #288]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b7c0:	4b46      	ldr	r3, [pc, #280]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7c2:	2208      	movs	r2, #8
 800b7c4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b7c6:	4b45      	ldr	r3, [pc, #276]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7c8:	2210      	movs	r2, #16
 800b7ca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b7cc:	4b43      	ldr	r3, [pc, #268]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b7d2:	4b42      	ldr	r3, [pc, #264]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7d4:	4a44      	ldr	r2, [pc, #272]	; (800b8e8 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800b7d6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b7d8:	4b40      	ldr	r3, [pc, #256]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b7de:	4b3f      	ldr	r3, [pc, #252]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7e0:	789c      	ldrb	r4, [r3, #2]
 800b7e2:	4b3e      	ldr	r3, [pc, #248]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7e4:	785d      	ldrb	r5, [r3, #1]
 800b7e6:	4b3d      	ldr	r3, [pc, #244]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7e8:	791b      	ldrb	r3, [r3, #4]
 800b7ea:	4a3c      	ldr	r2, [pc, #240]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7ec:	7952      	ldrb	r2, [r2, #5]
 800b7ee:	493b      	ldr	r1, [pc, #236]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7f0:	78c9      	ldrb	r1, [r1, #3]
 800b7f2:	483a      	ldr	r0, [pc, #232]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b7f4:	6880      	ldr	r0, [r0, #8]
 800b7f6:	2600      	movs	r6, #0
 800b7f8:	9604      	str	r6, [sp, #16]
 800b7fa:	9003      	str	r0, [sp, #12]
 800b7fc:	9102      	str	r1, [sp, #8]
 800b7fe:	9201      	str	r2, [sp, #4]
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	2300      	movs	r3, #0
 800b804:	2201      	movs	r2, #1
 800b806:	4629      	mov	r1, r5
 800b808:	4620      	mov	r0, r4
 800b80a:	f7fc fd05 	bl	8008218 <aci_gap_set_authentication_requirement>
 800b80e:	4603      	mov	r3, r0
 800b810:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b818:	482a      	ldr	r0, [pc, #168]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b81a:	f7fe fbf5 	bl	800a008 <DbgTraceGetFileName>
 800b81e:	4601      	mov	r1, r0
 800b820:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800b824:	4a28      	ldr	r2, [pc, #160]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b826:	4829      	ldr	r0, [pc, #164]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b828:	f001 fb72 	bl	800cf10 <iprintf>
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	4619      	mov	r1, r3
 800b830:	482e      	ldr	r0, [pc, #184]	; (800b8ec <Ble_Hci_Gap_Gatt_Init+0x514>)
 800b832:	f001 fb6d 	bl	800cf10 <iprintf>
 800b836:	e00c      	b.n	800b852 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b838:	4822      	ldr	r0, [pc, #136]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b83a:	f7fe fbe5 	bl	800a008 <DbgTraceGetFileName>
 800b83e:	4601      	mov	r1, r0
 800b840:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800b844:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b846:	4821      	ldr	r0, [pc, #132]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b848:	f001 fb62 	bl	800cf10 <iprintf>
 800b84c:	4828      	ldr	r0, [pc, #160]	; (800b8f0 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800b84e:	f001 fbfb 	bl	800d048 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b852:	4b22      	ldr	r3, [pc, #136]	; (800b8dc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b854:	789b      	ldrb	r3, [r3, #2]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d023      	beq.n	800b8a2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800b85a:	f7fc ff27 	bl	80086ac <aci_gap_configure_whitelist>
 800b85e:	4603      	mov	r3, r0
 800b860:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00f      	beq.n	800b888 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b868:	4816      	ldr	r0, [pc, #88]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b86a:	f7fe fbcd 	bl	800a008 <DbgTraceGetFileName>
 800b86e:	4601      	mov	r1, r0
 800b870:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b876:	4815      	ldr	r0, [pc, #84]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b878:	f001 fb4a 	bl	800cf10 <iprintf>
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	4619      	mov	r1, r3
 800b880:	481c      	ldr	r0, [pc, #112]	; (800b8f4 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800b882:	f001 fb45 	bl	800cf10 <iprintf>
 800b886:	e00c      	b.n	800b8a2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b888:	480e      	ldr	r0, [pc, #56]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b88a:	f7fe fbbd 	bl	800a008 <DbgTraceGetFileName>
 800b88e:	4601      	mov	r1, r0
 800b890:	f240 33eb 	movw	r3, #1003	; 0x3eb
 800b894:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b896:	480d      	ldr	r0, [pc, #52]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b898:	f001 fb3a 	bl	800cf10 <iprintf>
 800b89c:	4816      	ldr	r0, [pc, #88]	; (800b8f8 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800b89e:	f001 fbd3 	bl	800d048 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b8a2:	4808      	ldr	r0, [pc, #32]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b8a4:	f7fe fbb0 	bl	800a008 <DbgTraceGetFileName>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	f240 33ee 	movw	r3, #1006	; 0x3ee
 800b8ae:	4a06      	ldr	r2, [pc, #24]	; (800b8c8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b8b0:	4806      	ldr	r0, [pc, #24]	; (800b8cc <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b8b2:	f001 fb2d 	bl	800cf10 <iprintf>
 800b8b6:	4811      	ldr	r0, [pc, #68]	; (800b8fc <Ble_Hci_Gap_Gatt_Init+0x524>)
 800b8b8:	f001 fb2a 	bl	800cf10 <iprintf>
}
 800b8bc:	bf00      	nop
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c4:	0800e3c0 	.word	0x0800e3c0
 800b8c8:	0800f7dc 	.word	0x0800f7dc
 800b8cc:	0800e3dc 	.word	0x0800e3dc
 800b8d0:	0800edd8 	.word	0x0800edd8
 800b8d4:	0800edf8 	.word	0x0800edf8
 800b8d8:	0800ee34 	.word	0x0800ee34
 800b8dc:	20000184 	.word	0x20000184
 800b8e0:	0800ee60 	.word	0x0800ee60
 800b8e4:	0800eea0 	.word	0x0800eea0
 800b8e8:	0001b207 	.word	0x0001b207
 800b8ec:	0800eed0 	.word	0x0800eed0
 800b8f0:	0800ef1c 	.word	0x0800ef1c
 800b8f4:	0800ef58 	.word	0x0800ef58
 800b8f8:	0800ef98 	.word	0x0800ef98
 800b8fc:	0800efc8 	.word	0x0800efc8

0800b900 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08c      	sub	sp, #48	; 0x30
 800b904:	af08      	add	r7, sp, #32
 800b906:	4603      	mov	r3, r0
 800b908:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b90a:	2392      	movs	r3, #146	; 0x92
 800b90c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b90e:	4a32      	ldr	r2, [pc, #200]	; (800b9d8 <Adv_Request+0xd8>)
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b916:	2300      	movs	r3, #0
 800b918:	9306      	str	r3, [sp, #24]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9305      	str	r3, [sp, #20]
 800b91e:	2300      	movs	r3, #0
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	2300      	movs	r3, #0
 800b924:	9303      	str	r3, [sp, #12]
 800b926:	2300      	movs	r3, #0
 800b928:	9302      	str	r3, [sp, #8]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	2300      	movs	r3, #0
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	22a0      	movs	r2, #160	; 0xa0
 800b936:	2180      	movs	r1, #128	; 0x80
 800b938:	2000      	movs	r0, #0
 800b93a:	f7fc fb1f 	bl	8007f7c <aci_gap_set_discoverable>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00f      	beq.n	800b968 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b948:	4824      	ldr	r0, [pc, #144]	; (800b9dc <Adv_Request+0xdc>)
 800b94a:	f7fe fb5d 	bl	800a008 <DbgTraceGetFileName>
 800b94e:	4601      	mov	r1, r0
 800b950:	f240 4304 	movw	r3, #1028	; 0x404
 800b954:	4a22      	ldr	r2, [pc, #136]	; (800b9e0 <Adv_Request+0xe0>)
 800b956:	4823      	ldr	r0, [pc, #140]	; (800b9e4 <Adv_Request+0xe4>)
 800b958:	f001 fada 	bl	800cf10 <iprintf>
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4619      	mov	r1, r3
 800b960:	4821      	ldr	r0, [pc, #132]	; (800b9e8 <Adv_Request+0xe8>)
 800b962:	f001 fad5 	bl	800cf10 <iprintf>
 800b966:	e00c      	b.n	800b982 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b968:	481c      	ldr	r0, [pc, #112]	; (800b9dc <Adv_Request+0xdc>)
 800b96a:	f7fe fb4d 	bl	800a008 <DbgTraceGetFileName>
 800b96e:	4601      	mov	r1, r0
 800b970:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800b974:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <Adv_Request+0xe0>)
 800b976:	481b      	ldr	r0, [pc, #108]	; (800b9e4 <Adv_Request+0xe4>)
 800b978:	f001 faca 	bl	800cf10 <iprintf>
 800b97c:	481b      	ldr	r0, [pc, #108]	; (800b9ec <Adv_Request+0xec>)
 800b97e:	f001 fb63 	bl	800d048 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b982:	491b      	ldr	r1, [pc, #108]	; (800b9f0 <Adv_Request+0xf0>)
 800b984:	2013      	movs	r0, #19
 800b986:	f7fc fe1f 	bl	80085c8 <aci_gap_update_adv_data>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00f      	beq.n	800b9b4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b994:	4811      	ldr	r0, [pc, #68]	; (800b9dc <Adv_Request+0xdc>)
 800b996:	f7fe fb37 	bl	800a008 <DbgTraceGetFileName>
 800b99a:	4601      	mov	r1, r0
 800b99c:	f240 430f 	movw	r3, #1039	; 0x40f
 800b9a0:	4a0f      	ldr	r2, [pc, #60]	; (800b9e0 <Adv_Request+0xe0>)
 800b9a2:	4810      	ldr	r0, [pc, #64]	; (800b9e4 <Adv_Request+0xe4>)
 800b9a4:	f001 fab4 	bl	800cf10 <iprintf>
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4811      	ldr	r0, [pc, #68]	; (800b9f4 <Adv_Request+0xf4>)
 800b9ae:	f001 faaf 	bl	800cf10 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b9b2:	e00d      	b.n	800b9d0 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b9b4:	4809      	ldr	r0, [pc, #36]	; (800b9dc <Adv_Request+0xdc>)
 800b9b6:	f7fe fb27 	bl	800a008 <DbgTraceGetFileName>
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	f240 4313 	movw	r3, #1043	; 0x413
 800b9c0:	4a07      	ldr	r2, [pc, #28]	; (800b9e0 <Adv_Request+0xe0>)
 800b9c2:	4808      	ldr	r0, [pc, #32]	; (800b9e4 <Adv_Request+0xe4>)
 800b9c4:	f001 faa4 	bl	800cf10 <iprintf>
 800b9c8:	480b      	ldr	r0, [pc, #44]	; (800b9f8 <Adv_Request+0xf8>)
 800b9ca:	f001 faa1 	bl	800cf10 <iprintf>
  return;
 800b9ce:	bf00      	nop
}
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000184 	.word	0x20000184
 800b9dc:	0800e3c0 	.word	0x0800e3c0
 800b9e0:	0800f7f4 	.word	0x0800f7f4
 800b9e4:	0800e3dc 	.word	0x0800e3dc
 800b9e8:	0800eff4 	.word	0x0800eff4
 800b9ec:	0800f02c 	.word	0x0800f02c
 800b9f0:	20000010 	.word	0x20000010
 800b9f4:	0800f054 	.word	0x0800f054
 800b9f8:	0800f088 	.word	0x0800f088

0800b9fc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ba02:	f7ff f8c7 	bl	800ab94 <LL_FLASH_GetUDN>
 800ba06:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d023      	beq.n	800ba58 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ba10:	f7ff f8d8 	bl	800abc4 <LL_FLASH_GetSTCompanyID>
 800ba14:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ba16:	f7ff f8c9 	bl	800abac <LL_FLASH_GetDeviceID>
 800ba1a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	4b16      	ldr	r3, [pc, #88]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba22:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	4b14      	ldr	r3, [pc, #80]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba2c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba34:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba3c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba46:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	0c1b      	lsrs	r3, r3, #16
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba50:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ba52:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <BleGetBdAddress+0x80>)
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e00b      	b.n	800ba70 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ba58:	2000      	movs	r0, #0
 800ba5a:	f7fe fbb3 	bl	800a1c4 <OTP_Read>
 800ba5e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	e001      	b.n	800ba70 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <BleGetBdAddress+0x84>)
 800ba6e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ba70:	697b      	ldr	r3, [r7, #20]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20026fb8 	.word	0x20026fb8
 800ba80:	0800f78c 	.word	0x0800f78c

0800ba84 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2102      	movs	r1, #2
 800ba8e:	4821      	ldr	r0, [pc, #132]	; (800bb14 <Adv_Cancel+0x90>)
 800ba90:	f7f8 fa26 	bl	8003ee0 <HAL_GPIO_WritePin>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ba94:	4b20      	ldr	r3, [pc, #128]	; (800bb18 <Adv_Cancel+0x94>)
 800ba96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d035      	beq.n	800bb0a <Adv_Cancel+0x86>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ba9e:	2392      	movs	r3, #146	; 0x92
 800baa0:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800baa2:	f7fc fa47 	bl	8007f34 <aci_gap_set_non_discoverable>
 800baa6:	4603      	mov	r3, r0
 800baa8:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800baaa:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <Adv_Cancel+0x94>)
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00d      	beq.n	800bad4 <Adv_Cancel+0x50>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800bab8:	4818      	ldr	r0, [pc, #96]	; (800bb1c <Adv_Cancel+0x98>)
 800baba:	f7fe faa5 	bl	800a008 <DbgTraceGetFileName>
 800babe:	4601      	mov	r1, r0
 800bac0:	f240 4361 	movw	r3, #1121	; 0x461
 800bac4:	4a16      	ldr	r2, [pc, #88]	; (800bb20 <Adv_Cancel+0x9c>)
 800bac6:	4817      	ldr	r0, [pc, #92]	; (800bb24 <Adv_Cancel+0xa0>)
 800bac8:	f001 fa22 	bl	800cf10 <iprintf>
 800bacc:	4816      	ldr	r0, [pc, #88]	; (800bb28 <Adv_Cancel+0xa4>)
 800bace:	f001 fa1f 	bl	800cf10 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800bad2:	e01a      	b.n	800bb0a <Adv_Cancel+0x86>
      APP_DBG_MSG("  \r\n\r");
 800bad4:	4811      	ldr	r0, [pc, #68]	; (800bb1c <Adv_Cancel+0x98>)
 800bad6:	f7fe fa97 	bl	800a008 <DbgTraceGetFileName>
 800bada:	4601      	mov	r1, r0
 800badc:	f240 4365 	movw	r3, #1125	; 0x465
 800bae0:	4a0f      	ldr	r2, [pc, #60]	; (800bb20 <Adv_Cancel+0x9c>)
 800bae2:	4810      	ldr	r0, [pc, #64]	; (800bb24 <Adv_Cancel+0xa0>)
 800bae4:	f001 fa14 	bl	800cf10 <iprintf>
 800bae8:	4810      	ldr	r0, [pc, #64]	; (800bb2c <Adv_Cancel+0xa8>)
 800baea:	f001 fa11 	bl	800cf10 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800baee:	480b      	ldr	r0, [pc, #44]	; (800bb1c <Adv_Cancel+0x98>)
 800baf0:	f7fe fa8a 	bl	800a008 <DbgTraceGetFileName>
 800baf4:	4601      	mov	r1, r0
 800baf6:	f240 4366 	movw	r3, #1126	; 0x466
 800bafa:	4a09      	ldr	r2, [pc, #36]	; (800bb20 <Adv_Cancel+0x9c>)
 800bafc:	4809      	ldr	r0, [pc, #36]	; (800bb24 <Adv_Cancel+0xa0>)
 800bafe:	f001 fa07 	bl	800cf10 <iprintf>
 800bb02:	480b      	ldr	r0, [pc, #44]	; (800bb30 <Adv_Cancel+0xac>)
 800bb04:	f001 fa04 	bl	800cf10 <iprintf>
  return;
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
}
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	48000400 	.word	0x48000400
 800bb18:	20000184 	.word	0x20000184
 800bb1c:	0800e3c0 	.word	0x0800e3c0
 800bb20:	0800f800 	.word	0x0800f800
 800bb24:	0800e3dc 	.word	0x0800e3dc
 800bb28:	0800f0b0 	.word	0x0800f0b0
 800bb2c:	0800f0d4 	.word	0x0800f0d4
 800bb30:	0800f0dc 	.word	0x0800f0dc

0800bb34 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800bb38:	f000 f9ec 	bl	800bf14 <P2PS_APP_SW1_Button_Action>
}
 800bb3c:	bf00      	nop
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <APP_BLE_Key_Button2_Action>:
void APP_BLE_Key_Button2_Action(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  P2PS_APP_SW2_Button_Action();
 800bb44:	f000 fa02 	bl	800bf4c <P2PS_APP_SW2_Button_Action>
}
 800bb48:	bf00      	nop
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bb54:	2100      	movs	r1, #0
 800bb56:	2004      	movs	r0, #4
 800bb58:	f001 f87a 	bl	800cc50 <UTIL_SEQ_SetTask>

  return;
 800bb5c:	bf00      	nop
}
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	f001 f8db 	bl	800cd28 <UTIL_SEQ_SetEvt>

  return;
 800bb72:	bf00      	nop
}
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bb82:	2001      	movs	r0, #1
 800bb84:	f001 f8f0 	bl	800cd68 <UTIL_SEQ_WaitEvt>

  return;
 800bb88:	bf00      	nop
}
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	3308      	adds	r3, #8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd fbd8 	bl	8009358 <SVCCTL_UserEvtRx>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800bbac:	7afb      	ldrb	r3, [r7, #11]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800bbb8:	e003      	b.n	800bbc2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
  return;
 800bbc0:	bf00      	nop
}
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <BLE_StatusNot+0x16>
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d006      	beq.n	800bbea <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800bbdc:	e00b      	b.n	800bbf6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bbde:	237f      	movs	r3, #127	; 0x7f
 800bbe0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f001 f860 	bl	800cca8 <UTIL_SEQ_PauseTask>
      break;
 800bbe8:	e005      	b.n	800bbf6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bbea:	237f      	movs	r3, #127	; 0x7f
 800bbec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f001 f87a 	bl	800cce8 <UTIL_SEQ_ResumeTask>
      break;
 800bbf4:	bf00      	nop
  }

  return;
 800bbf6:	bf00      	nop
}
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <Custom_STM_App_Notification>:
static void GetFrameAction(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d82b      	bhi.n	800bc68 <Custom_STM_App_Notification+0x68>
 800bc10:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <Custom_STM_App_Notification+0x18>)
 800bc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc16:	bf00      	nop
 800bc18:	0800bc69 	.word	0x0800bc69
 800bc1c:	0800bc69 	.word	0x0800bc69
 800bc20:	0800bc29 	.word	0x0800bc29
 800bc24:	0800bc49 	.word	0x0800bc49
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_EVT */
      break;

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 800bc28:	4812      	ldr	r0, [pc, #72]	; (800bc74 <Custom_STM_App_Notification+0x74>)
 800bc2a:	f7fe f9ed 	bl	800a008 <DbgTraceGetFileName>
 800bc2e:	4601      	mov	r1, r0
 800bc30:	237a      	movs	r3, #122	; 0x7a
 800bc32:	4a11      	ldr	r2, [pc, #68]	; (800bc78 <Custom_STM_App_Notification+0x78>)
 800bc34:	4811      	ldr	r0, [pc, #68]	; (800bc7c <Custom_STM_App_Notification+0x7c>)
 800bc36:	f001 f96b 	bl	800cf10 <iprintf>
 800bc3a:	4811      	ldr	r0, [pc, #68]	; (800bc80 <Custom_STM_App_Notification+0x80>)
 800bc3c:	f001 fa04 	bl	800d048 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 1;
 800bc40:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <Custom_STM_App_Notification+0x84>)
 800bc42:	2201      	movs	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800bc46:	e010      	b.n	800bc6a <Custom_STM_App_Notification+0x6a>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 800bc48:	480a      	ldr	r0, [pc, #40]	; (800bc74 <Custom_STM_App_Notification+0x74>)
 800bc4a:	f7fe f9dd 	bl	800a008 <DbgTraceGetFileName>
 800bc4e:	4601      	mov	r1, r0
 800bc50:	2382      	movs	r3, #130	; 0x82
 800bc52:	4a09      	ldr	r2, [pc, #36]	; (800bc78 <Custom_STM_App_Notification+0x78>)
 800bc54:	4809      	ldr	r0, [pc, #36]	; (800bc7c <Custom_STM_App_Notification+0x7c>)
 800bc56:	f001 f95b 	bl	800cf10 <iprintf>
 800bc5a:	480b      	ldr	r0, [pc, #44]	; (800bc88 <Custom_STM_App_Notification+0x88>)
 800bc5c:	f001 f9f4 	bl	800d048 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 0;
 800bc60:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <Custom_STM_App_Notification+0x84>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800bc66:	e000      	b.n	800bc6a <Custom_STM_App_Notification+0x6a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800bc68:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800bc6a:	bf00      	nop
}
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	0800f150 	.word	0x0800f150
 800bc78:	0800f80c 	.word	0x0800f80c
 800bc7c:	0800f170 	.word	0x0800f170
 800bc80:	0800f184 	.word	0x0800f184
 800bc84:	20000208 	.word	0x20000208
 800bc88:	0800f1b4 	.word	0x0800f1b4

0800bc8c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <Custom_APP_Notification+0x16>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d002      	beq.n	800bca6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800bca0:	e002      	b.n	800bca8 <Custom_APP_Notification+0x1c>
      break;
 800bca2:	bf00      	nop
 800bca4:	e000      	b.n	800bca8 <Custom_APP_Notification+0x1c>
      break;
 800bca6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800bca8:	bf00      	nop
}
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	//UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1Task);
	//UTIL_SEQ_RegTask(1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2Task);
	UTIL_SEQ_RegTask(1<< CFG_TASK_TIMER_EVT_ID, UTIL_SEQ_RFU, GetFrameAction);
 800bcb8:	4a0a      	ldr	r2, [pc, #40]	; (800bce4 <Custom_APP_Init+0x30>)
 800bcba:	2100      	movs	r1, #0
 800bcbc:	2008      	movs	r0, #8
 800bcbe:	f000 ffa5 	bl	800cc0c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<< CFG_TASK_STREAM, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 800bcc2:	4a09      	ldr	r2, [pc, #36]	; (800bce8 <Custom_APP_Init+0x34>)
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	2010      	movs	r0, #16
 800bcc8:	f000 ffa0 	bl	800cc0c <UTIL_SEQ_RegTask>

	  Custom_App_Context.Switch_c_Notification_Status = 0;
 800bccc:	4b07      	ldr	r3, [pc, #28]	; (800bcec <Custom_APP_Init+0x38>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.SW1_Status = 0;
 800bcd2:	4b06      	ldr	r3, [pc, #24]	; (800bcec <Custom_APP_Init+0x38>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	705a      	strb	r2, [r3, #1]
	  Custom_App_Context.SW2_Status = 0;
 800bcd8:	4b04      	ldr	r3, [pc, #16]	; (800bcec <Custom_APP_Init+0x38>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	709a      	strb	r2, [r3, #2]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800bcde:	bf00      	nop
}
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	0800bec9 	.word	0x0800bec9
 800bce8:	0800bcf1 	.word	0x0800bcf1
 800bcec:	20000208 	.word	0x20000208

0800bcf0 <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_NS_1*/

   header = 0xBEBE;
 800bcfa:	4b63      	ldr	r3, [pc, #396]	; (800be88 <Custom_Switch_c_Send_Notification+0x198>)
 800bcfc:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800bd00:	801a      	strh	r2, [r3, #0]
   footer = 0xDEDE;
 800bd02:	4b62      	ldr	r3, [pc, #392]	; (800be8c <Custom_Switch_c_Send_Notification+0x19c>)
 800bd04:	f64d 62de 	movw	r2, #57054	; 0xdede
 800bd08:	801a      	strh	r2, [r3, #0]
   APP_DBG_MSG("\r\nNOTIFYING \n");
 800bd0a:	4861      	ldr	r0, [pc, #388]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800bd0c:	f7fe f97c 	bl	800a008 <DbgTraceGetFileName>
 800bd10:	4601      	mov	r1, r0
 800bd12:	23ef      	movs	r3, #239	; 0xef
 800bd14:	4a5f      	ldr	r2, [pc, #380]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800bd16:	4860      	ldr	r0, [pc, #384]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800bd18:	f001 f8fa 	bl	800cf10 <iprintf>
 800bd1c:	485f      	ldr	r0, [pc, #380]	; (800be9c <Custom_Switch_c_Send_Notification+0x1ac>)
 800bd1e:	f001 f993 	bl	800d048 <puts>

  	  if(Custom_App_Context.Switch_c_Notification_Status)
 800bd22:	4b5f      	ldr	r3, [pc, #380]	; (800bea0 <Custom_Switch_c_Send_Notification+0x1b0>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8094 	beq.w	800be54 <Custom_Switch_c_Send_Notification+0x164>
  		{
  		      P2PS_NOTIFY_INT16(P2P_NOTIFY_CHAR_UUID, &header, 2);
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	4956      	ldr	r1, [pc, #344]	; (800be88 <Custom_Switch_c_Send_Notification+0x198>)
 800bd30:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bd34:	f000 f94c 	bl	800bfd0 <P2PS_NOTIFY_INT16>
  		      HAL_Delay(10);
 800bd38:	200a      	movs	r0, #10
 800bd3a:	f7f5 fc43 	bl	80015c4 <HAL_Delay>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bd3e:	2300      	movs	r3, #0
 800bd40:	81fb      	strh	r3, [r7, #14]
 800bd42:	e00b      	b.n	800bd5c <Custom_Switch_c_Send_Notification+0x6c>
  		            	  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)frame_buffer0+k, 100);
 800bd44:	89fb      	ldrh	r3, [r7, #14]
 800bd46:	4a57      	ldr	r2, [pc, #348]	; (800bea4 <Custom_Switch_c_Send_Notification+0x1b4>)
 800bd48:	4413      	add	r3, r2
 800bd4a:	2264      	movs	r2, #100	; 0x64
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bd52:	f000 f917 	bl	800bf84 <P2PS_NOTIFY_INT8>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bd56:	89fb      	ldrh	r3, [r7, #14]
 800bd58:	3364      	adds	r3, #100	; 0x64
 800bd5a:	81fb      	strh	r3, [r7, #14]
 800bd5c:	89fb      	ldrh	r3, [r7, #14]
 800bd5e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800bd62:	d3ef      	bcc.n	800bd44 <Custom_Switch_c_Send_Notification+0x54>
  		  				//HAL_Delay(1);
  		              }
  		      APP_DBG_MSG("\r\n OK");
 800bd64:	484a      	ldr	r0, [pc, #296]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800bd66:	f7fe f94f 	bl	800a008 <DbgTraceGetFileName>
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	23f9      	movs	r3, #249	; 0xf9
 800bd6e:	4a49      	ldr	r2, [pc, #292]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800bd70:	4849      	ldr	r0, [pc, #292]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800bd72:	f001 f8cd 	bl	800cf10 <iprintf>
 800bd76:	484c      	ldr	r0, [pc, #304]	; (800bea8 <Custom_Switch_c_Send_Notification+0x1b8>)
 800bd78:	f001 f8ca 	bl	800cf10 <iprintf>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	81bb      	strh	r3, [r7, #12]
 800bd80:	e00b      	b.n	800bd9a <Custom_Switch_c_Send_Notification+0xaa>
  		            	  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)frame_buffer1+k, 100);
 800bd82:	89bb      	ldrh	r3, [r7, #12]
 800bd84:	4a49      	ldr	r2, [pc, #292]	; (800beac <Custom_Switch_c_Send_Notification+0x1bc>)
 800bd86:	4413      	add	r3, r2
 800bd88:	2264      	movs	r2, #100	; 0x64
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bd90:	f000 f8f8 	bl	800bf84 <P2PS_NOTIFY_INT8>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bd94:	89bb      	ldrh	r3, [r7, #12]
 800bd96:	3364      	adds	r3, #100	; 0x64
 800bd98:	81bb      	strh	r3, [r7, #12]
 800bd9a:	89bb      	ldrh	r3, [r7, #12]
 800bd9c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800bda0:	d3ef      	bcc.n	800bd82 <Custom_Switch_c_Send_Notification+0x92>
  		                  //HAL_Delay(1);
  		                  }
  		      APP_DBG_MSG("\r\n OK");
 800bda2:	483b      	ldr	r0, [pc, #236]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800bda4:	f7fe f930 	bl	800a008 <DbgTraceGetFileName>
 800bda8:	4601      	mov	r1, r0
 800bdaa:	23fe      	movs	r3, #254	; 0xfe
 800bdac:	4a39      	ldr	r2, [pc, #228]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800bdae:	483a      	ldr	r0, [pc, #232]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800bdb0:	f001 f8ae 	bl	800cf10 <iprintf>
 800bdb4:	483c      	ldr	r0, [pc, #240]	; (800bea8 <Custom_Switch_c_Send_Notification+0x1b8>)
 800bdb6:	f001 f8ab 	bl	800cf10 <iprintf>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bdba:	2300      	movs	r3, #0
 800bdbc:	817b      	strh	r3, [r7, #10]
 800bdbe:	e00b      	b.n	800bdd8 <Custom_Switch_c_Send_Notification+0xe8>
  		            	  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)frame_buffer2+k, 100);
 800bdc0:	897b      	ldrh	r3, [r7, #10]
 800bdc2:	4a3b      	ldr	r2, [pc, #236]	; (800beb0 <Custom_Switch_c_Send_Notification+0x1c0>)
 800bdc4:	4413      	add	r3, r2
 800bdc6:	2264      	movs	r2, #100	; 0x64
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bdce:	f000 f8d9 	bl	800bf84 <P2PS_NOTIFY_INT8>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bdd2:	897b      	ldrh	r3, [r7, #10]
 800bdd4:	3364      	adds	r3, #100	; 0x64
 800bdd6:	817b      	strh	r3, [r7, #10]
 800bdd8:	897b      	ldrh	r3, [r7, #10]
 800bdda:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800bdde:	d3ef      	bcc.n	800bdc0 <Custom_Switch_c_Send_Notification+0xd0>
  		                  //HAL_Delay(1);
  		                  }
  		      APP_DBG_MSG("\r\n OK");
 800bde0:	482b      	ldr	r0, [pc, #172]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800bde2:	f7fe f911 	bl	800a008 <DbgTraceGetFileName>
 800bde6:	4601      	mov	r1, r0
 800bde8:	f240 1303 	movw	r3, #259	; 0x103
 800bdec:	4a29      	ldr	r2, [pc, #164]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800bdee:	482a      	ldr	r0, [pc, #168]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800bdf0:	f001 f88e 	bl	800cf10 <iprintf>
 800bdf4:	482c      	ldr	r0, [pc, #176]	; (800bea8 <Custom_Switch_c_Send_Notification+0x1b8>)
 800bdf6:	f001 f88b 	bl	800cf10 <iprintf>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	813b      	strh	r3, [r7, #8]
 800bdfe:	e00b      	b.n	800be18 <Custom_Switch_c_Send_Notification+0x128>
  		            	  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)frame_buffer3+k, 101);
 800be00:	893b      	ldrh	r3, [r7, #8]
 800be02:	4a2c      	ldr	r2, [pc, #176]	; (800beb4 <Custom_Switch_c_Send_Notification+0x1c4>)
 800be04:	4413      	add	r3, r2
 800be06:	2265      	movs	r2, #101	; 0x65
 800be08:	4619      	mov	r1, r3
 800be0a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800be0e:	f000 f8b9 	bl	800bf84 <P2PS_NOTIFY_INT8>
  		              for(uint16_t k = 0; k<320*120;k=k+100){
 800be12:	893b      	ldrh	r3, [r7, #8]
 800be14:	3364      	adds	r3, #100	; 0x64
 800be16:	813b      	strh	r3, [r7, #8]
 800be18:	893b      	ldrh	r3, [r7, #8]
 800be1a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800be1e:	d3ef      	bcc.n	800be00 <Custom_Switch_c_Send_Notification+0x110>
  		                  //HAL_Delay(1);
  		                  }
  		      APP_DBG_MSG("\r\n OK \r\n END");
 800be20:	481b      	ldr	r0, [pc, #108]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800be22:	f7fe f8f1 	bl	800a008 <DbgTraceGetFileName>
 800be26:	4601      	mov	r1, r0
 800be28:	f44f 7384 	mov.w	r3, #264	; 0x108
 800be2c:	4a19      	ldr	r2, [pc, #100]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800be2e:	481a      	ldr	r0, [pc, #104]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800be30:	f001 f86e 	bl	800cf10 <iprintf>
 800be34:	4820      	ldr	r0, [pc, #128]	; (800beb8 <Custom_Switch_c_Send_Notification+0x1c8>)
 800be36:	f001 f86b 	bl	800cf10 <iprintf>
  		      HAL_Delay(10);
 800be3a:	200a      	movs	r0, #10
 800be3c:	f7f5 fbc2 	bl	80015c4 <HAL_Delay>
  		      P2PS_NOTIFY_INT16(P2P_NOTIFY_CHAR_UUID, &footer, 2);
 800be40:	2202      	movs	r2, #2
 800be42:	4912      	ldr	r1, [pc, #72]	; (800be8c <Custom_Switch_c_Send_Notification+0x19c>)
 800be44:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800be48:	f000 f8c2 	bl	800bfd0 <P2PS_NOTIFY_INT16>

  		      GET_FRAME_FLAG=1;
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <Custom_Switch_c_Send_Notification+0x1cc>)
 800be4e:	2201      	movs	r2, #1
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	e00c      	b.n	800be6e <Custom_Switch_c_Send_Notification+0x17e>
  		}

  	 else
  	 {
  	   APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800be54:	480e      	ldr	r0, [pc, #56]	; (800be90 <Custom_Switch_c_Send_Notification+0x1a0>)
 800be56:	f7fe f8d7 	bl	800a008 <DbgTraceGetFileName>
 800be5a:	4601      	mov	r1, r0
 800be5c:	f240 1311 	movw	r3, #273	; 0x111
 800be60:	4a0c      	ldr	r2, [pc, #48]	; (800be94 <Custom_Switch_c_Send_Notification+0x1a4>)
 800be62:	480d      	ldr	r0, [pc, #52]	; (800be98 <Custom_Switch_c_Send_Notification+0x1a8>)
 800be64:	f001 f854 	bl	800cf10 <iprintf>
 800be68:	4815      	ldr	r0, [pc, #84]	; (800bec0 <Custom_Switch_c_Send_Notification+0x1d0>)
 800be6a:	f001 f8ed 	bl	800d048 <puts>
  	 }
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d004      	beq.n	800be7e <Custom_Switch_c_Send_Notification+0x18e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800be74:	4913      	ldr	r1, [pc, #76]	; (800bec4 <Custom_Switch_c_Send_Notification+0x1d4>)
 800be76:	2001      	movs	r0, #1
 800be78:	f000 fab6 	bl	800c3e8 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Switch_c_NS_Last*/
  /* USER CODE END Switch_c_NS_Last*/

  return;
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
}
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	200270c0 	.word	0x200270c0
 800be8c:	200270c2 	.word	0x200270c2
 800be90:	0800f150 	.word	0x0800f150
 800be94:	0800f828 	.word	0x0800f828
 800be98:	0800f170 	.word	0x0800f170
 800be9c:	0800f1e4 	.word	0x0800f1e4
 800bea0:	20000208 	.word	0x20000208
 800bea4:	200017b8 	.word	0x200017b8
 800bea8:	0800f1f4 	.word	0x0800f1f4
 800beac:	2000adb8 	.word	0x2000adb8
 800beb0:	200143b8 	.word	0x200143b8
 800beb4:	2001d9b8 	.word	0x2001d9b8
 800beb8:	0800f1fc 	.word	0x0800f1fc
 800bebc:	200270bf 	.word	0x200270bf
 800bec0:	0800f20c 	.word	0x0800f20c
 800bec4:	20026fc8 	.word	0x20026fc8

0800bec8 <GetFrameAction>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void GetFrameAction(void) /* Property Notification */
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
  APP_DBG_MSG("\r\n Image has been capturing \n");
 800becc:	480c      	ldr	r0, [pc, #48]	; (800bf00 <GetFrameAction+0x38>)
 800bece:	f7fe f89b 	bl	800a008 <DbgTraceGetFileName>
 800bed2:	4601      	mov	r1, r0
 800bed4:	f240 1323 	movw	r3, #291	; 0x123
 800bed8:	4a0a      	ldr	r2, [pc, #40]	; (800bf04 <GetFrameAction+0x3c>)
 800beda:	480b      	ldr	r0, [pc, #44]	; (800bf08 <GetFrameAction+0x40>)
 800bedc:	f001 f818 	bl	800cf10 <iprintf>
 800bee0:	480a      	ldr	r0, [pc, #40]	; (800bf0c <GetFrameAction+0x44>)
 800bee2:	f001 f8b1 	bl	800d048 <puts>
  //get_frame();
  GET_FRAME_FLAG=0;
 800bee6:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <GetFrameAction+0x48>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_PauseTask(1<<CFG_TASK_TIMER_EVT_ID);
 800beec:	2008      	movs	r0, #8
 800beee:	f000 fedb 	bl	800cca8 <UTIL_SEQ_PauseTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_STREAM, CFG_SCH_PRIO_0);
 800bef2:	2100      	movs	r1, #0
 800bef4:	2010      	movs	r0, #16
 800bef6:	f000 feab 	bl	800cc50 <UTIL_SEQ_SetTask>
  return;
 800befa:	bf00      	nop
}
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0800f150 	.word	0x0800f150
 800bf04:	0800f84c 	.word	0x0800f84c
 800bf08:	0800f170 	.word	0x0800f170
 800bf0c:	0800f254 	.word	0x0800f254
 800bf10:	200270bf 	.word	0x200270bf

0800bf14 <P2PS_APP_SW1_Button_Action>:


void P2PS_APP_SW1_Button_Action(void){
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TASK_TIMER_EVT_ID);
 800bf18:	2008      	movs	r0, #8
 800bf1a:	f000 fec5 	bl	800cca8 <UTIL_SEQ_PauseTask>
	APP_DBG_MSG("\r\nPAUSED \n");
 800bf1e:	4807      	ldr	r0, [pc, #28]	; (800bf3c <P2PS_APP_SW1_Button_Action+0x28>)
 800bf20:	f7fe f872 	bl	800a008 <DbgTraceGetFileName>
 800bf24:	4601      	mov	r1, r0
 800bf26:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800bf2a:	4a05      	ldr	r2, [pc, #20]	; (800bf40 <P2PS_APP_SW1_Button_Action+0x2c>)
 800bf2c:	4805      	ldr	r0, [pc, #20]	; (800bf44 <P2PS_APP_SW1_Button_Action+0x30>)
 800bf2e:	f000 ffef 	bl	800cf10 <iprintf>
 800bf32:	4805      	ldr	r0, [pc, #20]	; (800bf48 <P2PS_APP_SW1_Button_Action+0x34>)
 800bf34:	f001 f888 	bl	800d048 <puts>
	/*
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    flag=0 ;
    APP_DBG_MSG("\r\nFLAG = 0\t Stream Halt value = %d \n", testo[0]);
*/
    return;
 800bf38:	bf00      	nop
  }
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	0800f150 	.word	0x0800f150
 800bf40:	0800f85c 	.word	0x0800f85c
 800bf44:	0800f170 	.word	0x0800f170
 800bf48:	0800f274 	.word	0x0800f274

0800bf4c <P2PS_APP_SW2_Button_Action>:
void P2PS_APP_SW2_Button_Action(void){
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	af00      	add	r7, sp, #0
	UTIL_SEQ_ResumeTask(1<<CFG_TASK_TIMER_EVT_ID);
 800bf50:	2008      	movs	r0, #8
 800bf52:	f000 fec9 	bl	800cce8 <UTIL_SEQ_ResumeTask>
	APP_DBG_MSG("\r\nRESUME \n");
 800bf56:	4807      	ldr	r0, [pc, #28]	; (800bf74 <P2PS_APP_SW2_Button_Action+0x28>)
 800bf58:	f7fe f856 	bl	800a008 <DbgTraceGetFileName>
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	f44f 739c 	mov.w	r3, #312	; 0x138
 800bf62:	4a05      	ldr	r2, [pc, #20]	; (800bf78 <P2PS_APP_SW2_Button_Action+0x2c>)
 800bf64:	4805      	ldr	r0, [pc, #20]	; (800bf7c <P2PS_APP_SW2_Button_Action+0x30>)
 800bf66:	f000 ffd3 	bl	800cf10 <iprintf>
 800bf6a:	4805      	ldr	r0, [pc, #20]	; (800bf80 <P2PS_APP_SW2_Button_Action+0x34>)
 800bf6c:	f001 f86c 	bl	800d048 <puts>
/*
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    flag=1;
	APP_DBG_MSG("\r\nFLAG = 1\t Streaming \n");
*/
    return;
 800bf70:	bf00      	nop
  }
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	0800f150 	.word	0x0800f150
 800bf78:	0800f878 	.word	0x0800f878
 800bf7c:	0800f170 	.word	0x0800f170
 800bf80:	0800f280 	.word	0x0800f280

0800bf84 <P2PS_NOTIFY_INT8>:
#define COPY_MY_LED_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x41,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)
#define COPY_MY_SWITCH_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x42,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)

/* USER CODE BEGIN PF */
tBleStatus P2PS_NOTIFY_INT8(uint16_t UUID, uint8_t *pPayload, uint8_t size)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af02      	add	r7, sp, #8
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	80fb      	strh	r3, [r7, #6]
 800bf90:	4613      	mov	r3, r2
 800bf92:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800bf94:	2392      	movs	r3, #146	; 0x92
 800bf96:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800bf98:	88fb      	ldrh	r3, [r7, #6]
 800bf9a:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d10d      	bne.n	800bfbe <P2PS_NOTIFY_INT8+0x3a>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <P2PS_NOTIFY_INT8+0x48>)
 800bfa4:	8818      	ldrh	r0, [r3, #0]
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <P2PS_NOTIFY_INT8+0x48>)
 800bfa8:	8899      	ldrh	r1, [r3, #4]
 800bfaa:	797a      	ldrb	r2, [r7, #5]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f7fc fe5c 	bl	8008c70 <aci_gatt_update_char_value>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73fb      	strb	r3, [r7, #15]
    		 	 	 	 	 CustomContext.CustomSwitch_CHdle,
                              0, /* charValOffset */
                             size, /* charValueLen */
                             (uint8_t *)  pPayload);

      break;
 800bfbc:	e000      	b.n	800bfc0 <P2PS_NOTIFY_INT8+0x3c>

    default:
      break;
 800bfbe:	bf00      	nop
  }

  return result;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000168 	.word	0x20000168

0800bfd0 <P2PS_NOTIFY_INT16>:
tBleStatus P2PS_NOTIFY_INT16(uint16_t UUID, uint16_t *pPayload, uint8_t size)
{
 800bfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	b089      	sub	sp, #36	; 0x24
 800bfd6:	af02      	add	r7, sp, #8
 800bfd8:	4603      	mov	r3, r0
 800bfda:	6039      	str	r1, [r7, #0]
 800bfdc:	80fb      	strh	r3, [r7, #6]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	717b      	strb	r3, [r7, #5]
 800bfe2:	466b      	mov	r3, sp
 800bfe4:	461e      	mov	r6, r3
	uint16_t byte_reversed[size];
 800bfe6:	7979      	ldrb	r1, [r7, #5]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	3b01      	subs	r3, #1
 800bfec:	613b      	str	r3, [r7, #16]
 800bfee:	b2cb      	uxtb	r3, r1
 800bff0:	2200      	movs	r2, #0
 800bff2:	4698      	mov	r8, r3
 800bff4:	4691      	mov	r9, r2
 800bff6:	f04f 0200 	mov.w	r2, #0
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800c002:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800c006:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800c00a:	b2cb      	uxtb	r3, r1
 800c00c:	2200      	movs	r2, #0
 800c00e:	461c      	mov	r4, r3
 800c010:	4615      	mov	r5, r2
 800c012:	f04f 0200 	mov.w	r2, #0
 800c016:	f04f 0300 	mov.w	r3, #0
 800c01a:	012b      	lsls	r3, r5, #4
 800c01c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c020:	0122      	lsls	r2, r4, #4
 800c022:	460b      	mov	r3, r1
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	3307      	adds	r3, #7
 800c028:	08db      	lsrs	r3, r3, #3
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	ebad 0d03 	sub.w	sp, sp, r3
 800c030:	ab02      	add	r3, sp, #8
 800c032:	3301      	adds	r3, #1
 800c034:	085b      	lsrs	r3, r3, #1
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	60fb      	str	r3, [r7, #12]

	  for (uint8_t i = 0; i < size; i++){
 800c03a:	2300      	movs	r3, #0
 800c03c:	75bb      	strb	r3, [r7, #22]
 800c03e:	e018      	b.n	800c072 <P2PS_NOTIFY_INT16+0xa2>
		byte_reversed[i] = (pPayload[i] & 0xFF00) >> 8 | (pPayload[i] & 0x00FF) << 8;
 800c040:	7dbb      	ldrb	r3, [r7, #22]
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	4413      	add	r3, r2
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	0a1b      	lsrs	r3, r3, #8
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	b21a      	sxth	r2, r3
 800c050:	7dbb      	ldrb	r3, [r7, #22]
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	440b      	add	r3, r1
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	021b      	lsls	r3, r3, #8
 800c05c:	b21b      	sxth	r3, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	b21b      	sxth	r3, r3
 800c062:	7dba      	ldrb	r2, [r7, #22]
 800c064:	b299      	uxth	r1, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for (uint8_t i = 0; i < size; i++){
 800c06c:	7dbb      	ldrb	r3, [r7, #22]
 800c06e:	3301      	adds	r3, #1
 800c070:	75bb      	strb	r3, [r7, #22]
 800c072:	7dba      	ldrb	r2, [r7, #22]
 800c074:	797b      	ldrb	r3, [r7, #5]
 800c076:	429a      	cmp	r2, r3
 800c078:	d3e2      	bcc.n	800c040 <P2PS_NOTIFY_INT16+0x70>
	  }

  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800c07a:	2392      	movs	r3, #146	; 0x92
 800c07c:	75fb      	strb	r3, [r7, #23]
  switch(UUID)
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800c084:	4293      	cmp	r3, r2
 800c086:	d10d      	bne.n	800c0a4 <P2PS_NOTIFY_INT16+0xd4>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <P2PS_NOTIFY_INT16+0xe4>)
 800c08a:	8818      	ldrh	r0, [r3, #0]
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <P2PS_NOTIFY_INT16+0xe4>)
 800c08e:	8899      	ldrh	r1, [r3, #4]
 800c090:	797a      	ldrb	r2, [r7, #5]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4613      	mov	r3, r2
 800c098:	2200      	movs	r2, #0
 800c09a:	f7fc fde9 	bl	8008c70 <aci_gatt_update_char_value>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
    		 	 	 	 	 CustomContext.CustomSwitch_CHdle,
                              0, /* charValOffset */
                             size, /* charValueLen */
                             (uint8_t *)  pPayload);

      break;
 800c0a2:	e000      	b.n	800c0a6 <P2PS_NOTIFY_INT16+0xd6>

    default:
      break;
 800c0a4:	bf00      	nop
  }

  return result;
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	46b5      	mov	sp, r6
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	371c      	adds	r7, #28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b4:	20000168 	.word	0x20000168

0800c0b8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b08a      	sub	sp, #40	; 0x28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2bff      	cmp	r3, #255	; 0xff
 800c0d2:	d15e      	bne.n	800c192 <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	3302      	adds	r3, #2
 800c0d8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f640 4214 	movw	r2, #3092	; 0xc14
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d04e      	beq.n	800c186 <Custom_STM_Event_Handler+0xce>
 800c0e8:	f640 4214 	movw	r2, #3092	; 0xc14
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	dc4c      	bgt.n	800c18a <Custom_STM_Event_Handler+0xd2>
 800c0f0:	f640 4201 	movw	r2, #3073	; 0xc01
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <Custom_STM_Event_Handler+0x48>
 800c0f8:	f640 4213 	movw	r2, #3091	; 0xc13
 800c0fc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800c0fe:	e047      	b.n	800c190 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	3302      	adds	r3, #2
 800c104:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	885b      	ldrh	r3, [r3, #2]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	461a      	mov	r2, r3
 800c10e:	4b24      	ldr	r3, [pc, #144]	; (800c1a0 <Custom_STM_Event_Handler+0xe8>)
 800c110:	889b      	ldrh	r3, [r3, #4]
 800c112:	3302      	adds	r3, #2
 800c114:	429a      	cmp	r2, r3
 800c116:	d119      	bne.n	800c14c <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c118:	2301      	movs	r3, #1
 800c11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	7a1b      	ldrb	r3, [r3, #8]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <Custom_STM_Event_Handler+0x74>
 800c126:	2b01      	cmp	r3, #1
 800c128:	d008      	beq.n	800c13c <Custom_STM_Event_Handler+0x84>
              break;
 800c12a:	e02b      	b.n	800c184 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c130:	f107 0308 	add.w	r3, r7, #8
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff fd63 	bl	800bc00 <Custom_STM_App_Notification>
                break;
 800c13a:	e023      	b.n	800c184 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800c13c:	2302      	movs	r3, #2
 800c13e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c140:	f107 0308 	add.w	r3, r7, #8
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fd5b 	bl	800bc00 <Custom_STM_App_Notification>
                break;
 800c14a:	e01b      	b.n	800c184 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	885b      	ldrh	r3, [r3, #2]
 800c150:	b29b      	uxth	r3, r3
 800c152:	461a      	mov	r2, r3
 800c154:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <Custom_STM_Event_Handler+0xe8>)
 800c156:	885b      	ldrh	r3, [r3, #2]
 800c158:	3301      	adds	r3, #1
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d117      	bne.n	800c18e <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_EVT;
 800c164:	2301      	movs	r3, #1
 800c166:	723b      	strb	r3, [r7, #8]
                        Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	743b      	strb	r3, [r7, #16]
                        Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	3308      	adds	r3, #8
 800c176:	60fb      	str	r3, [r7, #12]
                        Custom_STM_App_Notification(&Notification);
 800c178:	f107 0308 	add.w	r3, r7, #8
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fd3f 	bl	800bc00 <Custom_STM_App_Notification>
          break;
 800c182:	e004      	b.n	800c18e <Custom_STM_Event_Handler+0xd6>
 800c184:	e003      	b.n	800c18e <Custom_STM_Event_Handler+0xd6>
          break;
 800c186:	bf00      	nop
 800c188:	e004      	b.n	800c194 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c18a:	bf00      	nop
 800c18c:	e002      	b.n	800c194 <Custom_STM_Event_Handler+0xdc>
          break;
 800c18e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c190:	e000      	b.n	800c194 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c192:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800c198:	4618      	mov	r0, r3
 800c19a:	3728      	adds	r7, #40	; 0x28
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20000168 	.word	0x20000168

0800c1a4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b08c      	sub	sp, #48	; 0x30
 800c1a8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c1aa:	2392      	movs	r3, #146	; 0x92
 800c1ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c1ae:	487f      	ldr	r0, [pc, #508]	; (800c3ac <SVCCTL_InitCustomSvc+0x208>)
 800c1b0:	f7fd f8b8 	bl	8009324 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Switch_char +
   *                                1 for My_Switch_char configuration descriptor +
   *                              = 6
   */

  COPY_MYP2PS_UUID(uuid.Char_UUID_128);
 800c1b4:	238f      	movs	r3, #143	; 0x8f
 800c1b6:	713b      	strb	r3, [r7, #4]
 800c1b8:	23e5      	movs	r3, #229	; 0xe5
 800c1ba:	717b      	strb	r3, [r7, #5]
 800c1bc:	23b3      	movs	r3, #179	; 0xb3
 800c1be:	71bb      	strb	r3, [r7, #6]
 800c1c0:	23d5      	movs	r3, #213	; 0xd5
 800c1c2:	71fb      	strb	r3, [r7, #7]
 800c1c4:	232e      	movs	r3, #46	; 0x2e
 800c1c6:	723b      	strb	r3, [r7, #8]
 800c1c8:	237f      	movs	r3, #127	; 0x7f
 800c1ca:	727b      	strb	r3, [r7, #9]
 800c1cc:	234a      	movs	r3, #74	; 0x4a
 800c1ce:	72bb      	strb	r3, [r7, #10]
 800c1d0:	2398      	movs	r3, #152	; 0x98
 800c1d2:	72fb      	strb	r3, [r7, #11]
 800c1d4:	232a      	movs	r3, #42	; 0x2a
 800c1d6:	733b      	strb	r3, [r7, #12]
 800c1d8:	2348      	movs	r3, #72	; 0x48
 800c1da:	737b      	strb	r3, [r7, #13]
 800c1dc:	237a      	movs	r3, #122	; 0x7a
 800c1de:	73bb      	strb	r3, [r7, #14]
 800c1e0:	23cc      	movs	r3, #204	; 0xcc
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	743b      	strb	r3, [r7, #16]
 800c1e8:	23fe      	movs	r3, #254	; 0xfe
 800c1ea:	747b      	strb	r3, [r7, #17]
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	74bb      	strb	r3, [r7, #18]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c1f4:	1d39      	adds	r1, r7, #4
 800c1f6:	4b6e      	ldr	r3, [pc, #440]	; (800c3b0 <SVCCTL_InitCustomSvc+0x20c>)
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	2306      	movs	r3, #6
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	2002      	movs	r0, #2
 800c200:	f7fc fb58 	bl	80088b4 <aci_gatt_add_service>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomMyp2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00f      	beq.n	800c22e <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MyP2PS, error code: 0x%x \n\r", ret);
 800c20e:	4869      	ldr	r0, [pc, #420]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c210:	f7fd fefa 	bl	800a008 <DbgTraceGetFileName>
 800c214:	4601      	mov	r1, r0
 800c216:	f44f 73ab 	mov.w	r3, #342	; 0x156
 800c21a:	4a67      	ldr	r2, [pc, #412]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c21c:	4867      	ldr	r0, [pc, #412]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c21e:	f000 fe77 	bl	800cf10 <iprintf>
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	4619      	mov	r1, r3
 800c226:	4866      	ldr	r0, [pc, #408]	; (800c3c0 <SVCCTL_InitCustomSvc+0x21c>)
 800c228:	f000 fe72 	bl	800cf10 <iprintf>
 800c22c:	e00c      	b.n	800c248 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MyP2PS \n\r");
 800c22e:	4861      	ldr	r0, [pc, #388]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c230:	f7fd feea 	bl	800a008 <DbgTraceGetFileName>
 800c234:	4601      	mov	r1, r0
 800c236:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 800c23a:	4a5f      	ldr	r2, [pc, #380]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c23c:	485f      	ldr	r0, [pc, #380]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c23e:	f000 fe67 	bl	800cf10 <iprintf>
 800c242:	4860      	ldr	r0, [pc, #384]	; (800c3c4 <SVCCTL_InitCustomSvc+0x220>)
 800c244:	f000 fe64 	bl	800cf10 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800c248:	2319      	movs	r3, #25
 800c24a:	713b      	strb	r3, [r7, #4]
 800c24c:	23ed      	movs	r3, #237	; 0xed
 800c24e:	717b      	strb	r3, [r7, #5]
 800c250:	2382      	movs	r3, #130	; 0x82
 800c252:	71bb      	strb	r3, [r7, #6]
 800c254:	23ae      	movs	r3, #174	; 0xae
 800c256:	71fb      	strb	r3, [r7, #7]
 800c258:	23ed      	movs	r3, #237	; 0xed
 800c25a:	723b      	strb	r3, [r7, #8]
 800c25c:	2321      	movs	r3, #33	; 0x21
 800c25e:	727b      	strb	r3, [r7, #9]
 800c260:	234c      	movs	r3, #76	; 0x4c
 800c262:	72bb      	strb	r3, [r7, #10]
 800c264:	239d      	movs	r3, #157	; 0x9d
 800c266:	72fb      	strb	r3, [r7, #11]
 800c268:	2341      	movs	r3, #65	; 0x41
 800c26a:	733b      	strb	r3, [r7, #12]
 800c26c:	2345      	movs	r3, #69	; 0x45
 800c26e:	737b      	strb	r3, [r7, #13]
 800c270:	2322      	movs	r3, #34	; 0x22
 800c272:	73bb      	strb	r3, [r7, #14]
 800c274:	238e      	movs	r3, #142	; 0x8e
 800c276:	73fb      	strb	r3, [r7, #15]
 800c278:	2341      	movs	r3, #65	; 0x41
 800c27a:	743b      	strb	r3, [r7, #16]
 800c27c:	23fe      	movs	r3, #254	; 0xfe
 800c27e:	747b      	strb	r3, [r7, #17]
 800c280:	2300      	movs	r3, #0
 800c282:	74bb      	strb	r3, [r7, #18]
 800c284:	2300      	movs	r3, #0
 800c286:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800c288:	4b49      	ldr	r3, [pc, #292]	; (800c3b0 <SVCCTL_InitCustomSvc+0x20c>)
 800c28a:	8818      	ldrh	r0, [r3, #0]
 800c28c:	4b4e      	ldr	r3, [pc, #312]	; (800c3c8 <SVCCTL_InitCustomSvc+0x224>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	b29b      	uxth	r3, r3
 800c292:	1d3a      	adds	r2, r7, #4
 800c294:	494d      	ldr	r1, [pc, #308]	; (800c3cc <SVCCTL_InitCustomSvc+0x228>)
 800c296:	9105      	str	r1, [sp, #20]
 800c298:	2101      	movs	r1, #1
 800c29a:	9104      	str	r1, [sp, #16]
 800c29c:	2110      	movs	r1, #16
 800c29e:	9103      	str	r1, [sp, #12]
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	9102      	str	r1, [sp, #8]
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	9101      	str	r1, [sp, #4]
 800c2a8:	210a      	movs	r1, #10
 800c2aa:	9100      	str	r1, [sp, #0]
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	f7fc fbd7 	bl	8008a60 <aci_gatt_add_char>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00f      	beq.n	800c2dc <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800c2bc:	483d      	ldr	r0, [pc, #244]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c2be:	f7fd fea3 	bl	800a008 <DbgTraceGetFileName>
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c2c8:	4a3b      	ldr	r2, [pc, #236]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c2ca:	483c      	ldr	r0, [pc, #240]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c2cc:	f000 fe20 	bl	800cf10 <iprintf>
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	483e      	ldr	r0, [pc, #248]	; (800c3d0 <SVCCTL_InitCustomSvc+0x22c>)
 800c2d6:	f000 fe1b 	bl	800cf10 <iprintf>
 800c2da:	e00c      	b.n	800c2f6 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800c2dc:	4835      	ldr	r0, [pc, #212]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c2de:	f7fd fe93 	bl	800a008 <DbgTraceGetFileName>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800c2e8:	4a33      	ldr	r2, [pc, #204]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c2ea:	4834      	ldr	r0, [pc, #208]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c2ec:	f000 fe10 	bl	800cf10 <iprintf>
 800c2f0:	4838      	ldr	r0, [pc, #224]	; (800c3d4 <SVCCTL_InitCustomSvc+0x230>)
 800c2f2:	f000 fe0d 	bl	800cf10 <iprintf>
  }
  /**
   *  My_Switch_char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800c2f6:	2319      	movs	r3, #25
 800c2f8:	713b      	strb	r3, [r7, #4]
 800c2fa:	23ed      	movs	r3, #237	; 0xed
 800c2fc:	717b      	strb	r3, [r7, #5]
 800c2fe:	2382      	movs	r3, #130	; 0x82
 800c300:	71bb      	strb	r3, [r7, #6]
 800c302:	23ae      	movs	r3, #174	; 0xae
 800c304:	71fb      	strb	r3, [r7, #7]
 800c306:	23ed      	movs	r3, #237	; 0xed
 800c308:	723b      	strb	r3, [r7, #8]
 800c30a:	2321      	movs	r3, #33	; 0x21
 800c30c:	727b      	strb	r3, [r7, #9]
 800c30e:	234c      	movs	r3, #76	; 0x4c
 800c310:	72bb      	strb	r3, [r7, #10]
 800c312:	239d      	movs	r3, #157	; 0x9d
 800c314:	72fb      	strb	r3, [r7, #11]
 800c316:	2341      	movs	r3, #65	; 0x41
 800c318:	733b      	strb	r3, [r7, #12]
 800c31a:	2345      	movs	r3, #69	; 0x45
 800c31c:	737b      	strb	r3, [r7, #13]
 800c31e:	2322      	movs	r3, #34	; 0x22
 800c320:	73bb      	strb	r3, [r7, #14]
 800c322:	238e      	movs	r3, #142	; 0x8e
 800c324:	73fb      	strb	r3, [r7, #15]
 800c326:	2342      	movs	r3, #66	; 0x42
 800c328:	743b      	strb	r3, [r7, #16]
 800c32a:	23fe      	movs	r3, #254	; 0xfe
 800c32c:	747b      	strb	r3, [r7, #17]
 800c32e:	2300      	movs	r3, #0
 800c330:	74bb      	strb	r3, [r7, #18]
 800c332:	2300      	movs	r3, #0
 800c334:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800c336:	4b1e      	ldr	r3, [pc, #120]	; (800c3b0 <SVCCTL_InitCustomSvc+0x20c>)
 800c338:	8818      	ldrh	r0, [r3, #0]
 800c33a:	4b27      	ldr	r3, [pc, #156]	; (800c3d8 <SVCCTL_InitCustomSvc+0x234>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	1d3a      	adds	r2, r7, #4
 800c342:	4926      	ldr	r1, [pc, #152]	; (800c3dc <SVCCTL_InitCustomSvc+0x238>)
 800c344:	9105      	str	r1, [sp, #20]
 800c346:	2101      	movs	r1, #1
 800c348:	9104      	str	r1, [sp, #16]
 800c34a:	2110      	movs	r1, #16
 800c34c:	9103      	str	r1, [sp, #12]
 800c34e:	2101      	movs	r1, #1
 800c350:	9102      	str	r1, [sp, #8]
 800c352:	2100      	movs	r1, #0
 800c354:	9101      	str	r1, [sp, #4]
 800c356:	2110      	movs	r1, #16
 800c358:	9100      	str	r1, [sp, #0]
 800c35a:	2102      	movs	r1, #2
 800c35c:	f7fc fb80 	bl	8008a60 <aci_gatt_add_char>
 800c360:	4603      	mov	r3, r0
 800c362:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00f      	beq.n	800c38a <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800c36a:	4812      	ldr	r0, [pc, #72]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c36c:	f7fd fe4c 	bl	800a008 <DbgTraceGetFileName>
 800c370:	4601      	mov	r1, r0
 800c372:	f240 1381 	movw	r3, #385	; 0x181
 800c376:	4a10      	ldr	r2, [pc, #64]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c378:	4810      	ldr	r0, [pc, #64]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c37a:	f000 fdc9 	bl	800cf10 <iprintf>
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	4619      	mov	r1, r3
 800c382:	4817      	ldr	r0, [pc, #92]	; (800c3e0 <SVCCTL_InitCustomSvc+0x23c>)
 800c384:	f000 fdc4 	bl	800cf10 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c388:	e00d      	b.n	800c3a6 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800c38a:	480a      	ldr	r0, [pc, #40]	; (800c3b4 <SVCCTL_InitCustomSvc+0x210>)
 800c38c:	f7fd fe3c 	bl	800a008 <DbgTraceGetFileName>
 800c390:	4601      	mov	r1, r0
 800c392:	f240 1385 	movw	r3, #389	; 0x185
 800c396:	4a08      	ldr	r2, [pc, #32]	; (800c3b8 <SVCCTL_InitCustomSvc+0x214>)
 800c398:	4808      	ldr	r0, [pc, #32]	; (800c3bc <SVCCTL_InitCustomSvc+0x218>)
 800c39a:	f000 fdb9 	bl	800cf10 <iprintf>
 800c39e:	4811      	ldr	r0, [pc, #68]	; (800c3e4 <SVCCTL_InitCustomSvc+0x240>)
 800c3a0:	f000 fdb6 	bl	800cf10 <iprintf>
  return;
 800c3a4:	bf00      	nop
}
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	0800c0b9 	.word	0x0800c0b9
 800c3b0:	20000168 	.word	0x20000168
 800c3b4:	0800f2a0 	.word	0x0800f2a0
 800c3b8:	0800f894 	.word	0x0800f894
 800c3bc:	0800f2c0 	.word	0x0800f2c0
 800c3c0:	0800f2d4 	.word	0x0800f2d4
 800c3c4:	0800f31c 	.word	0x0800f31c
 800c3c8:	20000023 	.word	0x20000023
 800c3cc:	2000016a 	.word	0x2000016a
 800c3d0:	0800f350 	.word	0x0800f350
 800c3d4:	0800f394 	.word	0x0800f394
 800c3d8:	20000024 	.word	0x20000024
 800c3dc:	2000016c 	.word	0x2000016c
 800c3e0:	0800f3c8 	.word	0x0800f3c8
 800c3e4:	0800f410 	.word	0x0800f410

0800c3e8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af02      	add	r7, sp, #8
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	6039      	str	r1, [r7, #0]
 800c3f2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c3f4:	2392      	movs	r3, #146	; 0x92
 800c3f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c3f8:	79fb      	ldrb	r3, [r7, #7]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <Custom_STM_App_Update_Char+0x1c>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d02f      	beq.n	800c462 <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800c402:	e05d      	b.n	800c4c0 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800c404:	4b31      	ldr	r3, [pc, #196]	; (800c4cc <Custom_STM_App_Update_Char+0xe4>)
 800c406:	8818      	ldrh	r0, [r3, #0]
 800c408:	4b30      	ldr	r3, [pc, #192]	; (800c4cc <Custom_STM_App_Update_Char+0xe4>)
 800c40a:	8859      	ldrh	r1, [r3, #2]
 800c40c:	4b30      	ldr	r3, [pc, #192]	; (800c4d0 <Custom_STM_App_Update_Char+0xe8>)
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	2200      	movs	r2, #0
 800c418:	f7fc fc2a 	bl	8008c70 <aci_gatt_update_char_value>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00f      	beq.n	800c446 <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800c426:	482b      	ldr	r0, [pc, #172]	; (800c4d4 <Custom_STM_App_Update_Char+0xec>)
 800c428:	f7fd fdee 	bl	800a008 <DbgTraceGetFileName>
 800c42c:	4601      	mov	r1, r0
 800c42e:	f240 13a7 	movw	r3, #423	; 0x1a7
 800c432:	4a29      	ldr	r2, [pc, #164]	; (800c4d8 <Custom_STM_App_Update_Char+0xf0>)
 800c434:	4829      	ldr	r0, [pc, #164]	; (800c4dc <Custom_STM_App_Update_Char+0xf4>)
 800c436:	f000 fd6b 	bl	800cf10 <iprintf>
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	4619      	mov	r1, r3
 800c43e:	4828      	ldr	r0, [pc, #160]	; (800c4e0 <Custom_STM_App_Update_Char+0xf8>)
 800c440:	f000 fd66 	bl	800cf10 <iprintf>
      break;
 800c444:	e03c      	b.n	800c4c0 <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 800c446:	4823      	ldr	r0, [pc, #140]	; (800c4d4 <Custom_STM_App_Update_Char+0xec>)
 800c448:	f7fd fdde 	bl	800a008 <DbgTraceGetFileName>
 800c44c:	4601      	mov	r1, r0
 800c44e:	f240 13ab 	movw	r3, #427	; 0x1ab
 800c452:	4a21      	ldr	r2, [pc, #132]	; (800c4d8 <Custom_STM_App_Update_Char+0xf0>)
 800c454:	4821      	ldr	r0, [pc, #132]	; (800c4dc <Custom_STM_App_Update_Char+0xf4>)
 800c456:	f000 fd5b 	bl	800cf10 <iprintf>
 800c45a:	4822      	ldr	r0, [pc, #136]	; (800c4e4 <Custom_STM_App_Update_Char+0xfc>)
 800c45c:	f000 fd58 	bl	800cf10 <iprintf>
      break;
 800c460:	e02e      	b.n	800c4c0 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800c462:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <Custom_STM_App_Update_Char+0xe4>)
 800c464:	8818      	ldrh	r0, [r3, #0]
 800c466:	4b19      	ldr	r3, [pc, #100]	; (800c4cc <Custom_STM_App_Update_Char+0xe4>)
 800c468:	8899      	ldrh	r1, [r3, #4]
 800c46a:	4b1f      	ldr	r3, [pc, #124]	; (800c4e8 <Custom_STM_App_Update_Char+0x100>)
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	4613      	mov	r3, r2
 800c474:	2200      	movs	r2, #0
 800c476:	f7fc fbfb 	bl	8008c70 <aci_gatt_update_char_value>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00f      	beq.n	800c4a4 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800c484:	4813      	ldr	r0, [pc, #76]	; (800c4d4 <Custom_STM_App_Update_Char+0xec>)
 800c486:	f7fd fdbf 	bl	800a008 <DbgTraceGetFileName>
 800c48a:	4601      	mov	r1, r0
 800c48c:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800c490:	4a11      	ldr	r2, [pc, #68]	; (800c4d8 <Custom_STM_App_Update_Char+0xf0>)
 800c492:	4812      	ldr	r0, [pc, #72]	; (800c4dc <Custom_STM_App_Update_Char+0xf4>)
 800c494:	f000 fd3c 	bl	800cf10 <iprintf>
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	4619      	mov	r1, r3
 800c49c:	4813      	ldr	r0, [pc, #76]	; (800c4ec <Custom_STM_App_Update_Char+0x104>)
 800c49e:	f000 fd37 	bl	800cf10 <iprintf>
      break;
 800c4a2:	e00c      	b.n	800c4be <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800c4a4:	480b      	ldr	r0, [pc, #44]	; (800c4d4 <Custom_STM_App_Update_Char+0xec>)
 800c4a6:	f7fd fdaf 	bl	800a008 <DbgTraceGetFileName>
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800c4b0:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <Custom_STM_App_Update_Char+0xf0>)
 800c4b2:	480a      	ldr	r0, [pc, #40]	; (800c4dc <Custom_STM_App_Update_Char+0xf4>)
 800c4b4:	f000 fd2c 	bl	800cf10 <iprintf>
 800c4b8:	480d      	ldr	r0, [pc, #52]	; (800c4f0 <Custom_STM_App_Update_Char+0x108>)
 800c4ba:	f000 fd29 	bl	800cf10 <iprintf>
      break;
 800c4be:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20000168 	.word	0x20000168
 800c4d0:	20000023 	.word	0x20000023
 800c4d4:	0800f2a0 	.word	0x0800f2a0
 800c4d8:	0800f8ac 	.word	0x0800f8ac
 800c4dc:	0800f2c0 	.word	0x0800f2c0
 800c4e0:	0800f448 	.word	0x0800f448
 800c4e4:	0800f490 	.word	0x0800f490
 800c4e8:	20000024 	.word	0x20000024
 800c4ec:	0800f4c8 	.word	0x0800f4c8
 800c4f0:	0800f514 	.word	0x0800f514

0800c4f4 <LL_PWR_EnableBootC2>:
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <LL_PWR_EnableBootC2+0x1c>)
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	4a04      	ldr	r2, [pc, #16]	; (800c510 <LL_PWR_EnableBootC2+0x1c>)
 800c4fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c502:	60d3      	str	r3, [r2, #12]
}
 800c504:	bf00      	nop
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	58000400 	.word	0x58000400

0800c514 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c51e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c522:	4905      	ldr	r1, [pc, #20]	; (800c538 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4313      	orrs	r3, r2
 800c528:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	58000800 	.word	0x58000800

0800c53c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c544:	4b05      	ldr	r3, [pc, #20]	; (800c55c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c546:	6a1a      	ldr	r2, [r3, #32]
 800c548:	4904      	ldr	r1, [pc, #16]	; (800c55c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	620b      	str	r3, [r1, #32]
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	58000800 	.word	0x58000800

0800c560 <LL_AHB3_GRP1_EnableClock>:
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c56c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c56e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4313      	orrs	r3, r2
 800c576:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c57c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4013      	ands	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c584:	68fb      	ldr	r3, [r7, #12]
}
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c592:	b480      	push	{r7}
 800c594:	b085      	sub	sp, #20
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c59a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c59e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c5a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c5ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
}
 800c5be:	bf00      	nop
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <LL_C1_IPCC_EnableIT_TXF>:
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	601a      	str	r2, [r3, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <LL_C1_IPCC_EnableIT_RXO>:
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f043 0201 	orr.w	r2, r3, #1
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	601a      	str	r2, [r3, #0]
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	041b      	lsls	r3, r3, #16
 800c61c:	43db      	mvns	r3, r3
 800c61e:	401a      	ands	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	605a      	str	r2, [r3, #4]
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	041b      	lsls	r3, r3, #16
 800c642:	431a      	orrs	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	605a      	str	r2, [r3, #4]
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	43db      	mvns	r3, r3
 800c666:	401a      	ands	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	605a      	str	r2, [r3, #4]
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	609a      	str	r2, [r3, #8]
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	041a      	lsls	r2, r3, #16
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	609a      	str	r2, [r3, #8]
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d101      	bne.n	800c6ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	69da      	ldr	r2, [r3, #28]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d101      	bne.n	800c6f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e000      	b.n	800c6fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
	...

0800c708 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c70c:	2102      	movs	r1, #2
 800c70e:	4819      	ldr	r0, [pc, #100]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c710:	f7ff ffe4 	bl	800c6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d009      	beq.n	800c72e <HW_IPCC_Rx_Handler+0x26>
 800c71a:	4b16      	ldr	r3, [pc, #88]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	43db      	mvns	r3, r3
 800c720:	f003 0302 	and.w	r3, r3, #2
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c728:	f000 f8da 	bl	800c8e0 <HW_IPCC_SYS_EvtHandler>
 800c72c:	e01f      	b.n	800c76e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c72e:	2101      	movs	r1, #1
 800c730:	4810      	ldr	r0, [pc, #64]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c732:	f7ff ffd3 	bl	800c6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d008      	beq.n	800c74e <HW_IPCC_Rx_Handler+0x46>
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d102      	bne.n	800c74e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c748:	f000 f88e 	bl	800c868 <HW_IPCC_BLE_EvtHandler>
 800c74c:	e00f      	b.n	800c76e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c74e:	2108      	movs	r1, #8
 800c750:	4808      	ldr	r0, [pc, #32]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c752:	f7ff ffc3 	bl	800c6dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d009      	beq.n	800c770 <HW_IPCC_Rx_Handler+0x68>
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <HW_IPCC_Rx_Handler+0x6c>)
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	43db      	mvns	r3, r3
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c76a:	f000 f905 	bl	800c978 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
}
 800c772:	bd80      	pop	{r7, pc}
 800c774:	58000c00 	.word	0x58000c00

0800c778 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c77c:	2102      	movs	r1, #2
 800c77e:	481a      	ldr	r0, [pc, #104]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c780:	f7ff ff97 	bl	800c6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d109      	bne.n	800c79e <HW_IPCC_Tx_Handler+0x26>
 800c78a:	4b17      	ldr	r3, [pc, #92]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	43db      	mvns	r3, r3
 800c790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c798:	f000 f896 	bl	800c8c8 <HW_IPCC_SYS_CmdEvtHandler>
 800c79c:	e020      	b.n	800c7e0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c79e:	2108      	movs	r1, #8
 800c7a0:	4811      	ldr	r0, [pc, #68]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c7a2:	f7ff ff86 	bl	800c6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d109      	bne.n	800c7c0 <HW_IPCC_Tx_Handler+0x48>
 800c7ac:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	43db      	mvns	r3, r3
 800c7b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c7ba:	f000 f8bf 	bl	800c93c <HW_IPCC_MM_FreeBufHandler>
 800c7be:	e00f      	b.n	800c7e0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c7c0:	2120      	movs	r1, #32
 800c7c2:	4809      	ldr	r0, [pc, #36]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c7c4:	f7ff ff75 	bl	800c6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d109      	bne.n	800c7e2 <HW_IPCC_Tx_Handler+0x6a>
 800c7ce:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <HW_IPCC_Tx_Handler+0x70>)
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	43db      	mvns	r3, r3
 800c7d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c7dc:	f000 f850 	bl	800c880 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
}
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	58000c00 	.word	0x58000c00

0800c7ec <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c7f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c7f4:	f7ff fecd 	bl	800c592 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c7f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c7fc:	f7ff fe9e 	bl	800c53c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c800:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c804:	f7ff fe86 	bl	800c514 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c808:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c80a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c80c:	f7ff fe72 	bl	800c4f4 <LL_PWR_EnableBootC2>

  return;
 800c810:	bf00      	nop
}
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c818:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c81c:	f7ff fea0 	bl	800c560 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c820:	4806      	ldr	r0, [pc, #24]	; (800c83c <HW_IPCC_Init+0x28>)
 800c822:	f7ff fee2 	bl	800c5ea <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c826:	4805      	ldr	r0, [pc, #20]	; (800c83c <HW_IPCC_Init+0x28>)
 800c828:	f7ff fecf 	bl	800c5ca <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c82c:	202c      	movs	r0, #44	; 0x2c
 800c82e:	f7f6 fe70 	bl	8003512 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c832:	202d      	movs	r0, #45	; 0x2d
 800c834:	f7f6 fe6d 	bl	8003512 <HAL_NVIC_EnableIRQ>

  return;
 800c838:	bf00      	nop
}
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	58000c00 	.word	0x58000c00

0800c840 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c844:	2101      	movs	r1, #1
 800c846:	4802      	ldr	r0, [pc, #8]	; (800c850 <HW_IPCC_BLE_Init+0x10>)
 800c848:	f7ff ff04 	bl	800c654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c84c:	bf00      	nop
}
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	58000c00 	.word	0x58000c00

0800c854 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c858:	2101      	movs	r1, #1
 800c85a:	4802      	ldr	r0, [pc, #8]	; (800c864 <HW_IPCC_BLE_SendCmd+0x10>)
 800c85c:	f7ff ff1a 	bl	800c694 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c860:	bf00      	nop
}
 800c862:	bd80      	pop	{r7, pc}
 800c864:	58000c00 	.word	0x58000c00

0800c868 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c86c:	f7fd fa14 	bl	8009c98 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c870:	2101      	movs	r1, #1
 800c872:	4802      	ldr	r0, [pc, #8]	; (800c87c <HW_IPCC_BLE_EvtHandler+0x14>)
 800c874:	f7ff ff00 	bl	800c678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c878:	bf00      	nop
}
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	58000c00 	.word	0x58000c00

0800c880 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c884:	2120      	movs	r1, #32
 800c886:	4803      	ldr	r0, [pc, #12]	; (800c894 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c888:	f7ff fed2 	bl	800c630 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c88c:	f7fd fa34 	bl	8009cf8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c890:	bf00      	nop
}
 800c892:	bd80      	pop	{r7, pc}
 800c894:	58000c00 	.word	0x58000c00

0800c898 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c89c:	2102      	movs	r1, #2
 800c89e:	4802      	ldr	r0, [pc, #8]	; (800c8a8 <HW_IPCC_SYS_Init+0x10>)
 800c8a0:	f7ff fed8 	bl	800c654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c8a4:	bf00      	nop
}
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	58000c00 	.word	0x58000c00

0800c8ac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8b0:	2102      	movs	r1, #2
 800c8b2:	4804      	ldr	r0, [pc, #16]	; (800c8c4 <HW_IPCC_SYS_SendCmd+0x18>)
 800c8b4:	f7ff feee 	bl	800c694 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8b8:	2102      	movs	r1, #2
 800c8ba:	4802      	ldr	r0, [pc, #8]	; (800c8c4 <HW_IPCC_SYS_SendCmd+0x18>)
 800c8bc:	f7ff fea5 	bl	800c60a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c8c0:	bf00      	nop
}
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	58000c00 	.word	0x58000c00

0800c8c8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4803      	ldr	r0, [pc, #12]	; (800c8dc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c8d0:	f7ff feae 	bl	800c630 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c8d4:	f7fd fa60 	bl	8009d98 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c8d8:	bf00      	nop
}
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	58000c00 	.word	0x58000c00

0800c8e0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c8e4:	f7fd fa6e 	bl	8009dc4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	4802      	ldr	r0, [pc, #8]	; (800c8f4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c8ec:	f7ff fec4 	bl	800c678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c8f0:	bf00      	nop
}
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	58000c00 	.word	0x58000c00

0800c8f8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c900:	2108      	movs	r1, #8
 800c902:	480c      	ldr	r0, [pc, #48]	; (800c934 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c904:	f7ff fed5 	bl	800c6b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d007      	beq.n	800c91e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c90e:	4a0a      	ldr	r2, [pc, #40]	; (800c938 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c914:	2108      	movs	r1, #8
 800c916:	4807      	ldr	r0, [pc, #28]	; (800c934 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c918:	f7ff fe77 	bl	800c60a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c91c:	e006      	b.n	800c92c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c922:	2108      	movs	r1, #8
 800c924:	4803      	ldr	r0, [pc, #12]	; (800c934 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c926:	f7ff feb5 	bl	800c694 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c92a:	bf00      	nop
}
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	58000c00 	.word	0x58000c00
 800c938:	200270c4 	.word	0x200270c4

0800c93c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c940:	2108      	movs	r1, #8
 800c942:	4806      	ldr	r0, [pc, #24]	; (800c95c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c944:	f7ff fe74 	bl	800c630 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c948:	4b05      	ldr	r3, [pc, #20]	; (800c960 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c94e:	2108      	movs	r1, #8
 800c950:	4802      	ldr	r0, [pc, #8]	; (800c95c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c952:	f7ff fe9f 	bl	800c694 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c956:	bf00      	nop
}
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	58000c00 	.word	0x58000c00
 800c960:	200270c4 	.word	0x200270c4

0800c964 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c968:	2108      	movs	r1, #8
 800c96a:	4802      	ldr	r0, [pc, #8]	; (800c974 <HW_IPCC_TRACES_Init+0x10>)
 800c96c:	f7ff fe72 	bl	800c654 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c970:	bf00      	nop
}
 800c972:	bd80      	pop	{r7, pc}
 800c974:	58000c00 	.word	0x58000c00

0800c978 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c97c:	f7fd faca 	bl	8009f14 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c980:	2108      	movs	r1, #8
 800c982:	4802      	ldr	r0, [pc, #8]	; (800c98c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c984:	f7ff fe78 	bl	800c678 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c988:	bf00      	nop
}
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	58000c00 	.word	0x58000c00

0800c990 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c990:	b480      	push	{r7}
 800c992:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c994:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <UTIL_LPM_Init+0x1c>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <UTIL_LPM_Init+0x20>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c9a0:	bf00      	nop
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	200270c8 	.word	0x200270c8
 800c9b0:	200270cc 	.word	0x200270cc

0800c9b4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9c4:	613b      	str	r3, [r7, #16]
  return(result);
 800c9c6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c9c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9ca:	b672      	cpsid	i
}
 800c9cc:	bf00      	nop
  
  switch(state)
 800c9ce:	78fb      	ldrb	r3, [r7, #3]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d008      	beq.n	800c9e6 <UTIL_LPM_SetOffMode+0x32>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d10e      	bne.n	800c9f6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <UTIL_LPM_SetOffMode+0x5c>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ca10 <UTIL_LPM_SetOffMode+0x5c>)
 800c9e2:	6013      	str	r3, [r2, #0]
      break;
 800c9e4:	e008      	b.n	800c9f8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	43da      	mvns	r2, r3
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <UTIL_LPM_SetOffMode+0x5c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	4a07      	ldr	r2, [pc, #28]	; (800ca10 <UTIL_LPM_SetOffMode+0x5c>)
 800c9f2:	6013      	str	r3, [r2, #0]
      break;
 800c9f4:	e000      	b.n	800c9f8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c9f6:	bf00      	nop
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f383 8810 	msr	PRIMASK, r3
}
 800ca02:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ca04:	bf00      	nop
 800ca06:	371c      	adds	r7, #28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	200270cc 	.word	0x200270cc

0800ca14 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b090      	sub	sp, #64	; 0x40
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ca1c:	4b73      	ldr	r3, [pc, #460]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ca22:	4b72      	ldr	r3, [pc, #456]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	4a70      	ldr	r2, [pc, #448]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800ca2c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ca2e:	4b70      	ldr	r3, [pc, #448]	; (800cbf0 <UTIL_SEQ_Run+0x1dc>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ca34:	4b6f      	ldr	r3, [pc, #444]	; (800cbf4 <UTIL_SEQ_Run+0x1e0>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ca3a:	4b6f      	ldr	r3, [pc, #444]	; (800cbf8 <UTIL_SEQ_Run+0x1e4>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800ca40:	4b6e      	ldr	r3, [pc, #440]	; (800cbfc <UTIL_SEQ_Run+0x1e8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ca46:	e08d      	b.n	800cb64 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ca4c:	e002      	b.n	800ca54 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	3301      	adds	r3, #1
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ca54:	4a6a      	ldr	r2, [pc, #424]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800ca56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5e:	401a      	ands	r2, r3
 800ca60:	4b62      	ldr	r3, [pc, #392]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0f1      	beq.n	800ca4e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ca6a:	4a65      	ldr	r2, [pc, #404]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	401a      	ands	r2, r3
 800ca76:	4b5d      	ldr	r3, [pc, #372]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4013      	ands	r3, r2
 800ca7c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ca7e:	4a60      	ldr	r2, [pc, #384]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800ca80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	4413      	add	r3, r2
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ca90:	4a5b      	ldr	r2, [pc, #364]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	4413      	add	r3, r2
 800ca98:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ca9e:	4a58      	ldr	r2, [pc, #352]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800caa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	4413      	add	r3, r2
 800caa6:	685a      	ldr	r2, [r3, #4]
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	4013      	ands	r3, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f000 f9b3 	bl	800ce18 <SEQ_BitPosition>
 800cab2:	4603      	mov	r3, r0
 800cab4:	461a      	mov	r2, r3
 800cab6:	4b53      	ldr	r3, [pc, #332]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800cab8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800caba:	4a51      	ldr	r2, [pc, #324]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800cabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	4b4f      	ldr	r3, [pc, #316]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2101      	movs	r1, #1
 800caca:	fa01 f303 	lsl.w	r3, r1, r3
 800cace:	43db      	mvns	r3, r3
 800cad0:	401a      	ands	r2, r3
 800cad2:	494b      	ldr	r1, [pc, #300]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800cad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	440b      	add	r3, r1
 800cada:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cadc:	f3ef 8310 	mrs	r3, PRIMASK
 800cae0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cae2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cae4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cae6:	b672      	cpsid	i
}
 800cae8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800caea:	4b46      	ldr	r3, [pc, #280]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2201      	movs	r2, #1
 800caf0:	fa02 f303 	lsl.w	r3, r2, r3
 800caf4:	43da      	mvns	r2, r3
 800caf6:	4b3e      	ldr	r3, [pc, #248]	; (800cbf0 <UTIL_SEQ_Run+0x1dc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4013      	ands	r3, r2
 800cafc:	4a3c      	ldr	r2, [pc, #240]	; (800cbf0 <UTIL_SEQ_Run+0x1dc>)
 800cafe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cb00:	2302      	movs	r3, #2
 800cb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb04:	e013      	b.n	800cb2e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	4a3d      	ldr	r2, [pc, #244]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800cb0c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cb10:	4b3c      	ldr	r3, [pc, #240]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2201      	movs	r2, #1
 800cb16:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1a:	43da      	mvns	r2, r3
 800cb1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	400a      	ands	r2, r1
 800cb22:	4937      	ldr	r1, [pc, #220]	; (800cc00 <UTIL_SEQ_Run+0x1ec>)
 800cb24:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e8      	bne.n	800cb06 <UTIL_SEQ_Run+0xf2>
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f383 8810 	msr	PRIMASK, r3
}
 800cb3e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cb40:	4b30      	ldr	r3, [pc, #192]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a30      	ldr	r2, [pc, #192]	; (800cc08 <UTIL_SEQ_Run+0x1f4>)
 800cb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4a:	4798      	blx	r3

    local_taskset = TaskSet;
 800cb4c:	4b28      	ldr	r3, [pc, #160]	; (800cbf0 <UTIL_SEQ_Run+0x1dc>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800cb52:	4b28      	ldr	r3, [pc, #160]	; (800cbf4 <UTIL_SEQ_Run+0x1e0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800cb58:	4b27      	ldr	r3, [pc, #156]	; (800cbf8 <UTIL_SEQ_Run+0x1e4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800cb5e:	4b27      	ldr	r3, [pc, #156]	; (800cbfc <UTIL_SEQ_Run+0x1e8>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cb64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	401a      	ands	r2, r3
 800cb6a:	4b20      	ldr	r3, [pc, #128]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d005      	beq.n	800cb80 <UTIL_SEQ_Run+0x16c>
 800cb74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	4013      	ands	r3, r2
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f43f af64 	beq.w	800ca48 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cb80:	4b20      	ldr	r3, [pc, #128]	; (800cc04 <UTIL_SEQ_Run+0x1f0>)
 800cb82:	f04f 32ff 	mov.w	r2, #4294967295
 800cb86:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cb88:	f000 f938 	bl	800cdfc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800cb90:	613b      	str	r3, [r7, #16]
  return(result);
 800cb92:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cb94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb96:	b672      	cpsid	i
}
 800cb98:	bf00      	nop
  local_taskset = TaskSet;
 800cb9a:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <UTIL_SEQ_Run+0x1dc>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cba0:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <UTIL_SEQ_Run+0x1e0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cba6:	4b14      	ldr	r3, [pc, #80]	; (800cbf8 <UTIL_SEQ_Run+0x1e4>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	401a      	ands	r2, r3
 800cbb2:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d107      	bne.n	800cbcc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <UTIL_SEQ_Run+0x1e8>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d101      	bne.n	800cbcc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cbc8:	f7f4 fd29 	bl	800161e <UTIL_SEQ_Idle>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f383 8810 	msr	PRIMASK, r3
}
 800cbd6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cbd8:	f000 f917 	bl	800ce0a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cbdc:	4a03      	ldr	r2, [pc, #12]	; (800cbec <UTIL_SEQ_Run+0x1d8>)
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	6013      	str	r3, [r2, #0]

  return;
 800cbe2:	bf00      	nop
}
 800cbe4:	3740      	adds	r7, #64	; 0x40
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	2000002c 	.word	0x2000002c
 800cbf0:	200270d0 	.word	0x200270d0
 800cbf4:	200270d4 	.word	0x200270d4
 800cbf8:	20000028 	.word	0x20000028
 800cbfc:	200270d8 	.word	0x200270d8
 800cc00:	20027160 	.word	0x20027160
 800cc04:	200270dc 	.word	0x200270dc
 800cc08:	200270e0 	.word	0x200270e0

0800cc0c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc18:	f3ef 8310 	mrs	r3, PRIMASK
 800cc1c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc1e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cc20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc22:	b672      	cpsid	i
}
 800cc24:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 f8f6 	bl	800ce18 <SEQ_BitPosition>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4a06      	ldr	r2, [pc, #24]	; (800cc4c <UTIL_SEQ_RegTask+0x40>)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	f383 8810 	msr	PRIMASK, r3
}
 800cc42:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cc44:	bf00      	nop
}
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	200270e0 	.word	0x200270e0

0800cc50 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cc50:	b480      	push	{r7}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc60:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc64:	b672      	cpsid	i
}
 800cc66:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cc68:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <UTIL_SEQ_SetTask+0x50>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	4a0b      	ldr	r2, [pc, #44]	; (800cca0 <UTIL_SEQ_SetTask+0x50>)
 800cc72:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cc74:	4a0b      	ldr	r2, [pc, #44]	; (800cca4 <UTIL_SEQ_SetTask+0x54>)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	4908      	ldr	r1, [pc, #32]	; (800cca4 <UTIL_SEQ_SetTask+0x54>)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	f383 8810 	msr	PRIMASK, r3
}
 800cc92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cc94:	bf00      	nop
}
 800cc96:	371c      	adds	r7, #28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	200270d0 	.word	0x200270d0
 800cca4:	20027160 	.word	0x20027160

0800cca8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ccb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccba:	b672      	cpsid	i
}
 800ccbc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	43da      	mvns	r2, r3
 800ccc2:	4b08      	ldr	r3, [pc, #32]	; (800cce4 <UTIL_SEQ_PauseTask+0x3c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	4a06      	ldr	r2, [pc, #24]	; (800cce4 <UTIL_SEQ_PauseTask+0x3c>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	f383 8810 	msr	PRIMASK, r3
}
 800ccd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ccd8:	bf00      	nop
}
 800ccda:	371c      	adds	r7, #28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	20000028 	.word	0x20000028

0800cce8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccf0:	f3ef 8310 	mrs	r3, PRIMASK
 800ccf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ccf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccfa:	b672      	cpsid	i
}
 800ccfc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ccfe:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <UTIL_SEQ_ResumeTask+0x3c>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	4a07      	ldr	r2, [pc, #28]	; (800cd24 <UTIL_SEQ_ResumeTask+0x3c>)
 800cd08:	6013      	str	r3, [r2, #0]
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	f383 8810 	msr	PRIMASK, r3
}
 800cd14:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd16:	bf00      	nop
}
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	20000028 	.word	0x20000028

0800cd28 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd30:	f3ef 8310 	mrs	r3, PRIMASK
 800cd34:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd36:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cd38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd3a:	b672      	cpsid	i
}
 800cd3c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800cd3e:	4b09      	ldr	r3, [pc, #36]	; (800cd64 <UTIL_SEQ_SetEvt+0x3c>)
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	4a07      	ldr	r2, [pc, #28]	; (800cd64 <UTIL_SEQ_SetEvt+0x3c>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f383 8810 	msr	PRIMASK, r3
}
 800cd54:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd56:	bf00      	nop
}
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	200270d4 	.word	0x200270d4

0800cd68 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cd70:	4b1f      	ldr	r3, [pc, #124]	; (800cdf0 <UTIL_SEQ_WaitEvt+0x88>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <UTIL_SEQ_WaitEvt+0x88>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d102      	bne.n	800cd86 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cd80:	2300      	movs	r3, #0
 800cd82:	61fb      	str	r3, [r7, #28]
 800cd84:	e005      	b.n	800cd92 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cd86:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <UTIL_SEQ_WaitEvt+0x88>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cd92:	4b18      	ldr	r3, [pc, #96]	; (800cdf4 <UTIL_SEQ_WaitEvt+0x8c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cd98:	4a16      	ldr	r2, [pc, #88]	; (800cdf4 <UTIL_SEQ_WaitEvt+0x8c>)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cd9e:	e003      	b.n	800cda8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cda0:	6879      	ldr	r1, [r7, #4]
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f7f4 fc42 	bl	800162c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cda8:	4b13      	ldr	r3, [pc, #76]	; (800cdf8 <UTIL_SEQ_WaitEvt+0x90>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0f5      	beq.n	800cda0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cdb4:	4a0e      	ldr	r2, [pc, #56]	; (800cdf0 <UTIL_SEQ_WaitEvt+0x88>)
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdba:	f3ef 8310 	mrs	r3, PRIMASK
 800cdbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdc0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cdc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdc4:	b672      	cpsid	i
}
 800cdc6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	43da      	mvns	r2, r3
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <UTIL_SEQ_WaitEvt+0x90>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	4a09      	ldr	r2, [pc, #36]	; (800cdf8 <UTIL_SEQ_WaitEvt+0x90>)
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f383 8810 	msr	PRIMASK, r3
}
 800cde0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cde2:	4a04      	ldr	r2, [pc, #16]	; (800cdf4 <UTIL_SEQ_WaitEvt+0x8c>)
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	6013      	str	r3, [r2, #0]
  return;
 800cde8:	bf00      	nop
}
 800cdea:	3720      	adds	r7, #32
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	200270dc 	.word	0x200270dc
 800cdf4:	200270d8 	.word	0x200270d8
 800cdf8:	200270d4 	.word	0x200270d4

0800cdfc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ce00:	bf00      	nop
}
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ce0e:	bf00      	nop
}
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	0c1b      	lsrs	r3, r3, #16
 800ce2c:	041b      	lsls	r3, r3, #16
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d104      	bne.n	800ce3c <SEQ_BitPosition+0x24>
 800ce32:	2310      	movs	r3, #16
 800ce34:	73fb      	strb	r3, [r7, #15]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	041b      	lsls	r3, r3, #16
 800ce3a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d105      	bne.n	800ce52 <SEQ_BitPosition+0x3a>
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
 800ce48:	3308      	adds	r3, #8
 800ce4a:	73fb      	strb	r3, [r7, #15]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d105      	bne.n	800ce68 <SEQ_BitPosition+0x50>
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	73fb      	strb	r3, [r7, #15]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	011b      	lsls	r3, r3, #4
 800ce66:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	0f1b      	lsrs	r3, r3, #28
 800ce6c:	4a07      	ldr	r2, [pc, #28]	; (800ce8c <SEQ_BitPosition+0x74>)
 800ce6e:	5cd2      	ldrb	r2, [r2, r3]
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	4413      	add	r3, r2
 800ce74:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
 800ce78:	f1c3 031f 	rsb	r3, r3, #31
 800ce7c:	b2db      	uxtb	r3, r3
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	0800f8c8 	.word	0x0800f8c8

0800ce90 <__errno>:
 800ce90:	4b01      	ldr	r3, [pc, #4]	; (800ce98 <__errno+0x8>)
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20000030 	.word	0x20000030

0800ce9c <__libc_init_array>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4d0d      	ldr	r5, [pc, #52]	; (800ced4 <__libc_init_array+0x38>)
 800cea0:	4c0d      	ldr	r4, [pc, #52]	; (800ced8 <__libc_init_array+0x3c>)
 800cea2:	1b64      	subs	r4, r4, r5
 800cea4:	10a4      	asrs	r4, r4, #2
 800cea6:	2600      	movs	r6, #0
 800cea8:	42a6      	cmp	r6, r4
 800ceaa:	d109      	bne.n	800cec0 <__libc_init_array+0x24>
 800ceac:	4d0b      	ldr	r5, [pc, #44]	; (800cedc <__libc_init_array+0x40>)
 800ceae:	4c0c      	ldr	r4, [pc, #48]	; (800cee0 <__libc_init_array+0x44>)
 800ceb0:	f001 f8b0 	bl	800e014 <_init>
 800ceb4:	1b64      	subs	r4, r4, r5
 800ceb6:	10a4      	asrs	r4, r4, #2
 800ceb8:	2600      	movs	r6, #0
 800ceba:	42a6      	cmp	r6, r4
 800cebc:	d105      	bne.n	800ceca <__libc_init_array+0x2e>
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec4:	4798      	blx	r3
 800cec6:	3601      	adds	r6, #1
 800cec8:	e7ee      	b.n	800cea8 <__libc_init_array+0xc>
 800ceca:	f855 3b04 	ldr.w	r3, [r5], #4
 800cece:	4798      	blx	r3
 800ced0:	3601      	adds	r6, #1
 800ced2:	e7f2      	b.n	800ceba <__libc_init_array+0x1e>
 800ced4:	0800f978 	.word	0x0800f978
 800ced8:	0800f978 	.word	0x0800f978
 800cedc:	0800f978 	.word	0x0800f978
 800cee0:	0800f97c 	.word	0x0800f97c

0800cee4 <memcpy>:
 800cee4:	440a      	add	r2, r1
 800cee6:	4291      	cmp	r1, r2
 800cee8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceec:	d100      	bne.n	800cef0 <memcpy+0xc>
 800ceee:	4770      	bx	lr
 800cef0:	b510      	push	{r4, lr}
 800cef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cefa:	4291      	cmp	r1, r2
 800cefc:	d1f9      	bne.n	800cef2 <memcpy+0xe>
 800cefe:	bd10      	pop	{r4, pc}

0800cf00 <memset>:
 800cf00:	4402      	add	r2, r0
 800cf02:	4603      	mov	r3, r0
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d100      	bne.n	800cf0a <memset+0xa>
 800cf08:	4770      	bx	lr
 800cf0a:	f803 1b01 	strb.w	r1, [r3], #1
 800cf0e:	e7f9      	b.n	800cf04 <memset+0x4>

0800cf10 <iprintf>:
 800cf10:	b40f      	push	{r0, r1, r2, r3}
 800cf12:	4b0a      	ldr	r3, [pc, #40]	; (800cf3c <iprintf+0x2c>)
 800cf14:	b513      	push	{r0, r1, r4, lr}
 800cf16:	681c      	ldr	r4, [r3, #0]
 800cf18:	b124      	cbz	r4, 800cf24 <iprintf+0x14>
 800cf1a:	69a3      	ldr	r3, [r4, #24]
 800cf1c:	b913      	cbnz	r3, 800cf24 <iprintf+0x14>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 fa88 	bl	800d434 <__sinit>
 800cf24:	ab05      	add	r3, sp, #20
 800cf26:	9a04      	ldr	r2, [sp, #16]
 800cf28:	68a1      	ldr	r1, [r4, #8]
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fc91 	bl	800d854 <_vfiprintf_r>
 800cf32:	b002      	add	sp, #8
 800cf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf38:	b004      	add	sp, #16
 800cf3a:	4770      	bx	lr
 800cf3c:	20000030 	.word	0x20000030

0800cf40 <putchar>:
 800cf40:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <putchar+0x28>)
 800cf42:	b513      	push	{r0, r1, r4, lr}
 800cf44:	681c      	ldr	r4, [r3, #0]
 800cf46:	4601      	mov	r1, r0
 800cf48:	b134      	cbz	r4, 800cf58 <putchar+0x18>
 800cf4a:	69a3      	ldr	r3, [r4, #24]
 800cf4c:	b923      	cbnz	r3, 800cf58 <putchar+0x18>
 800cf4e:	9001      	str	r0, [sp, #4]
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fa6f 	bl	800d434 <__sinit>
 800cf56:	9901      	ldr	r1, [sp, #4]
 800cf58:	68a2      	ldr	r2, [r4, #8]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	b002      	add	sp, #8
 800cf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf62:	f000 bf3b 	b.w	800dddc <_putc_r>
 800cf66:	bf00      	nop
 800cf68:	20000030 	.word	0x20000030

0800cf6c <_puts_r>:
 800cf6c:	b570      	push	{r4, r5, r6, lr}
 800cf6e:	460e      	mov	r6, r1
 800cf70:	4605      	mov	r5, r0
 800cf72:	b118      	cbz	r0, 800cf7c <_puts_r+0x10>
 800cf74:	6983      	ldr	r3, [r0, #24]
 800cf76:	b90b      	cbnz	r3, 800cf7c <_puts_r+0x10>
 800cf78:	f000 fa5c 	bl	800d434 <__sinit>
 800cf7c:	69ab      	ldr	r3, [r5, #24]
 800cf7e:	68ac      	ldr	r4, [r5, #8]
 800cf80:	b913      	cbnz	r3, 800cf88 <_puts_r+0x1c>
 800cf82:	4628      	mov	r0, r5
 800cf84:	f000 fa56 	bl	800d434 <__sinit>
 800cf88:	4b2c      	ldr	r3, [pc, #176]	; (800d03c <_puts_r+0xd0>)
 800cf8a:	429c      	cmp	r4, r3
 800cf8c:	d120      	bne.n	800cfd0 <_puts_r+0x64>
 800cf8e:	686c      	ldr	r4, [r5, #4]
 800cf90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf92:	07db      	lsls	r3, r3, #31
 800cf94:	d405      	bmi.n	800cfa2 <_puts_r+0x36>
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	0598      	lsls	r0, r3, #22
 800cf9a:	d402      	bmi.n	800cfa2 <_puts_r+0x36>
 800cf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf9e:	f000 fae7 	bl	800d570 <__retarget_lock_acquire_recursive>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	0719      	lsls	r1, r3, #28
 800cfa6:	d51d      	bpl.n	800cfe4 <_puts_r+0x78>
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	b1db      	cbz	r3, 800cfe4 <_puts_r+0x78>
 800cfac:	3e01      	subs	r6, #1
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	60a3      	str	r3, [r4, #8]
 800cfb8:	bb39      	cbnz	r1, 800d00a <_puts_r+0x9e>
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da38      	bge.n	800d030 <_puts_r+0xc4>
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	210a      	movs	r1, #10
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f000 f85c 	bl	800d080 <__swbuf_r>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d011      	beq.n	800cff0 <_puts_r+0x84>
 800cfcc:	250a      	movs	r5, #10
 800cfce:	e011      	b.n	800cff4 <_puts_r+0x88>
 800cfd0:	4b1b      	ldr	r3, [pc, #108]	; (800d040 <_puts_r+0xd4>)
 800cfd2:	429c      	cmp	r4, r3
 800cfd4:	d101      	bne.n	800cfda <_puts_r+0x6e>
 800cfd6:	68ac      	ldr	r4, [r5, #8]
 800cfd8:	e7da      	b.n	800cf90 <_puts_r+0x24>
 800cfda:	4b1a      	ldr	r3, [pc, #104]	; (800d044 <_puts_r+0xd8>)
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	bf08      	it	eq
 800cfe0:	68ec      	ldreq	r4, [r5, #12]
 800cfe2:	e7d5      	b.n	800cf90 <_puts_r+0x24>
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f000 f89c 	bl	800d124 <__swsetup_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d0dd      	beq.n	800cfac <_puts_r+0x40>
 800cff0:	f04f 35ff 	mov.w	r5, #4294967295
 800cff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cff6:	07da      	lsls	r2, r3, #31
 800cff8:	d405      	bmi.n	800d006 <_puts_r+0x9a>
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	059b      	lsls	r3, r3, #22
 800cffe:	d402      	bmi.n	800d006 <_puts_r+0x9a>
 800d000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d002:	f000 fab6 	bl	800d572 <__retarget_lock_release_recursive>
 800d006:	4628      	mov	r0, r5
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	da04      	bge.n	800d018 <_puts_r+0xac>
 800d00e:	69a2      	ldr	r2, [r4, #24]
 800d010:	429a      	cmp	r2, r3
 800d012:	dc06      	bgt.n	800d022 <_puts_r+0xb6>
 800d014:	290a      	cmp	r1, #10
 800d016:	d004      	beq.n	800d022 <_puts_r+0xb6>
 800d018:	6823      	ldr	r3, [r4, #0]
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	6022      	str	r2, [r4, #0]
 800d01e:	7019      	strb	r1, [r3, #0]
 800d020:	e7c5      	b.n	800cfae <_puts_r+0x42>
 800d022:	4622      	mov	r2, r4
 800d024:	4628      	mov	r0, r5
 800d026:	f000 f82b 	bl	800d080 <__swbuf_r>
 800d02a:	3001      	adds	r0, #1
 800d02c:	d1bf      	bne.n	800cfae <_puts_r+0x42>
 800d02e:	e7df      	b.n	800cff0 <_puts_r+0x84>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	250a      	movs	r5, #10
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	6022      	str	r2, [r4, #0]
 800d038:	701d      	strb	r5, [r3, #0]
 800d03a:	e7db      	b.n	800cff4 <_puts_r+0x88>
 800d03c:	0800f8fc 	.word	0x0800f8fc
 800d040:	0800f91c 	.word	0x0800f91c
 800d044:	0800f8dc 	.word	0x0800f8dc

0800d048 <puts>:
 800d048:	4b02      	ldr	r3, [pc, #8]	; (800d054 <puts+0xc>)
 800d04a:	4601      	mov	r1, r0
 800d04c:	6818      	ldr	r0, [r3, #0]
 800d04e:	f7ff bf8d 	b.w	800cf6c <_puts_r>
 800d052:	bf00      	nop
 800d054:	20000030 	.word	0x20000030

0800d058 <strrchr>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	b969      	cbnz	r1, 800d07c <strrchr+0x24>
 800d060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d064:	f000 bf55 	b.w	800df12 <strchr>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	4605      	mov	r5, r0
 800d06c:	4621      	mov	r1, r4
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 ff4f 	bl	800df12 <strchr>
 800d074:	2800      	cmp	r0, #0
 800d076:	d1f7      	bne.n	800d068 <strrchr+0x10>
 800d078:	4628      	mov	r0, r5
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	2500      	movs	r5, #0
 800d07e:	e7f5      	b.n	800d06c <strrchr+0x14>

0800d080 <__swbuf_r>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	460e      	mov	r6, r1
 800d084:	4614      	mov	r4, r2
 800d086:	4605      	mov	r5, r0
 800d088:	b118      	cbz	r0, 800d092 <__swbuf_r+0x12>
 800d08a:	6983      	ldr	r3, [r0, #24]
 800d08c:	b90b      	cbnz	r3, 800d092 <__swbuf_r+0x12>
 800d08e:	f000 f9d1 	bl	800d434 <__sinit>
 800d092:	4b21      	ldr	r3, [pc, #132]	; (800d118 <__swbuf_r+0x98>)
 800d094:	429c      	cmp	r4, r3
 800d096:	d12b      	bne.n	800d0f0 <__swbuf_r+0x70>
 800d098:	686c      	ldr	r4, [r5, #4]
 800d09a:	69a3      	ldr	r3, [r4, #24]
 800d09c:	60a3      	str	r3, [r4, #8]
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	071a      	lsls	r2, r3, #28
 800d0a2:	d52f      	bpl.n	800d104 <__swbuf_r+0x84>
 800d0a4:	6923      	ldr	r3, [r4, #16]
 800d0a6:	b36b      	cbz	r3, 800d104 <__swbuf_r+0x84>
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	1ac0      	subs	r0, r0, r3
 800d0ae:	6963      	ldr	r3, [r4, #20]
 800d0b0:	b2f6      	uxtb	r6, r6
 800d0b2:	4283      	cmp	r3, r0
 800d0b4:	4637      	mov	r7, r6
 800d0b6:	dc04      	bgt.n	800d0c2 <__swbuf_r+0x42>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f000 f926 	bl	800d30c <_fflush_r>
 800d0c0:	bb30      	cbnz	r0, 800d110 <__swbuf_r+0x90>
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	60a3      	str	r3, [r4, #8]
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	6022      	str	r2, [r4, #0]
 800d0ce:	701e      	strb	r6, [r3, #0]
 800d0d0:	6963      	ldr	r3, [r4, #20]
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	4283      	cmp	r3, r0
 800d0d6:	d004      	beq.n	800d0e2 <__swbuf_r+0x62>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	07db      	lsls	r3, r3, #31
 800d0dc:	d506      	bpl.n	800d0ec <__swbuf_r+0x6c>
 800d0de:	2e0a      	cmp	r6, #10
 800d0e0:	d104      	bne.n	800d0ec <__swbuf_r+0x6c>
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f000 f911 	bl	800d30c <_fflush_r>
 800d0ea:	b988      	cbnz	r0, 800d110 <__swbuf_r+0x90>
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <__swbuf_r+0x9c>)
 800d0f2:	429c      	cmp	r4, r3
 800d0f4:	d101      	bne.n	800d0fa <__swbuf_r+0x7a>
 800d0f6:	68ac      	ldr	r4, [r5, #8]
 800d0f8:	e7cf      	b.n	800d09a <__swbuf_r+0x1a>
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <__swbuf_r+0xa0>)
 800d0fc:	429c      	cmp	r4, r3
 800d0fe:	bf08      	it	eq
 800d100:	68ec      	ldreq	r4, [r5, #12]
 800d102:	e7ca      	b.n	800d09a <__swbuf_r+0x1a>
 800d104:	4621      	mov	r1, r4
 800d106:	4628      	mov	r0, r5
 800d108:	f000 f80c 	bl	800d124 <__swsetup_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0cb      	beq.n	800d0a8 <__swbuf_r+0x28>
 800d110:	f04f 37ff 	mov.w	r7, #4294967295
 800d114:	e7ea      	b.n	800d0ec <__swbuf_r+0x6c>
 800d116:	bf00      	nop
 800d118:	0800f8fc 	.word	0x0800f8fc
 800d11c:	0800f91c 	.word	0x0800f91c
 800d120:	0800f8dc 	.word	0x0800f8dc

0800d124 <__swsetup_r>:
 800d124:	4b32      	ldr	r3, [pc, #200]	; (800d1f0 <__swsetup_r+0xcc>)
 800d126:	b570      	push	{r4, r5, r6, lr}
 800d128:	681d      	ldr	r5, [r3, #0]
 800d12a:	4606      	mov	r6, r0
 800d12c:	460c      	mov	r4, r1
 800d12e:	b125      	cbz	r5, 800d13a <__swsetup_r+0x16>
 800d130:	69ab      	ldr	r3, [r5, #24]
 800d132:	b913      	cbnz	r3, 800d13a <__swsetup_r+0x16>
 800d134:	4628      	mov	r0, r5
 800d136:	f000 f97d 	bl	800d434 <__sinit>
 800d13a:	4b2e      	ldr	r3, [pc, #184]	; (800d1f4 <__swsetup_r+0xd0>)
 800d13c:	429c      	cmp	r4, r3
 800d13e:	d10f      	bne.n	800d160 <__swsetup_r+0x3c>
 800d140:	686c      	ldr	r4, [r5, #4]
 800d142:	89a3      	ldrh	r3, [r4, #12]
 800d144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d148:	0719      	lsls	r1, r3, #28
 800d14a:	d42c      	bmi.n	800d1a6 <__swsetup_r+0x82>
 800d14c:	06dd      	lsls	r5, r3, #27
 800d14e:	d411      	bmi.n	800d174 <__swsetup_r+0x50>
 800d150:	2309      	movs	r3, #9
 800d152:	6033      	str	r3, [r6, #0]
 800d154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295
 800d15e:	e03e      	b.n	800d1de <__swsetup_r+0xba>
 800d160:	4b25      	ldr	r3, [pc, #148]	; (800d1f8 <__swsetup_r+0xd4>)
 800d162:	429c      	cmp	r4, r3
 800d164:	d101      	bne.n	800d16a <__swsetup_r+0x46>
 800d166:	68ac      	ldr	r4, [r5, #8]
 800d168:	e7eb      	b.n	800d142 <__swsetup_r+0x1e>
 800d16a:	4b24      	ldr	r3, [pc, #144]	; (800d1fc <__swsetup_r+0xd8>)
 800d16c:	429c      	cmp	r4, r3
 800d16e:	bf08      	it	eq
 800d170:	68ec      	ldreq	r4, [r5, #12]
 800d172:	e7e6      	b.n	800d142 <__swsetup_r+0x1e>
 800d174:	0758      	lsls	r0, r3, #29
 800d176:	d512      	bpl.n	800d19e <__swsetup_r+0x7a>
 800d178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d17a:	b141      	cbz	r1, 800d18e <__swsetup_r+0x6a>
 800d17c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d180:	4299      	cmp	r1, r3
 800d182:	d002      	beq.n	800d18a <__swsetup_r+0x66>
 800d184:	4630      	mov	r0, r6
 800d186:	f000 fa5b 	bl	800d640 <_free_r>
 800d18a:	2300      	movs	r3, #0
 800d18c:	6363      	str	r3, [r4, #52]	; 0x34
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	2300      	movs	r3, #0
 800d198:	6063      	str	r3, [r4, #4]
 800d19a:	6923      	ldr	r3, [r4, #16]
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	f043 0308 	orr.w	r3, r3, #8
 800d1a4:	81a3      	strh	r3, [r4, #12]
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	b94b      	cbnz	r3, 800d1be <__swsetup_r+0x9a>
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b4:	d003      	beq.n	800d1be <__swsetup_r+0x9a>
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f000 fa01 	bl	800d5c0 <__smakebuf_r>
 800d1be:	89a0      	ldrh	r0, [r4, #12]
 800d1c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1c4:	f010 0301 	ands.w	r3, r0, #1
 800d1c8:	d00a      	beq.n	800d1e0 <__swsetup_r+0xbc>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60a3      	str	r3, [r4, #8]
 800d1ce:	6963      	ldr	r3, [r4, #20]
 800d1d0:	425b      	negs	r3, r3
 800d1d2:	61a3      	str	r3, [r4, #24]
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	b943      	cbnz	r3, 800d1ea <__swsetup_r+0xc6>
 800d1d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1dc:	d1ba      	bne.n	800d154 <__swsetup_r+0x30>
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	0781      	lsls	r1, r0, #30
 800d1e2:	bf58      	it	pl
 800d1e4:	6963      	ldrpl	r3, [r4, #20]
 800d1e6:	60a3      	str	r3, [r4, #8]
 800d1e8:	e7f4      	b.n	800d1d4 <__swsetup_r+0xb0>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	e7f7      	b.n	800d1de <__swsetup_r+0xba>
 800d1ee:	bf00      	nop
 800d1f0:	20000030 	.word	0x20000030
 800d1f4:	0800f8fc 	.word	0x0800f8fc
 800d1f8:	0800f91c 	.word	0x0800f91c
 800d1fc:	0800f8dc 	.word	0x0800f8dc

0800d200 <__sflush_r>:
 800d200:	898a      	ldrh	r2, [r1, #12]
 800d202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d206:	4605      	mov	r5, r0
 800d208:	0710      	lsls	r0, r2, #28
 800d20a:	460c      	mov	r4, r1
 800d20c:	d458      	bmi.n	800d2c0 <__sflush_r+0xc0>
 800d20e:	684b      	ldr	r3, [r1, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc05      	bgt.n	800d220 <__sflush_r+0x20>
 800d214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d216:	2b00      	cmp	r3, #0
 800d218:	dc02      	bgt.n	800d220 <__sflush_r+0x20>
 800d21a:	2000      	movs	r0, #0
 800d21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d222:	2e00      	cmp	r6, #0
 800d224:	d0f9      	beq.n	800d21a <__sflush_r+0x1a>
 800d226:	2300      	movs	r3, #0
 800d228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d22c:	682f      	ldr	r7, [r5, #0]
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	d032      	beq.n	800d298 <__sflush_r+0x98>
 800d232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	075a      	lsls	r2, r3, #29
 800d238:	d505      	bpl.n	800d246 <__sflush_r+0x46>
 800d23a:	6863      	ldr	r3, [r4, #4]
 800d23c:	1ac0      	subs	r0, r0, r3
 800d23e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d240:	b10b      	cbz	r3, 800d246 <__sflush_r+0x46>
 800d242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d244:	1ac0      	subs	r0, r0, r3
 800d246:	2300      	movs	r3, #0
 800d248:	4602      	mov	r2, r0
 800d24a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d24c:	6a21      	ldr	r1, [r4, #32]
 800d24e:	4628      	mov	r0, r5
 800d250:	47b0      	blx	r6
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	d106      	bne.n	800d266 <__sflush_r+0x66>
 800d258:	6829      	ldr	r1, [r5, #0]
 800d25a:	291d      	cmp	r1, #29
 800d25c:	d82c      	bhi.n	800d2b8 <__sflush_r+0xb8>
 800d25e:	4a2a      	ldr	r2, [pc, #168]	; (800d308 <__sflush_r+0x108>)
 800d260:	40ca      	lsrs	r2, r1
 800d262:	07d6      	lsls	r6, r2, #31
 800d264:	d528      	bpl.n	800d2b8 <__sflush_r+0xb8>
 800d266:	2200      	movs	r2, #0
 800d268:	6062      	str	r2, [r4, #4]
 800d26a:	04d9      	lsls	r1, r3, #19
 800d26c:	6922      	ldr	r2, [r4, #16]
 800d26e:	6022      	str	r2, [r4, #0]
 800d270:	d504      	bpl.n	800d27c <__sflush_r+0x7c>
 800d272:	1c42      	adds	r2, r0, #1
 800d274:	d101      	bne.n	800d27a <__sflush_r+0x7a>
 800d276:	682b      	ldr	r3, [r5, #0]
 800d278:	b903      	cbnz	r3, 800d27c <__sflush_r+0x7c>
 800d27a:	6560      	str	r0, [r4, #84]	; 0x54
 800d27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d27e:	602f      	str	r7, [r5, #0]
 800d280:	2900      	cmp	r1, #0
 800d282:	d0ca      	beq.n	800d21a <__sflush_r+0x1a>
 800d284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d288:	4299      	cmp	r1, r3
 800d28a:	d002      	beq.n	800d292 <__sflush_r+0x92>
 800d28c:	4628      	mov	r0, r5
 800d28e:	f000 f9d7 	bl	800d640 <_free_r>
 800d292:	2000      	movs	r0, #0
 800d294:	6360      	str	r0, [r4, #52]	; 0x34
 800d296:	e7c1      	b.n	800d21c <__sflush_r+0x1c>
 800d298:	6a21      	ldr	r1, [r4, #32]
 800d29a:	2301      	movs	r3, #1
 800d29c:	4628      	mov	r0, r5
 800d29e:	47b0      	blx	r6
 800d2a0:	1c41      	adds	r1, r0, #1
 800d2a2:	d1c7      	bne.n	800d234 <__sflush_r+0x34>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d0c4      	beq.n	800d234 <__sflush_r+0x34>
 800d2aa:	2b1d      	cmp	r3, #29
 800d2ac:	d001      	beq.n	800d2b2 <__sflush_r+0xb2>
 800d2ae:	2b16      	cmp	r3, #22
 800d2b0:	d101      	bne.n	800d2b6 <__sflush_r+0xb6>
 800d2b2:	602f      	str	r7, [r5, #0]
 800d2b4:	e7b1      	b.n	800d21a <__sflush_r+0x1a>
 800d2b6:	89a3      	ldrh	r3, [r4, #12]
 800d2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2bc:	81a3      	strh	r3, [r4, #12]
 800d2be:	e7ad      	b.n	800d21c <__sflush_r+0x1c>
 800d2c0:	690f      	ldr	r7, [r1, #16]
 800d2c2:	2f00      	cmp	r7, #0
 800d2c4:	d0a9      	beq.n	800d21a <__sflush_r+0x1a>
 800d2c6:	0793      	lsls	r3, r2, #30
 800d2c8:	680e      	ldr	r6, [r1, #0]
 800d2ca:	bf08      	it	eq
 800d2cc:	694b      	ldreq	r3, [r1, #20]
 800d2ce:	600f      	str	r7, [r1, #0]
 800d2d0:	bf18      	it	ne
 800d2d2:	2300      	movne	r3, #0
 800d2d4:	eba6 0807 	sub.w	r8, r6, r7
 800d2d8:	608b      	str	r3, [r1, #8]
 800d2da:	f1b8 0f00 	cmp.w	r8, #0
 800d2de:	dd9c      	ble.n	800d21a <__sflush_r+0x1a>
 800d2e0:	6a21      	ldr	r1, [r4, #32]
 800d2e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2e4:	4643      	mov	r3, r8
 800d2e6:	463a      	mov	r2, r7
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	47b0      	blx	r6
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	dc06      	bgt.n	800d2fe <__sflush_r+0xfe>
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	e78e      	b.n	800d21c <__sflush_r+0x1c>
 800d2fe:	4407      	add	r7, r0
 800d300:	eba8 0800 	sub.w	r8, r8, r0
 800d304:	e7e9      	b.n	800d2da <__sflush_r+0xda>
 800d306:	bf00      	nop
 800d308:	20400001 	.word	0x20400001

0800d30c <_fflush_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	690b      	ldr	r3, [r1, #16]
 800d310:	4605      	mov	r5, r0
 800d312:	460c      	mov	r4, r1
 800d314:	b913      	cbnz	r3, 800d31c <_fflush_r+0x10>
 800d316:	2500      	movs	r5, #0
 800d318:	4628      	mov	r0, r5
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	b118      	cbz	r0, 800d326 <_fflush_r+0x1a>
 800d31e:	6983      	ldr	r3, [r0, #24]
 800d320:	b90b      	cbnz	r3, 800d326 <_fflush_r+0x1a>
 800d322:	f000 f887 	bl	800d434 <__sinit>
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <_fflush_r+0x6c>)
 800d328:	429c      	cmp	r4, r3
 800d32a:	d11b      	bne.n	800d364 <_fflush_r+0x58>
 800d32c:	686c      	ldr	r4, [r5, #4]
 800d32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0ef      	beq.n	800d316 <_fflush_r+0xa>
 800d336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d338:	07d0      	lsls	r0, r2, #31
 800d33a:	d404      	bmi.n	800d346 <_fflush_r+0x3a>
 800d33c:	0599      	lsls	r1, r3, #22
 800d33e:	d402      	bmi.n	800d346 <_fflush_r+0x3a>
 800d340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d342:	f000 f915 	bl	800d570 <__retarget_lock_acquire_recursive>
 800d346:	4628      	mov	r0, r5
 800d348:	4621      	mov	r1, r4
 800d34a:	f7ff ff59 	bl	800d200 <__sflush_r>
 800d34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d350:	07da      	lsls	r2, r3, #31
 800d352:	4605      	mov	r5, r0
 800d354:	d4e0      	bmi.n	800d318 <_fflush_r+0xc>
 800d356:	89a3      	ldrh	r3, [r4, #12]
 800d358:	059b      	lsls	r3, r3, #22
 800d35a:	d4dd      	bmi.n	800d318 <_fflush_r+0xc>
 800d35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d35e:	f000 f908 	bl	800d572 <__retarget_lock_release_recursive>
 800d362:	e7d9      	b.n	800d318 <_fflush_r+0xc>
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <_fflush_r+0x70>)
 800d366:	429c      	cmp	r4, r3
 800d368:	d101      	bne.n	800d36e <_fflush_r+0x62>
 800d36a:	68ac      	ldr	r4, [r5, #8]
 800d36c:	e7df      	b.n	800d32e <_fflush_r+0x22>
 800d36e:	4b04      	ldr	r3, [pc, #16]	; (800d380 <_fflush_r+0x74>)
 800d370:	429c      	cmp	r4, r3
 800d372:	bf08      	it	eq
 800d374:	68ec      	ldreq	r4, [r5, #12]
 800d376:	e7da      	b.n	800d32e <_fflush_r+0x22>
 800d378:	0800f8fc 	.word	0x0800f8fc
 800d37c:	0800f91c 	.word	0x0800f91c
 800d380:	0800f8dc 	.word	0x0800f8dc

0800d384 <std>:
 800d384:	2300      	movs	r3, #0
 800d386:	b510      	push	{r4, lr}
 800d388:	4604      	mov	r4, r0
 800d38a:	e9c0 3300 	strd	r3, r3, [r0]
 800d38e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d392:	6083      	str	r3, [r0, #8]
 800d394:	8181      	strh	r1, [r0, #12]
 800d396:	6643      	str	r3, [r0, #100]	; 0x64
 800d398:	81c2      	strh	r2, [r0, #14]
 800d39a:	6183      	str	r3, [r0, #24]
 800d39c:	4619      	mov	r1, r3
 800d39e:	2208      	movs	r2, #8
 800d3a0:	305c      	adds	r0, #92	; 0x5c
 800d3a2:	f7ff fdad 	bl	800cf00 <memset>
 800d3a6:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <std+0x38>)
 800d3a8:	6263      	str	r3, [r4, #36]	; 0x24
 800d3aa:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <std+0x3c>)
 800d3ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3ae:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <std+0x40>)
 800d3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3b2:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <std+0x44>)
 800d3b4:	6224      	str	r4, [r4, #32]
 800d3b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3b8:	bd10      	pop	{r4, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800de8d 	.word	0x0800de8d
 800d3c0:	0800deaf 	.word	0x0800deaf
 800d3c4:	0800dee7 	.word	0x0800dee7
 800d3c8:	0800df0b 	.word	0x0800df0b

0800d3cc <_cleanup_r>:
 800d3cc:	4901      	ldr	r1, [pc, #4]	; (800d3d4 <_cleanup_r+0x8>)
 800d3ce:	f000 b8af 	b.w	800d530 <_fwalk_reent>
 800d3d2:	bf00      	nop
 800d3d4:	0800d30d 	.word	0x0800d30d

0800d3d8 <__sfmoreglue>:
 800d3d8:	b570      	push	{r4, r5, r6, lr}
 800d3da:	2268      	movs	r2, #104	; 0x68
 800d3dc:	1e4d      	subs	r5, r1, #1
 800d3de:	4355      	muls	r5, r2
 800d3e0:	460e      	mov	r6, r1
 800d3e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3e6:	f000 f997 	bl	800d718 <_malloc_r>
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	b140      	cbz	r0, 800d400 <__sfmoreglue+0x28>
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	e9c0 1600 	strd	r1, r6, [r0]
 800d3f4:	300c      	adds	r0, #12
 800d3f6:	60a0      	str	r0, [r4, #8]
 800d3f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3fc:	f7ff fd80 	bl	800cf00 <memset>
 800d400:	4620      	mov	r0, r4
 800d402:	bd70      	pop	{r4, r5, r6, pc}

0800d404 <__sfp_lock_acquire>:
 800d404:	4801      	ldr	r0, [pc, #4]	; (800d40c <__sfp_lock_acquire+0x8>)
 800d406:	f000 b8b3 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800d40a:	bf00      	nop
 800d40c:	20027171 	.word	0x20027171

0800d410 <__sfp_lock_release>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__sfp_lock_release+0x8>)
 800d412:	f000 b8ae 	b.w	800d572 <__retarget_lock_release_recursive>
 800d416:	bf00      	nop
 800d418:	20027171 	.word	0x20027171

0800d41c <__sinit_lock_acquire>:
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__sinit_lock_acquire+0x8>)
 800d41e:	f000 b8a7 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800d422:	bf00      	nop
 800d424:	20027172 	.word	0x20027172

0800d428 <__sinit_lock_release>:
 800d428:	4801      	ldr	r0, [pc, #4]	; (800d430 <__sinit_lock_release+0x8>)
 800d42a:	f000 b8a2 	b.w	800d572 <__retarget_lock_release_recursive>
 800d42e:	bf00      	nop
 800d430:	20027172 	.word	0x20027172

0800d434 <__sinit>:
 800d434:	b510      	push	{r4, lr}
 800d436:	4604      	mov	r4, r0
 800d438:	f7ff fff0 	bl	800d41c <__sinit_lock_acquire>
 800d43c:	69a3      	ldr	r3, [r4, #24]
 800d43e:	b11b      	cbz	r3, 800d448 <__sinit+0x14>
 800d440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d444:	f7ff bff0 	b.w	800d428 <__sinit_lock_release>
 800d448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d44c:	6523      	str	r3, [r4, #80]	; 0x50
 800d44e:	4b13      	ldr	r3, [pc, #76]	; (800d49c <__sinit+0x68>)
 800d450:	4a13      	ldr	r2, [pc, #76]	; (800d4a0 <__sinit+0x6c>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	62a2      	str	r2, [r4, #40]	; 0x28
 800d456:	42a3      	cmp	r3, r4
 800d458:	bf04      	itt	eq
 800d45a:	2301      	moveq	r3, #1
 800d45c:	61a3      	streq	r3, [r4, #24]
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 f820 	bl	800d4a4 <__sfp>
 800d464:	6060      	str	r0, [r4, #4]
 800d466:	4620      	mov	r0, r4
 800d468:	f000 f81c 	bl	800d4a4 <__sfp>
 800d46c:	60a0      	str	r0, [r4, #8]
 800d46e:	4620      	mov	r0, r4
 800d470:	f000 f818 	bl	800d4a4 <__sfp>
 800d474:	2200      	movs	r2, #0
 800d476:	60e0      	str	r0, [r4, #12]
 800d478:	2104      	movs	r1, #4
 800d47a:	6860      	ldr	r0, [r4, #4]
 800d47c:	f7ff ff82 	bl	800d384 <std>
 800d480:	68a0      	ldr	r0, [r4, #8]
 800d482:	2201      	movs	r2, #1
 800d484:	2109      	movs	r1, #9
 800d486:	f7ff ff7d 	bl	800d384 <std>
 800d48a:	68e0      	ldr	r0, [r4, #12]
 800d48c:	2202      	movs	r2, #2
 800d48e:	2112      	movs	r1, #18
 800d490:	f7ff ff78 	bl	800d384 <std>
 800d494:	2301      	movs	r3, #1
 800d496:	61a3      	str	r3, [r4, #24]
 800d498:	e7d2      	b.n	800d440 <__sinit+0xc>
 800d49a:	bf00      	nop
 800d49c:	0800f8d8 	.word	0x0800f8d8
 800d4a0:	0800d3cd 	.word	0x0800d3cd

0800d4a4 <__sfp>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	f7ff ffac 	bl	800d404 <__sfp_lock_acquire>
 800d4ac:	4b1e      	ldr	r3, [pc, #120]	; (800d528 <__sfp+0x84>)
 800d4ae:	681e      	ldr	r6, [r3, #0]
 800d4b0:	69b3      	ldr	r3, [r6, #24]
 800d4b2:	b913      	cbnz	r3, 800d4ba <__sfp+0x16>
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7ff ffbd 	bl	800d434 <__sinit>
 800d4ba:	3648      	adds	r6, #72	; 0x48
 800d4bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	d503      	bpl.n	800d4cc <__sfp+0x28>
 800d4c4:	6833      	ldr	r3, [r6, #0]
 800d4c6:	b30b      	cbz	r3, 800d50c <__sfp+0x68>
 800d4c8:	6836      	ldr	r6, [r6, #0]
 800d4ca:	e7f7      	b.n	800d4bc <__sfp+0x18>
 800d4cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4d0:	b9d5      	cbnz	r5, 800d508 <__sfp+0x64>
 800d4d2:	4b16      	ldr	r3, [pc, #88]	; (800d52c <__sfp+0x88>)
 800d4d4:	60e3      	str	r3, [r4, #12]
 800d4d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4da:	6665      	str	r5, [r4, #100]	; 0x64
 800d4dc:	f000 f847 	bl	800d56e <__retarget_lock_init_recursive>
 800d4e0:	f7ff ff96 	bl	800d410 <__sfp_lock_release>
 800d4e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4ec:	6025      	str	r5, [r4, #0]
 800d4ee:	61a5      	str	r5, [r4, #24]
 800d4f0:	2208      	movs	r2, #8
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4f8:	f7ff fd02 	bl	800cf00 <memset>
 800d4fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d504:	4620      	mov	r0, r4
 800d506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d508:	3468      	adds	r4, #104	; 0x68
 800d50a:	e7d9      	b.n	800d4c0 <__sfp+0x1c>
 800d50c:	2104      	movs	r1, #4
 800d50e:	4638      	mov	r0, r7
 800d510:	f7ff ff62 	bl	800d3d8 <__sfmoreglue>
 800d514:	4604      	mov	r4, r0
 800d516:	6030      	str	r0, [r6, #0]
 800d518:	2800      	cmp	r0, #0
 800d51a:	d1d5      	bne.n	800d4c8 <__sfp+0x24>
 800d51c:	f7ff ff78 	bl	800d410 <__sfp_lock_release>
 800d520:	230c      	movs	r3, #12
 800d522:	603b      	str	r3, [r7, #0]
 800d524:	e7ee      	b.n	800d504 <__sfp+0x60>
 800d526:	bf00      	nop
 800d528:	0800f8d8 	.word	0x0800f8d8
 800d52c:	ffff0001 	.word	0xffff0001

0800d530 <_fwalk_reent>:
 800d530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d534:	4606      	mov	r6, r0
 800d536:	4688      	mov	r8, r1
 800d538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d53c:	2700      	movs	r7, #0
 800d53e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d542:	f1b9 0901 	subs.w	r9, r9, #1
 800d546:	d505      	bpl.n	800d554 <_fwalk_reent+0x24>
 800d548:	6824      	ldr	r4, [r4, #0]
 800d54a:	2c00      	cmp	r4, #0
 800d54c:	d1f7      	bne.n	800d53e <_fwalk_reent+0xe>
 800d54e:	4638      	mov	r0, r7
 800d550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d554:	89ab      	ldrh	r3, [r5, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d907      	bls.n	800d56a <_fwalk_reent+0x3a>
 800d55a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d55e:	3301      	adds	r3, #1
 800d560:	d003      	beq.n	800d56a <_fwalk_reent+0x3a>
 800d562:	4629      	mov	r1, r5
 800d564:	4630      	mov	r0, r6
 800d566:	47c0      	blx	r8
 800d568:	4307      	orrs	r7, r0
 800d56a:	3568      	adds	r5, #104	; 0x68
 800d56c:	e7e9      	b.n	800d542 <_fwalk_reent+0x12>

0800d56e <__retarget_lock_init_recursive>:
 800d56e:	4770      	bx	lr

0800d570 <__retarget_lock_acquire_recursive>:
 800d570:	4770      	bx	lr

0800d572 <__retarget_lock_release_recursive>:
 800d572:	4770      	bx	lr

0800d574 <__swhatbuf_r>:
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	460e      	mov	r6, r1
 800d578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57c:	2900      	cmp	r1, #0
 800d57e:	b096      	sub	sp, #88	; 0x58
 800d580:	4614      	mov	r4, r2
 800d582:	461d      	mov	r5, r3
 800d584:	da08      	bge.n	800d598 <__swhatbuf_r+0x24>
 800d586:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	061a      	lsls	r2, r3, #24
 800d590:	d410      	bmi.n	800d5b4 <__swhatbuf_r+0x40>
 800d592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d596:	e00e      	b.n	800d5b6 <__swhatbuf_r+0x42>
 800d598:	466a      	mov	r2, sp
 800d59a:	f000 fce9 	bl	800df70 <_fstat_r>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	dbf1      	blt.n	800d586 <__swhatbuf_r+0x12>
 800d5a2:	9a01      	ldr	r2, [sp, #4]
 800d5a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5ac:	425a      	negs	r2, r3
 800d5ae:	415a      	adcs	r2, r3
 800d5b0:	602a      	str	r2, [r5, #0]
 800d5b2:	e7ee      	b.n	800d592 <__swhatbuf_r+0x1e>
 800d5b4:	2340      	movs	r3, #64	; 0x40
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	b016      	add	sp, #88	; 0x58
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d5c0 <__smakebuf_r>:
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5c4:	079d      	lsls	r5, r3, #30
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	d507      	bpl.n	800d5dc <__smakebuf_r+0x1c>
 800d5cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	6123      	str	r3, [r4, #16]
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	6163      	str	r3, [r4, #20]
 800d5d8:	b002      	add	sp, #8
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
 800d5dc:	ab01      	add	r3, sp, #4
 800d5de:	466a      	mov	r2, sp
 800d5e0:	f7ff ffc8 	bl	800d574 <__swhatbuf_r>
 800d5e4:	9900      	ldr	r1, [sp, #0]
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 f895 	bl	800d718 <_malloc_r>
 800d5ee:	b948      	cbnz	r0, 800d604 <__smakebuf_r+0x44>
 800d5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f4:	059a      	lsls	r2, r3, #22
 800d5f6:	d4ef      	bmi.n	800d5d8 <__smakebuf_r+0x18>
 800d5f8:	f023 0303 	bic.w	r3, r3, #3
 800d5fc:	f043 0302 	orr.w	r3, r3, #2
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	e7e3      	b.n	800d5cc <__smakebuf_r+0xc>
 800d604:	4b0d      	ldr	r3, [pc, #52]	; (800d63c <__smakebuf_r+0x7c>)
 800d606:	62b3      	str	r3, [r6, #40]	; 0x28
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	6020      	str	r0, [r4, #0]
 800d60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	9b00      	ldr	r3, [sp, #0]
 800d614:	6163      	str	r3, [r4, #20]
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	6120      	str	r0, [r4, #16]
 800d61a:	b15b      	cbz	r3, 800d634 <__smakebuf_r+0x74>
 800d61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d620:	4630      	mov	r0, r6
 800d622:	f000 fcb7 	bl	800df94 <_isatty_r>
 800d626:	b128      	cbz	r0, 800d634 <__smakebuf_r+0x74>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	f023 0303 	bic.w	r3, r3, #3
 800d62e:	f043 0301 	orr.w	r3, r3, #1
 800d632:	81a3      	strh	r3, [r4, #12]
 800d634:	89a0      	ldrh	r0, [r4, #12]
 800d636:	4305      	orrs	r5, r0
 800d638:	81a5      	strh	r5, [r4, #12]
 800d63a:	e7cd      	b.n	800d5d8 <__smakebuf_r+0x18>
 800d63c:	0800d3cd 	.word	0x0800d3cd

0800d640 <_free_r>:
 800d640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d642:	2900      	cmp	r1, #0
 800d644:	d044      	beq.n	800d6d0 <_free_r+0x90>
 800d646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64a:	9001      	str	r0, [sp, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f1a1 0404 	sub.w	r4, r1, #4
 800d652:	bfb8      	it	lt
 800d654:	18e4      	addlt	r4, r4, r3
 800d656:	f000 fcbf 	bl	800dfd8 <__malloc_lock>
 800d65a:	4a1e      	ldr	r2, [pc, #120]	; (800d6d4 <_free_r+0x94>)
 800d65c:	9801      	ldr	r0, [sp, #4]
 800d65e:	6813      	ldr	r3, [r2, #0]
 800d660:	b933      	cbnz	r3, 800d670 <_free_r+0x30>
 800d662:	6063      	str	r3, [r4, #4]
 800d664:	6014      	str	r4, [r2, #0]
 800d666:	b003      	add	sp, #12
 800d668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d66c:	f000 bcba 	b.w	800dfe4 <__malloc_unlock>
 800d670:	42a3      	cmp	r3, r4
 800d672:	d908      	bls.n	800d686 <_free_r+0x46>
 800d674:	6825      	ldr	r5, [r4, #0]
 800d676:	1961      	adds	r1, r4, r5
 800d678:	428b      	cmp	r3, r1
 800d67a:	bf01      	itttt	eq
 800d67c:	6819      	ldreq	r1, [r3, #0]
 800d67e:	685b      	ldreq	r3, [r3, #4]
 800d680:	1949      	addeq	r1, r1, r5
 800d682:	6021      	streq	r1, [r4, #0]
 800d684:	e7ed      	b.n	800d662 <_free_r+0x22>
 800d686:	461a      	mov	r2, r3
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	b10b      	cbz	r3, 800d690 <_free_r+0x50>
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	d9fa      	bls.n	800d686 <_free_r+0x46>
 800d690:	6811      	ldr	r1, [r2, #0]
 800d692:	1855      	adds	r5, r2, r1
 800d694:	42a5      	cmp	r5, r4
 800d696:	d10b      	bne.n	800d6b0 <_free_r+0x70>
 800d698:	6824      	ldr	r4, [r4, #0]
 800d69a:	4421      	add	r1, r4
 800d69c:	1854      	adds	r4, r2, r1
 800d69e:	42a3      	cmp	r3, r4
 800d6a0:	6011      	str	r1, [r2, #0]
 800d6a2:	d1e0      	bne.n	800d666 <_free_r+0x26>
 800d6a4:	681c      	ldr	r4, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	6053      	str	r3, [r2, #4]
 800d6aa:	4421      	add	r1, r4
 800d6ac:	6011      	str	r1, [r2, #0]
 800d6ae:	e7da      	b.n	800d666 <_free_r+0x26>
 800d6b0:	d902      	bls.n	800d6b8 <_free_r+0x78>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	6003      	str	r3, [r0, #0]
 800d6b6:	e7d6      	b.n	800d666 <_free_r+0x26>
 800d6b8:	6825      	ldr	r5, [r4, #0]
 800d6ba:	1961      	adds	r1, r4, r5
 800d6bc:	428b      	cmp	r3, r1
 800d6be:	bf04      	itt	eq
 800d6c0:	6819      	ldreq	r1, [r3, #0]
 800d6c2:	685b      	ldreq	r3, [r3, #4]
 800d6c4:	6063      	str	r3, [r4, #4]
 800d6c6:	bf04      	itt	eq
 800d6c8:	1949      	addeq	r1, r1, r5
 800d6ca:	6021      	streq	r1, [r4, #0]
 800d6cc:	6054      	str	r4, [r2, #4]
 800d6ce:	e7ca      	b.n	800d666 <_free_r+0x26>
 800d6d0:	b003      	add	sp, #12
 800d6d2:	bd30      	pop	{r4, r5, pc}
 800d6d4:	20027174 	.word	0x20027174

0800d6d8 <sbrk_aligned>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	4e0e      	ldr	r6, [pc, #56]	; (800d714 <sbrk_aligned+0x3c>)
 800d6dc:	460c      	mov	r4, r1
 800d6de:	6831      	ldr	r1, [r6, #0]
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	b911      	cbnz	r1, 800d6ea <sbrk_aligned+0x12>
 800d6e4:	f000 fbc2 	bl	800de6c <_sbrk_r>
 800d6e8:	6030      	str	r0, [r6, #0]
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f000 fbbd 	bl	800de6c <_sbrk_r>
 800d6f2:	1c43      	adds	r3, r0, #1
 800d6f4:	d00a      	beq.n	800d70c <sbrk_aligned+0x34>
 800d6f6:	1cc4      	adds	r4, r0, #3
 800d6f8:	f024 0403 	bic.w	r4, r4, #3
 800d6fc:	42a0      	cmp	r0, r4
 800d6fe:	d007      	beq.n	800d710 <sbrk_aligned+0x38>
 800d700:	1a21      	subs	r1, r4, r0
 800d702:	4628      	mov	r0, r5
 800d704:	f000 fbb2 	bl	800de6c <_sbrk_r>
 800d708:	3001      	adds	r0, #1
 800d70a:	d101      	bne.n	800d710 <sbrk_aligned+0x38>
 800d70c:	f04f 34ff 	mov.w	r4, #4294967295
 800d710:	4620      	mov	r0, r4
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	20027178 	.word	0x20027178

0800d718 <_malloc_r>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	1ccd      	adds	r5, r1, #3
 800d71e:	f025 0503 	bic.w	r5, r5, #3
 800d722:	3508      	adds	r5, #8
 800d724:	2d0c      	cmp	r5, #12
 800d726:	bf38      	it	cc
 800d728:	250c      	movcc	r5, #12
 800d72a:	2d00      	cmp	r5, #0
 800d72c:	4607      	mov	r7, r0
 800d72e:	db01      	blt.n	800d734 <_malloc_r+0x1c>
 800d730:	42a9      	cmp	r1, r5
 800d732:	d905      	bls.n	800d740 <_malloc_r+0x28>
 800d734:	230c      	movs	r3, #12
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	2600      	movs	r6, #0
 800d73a:	4630      	mov	r0, r6
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d740:	4e2e      	ldr	r6, [pc, #184]	; (800d7fc <_malloc_r+0xe4>)
 800d742:	f000 fc49 	bl	800dfd8 <__malloc_lock>
 800d746:	6833      	ldr	r3, [r6, #0]
 800d748:	461c      	mov	r4, r3
 800d74a:	bb34      	cbnz	r4, 800d79a <_malloc_r+0x82>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4638      	mov	r0, r7
 800d750:	f7ff ffc2 	bl	800d6d8 <sbrk_aligned>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	4604      	mov	r4, r0
 800d758:	d14d      	bne.n	800d7f6 <_malloc_r+0xde>
 800d75a:	6834      	ldr	r4, [r6, #0]
 800d75c:	4626      	mov	r6, r4
 800d75e:	2e00      	cmp	r6, #0
 800d760:	d140      	bne.n	800d7e4 <_malloc_r+0xcc>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	4631      	mov	r1, r6
 800d766:	4638      	mov	r0, r7
 800d768:	eb04 0803 	add.w	r8, r4, r3
 800d76c:	f000 fb7e 	bl	800de6c <_sbrk_r>
 800d770:	4580      	cmp	r8, r0
 800d772:	d13a      	bne.n	800d7ea <_malloc_r+0xd2>
 800d774:	6821      	ldr	r1, [r4, #0]
 800d776:	3503      	adds	r5, #3
 800d778:	1a6d      	subs	r5, r5, r1
 800d77a:	f025 0503 	bic.w	r5, r5, #3
 800d77e:	3508      	adds	r5, #8
 800d780:	2d0c      	cmp	r5, #12
 800d782:	bf38      	it	cc
 800d784:	250c      	movcc	r5, #12
 800d786:	4629      	mov	r1, r5
 800d788:	4638      	mov	r0, r7
 800d78a:	f7ff ffa5 	bl	800d6d8 <sbrk_aligned>
 800d78e:	3001      	adds	r0, #1
 800d790:	d02b      	beq.n	800d7ea <_malloc_r+0xd2>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	442b      	add	r3, r5
 800d796:	6023      	str	r3, [r4, #0]
 800d798:	e00e      	b.n	800d7b8 <_malloc_r+0xa0>
 800d79a:	6822      	ldr	r2, [r4, #0]
 800d79c:	1b52      	subs	r2, r2, r5
 800d79e:	d41e      	bmi.n	800d7de <_malloc_r+0xc6>
 800d7a0:	2a0b      	cmp	r2, #11
 800d7a2:	d916      	bls.n	800d7d2 <_malloc_r+0xba>
 800d7a4:	1961      	adds	r1, r4, r5
 800d7a6:	42a3      	cmp	r3, r4
 800d7a8:	6025      	str	r5, [r4, #0]
 800d7aa:	bf18      	it	ne
 800d7ac:	6059      	strne	r1, [r3, #4]
 800d7ae:	6863      	ldr	r3, [r4, #4]
 800d7b0:	bf08      	it	eq
 800d7b2:	6031      	streq	r1, [r6, #0]
 800d7b4:	5162      	str	r2, [r4, r5]
 800d7b6:	604b      	str	r3, [r1, #4]
 800d7b8:	4638      	mov	r0, r7
 800d7ba:	f104 060b 	add.w	r6, r4, #11
 800d7be:	f000 fc11 	bl	800dfe4 <__malloc_unlock>
 800d7c2:	f026 0607 	bic.w	r6, r6, #7
 800d7c6:	1d23      	adds	r3, r4, #4
 800d7c8:	1af2      	subs	r2, r6, r3
 800d7ca:	d0b6      	beq.n	800d73a <_malloc_r+0x22>
 800d7cc:	1b9b      	subs	r3, r3, r6
 800d7ce:	50a3      	str	r3, [r4, r2]
 800d7d0:	e7b3      	b.n	800d73a <_malloc_r+0x22>
 800d7d2:	6862      	ldr	r2, [r4, #4]
 800d7d4:	42a3      	cmp	r3, r4
 800d7d6:	bf0c      	ite	eq
 800d7d8:	6032      	streq	r2, [r6, #0]
 800d7da:	605a      	strne	r2, [r3, #4]
 800d7dc:	e7ec      	b.n	800d7b8 <_malloc_r+0xa0>
 800d7de:	4623      	mov	r3, r4
 800d7e0:	6864      	ldr	r4, [r4, #4]
 800d7e2:	e7b2      	b.n	800d74a <_malloc_r+0x32>
 800d7e4:	4634      	mov	r4, r6
 800d7e6:	6876      	ldr	r6, [r6, #4]
 800d7e8:	e7b9      	b.n	800d75e <_malloc_r+0x46>
 800d7ea:	230c      	movs	r3, #12
 800d7ec:	603b      	str	r3, [r7, #0]
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	f000 fbf8 	bl	800dfe4 <__malloc_unlock>
 800d7f4:	e7a1      	b.n	800d73a <_malloc_r+0x22>
 800d7f6:	6025      	str	r5, [r4, #0]
 800d7f8:	e7de      	b.n	800d7b8 <_malloc_r+0xa0>
 800d7fa:	bf00      	nop
 800d7fc:	20027174 	.word	0x20027174

0800d800 <__sfputc_r>:
 800d800:	6893      	ldr	r3, [r2, #8]
 800d802:	3b01      	subs	r3, #1
 800d804:	2b00      	cmp	r3, #0
 800d806:	b410      	push	{r4}
 800d808:	6093      	str	r3, [r2, #8]
 800d80a:	da08      	bge.n	800d81e <__sfputc_r+0x1e>
 800d80c:	6994      	ldr	r4, [r2, #24]
 800d80e:	42a3      	cmp	r3, r4
 800d810:	db01      	blt.n	800d816 <__sfputc_r+0x16>
 800d812:	290a      	cmp	r1, #10
 800d814:	d103      	bne.n	800d81e <__sfputc_r+0x1e>
 800d816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d81a:	f7ff bc31 	b.w	800d080 <__swbuf_r>
 800d81e:	6813      	ldr	r3, [r2, #0]
 800d820:	1c58      	adds	r0, r3, #1
 800d822:	6010      	str	r0, [r2, #0]
 800d824:	7019      	strb	r1, [r3, #0]
 800d826:	4608      	mov	r0, r1
 800d828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <__sfputs_r>:
 800d82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d830:	4606      	mov	r6, r0
 800d832:	460f      	mov	r7, r1
 800d834:	4614      	mov	r4, r2
 800d836:	18d5      	adds	r5, r2, r3
 800d838:	42ac      	cmp	r4, r5
 800d83a:	d101      	bne.n	800d840 <__sfputs_r+0x12>
 800d83c:	2000      	movs	r0, #0
 800d83e:	e007      	b.n	800d850 <__sfputs_r+0x22>
 800d840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d844:	463a      	mov	r2, r7
 800d846:	4630      	mov	r0, r6
 800d848:	f7ff ffda 	bl	800d800 <__sfputc_r>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d1f3      	bne.n	800d838 <__sfputs_r+0xa>
 800d850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d854 <_vfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	460d      	mov	r5, r1
 800d85a:	b09d      	sub	sp, #116	; 0x74
 800d85c:	4614      	mov	r4, r2
 800d85e:	4698      	mov	r8, r3
 800d860:	4606      	mov	r6, r0
 800d862:	b118      	cbz	r0, 800d86c <_vfiprintf_r+0x18>
 800d864:	6983      	ldr	r3, [r0, #24]
 800d866:	b90b      	cbnz	r3, 800d86c <_vfiprintf_r+0x18>
 800d868:	f7ff fde4 	bl	800d434 <__sinit>
 800d86c:	4b89      	ldr	r3, [pc, #548]	; (800da94 <_vfiprintf_r+0x240>)
 800d86e:	429d      	cmp	r5, r3
 800d870:	d11b      	bne.n	800d8aa <_vfiprintf_r+0x56>
 800d872:	6875      	ldr	r5, [r6, #4]
 800d874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d876:	07d9      	lsls	r1, r3, #31
 800d878:	d405      	bmi.n	800d886 <_vfiprintf_r+0x32>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	059a      	lsls	r2, r3, #22
 800d87e:	d402      	bmi.n	800d886 <_vfiprintf_r+0x32>
 800d880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d882:	f7ff fe75 	bl	800d570 <__retarget_lock_acquire_recursive>
 800d886:	89ab      	ldrh	r3, [r5, #12]
 800d888:	071b      	lsls	r3, r3, #28
 800d88a:	d501      	bpl.n	800d890 <_vfiprintf_r+0x3c>
 800d88c:	692b      	ldr	r3, [r5, #16]
 800d88e:	b9eb      	cbnz	r3, 800d8cc <_vfiprintf_r+0x78>
 800d890:	4629      	mov	r1, r5
 800d892:	4630      	mov	r0, r6
 800d894:	f7ff fc46 	bl	800d124 <__swsetup_r>
 800d898:	b1c0      	cbz	r0, 800d8cc <_vfiprintf_r+0x78>
 800d89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d89c:	07dc      	lsls	r4, r3, #31
 800d89e:	d50e      	bpl.n	800d8be <_vfiprintf_r+0x6a>
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a4:	b01d      	add	sp, #116	; 0x74
 800d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8aa:	4b7b      	ldr	r3, [pc, #492]	; (800da98 <_vfiprintf_r+0x244>)
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	d101      	bne.n	800d8b4 <_vfiprintf_r+0x60>
 800d8b0:	68b5      	ldr	r5, [r6, #8]
 800d8b2:	e7df      	b.n	800d874 <_vfiprintf_r+0x20>
 800d8b4:	4b79      	ldr	r3, [pc, #484]	; (800da9c <_vfiprintf_r+0x248>)
 800d8b6:	429d      	cmp	r5, r3
 800d8b8:	bf08      	it	eq
 800d8ba:	68f5      	ldreq	r5, [r6, #12]
 800d8bc:	e7da      	b.n	800d874 <_vfiprintf_r+0x20>
 800d8be:	89ab      	ldrh	r3, [r5, #12]
 800d8c0:	0598      	lsls	r0, r3, #22
 800d8c2:	d4ed      	bmi.n	800d8a0 <_vfiprintf_r+0x4c>
 800d8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c6:	f7ff fe54 	bl	800d572 <__retarget_lock_release_recursive>
 800d8ca:	e7e9      	b.n	800d8a0 <_vfiprintf_r+0x4c>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d0:	2320      	movs	r3, #32
 800d8d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8da:	2330      	movs	r3, #48	; 0x30
 800d8dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800daa0 <_vfiprintf_r+0x24c>
 800d8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8e4:	f04f 0901 	mov.w	r9, #1
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	469a      	mov	sl, r3
 800d8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8f0:	b10a      	cbz	r2, 800d8f6 <_vfiprintf_r+0xa2>
 800d8f2:	2a25      	cmp	r2, #37	; 0x25
 800d8f4:	d1f9      	bne.n	800d8ea <_vfiprintf_r+0x96>
 800d8f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8fa:	d00b      	beq.n	800d914 <_vfiprintf_r+0xc0>
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	4622      	mov	r2, r4
 800d900:	4629      	mov	r1, r5
 800d902:	4630      	mov	r0, r6
 800d904:	f7ff ff93 	bl	800d82e <__sfputs_r>
 800d908:	3001      	adds	r0, #1
 800d90a:	f000 80aa 	beq.w	800da62 <_vfiprintf_r+0x20e>
 800d90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d910:	445a      	add	r2, fp
 800d912:	9209      	str	r2, [sp, #36]	; 0x24
 800d914:	f89a 3000 	ldrb.w	r3, [sl]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 80a2 	beq.w	800da62 <_vfiprintf_r+0x20e>
 800d91e:	2300      	movs	r3, #0
 800d920:	f04f 32ff 	mov.w	r2, #4294967295
 800d924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d928:	f10a 0a01 	add.w	sl, sl, #1
 800d92c:	9304      	str	r3, [sp, #16]
 800d92e:	9307      	str	r3, [sp, #28]
 800d930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d934:	931a      	str	r3, [sp, #104]	; 0x68
 800d936:	4654      	mov	r4, sl
 800d938:	2205      	movs	r2, #5
 800d93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93e:	4858      	ldr	r0, [pc, #352]	; (800daa0 <_vfiprintf_r+0x24c>)
 800d940:	f7f2 fc26 	bl	8000190 <memchr>
 800d944:	9a04      	ldr	r2, [sp, #16]
 800d946:	b9d8      	cbnz	r0, 800d980 <_vfiprintf_r+0x12c>
 800d948:	06d1      	lsls	r1, r2, #27
 800d94a:	bf44      	itt	mi
 800d94c:	2320      	movmi	r3, #32
 800d94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d952:	0713      	lsls	r3, r2, #28
 800d954:	bf44      	itt	mi
 800d956:	232b      	movmi	r3, #43	; 0x2b
 800d958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d95c:	f89a 3000 	ldrb.w	r3, [sl]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d015      	beq.n	800d990 <_vfiprintf_r+0x13c>
 800d964:	9a07      	ldr	r2, [sp, #28]
 800d966:	4654      	mov	r4, sl
 800d968:	2000      	movs	r0, #0
 800d96a:	f04f 0c0a 	mov.w	ip, #10
 800d96e:	4621      	mov	r1, r4
 800d970:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d974:	3b30      	subs	r3, #48	; 0x30
 800d976:	2b09      	cmp	r3, #9
 800d978:	d94e      	bls.n	800da18 <_vfiprintf_r+0x1c4>
 800d97a:	b1b0      	cbz	r0, 800d9aa <_vfiprintf_r+0x156>
 800d97c:	9207      	str	r2, [sp, #28]
 800d97e:	e014      	b.n	800d9aa <_vfiprintf_r+0x156>
 800d980:	eba0 0308 	sub.w	r3, r0, r8
 800d984:	fa09 f303 	lsl.w	r3, r9, r3
 800d988:	4313      	orrs	r3, r2
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	46a2      	mov	sl, r4
 800d98e:	e7d2      	b.n	800d936 <_vfiprintf_r+0xe2>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	1d19      	adds	r1, r3, #4
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	9103      	str	r1, [sp, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bfbb      	ittet	lt
 800d99c:	425b      	neglt	r3, r3
 800d99e:	f042 0202 	orrlt.w	r2, r2, #2
 800d9a2:	9307      	strge	r3, [sp, #28]
 800d9a4:	9307      	strlt	r3, [sp, #28]
 800d9a6:	bfb8      	it	lt
 800d9a8:	9204      	strlt	r2, [sp, #16]
 800d9aa:	7823      	ldrb	r3, [r4, #0]
 800d9ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d9ae:	d10c      	bne.n	800d9ca <_vfiprintf_r+0x176>
 800d9b0:	7863      	ldrb	r3, [r4, #1]
 800d9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b4:	d135      	bne.n	800da22 <_vfiprintf_r+0x1ce>
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	1d1a      	adds	r2, r3, #4
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	9203      	str	r2, [sp, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfb8      	it	lt
 800d9c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9c6:	3402      	adds	r4, #2
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dab0 <_vfiprintf_r+0x25c>
 800d9ce:	7821      	ldrb	r1, [r4, #0]
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	f7f2 fbdc 	bl	8000190 <memchr>
 800d9d8:	b140      	cbz	r0, 800d9ec <_vfiprintf_r+0x198>
 800d9da:	2340      	movs	r3, #64	; 0x40
 800d9dc:	eba0 000a 	sub.w	r0, r0, sl
 800d9e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	4303      	orrs	r3, r0
 800d9e8:	3401      	adds	r4, #1
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f0:	482c      	ldr	r0, [pc, #176]	; (800daa4 <_vfiprintf_r+0x250>)
 800d9f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9f6:	2206      	movs	r2, #6
 800d9f8:	f7f2 fbca 	bl	8000190 <memchr>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d03f      	beq.n	800da80 <_vfiprintf_r+0x22c>
 800da00:	4b29      	ldr	r3, [pc, #164]	; (800daa8 <_vfiprintf_r+0x254>)
 800da02:	bb1b      	cbnz	r3, 800da4c <_vfiprintf_r+0x1f8>
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	3307      	adds	r3, #7
 800da08:	f023 0307 	bic.w	r3, r3, #7
 800da0c:	3308      	adds	r3, #8
 800da0e:	9303      	str	r3, [sp, #12]
 800da10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da12:	443b      	add	r3, r7
 800da14:	9309      	str	r3, [sp, #36]	; 0x24
 800da16:	e767      	b.n	800d8e8 <_vfiprintf_r+0x94>
 800da18:	fb0c 3202 	mla	r2, ip, r2, r3
 800da1c:	460c      	mov	r4, r1
 800da1e:	2001      	movs	r0, #1
 800da20:	e7a5      	b.n	800d96e <_vfiprintf_r+0x11a>
 800da22:	2300      	movs	r3, #0
 800da24:	3401      	adds	r4, #1
 800da26:	9305      	str	r3, [sp, #20]
 800da28:	4619      	mov	r1, r3
 800da2a:	f04f 0c0a 	mov.w	ip, #10
 800da2e:	4620      	mov	r0, r4
 800da30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da34:	3a30      	subs	r2, #48	; 0x30
 800da36:	2a09      	cmp	r2, #9
 800da38:	d903      	bls.n	800da42 <_vfiprintf_r+0x1ee>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0c5      	beq.n	800d9ca <_vfiprintf_r+0x176>
 800da3e:	9105      	str	r1, [sp, #20]
 800da40:	e7c3      	b.n	800d9ca <_vfiprintf_r+0x176>
 800da42:	fb0c 2101 	mla	r1, ip, r1, r2
 800da46:	4604      	mov	r4, r0
 800da48:	2301      	movs	r3, #1
 800da4a:	e7f0      	b.n	800da2e <_vfiprintf_r+0x1da>
 800da4c:	ab03      	add	r3, sp, #12
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	462a      	mov	r2, r5
 800da52:	4b16      	ldr	r3, [pc, #88]	; (800daac <_vfiprintf_r+0x258>)
 800da54:	a904      	add	r1, sp, #16
 800da56:	4630      	mov	r0, r6
 800da58:	f3af 8000 	nop.w
 800da5c:	4607      	mov	r7, r0
 800da5e:	1c78      	adds	r0, r7, #1
 800da60:	d1d6      	bne.n	800da10 <_vfiprintf_r+0x1bc>
 800da62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da64:	07d9      	lsls	r1, r3, #31
 800da66:	d405      	bmi.n	800da74 <_vfiprintf_r+0x220>
 800da68:	89ab      	ldrh	r3, [r5, #12]
 800da6a:	059a      	lsls	r2, r3, #22
 800da6c:	d402      	bmi.n	800da74 <_vfiprintf_r+0x220>
 800da6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da70:	f7ff fd7f 	bl	800d572 <__retarget_lock_release_recursive>
 800da74:	89ab      	ldrh	r3, [r5, #12]
 800da76:	065b      	lsls	r3, r3, #25
 800da78:	f53f af12 	bmi.w	800d8a0 <_vfiprintf_r+0x4c>
 800da7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da7e:	e711      	b.n	800d8a4 <_vfiprintf_r+0x50>
 800da80:	ab03      	add	r3, sp, #12
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	462a      	mov	r2, r5
 800da86:	4b09      	ldr	r3, [pc, #36]	; (800daac <_vfiprintf_r+0x258>)
 800da88:	a904      	add	r1, sp, #16
 800da8a:	4630      	mov	r0, r6
 800da8c:	f000 f880 	bl	800db90 <_printf_i>
 800da90:	e7e4      	b.n	800da5c <_vfiprintf_r+0x208>
 800da92:	bf00      	nop
 800da94:	0800f8fc 	.word	0x0800f8fc
 800da98:	0800f91c 	.word	0x0800f91c
 800da9c:	0800f8dc 	.word	0x0800f8dc
 800daa0:	0800f93c 	.word	0x0800f93c
 800daa4:	0800f946 	.word	0x0800f946
 800daa8:	00000000 	.word	0x00000000
 800daac:	0800d82f 	.word	0x0800d82f
 800dab0:	0800f942 	.word	0x0800f942

0800dab4 <_printf_common>:
 800dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab8:	4616      	mov	r6, r2
 800daba:	4699      	mov	r9, r3
 800dabc:	688a      	ldr	r2, [r1, #8]
 800dabe:	690b      	ldr	r3, [r1, #16]
 800dac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	bfb8      	it	lt
 800dac8:	4613      	movlt	r3, r2
 800daca:	6033      	str	r3, [r6, #0]
 800dacc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dad0:	4607      	mov	r7, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	b10a      	cbz	r2, 800dada <_printf_common+0x26>
 800dad6:	3301      	adds	r3, #1
 800dad8:	6033      	str	r3, [r6, #0]
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	0699      	lsls	r1, r3, #26
 800dade:	bf42      	ittt	mi
 800dae0:	6833      	ldrmi	r3, [r6, #0]
 800dae2:	3302      	addmi	r3, #2
 800dae4:	6033      	strmi	r3, [r6, #0]
 800dae6:	6825      	ldr	r5, [r4, #0]
 800dae8:	f015 0506 	ands.w	r5, r5, #6
 800daec:	d106      	bne.n	800dafc <_printf_common+0x48>
 800daee:	f104 0a19 	add.w	sl, r4, #25
 800daf2:	68e3      	ldr	r3, [r4, #12]
 800daf4:	6832      	ldr	r2, [r6, #0]
 800daf6:	1a9b      	subs	r3, r3, r2
 800daf8:	42ab      	cmp	r3, r5
 800dafa:	dc26      	bgt.n	800db4a <_printf_common+0x96>
 800dafc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db00:	1e13      	subs	r3, r2, #0
 800db02:	6822      	ldr	r2, [r4, #0]
 800db04:	bf18      	it	ne
 800db06:	2301      	movne	r3, #1
 800db08:	0692      	lsls	r2, r2, #26
 800db0a:	d42b      	bmi.n	800db64 <_printf_common+0xb0>
 800db0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db10:	4649      	mov	r1, r9
 800db12:	4638      	mov	r0, r7
 800db14:	47c0      	blx	r8
 800db16:	3001      	adds	r0, #1
 800db18:	d01e      	beq.n	800db58 <_printf_common+0xa4>
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	68e5      	ldr	r5, [r4, #12]
 800db1e:	6832      	ldr	r2, [r6, #0]
 800db20:	f003 0306 	and.w	r3, r3, #6
 800db24:	2b04      	cmp	r3, #4
 800db26:	bf08      	it	eq
 800db28:	1aad      	subeq	r5, r5, r2
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	6922      	ldr	r2, [r4, #16]
 800db2e:	bf0c      	ite	eq
 800db30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db34:	2500      	movne	r5, #0
 800db36:	4293      	cmp	r3, r2
 800db38:	bfc4      	itt	gt
 800db3a:	1a9b      	subgt	r3, r3, r2
 800db3c:	18ed      	addgt	r5, r5, r3
 800db3e:	2600      	movs	r6, #0
 800db40:	341a      	adds	r4, #26
 800db42:	42b5      	cmp	r5, r6
 800db44:	d11a      	bne.n	800db7c <_printf_common+0xc8>
 800db46:	2000      	movs	r0, #0
 800db48:	e008      	b.n	800db5c <_printf_common+0xa8>
 800db4a:	2301      	movs	r3, #1
 800db4c:	4652      	mov	r2, sl
 800db4e:	4649      	mov	r1, r9
 800db50:	4638      	mov	r0, r7
 800db52:	47c0      	blx	r8
 800db54:	3001      	adds	r0, #1
 800db56:	d103      	bne.n	800db60 <_printf_common+0xac>
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db60:	3501      	adds	r5, #1
 800db62:	e7c6      	b.n	800daf2 <_printf_common+0x3e>
 800db64:	18e1      	adds	r1, r4, r3
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	2030      	movs	r0, #48	; 0x30
 800db6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db6e:	4422      	add	r2, r4
 800db70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db78:	3302      	adds	r3, #2
 800db7a:	e7c7      	b.n	800db0c <_printf_common+0x58>
 800db7c:	2301      	movs	r3, #1
 800db7e:	4622      	mov	r2, r4
 800db80:	4649      	mov	r1, r9
 800db82:	4638      	mov	r0, r7
 800db84:	47c0      	blx	r8
 800db86:	3001      	adds	r0, #1
 800db88:	d0e6      	beq.n	800db58 <_printf_common+0xa4>
 800db8a:	3601      	adds	r6, #1
 800db8c:	e7d9      	b.n	800db42 <_printf_common+0x8e>
	...

0800db90 <_printf_i>:
 800db90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	7e0f      	ldrb	r7, [r1, #24]
 800db96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db98:	2f78      	cmp	r7, #120	; 0x78
 800db9a:	4691      	mov	r9, r2
 800db9c:	4680      	mov	r8, r0
 800db9e:	460c      	mov	r4, r1
 800dba0:	469a      	mov	sl, r3
 800dba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dba6:	d807      	bhi.n	800dbb8 <_printf_i+0x28>
 800dba8:	2f62      	cmp	r7, #98	; 0x62
 800dbaa:	d80a      	bhi.n	800dbc2 <_printf_i+0x32>
 800dbac:	2f00      	cmp	r7, #0
 800dbae:	f000 80d8 	beq.w	800dd62 <_printf_i+0x1d2>
 800dbb2:	2f58      	cmp	r7, #88	; 0x58
 800dbb4:	f000 80a3 	beq.w	800dcfe <_printf_i+0x16e>
 800dbb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dbc0:	e03a      	b.n	800dc38 <_printf_i+0xa8>
 800dbc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dbc6:	2b15      	cmp	r3, #21
 800dbc8:	d8f6      	bhi.n	800dbb8 <_printf_i+0x28>
 800dbca:	a101      	add	r1, pc, #4	; (adr r1, 800dbd0 <_printf_i+0x40>)
 800dbcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbd0:	0800dc29 	.word	0x0800dc29
 800dbd4:	0800dc3d 	.word	0x0800dc3d
 800dbd8:	0800dbb9 	.word	0x0800dbb9
 800dbdc:	0800dbb9 	.word	0x0800dbb9
 800dbe0:	0800dbb9 	.word	0x0800dbb9
 800dbe4:	0800dbb9 	.word	0x0800dbb9
 800dbe8:	0800dc3d 	.word	0x0800dc3d
 800dbec:	0800dbb9 	.word	0x0800dbb9
 800dbf0:	0800dbb9 	.word	0x0800dbb9
 800dbf4:	0800dbb9 	.word	0x0800dbb9
 800dbf8:	0800dbb9 	.word	0x0800dbb9
 800dbfc:	0800dd49 	.word	0x0800dd49
 800dc00:	0800dc6d 	.word	0x0800dc6d
 800dc04:	0800dd2b 	.word	0x0800dd2b
 800dc08:	0800dbb9 	.word	0x0800dbb9
 800dc0c:	0800dbb9 	.word	0x0800dbb9
 800dc10:	0800dd6b 	.word	0x0800dd6b
 800dc14:	0800dbb9 	.word	0x0800dbb9
 800dc18:	0800dc6d 	.word	0x0800dc6d
 800dc1c:	0800dbb9 	.word	0x0800dbb9
 800dc20:	0800dbb9 	.word	0x0800dbb9
 800dc24:	0800dd33 	.word	0x0800dd33
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	1d1a      	adds	r2, r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	602a      	str	r2, [r5, #0]
 800dc30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e0a3      	b.n	800dd84 <_printf_i+0x1f4>
 800dc3c:	6820      	ldr	r0, [r4, #0]
 800dc3e:	6829      	ldr	r1, [r5, #0]
 800dc40:	0606      	lsls	r6, r0, #24
 800dc42:	f101 0304 	add.w	r3, r1, #4
 800dc46:	d50a      	bpl.n	800dc5e <_printf_i+0xce>
 800dc48:	680e      	ldr	r6, [r1, #0]
 800dc4a:	602b      	str	r3, [r5, #0]
 800dc4c:	2e00      	cmp	r6, #0
 800dc4e:	da03      	bge.n	800dc58 <_printf_i+0xc8>
 800dc50:	232d      	movs	r3, #45	; 0x2d
 800dc52:	4276      	negs	r6, r6
 800dc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc58:	485e      	ldr	r0, [pc, #376]	; (800ddd4 <_printf_i+0x244>)
 800dc5a:	230a      	movs	r3, #10
 800dc5c:	e019      	b.n	800dc92 <_printf_i+0x102>
 800dc5e:	680e      	ldr	r6, [r1, #0]
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc66:	bf18      	it	ne
 800dc68:	b236      	sxthne	r6, r6
 800dc6a:	e7ef      	b.n	800dc4c <_printf_i+0xbc>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	6820      	ldr	r0, [r4, #0]
 800dc70:	1d19      	adds	r1, r3, #4
 800dc72:	6029      	str	r1, [r5, #0]
 800dc74:	0601      	lsls	r1, r0, #24
 800dc76:	d501      	bpl.n	800dc7c <_printf_i+0xec>
 800dc78:	681e      	ldr	r6, [r3, #0]
 800dc7a:	e002      	b.n	800dc82 <_printf_i+0xf2>
 800dc7c:	0646      	lsls	r6, r0, #25
 800dc7e:	d5fb      	bpl.n	800dc78 <_printf_i+0xe8>
 800dc80:	881e      	ldrh	r6, [r3, #0]
 800dc82:	4854      	ldr	r0, [pc, #336]	; (800ddd4 <_printf_i+0x244>)
 800dc84:	2f6f      	cmp	r7, #111	; 0x6f
 800dc86:	bf0c      	ite	eq
 800dc88:	2308      	moveq	r3, #8
 800dc8a:	230a      	movne	r3, #10
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc92:	6865      	ldr	r5, [r4, #4]
 800dc94:	60a5      	str	r5, [r4, #8]
 800dc96:	2d00      	cmp	r5, #0
 800dc98:	bfa2      	ittt	ge
 800dc9a:	6821      	ldrge	r1, [r4, #0]
 800dc9c:	f021 0104 	bicge.w	r1, r1, #4
 800dca0:	6021      	strge	r1, [r4, #0]
 800dca2:	b90e      	cbnz	r6, 800dca8 <_printf_i+0x118>
 800dca4:	2d00      	cmp	r5, #0
 800dca6:	d04d      	beq.n	800dd44 <_printf_i+0x1b4>
 800dca8:	4615      	mov	r5, r2
 800dcaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800dcae:	fb03 6711 	mls	r7, r3, r1, r6
 800dcb2:	5dc7      	ldrb	r7, [r0, r7]
 800dcb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dcb8:	4637      	mov	r7, r6
 800dcba:	42bb      	cmp	r3, r7
 800dcbc:	460e      	mov	r6, r1
 800dcbe:	d9f4      	bls.n	800dcaa <_printf_i+0x11a>
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d10b      	bne.n	800dcdc <_printf_i+0x14c>
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	07de      	lsls	r6, r3, #31
 800dcc8:	d508      	bpl.n	800dcdc <_printf_i+0x14c>
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	6861      	ldr	r1, [r4, #4]
 800dcce:	4299      	cmp	r1, r3
 800dcd0:	bfde      	ittt	le
 800dcd2:	2330      	movle	r3, #48	; 0x30
 800dcd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dcdc:	1b52      	subs	r2, r2, r5
 800dcde:	6122      	str	r2, [r4, #16]
 800dce0:	f8cd a000 	str.w	sl, [sp]
 800dce4:	464b      	mov	r3, r9
 800dce6:	aa03      	add	r2, sp, #12
 800dce8:	4621      	mov	r1, r4
 800dcea:	4640      	mov	r0, r8
 800dcec:	f7ff fee2 	bl	800dab4 <_printf_common>
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	d14c      	bne.n	800dd8e <_printf_i+0x1fe>
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	b004      	add	sp, #16
 800dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfe:	4835      	ldr	r0, [pc, #212]	; (800ddd4 <_printf_i+0x244>)
 800dd00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd04:	6829      	ldr	r1, [r5, #0]
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd0c:	6029      	str	r1, [r5, #0]
 800dd0e:	061d      	lsls	r5, r3, #24
 800dd10:	d514      	bpl.n	800dd3c <_printf_i+0x1ac>
 800dd12:	07df      	lsls	r7, r3, #31
 800dd14:	bf44      	itt	mi
 800dd16:	f043 0320 	orrmi.w	r3, r3, #32
 800dd1a:	6023      	strmi	r3, [r4, #0]
 800dd1c:	b91e      	cbnz	r6, 800dd26 <_printf_i+0x196>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	f023 0320 	bic.w	r3, r3, #32
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	2310      	movs	r3, #16
 800dd28:	e7b0      	b.n	800dc8c <_printf_i+0xfc>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	f043 0320 	orr.w	r3, r3, #32
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	2378      	movs	r3, #120	; 0x78
 800dd34:	4828      	ldr	r0, [pc, #160]	; (800ddd8 <_printf_i+0x248>)
 800dd36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd3a:	e7e3      	b.n	800dd04 <_printf_i+0x174>
 800dd3c:	0659      	lsls	r1, r3, #25
 800dd3e:	bf48      	it	mi
 800dd40:	b2b6      	uxthmi	r6, r6
 800dd42:	e7e6      	b.n	800dd12 <_printf_i+0x182>
 800dd44:	4615      	mov	r5, r2
 800dd46:	e7bb      	b.n	800dcc0 <_printf_i+0x130>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	6826      	ldr	r6, [r4, #0]
 800dd4c:	6961      	ldr	r1, [r4, #20]
 800dd4e:	1d18      	adds	r0, r3, #4
 800dd50:	6028      	str	r0, [r5, #0]
 800dd52:	0635      	lsls	r5, r6, #24
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	d501      	bpl.n	800dd5c <_printf_i+0x1cc>
 800dd58:	6019      	str	r1, [r3, #0]
 800dd5a:	e002      	b.n	800dd62 <_printf_i+0x1d2>
 800dd5c:	0670      	lsls	r0, r6, #25
 800dd5e:	d5fb      	bpl.n	800dd58 <_printf_i+0x1c8>
 800dd60:	8019      	strh	r1, [r3, #0]
 800dd62:	2300      	movs	r3, #0
 800dd64:	6123      	str	r3, [r4, #16]
 800dd66:	4615      	mov	r5, r2
 800dd68:	e7ba      	b.n	800dce0 <_printf_i+0x150>
 800dd6a:	682b      	ldr	r3, [r5, #0]
 800dd6c:	1d1a      	adds	r2, r3, #4
 800dd6e:	602a      	str	r2, [r5, #0]
 800dd70:	681d      	ldr	r5, [r3, #0]
 800dd72:	6862      	ldr	r2, [r4, #4]
 800dd74:	2100      	movs	r1, #0
 800dd76:	4628      	mov	r0, r5
 800dd78:	f7f2 fa0a 	bl	8000190 <memchr>
 800dd7c:	b108      	cbz	r0, 800dd82 <_printf_i+0x1f2>
 800dd7e:	1b40      	subs	r0, r0, r5
 800dd80:	6060      	str	r0, [r4, #4]
 800dd82:	6863      	ldr	r3, [r4, #4]
 800dd84:	6123      	str	r3, [r4, #16]
 800dd86:	2300      	movs	r3, #0
 800dd88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd8c:	e7a8      	b.n	800dce0 <_printf_i+0x150>
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	462a      	mov	r2, r5
 800dd92:	4649      	mov	r1, r9
 800dd94:	4640      	mov	r0, r8
 800dd96:	47d0      	blx	sl
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d0ab      	beq.n	800dcf4 <_printf_i+0x164>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	079b      	lsls	r3, r3, #30
 800dda0:	d413      	bmi.n	800ddca <_printf_i+0x23a>
 800dda2:	68e0      	ldr	r0, [r4, #12]
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	4298      	cmp	r0, r3
 800dda8:	bfb8      	it	lt
 800ddaa:	4618      	movlt	r0, r3
 800ddac:	e7a4      	b.n	800dcf8 <_printf_i+0x168>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	47d0      	blx	sl
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d09b      	beq.n	800dcf4 <_printf_i+0x164>
 800ddbc:	3501      	adds	r5, #1
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	9903      	ldr	r1, [sp, #12]
 800ddc2:	1a5b      	subs	r3, r3, r1
 800ddc4:	42ab      	cmp	r3, r5
 800ddc6:	dcf2      	bgt.n	800ddae <_printf_i+0x21e>
 800ddc8:	e7eb      	b.n	800dda2 <_printf_i+0x212>
 800ddca:	2500      	movs	r5, #0
 800ddcc:	f104 0619 	add.w	r6, r4, #25
 800ddd0:	e7f5      	b.n	800ddbe <_printf_i+0x22e>
 800ddd2:	bf00      	nop
 800ddd4:	0800f94d 	.word	0x0800f94d
 800ddd8:	0800f95e 	.word	0x0800f95e

0800dddc <_putc_r>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	460d      	mov	r5, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	4606      	mov	r6, r0
 800dde4:	b118      	cbz	r0, 800ddee <_putc_r+0x12>
 800dde6:	6983      	ldr	r3, [r0, #24]
 800dde8:	b90b      	cbnz	r3, 800ddee <_putc_r+0x12>
 800ddea:	f7ff fb23 	bl	800d434 <__sinit>
 800ddee:	4b1c      	ldr	r3, [pc, #112]	; (800de60 <_putc_r+0x84>)
 800ddf0:	429c      	cmp	r4, r3
 800ddf2:	d124      	bne.n	800de3e <_putc_r+0x62>
 800ddf4:	6874      	ldr	r4, [r6, #4]
 800ddf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf8:	07d8      	lsls	r0, r3, #31
 800ddfa:	d405      	bmi.n	800de08 <_putc_r+0x2c>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	0599      	lsls	r1, r3, #22
 800de00:	d402      	bmi.n	800de08 <_putc_r+0x2c>
 800de02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de04:	f7ff fbb4 	bl	800d570 <__retarget_lock_acquire_recursive>
 800de08:	68a3      	ldr	r3, [r4, #8]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	60a3      	str	r3, [r4, #8]
 800de10:	da05      	bge.n	800de1e <_putc_r+0x42>
 800de12:	69a2      	ldr	r2, [r4, #24]
 800de14:	4293      	cmp	r3, r2
 800de16:	db1c      	blt.n	800de52 <_putc_r+0x76>
 800de18:	b2eb      	uxtb	r3, r5
 800de1a:	2b0a      	cmp	r3, #10
 800de1c:	d019      	beq.n	800de52 <_putc_r+0x76>
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	1c5a      	adds	r2, r3, #1
 800de22:	6022      	str	r2, [r4, #0]
 800de24:	701d      	strb	r5, [r3, #0]
 800de26:	b2ed      	uxtb	r5, r5
 800de28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de2a:	07da      	lsls	r2, r3, #31
 800de2c:	d405      	bmi.n	800de3a <_putc_r+0x5e>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	059b      	lsls	r3, r3, #22
 800de32:	d402      	bmi.n	800de3a <_putc_r+0x5e>
 800de34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de36:	f7ff fb9c 	bl	800d572 <__retarget_lock_release_recursive>
 800de3a:	4628      	mov	r0, r5
 800de3c:	bd70      	pop	{r4, r5, r6, pc}
 800de3e:	4b09      	ldr	r3, [pc, #36]	; (800de64 <_putc_r+0x88>)
 800de40:	429c      	cmp	r4, r3
 800de42:	d101      	bne.n	800de48 <_putc_r+0x6c>
 800de44:	68b4      	ldr	r4, [r6, #8]
 800de46:	e7d6      	b.n	800ddf6 <_putc_r+0x1a>
 800de48:	4b07      	ldr	r3, [pc, #28]	; (800de68 <_putc_r+0x8c>)
 800de4a:	429c      	cmp	r4, r3
 800de4c:	bf08      	it	eq
 800de4e:	68f4      	ldreq	r4, [r6, #12]
 800de50:	e7d1      	b.n	800ddf6 <_putc_r+0x1a>
 800de52:	4629      	mov	r1, r5
 800de54:	4622      	mov	r2, r4
 800de56:	4630      	mov	r0, r6
 800de58:	f7ff f912 	bl	800d080 <__swbuf_r>
 800de5c:	4605      	mov	r5, r0
 800de5e:	e7e3      	b.n	800de28 <_putc_r+0x4c>
 800de60:	0800f8fc 	.word	0x0800f8fc
 800de64:	0800f91c 	.word	0x0800f91c
 800de68:	0800f8dc 	.word	0x0800f8dc

0800de6c <_sbrk_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4d06      	ldr	r5, [pc, #24]	; (800de88 <_sbrk_r+0x1c>)
 800de70:	2300      	movs	r3, #0
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	602b      	str	r3, [r5, #0]
 800de78:	f7f5 f878 	bl	8002f6c <_sbrk>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d102      	bne.n	800de86 <_sbrk_r+0x1a>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	b103      	cbz	r3, 800de86 <_sbrk_r+0x1a>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	2002717c 	.word	0x2002717c

0800de8c <__sread>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	460c      	mov	r4, r1
 800de90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de94:	f000 f8ac 	bl	800dff0 <_read_r>
 800de98:	2800      	cmp	r0, #0
 800de9a:	bfab      	itete	ge
 800de9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de9e:	89a3      	ldrhlt	r3, [r4, #12]
 800dea0:	181b      	addge	r3, r3, r0
 800dea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dea6:	bfac      	ite	ge
 800dea8:	6563      	strge	r3, [r4, #84]	; 0x54
 800deaa:	81a3      	strhlt	r3, [r4, #12]
 800deac:	bd10      	pop	{r4, pc}

0800deae <__swrite>:
 800deae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	461f      	mov	r7, r3
 800deb4:	898b      	ldrh	r3, [r1, #12]
 800deb6:	05db      	lsls	r3, r3, #23
 800deb8:	4605      	mov	r5, r0
 800deba:	460c      	mov	r4, r1
 800debc:	4616      	mov	r6, r2
 800debe:	d505      	bpl.n	800decc <__swrite+0x1e>
 800dec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec4:	2302      	movs	r3, #2
 800dec6:	2200      	movs	r2, #0
 800dec8:	f000 f874 	bl	800dfb4 <_lseek_r>
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ded2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	4632      	mov	r2, r6
 800deda:	463b      	mov	r3, r7
 800dedc:	4628      	mov	r0, r5
 800dede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dee2:	f000 b823 	b.w	800df2c <_write_r>

0800dee6 <__sseek>:
 800dee6:	b510      	push	{r4, lr}
 800dee8:	460c      	mov	r4, r1
 800deea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deee:	f000 f861 	bl	800dfb4 <_lseek_r>
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	bf15      	itete	ne
 800def8:	6560      	strne	r0, [r4, #84]	; 0x54
 800defa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800defe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df02:	81a3      	strheq	r3, [r4, #12]
 800df04:	bf18      	it	ne
 800df06:	81a3      	strhne	r3, [r4, #12]
 800df08:	bd10      	pop	{r4, pc}

0800df0a <__sclose>:
 800df0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0e:	f000 b81f 	b.w	800df50 <_close_r>

0800df12 <strchr>:
 800df12:	b2c9      	uxtb	r1, r1
 800df14:	4603      	mov	r3, r0
 800df16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df1a:	b11a      	cbz	r2, 800df24 <strchr+0x12>
 800df1c:	428a      	cmp	r2, r1
 800df1e:	d1f9      	bne.n	800df14 <strchr+0x2>
 800df20:	4618      	mov	r0, r3
 800df22:	4770      	bx	lr
 800df24:	2900      	cmp	r1, #0
 800df26:	bf18      	it	ne
 800df28:	2300      	movne	r3, #0
 800df2a:	e7f9      	b.n	800df20 <strchr+0xe>

0800df2c <_write_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	; (800df4c <_write_r+0x20>)
 800df30:	4604      	mov	r4, r0
 800df32:	4608      	mov	r0, r1
 800df34:	4611      	mov	r1, r2
 800df36:	2200      	movs	r2, #0
 800df38:	602a      	str	r2, [r5, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f7fc f8da 	bl	800a0f4 <_write>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_write_r+0x1e>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_write_r+0x1e>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	2002717c 	.word	0x2002717c

0800df50 <_close_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4d06      	ldr	r5, [pc, #24]	; (800df6c <_close_r+0x1c>)
 800df54:	2300      	movs	r3, #0
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	602b      	str	r3, [r5, #0]
 800df5c:	f7f4 ffd1 	bl	8002f02 <_close>
 800df60:	1c43      	adds	r3, r0, #1
 800df62:	d102      	bne.n	800df6a <_close_r+0x1a>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b103      	cbz	r3, 800df6a <_close_r+0x1a>
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	2002717c 	.word	0x2002717c

0800df70 <_fstat_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	4d07      	ldr	r5, [pc, #28]	; (800df90 <_fstat_r+0x20>)
 800df74:	2300      	movs	r3, #0
 800df76:	4604      	mov	r4, r0
 800df78:	4608      	mov	r0, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	602b      	str	r3, [r5, #0]
 800df7e:	f7f4 ffcc 	bl	8002f1a <_fstat>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	d102      	bne.n	800df8c <_fstat_r+0x1c>
 800df86:	682b      	ldr	r3, [r5, #0]
 800df88:	b103      	cbz	r3, 800df8c <_fstat_r+0x1c>
 800df8a:	6023      	str	r3, [r4, #0]
 800df8c:	bd38      	pop	{r3, r4, r5, pc}
 800df8e:	bf00      	nop
 800df90:	2002717c 	.word	0x2002717c

0800df94 <_isatty_r>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	4d06      	ldr	r5, [pc, #24]	; (800dfb0 <_isatty_r+0x1c>)
 800df98:	2300      	movs	r3, #0
 800df9a:	4604      	mov	r4, r0
 800df9c:	4608      	mov	r0, r1
 800df9e:	602b      	str	r3, [r5, #0]
 800dfa0:	f7f4 ffcb 	bl	8002f3a <_isatty>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_isatty_r+0x1a>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_isatty_r+0x1a>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	2002717c 	.word	0x2002717c

0800dfb4 <_lseek_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d07      	ldr	r5, [pc, #28]	; (800dfd4 <_lseek_r+0x20>)
 800dfb8:	4604      	mov	r4, r0
 800dfba:	4608      	mov	r0, r1
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	602a      	str	r2, [r5, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f7f4 ffc4 	bl	8002f50 <_lseek>
 800dfc8:	1c43      	adds	r3, r0, #1
 800dfca:	d102      	bne.n	800dfd2 <_lseek_r+0x1e>
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	b103      	cbz	r3, 800dfd2 <_lseek_r+0x1e>
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	bd38      	pop	{r3, r4, r5, pc}
 800dfd4:	2002717c 	.word	0x2002717c

0800dfd8 <__malloc_lock>:
 800dfd8:	4801      	ldr	r0, [pc, #4]	; (800dfe0 <__malloc_lock+0x8>)
 800dfda:	f7ff bac9 	b.w	800d570 <__retarget_lock_acquire_recursive>
 800dfde:	bf00      	nop
 800dfe0:	20027170 	.word	0x20027170

0800dfe4 <__malloc_unlock>:
 800dfe4:	4801      	ldr	r0, [pc, #4]	; (800dfec <__malloc_unlock+0x8>)
 800dfe6:	f7ff bac4 	b.w	800d572 <__retarget_lock_release_recursive>
 800dfea:	bf00      	nop
 800dfec:	20027170 	.word	0x20027170

0800dff0 <_read_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d07      	ldr	r5, [pc, #28]	; (800e010 <_read_r+0x20>)
 800dff4:	4604      	mov	r4, r0
 800dff6:	4608      	mov	r0, r1
 800dff8:	4611      	mov	r1, r2
 800dffa:	2200      	movs	r2, #0
 800dffc:	602a      	str	r2, [r5, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	f7f4 ff62 	bl	8002ec8 <_read>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_read_r+0x1e>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_read_r+0x1e>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	2002717c 	.word	0x2002717c

0800e014 <_init>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	bf00      	nop
 800e018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01a:	bc08      	pop	{r3}
 800e01c:	469e      	mov	lr, r3
 800e01e:	4770      	bx	lr

0800e020 <_fini>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr
