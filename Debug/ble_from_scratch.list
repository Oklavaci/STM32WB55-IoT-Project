
ble_from_scratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4dc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001764  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed80  0800ed80  0001ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  0800ed90  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800ee20  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000130  0800eeb9  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000170  0800eef7  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  20000184  0800ef08  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000171c  2000020c  0800ef90  0002020c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001928  0800ef90  00021928  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   0003718e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006fdf  00000000  00000000  000573ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002e28  00000000  00000000  0005e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002b28  00000000  00000000  000611d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f6ee  00000000  00000000  00063d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00035e59  00000000  00000000  000933ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000ff3f7  00000000  00000000  000c9247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001c863e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ca84  00000000  00000000  001c8690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000020c 	.word	0x2000020c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d604 	.word	0x0800d604

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000210 	.word	0x20000210
 800017c:	0800d604 	.word	0x0800d604

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b96:	f002 fa99 	bl	80030cc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b9a:	f002 fa9d 	bl	80030d8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	f7ff ffad 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ba6:	f008 ff69 	bl	8009a7c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000baa:	f000 f821 	bl	8000bf0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bae:	f000 f8c3 	bl	8000d38 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <APPD_EnableCPU2+0x34>)
 8000bc0:	1d3c      	adds	r4, r7, #4
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bd6:	f008 fe65 	bl	80098a4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 f900 	bl	8008de2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800d61c 	.word	0x0800d61c

08000bf0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
 8000c14:	e038      	b.n	8000c88 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01b      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x7a>
 8000c32:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d823      	bhi.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
 8000c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3c:	d003      	beq.n	8000c46 <APPD_SetCPU2GpioConfig+0x56>
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d009      	beq.n	8000c58 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c44:	e01c      	b.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	889a      	ldrh	r2, [r3, #4]
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	83bb      	strh	r3, [r7, #28]
          break;
 8000c56:	e014      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	889a      	ldrh	r2, [r3, #4]
 8000c62:	8b7b      	ldrh	r3, [r7, #26]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	837b      	strh	r3, [r7, #26]
          break;
 8000c68:	e00b      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	889a      	ldrh	r2, [r3, #4]
 8000c74:	8b3b      	ldrh	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	833b      	strh	r3, [r7, #24]
          break;
 8000c7a:	e002      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000c80:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	3301      	adds	r3, #1
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b25      	cmp	r3, #37	; 0x25
 8000c8c:	d9c3      	bls.n	8000c16 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff3f 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff55 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f002 fee0 	bl	8003a7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f003 f849 	bl	8003d5c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff ff27 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff ff3d 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000ce6:	f002 fec9 	bl	8003a7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000cf2:	f003 f833 	bl	8003d5c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cfc:	8b3b      	ldrh	r3, [r7, #24]
 8000cfe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff11 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff ff27 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d12:	f002 feb3 	bl	8003a7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d1e:	f003 f81d 	bl	8003d5c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
}
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800e9a8 	.word	0x0800e9a8
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d4a:	f001 fca1 	bl	8002690 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fa9c 	bl	80022a4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_EXTI_EnableIT_32_63>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000daa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000800 	.word	0x58000800

08000dc8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cafecafe 	.word	0xcafecafe

08000e04 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_AHB3_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b29b      	uxth	r3, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e0042000 	.word	0xe0042000

08000f0c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22ca      	movs	r2, #202	; 0xca
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2253      	movs	r2, #83	; 0x53
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 0207 	bic.w	r2, r3, #7
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <MX_APPE_Config+0x18>)
 8001036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800103c:	f000 f826 	bl	800108c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001040:	f000 f866 	bl	8001110 <Config_HSE>

  return;
 8001044:	bf00      	nop
}
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58004000 	.word	0x58004000

0800104c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001050:	f000 f872 	bl	8001138 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001054:	f000 f88a 	bl	800116c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <MX_APPE_Init+0x20>)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 ff1a 	bl	8001e94 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001060:	f7ff fd97 	bl	8000b92 <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001064:	f000 f890 	bl	8001188 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000274 	.word	0x20000274

08001070 <Init_Smps>:

void Init_Smps(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001074:	bf00      	nop
}
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <Init_Exti>:

void Init_Exti(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001082:	2050      	movs	r0, #80	; 0x50
 8001084:	f7ff fe8c 	bl	8000da0 <LL_EXTI_EnableIT_32_63>

  return;
 8001088:	bf00      	nop
}
 800108a:	bd80      	pop	{r7, pc}

0800108c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001090:	f000 f804 	bl	800109c <Reset_BackupDomain>

  Reset_IPCC();
 8001094:	f000 f81a 	bl	80010cc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001098:	bf00      	nop
}
 800109a:	bd80      	pop	{r7, pc}

0800109c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010a0:	f7ff fee6 	bl	8000e70 <LL_RCC_IsActiveFlag_PINRST>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <Reset_BackupDomain+0x2a>
 80010aa:	f7ff fef4 	bl	8000e96 <LL_RCC_IsActiveFlag_SFTRST>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010b4:	f003 f982 	bl	80043bc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010b8:	f003 f980 	bl	80043bc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010bc:	f7ff feb6 	bl	8000e2c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010c0:	f7ff fec5 	bl	8000e4e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
}
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80010d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010d4:	f7ff fef2 	bl	8000ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010d8:	213f      	movs	r1, #63	; 0x3f
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <Reset_IPCC+0x40>)
 80010dc:	f7ff ff5c 	bl	8000f98 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010e0:	213f      	movs	r1, #63	; 0x3f
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <Reset_IPCC+0x40>)
 80010e4:	f7ff ff66 	bl	8000fb4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010e8:	213f      	movs	r1, #63	; 0x3f
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <Reset_IPCC+0x40>)
 80010ec:	f7ff ff0e 	bl	8000f0c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010f0:	213f      	movs	r1, #63	; 0x3f
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <Reset_IPCC+0x40>)
 80010f4:	f7ff ff2d 	bl	8000f52 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80010f8:	213f      	movs	r1, #63	; 0x3f
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <Reset_IPCC+0x40>)
 80010fc:	f7ff ff18 	bl	8000f30 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001100:	213f      	movs	r1, #63	; 0x3f
 8001102:	4802      	ldr	r0, [pc, #8]	; (800110c <Reset_IPCC+0x40>)
 8001104:	f7ff ff37 	bl	8000f76 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001108:	bf00      	nop
}
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58000c00 	.word	0x58000c00

08001110 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f008 fd2e 	bl	8009b78 <OTP_Read>
 800111c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe4d 	bl	8000dc8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800112e:	bf00      	nop
 8001130:	bf00      	nop
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <System_Init>:

static void System_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  Init_Smps();
 800113c:	f7ff ff98 	bl	8001070 <Init_Smps>

  Init_Exti();
 8001140:	f7ff ff9d 	bl	800107e <Init_Exti>

  Init_Rtc();
 8001144:	f000 f802 	bl	800114c <Init_Rtc>

  return;
 8001148:	bf00      	nop
}
 800114a:	bd80      	pop	{r7, pc}

0800114c <Init_Rtc>:

static void Init_Rtc(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <Init_Rtc+0x1c>)
 8001152:	f7ff ff4a 	bl	8000fea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001156:	2100      	movs	r1, #0
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <Init_Rtc+0x1c>)
 800115a:	f7ff ff56 	bl	800100a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800115e:	4802      	ldr	r0, [pc, #8]	; (8001168 <Init_Rtc+0x1c>)
 8001160:	f7ff ff36 	bl	8000fd0 <LL_RTC_EnableWriteProtection>

  return;
 8001164:	bf00      	nop
}
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800

0800116c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001174:	f7ff fe46 	bl	8000e04 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001178:	f00a ff02 	bl	800bf80 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff fdf9 	bl	8000d74 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001182:	bf00      	nop
}
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800118e:	f008 f9d3 	bl	8009538 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <appe_Tl_Init+0x50>)
 8001194:	2100      	movs	r1, #0
 8001196:	2008      	movs	r0, #8
 8001198:	f00b f830 	bl	800c1fc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <appe_Tl_Init+0x54>)
 800119e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <appe_Tl_Init+0x58>)
 80011a2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <appe_Tl_Init+0x5c>)
 80011aa:	f008 f88b 	bl	80092c4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <appe_Tl_Init+0x60>)
 80011b0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <appe_Tl_Init+0x64>)
 80011b4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <appe_Tl_Init+0x68>)
 80011b8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ba:	f240 533c 	movw	r3, #1340	; 0x53c
 80011be:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 faf9 	bl	80097bc <TL_MM_Init>

  TL_Enable();
 80011ca:	f008 f9af 	bl	800952c <TL_Enable>

  return;
 80011ce:	bf00      	nop
}
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	080092fd 	.word	0x080092fd
 80011dc:	20030734 	.word	0x20030734
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	2003094c 	.word	0x2003094c
 80011ec:	20030840 	.word	0x20030840
 80011f0:	200301f8 	.word	0x200301f8

080011f4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011fe:	bf00      	nop
}
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	330b      	adds	r3, #11
 800121a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001226:	2b07      	cmp	r3, #7
 8001228:	f200 80d0 	bhi.w	80013cc <APPE_SysUserEvtRx+0x1c0>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <APPE_SysUserEvtRx+0x28>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001255 	.word	0x08001255
 8001238:	080012e7 	.word	0x080012e7
 800123c:	08001309 	.word	0x08001309
 8001240:	080013cd 	.word	0x080013cd
 8001244:	0800134d 	.word	0x0800134d
 8001248:	08001371 	.word	0x08001371
 800124c:	0800138d 	.word	0x0800138d
 8001250:	080013b1 	.word	0x080013b1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f007 fdef 	bl	8008e3c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800125e:	485e      	ldr	r0, [pc, #376]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001260:	f008 fbac 	bl	80099bc <DbgTraceGetFileName>
 8001264:	4601      	mov	r1, r0
 8001266:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800126a:	4a5c      	ldr	r2, [pc, #368]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800126c:	485c      	ldr	r0, [pc, #368]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800126e:	f00b f947 	bl	800c500 <iprintf>
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	4619      	mov	r1, r3
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	461a      	mov	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	4859      	ldr	r0, [pc, #356]	; (80013e4 <APPE_SysUserEvtRx+0x1d8>)
 800127e:	f00b f93f 	bl	800c500 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001282:	4855      	ldr	r0, [pc, #340]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001284:	f008 fb9a 	bl	80099bc <DbgTraceGetFileName>
 8001288:	4601      	mov	r1, r0
 800128a:	f240 1369 	movw	r3, #361	; 0x169
 800128e:	4a53      	ldr	r2, [pc, #332]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001290:	4853      	ldr	r0, [pc, #332]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001292:	f00b f935 	bl	800c500 <iprintf>
 8001296:	7c3b      	ldrb	r3, [r7, #16]
 8001298:	4619      	mov	r1, r3
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <APPE_SysUserEvtRx+0x1dc>)
 800129c:	f00b f930 	bl	800c500 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012a0:	484d      	ldr	r0, [pc, #308]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012a2:	f008 fb8b 	bl	80099bc <DbgTraceGetFileName>
 80012a6:	4601      	mov	r1, r0
 80012a8:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012ae:	484c      	ldr	r0, [pc, #304]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012b0:	f00b f926 	bl	800c500 <iprintf>
 80012b4:	7dbb      	ldrb	r3, [r7, #22]
 80012b6:	4619      	mov	r1, r3
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	461a      	mov	r2, r3
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <APPE_SysUserEvtRx+0x1e0>)
 80012c0:	f00b f91e 	bl	800c500 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012c4:	4844      	ldr	r0, [pc, #272]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012c6:	f008 fb79 	bl	80099bc <DbgTraceGetFileName>
 80012ca:	4601      	mov	r1, r0
 80012cc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012d2:	4843      	ldr	r0, [pc, #268]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012d4:	f00b f914 	bl	800c500 <iprintf>
 80012d8:	4845      	ldr	r0, [pc, #276]	; (80013f0 <APPE_SysUserEvtRx+0x1e4>)
 80012da:	f00b f911 	bl	800c500 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8e0 	bl	80014a4 <APPE_SysEvtReadyProcessing>
    break;
 80012e4:	e073      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012e8:	f008 fb68 	bl	80099bc <DbgTraceGetFileName>
 80012ec:	4601      	mov	r1, r0
 80012ee:	f240 1371 	movw	r3, #369	; 0x171
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012f6:	f00b f903 	bl	800c500 <iprintf>
 80012fa:	483e      	ldr	r0, [pc, #248]	; (80013f4 <APPE_SysUserEvtRx+0x1e8>)
 80012fc:	f00b f900 	bl	800c500 <iprintf>
    APPE_SysEvtError(pPayload);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f885 	bl	8001410 <APPE_SysEvtError>
    break;
 8001306:	e062      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001308:	4833      	ldr	r0, [pc, #204]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f008 fb57 	bl	80099bc <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8001314:	4a31      	ldr	r2, [pc, #196]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4832      	ldr	r0, [pc, #200]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00b f8f2 	bl	800c500 <iprintf>
 800131c:	4836      	ldr	r0, [pc, #216]	; (80013f8 <APPE_SysUserEvtRx+0x1ec>)
 800131e:	f00b f98b 	bl	800c638 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001324:	f008 fb4a 	bl	80099bc <DbgTraceGetFileName>
 8001328:	4601      	mov	r1, r0
 800132a:	f240 1377 	movw	r3, #375	; 0x177
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001332:	f00b f8e5 	bl	800c500 <iprintf>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3302      	adds	r3, #2
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3302      	adds	r3, #2
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	482d      	ldr	r0, [pc, #180]	; (80013fc <APPE_SysUserEvtRx+0x1f0>)
 8001346:	f00b f8db 	bl	800c500 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800134a:	e040      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800134c:	4822      	ldr	r0, [pc, #136]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f008 fb35 	bl	80099bc <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f240 137d 	movw	r3, #381	; 0x17d
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4821      	ldr	r0, [pc, #132]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00b f8d0 	bl	800c500 <iprintf>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3302      	adds	r3, #2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <APPE_SysUserEvtRx+0x1f4>)
 800136a:	f00b f8c9 	bl	800c500 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800136e:	e02e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001372:	f008 fb23 	bl	80099bc <DbgTraceGetFileName>
 8001376:	4601      	mov	r1, r0
 8001378:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001380:	f00b f8be 	bl	800c500 <iprintf>
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <APPE_SysUserEvtRx+0x1f8>)
 8001386:	f00b f8bb 	bl	800c500 <iprintf>
    break;
 800138a:	e020      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800138e:	f008 fb15 	bl	80099bc <DbgTraceGetFileName>
 8001392:	4601      	mov	r1, r0
 8001394:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800139c:	f00b f8b0 	bl	800c500 <iprintf>
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <APPE_SysUserEvtRx+0x1fc>)
 80013aa:	f00b f8a9 	bl	800c500 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013ae:	e00e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80013b2:	f008 fb03 	bl	80099bc <DbgTraceGetFileName>
 80013b6:	4601      	mov	r1, r0
 80013b8:	f240 138b 	movw	r3, #395	; 0x18b
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80013c0:	f00b f89e 	bl	800c500 <iprintf>
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <APPE_SysUserEvtRx+0x200>)
 80013c6:	f00b f89b 	bl	800c500 <iprintf>
    break;
 80013ca:	e000      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013cc:	bf00      	nop
  }

  return;
 80013ce:	bf00      	nop
}
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800d638 	.word	0x0800d638
 80013dc:	0800ead8 	.word	0x0800ead8
 80013e0:	0800d650 	.word	0x0800d650
 80013e4:	0800d664 	.word	0x0800d664
 80013e8:	0800d688 	.word	0x0800d688
 80013ec:	0800d6a4 	.word	0x0800d6a4
 80013f0:	0800d6bc 	.word	0x0800d6bc
 80013f4:	0800d6dc 	.word	0x0800d6dc
 80013f8:	0800d700 	.word	0x0800d700
 80013fc:	0800d750 	.word	0x0800d750
 8001400:	0800d778 	.word	0x0800d778
 8001404:	0800d7b4 	.word	0x0800d7b4
 8001408:	0800d7d8 	.word	0x0800d7d8
 800140c:	0800d814 	.word	0x0800d814

08001410 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	330b      	adds	r3, #11
 800141e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3302      	adds	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001426:	4819      	ldr	r0, [pc, #100]	; (800148c <APPE_SysEvtError+0x7c>)
 8001428:	f008 fac8 	bl	80099bc <DbgTraceGetFileName>
 800142c:	4601      	mov	r1, r0
 800142e:	f240 13a3 	movw	r3, #419	; 0x1a3
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <APPE_SysEvtError+0x80>)
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <APPE_SysEvtError+0x84>)
 8001436:	f00b f863 	bl	800c500 <iprintf>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <APPE_SysEvtError+0x88>)
 8001442:	f00b f85d 	bl	800c500 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <APPE_SysEvtError+0x7c>)
 8001450:	f008 fab4 	bl	80099bc <DbgTraceGetFileName>
 8001454:	4601      	mov	r1, r0
 8001456:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <APPE_SysEvtError+0x80>)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <APPE_SysEvtError+0x84>)
 800145e:	f00b f84f 	bl	800c500 <iprintf>
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <APPE_SysEvtError+0x8c>)
 8001464:	f00b f8e8 	bl	800c638 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001468:	e00d      	b.n	8001486 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <APPE_SysEvtError+0x7c>)
 800146c:	f008 faa6 	bl	80099bc <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <APPE_SysEvtError+0x80>)
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <APPE_SysEvtError+0x84>)
 800147a:	f00b f841 	bl	800c500 <iprintf>
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <APPE_SysEvtError+0x90>)
 8001480:	f00b f8da 	bl	800c638 <puts>
  return;
 8001484:	bf00      	nop
}
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800d638 	.word	0x0800d638
 8001490:	0800eaec 	.word	0x0800eaec
 8001494:	0800d650 	.word	0x0800d650
 8001498:	0800d838 	.word	0x0800d838
 800149c:	0800d868 	.word	0x0800d868
 80014a0:	0800d8a4 	.word	0x0800d8a4

080014a4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	330b      	adds	r3, #11
 80014c4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	3302      	adds	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d132      	bne.n	800153a <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 80014d6:	f008 fa71 	bl	80099bc <DbgTraceGetFileName>
 80014da:	4601      	mov	r1, r0
 80014dc:	f240 13c1 	movw	r3, #449	; 0x1c1
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 80014e4:	f00b f80c 	bl	800c500 <iprintf>
 80014e8:	482a      	ldr	r0, [pc, #168]	; (8001594 <APPE_SysEvtReadyProcessing+0xf0>)
 80014ea:	f00b f8a5 	bl	800c638 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014ee:	f7ff fb63 	bl	8000bb8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014f2:	230d      	movs	r3, #13
 80014f4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014fa:	f7ff fcf9 	bl	8000ef0 <LL_DBGMCU_GetRevisionID>
 80014fe:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001502:	f008 fa5b 	bl	80099bc <DbgTraceGetFileName>
 8001506:	4601      	mov	r1, r0
 8001508:	f240 13d9 	movw	r3, #473	; 0x1d9
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 800150e:	4820      	ldr	r0, [pc, #128]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001510:	f00a fff6 	bl	800c500 <iprintf>
 8001514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <APPE_SysEvtReadyProcessing+0xf4>)
 8001518:	f00a fff2 	bl	800c500 <iprintf>

    config_param.RevisionID = RevisionID;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	b29b      	uxth	r3, r3
 8001520:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4618      	mov	r0, r3
 8001528:	f007 fc72 	bl	8008e10 <SHCI_C2_Config>

    APP_BLE_Init();
 800152c:	f009 f830 	bl	800a590 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001530:	2100      	movs	r1, #0
 8001532:	2001      	movs	r0, #1
 8001534:	f00a fd36 	bl	800bfa4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001538:	e022      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d110      	bne.n	8001564 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001544:	f008 fa3a 	bl	80099bc <DbgTraceGetFileName>
 8001548:	4601      	mov	r1, r0
 800154a:	f240 13e7 	movw	r3, #487	; 0x1e7
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001552:	f00a ffd5 	bl	800c500 <iprintf>
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <APPE_SysEvtReadyProcessing+0xf8>)
 8001558:	f00a ffd2 	bl	800c500 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  return;
 8001562:	e00d      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001566:	f008 fa29 	bl	80099bc <DbgTraceGetFileName>
 800156a:	4601      	mov	r1, r0
 800156c:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001574:	f00a ffc4 	bl	800c500 <iprintf>
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <APPE_SysEvtReadyProcessing+0xfc>)
 800157a:	f00a ffc1 	bl	800c500 <iprintf>
  return;
 800157e:	bf00      	nop
}
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800d638 	.word	0x0800d638
 800158c:	0800eb00 	.word	0x0800eb00
 8001590:	0800d650 	.word	0x0800d650
 8001594:	0800d8dc 	.word	0x0800d8dc
 8001598:	0800d8f8 	.word	0x0800d8f8
 800159c:	0800d91c 	.word	0x0800d91c
 80015a0:	0800d950 	.word	0x0800d950

080015a4 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f00a fd2a 	bl	800c004 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015b8:	bf00      	nop
}
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f00a fd18 	bl	800c004 <UTIL_SEQ_Run>

  return;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2008      	movs	r0, #8
 80015e8:	f00a fe2a 	bl	800c240 <UTIL_SEQ_SetTask>
  return;
 80015ec:	bf00      	nop
}
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f00a fe8b 	bl	800c318 <UTIL_SEQ_SetEvt>
  return;
 8001602:	bf00      	nop
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001612:	2002      	movs	r0, #2
 8001614:	f00a fea0 	bl	800c358 <UTIL_SEQ_WaitEvt>
  return;
 8001618:	bf00      	nop
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d102      	bne.n	8001636 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case SW1_User_Pin:
      APP_BLE_Key_Button1_Action();
 8001630:	f009 feb6 	bl	800b3a0 <APP_BLE_Key_Button1_Action>
      break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_EXTI_Callback+0x18>
    default:
      break;
 8001636:	bf00      	nop
  }
  return;
 8001638:	bf00      	nop
}
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <LL_EXTI_EnableIT_0_31>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <LL_EXTI_EnableIT_0_31+0x24>)
 800164a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800164e:	4905      	ldr	r1, [pc, #20]	; (8001664 <LL_EXTI_EnableIT_0_31+0x24>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000800 	.word	0x58000800

08001668 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4904      	ldr	r1, [pc, #16]	; (8001688 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]

}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	58000800 	.word	0x58000800

0800168c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <ReadRtcSsrValue+0x3c>)
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	b29b      	uxth	r3, r3
 8001698:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <ReadRtcSsrValue+0x3c>)
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	b29b      	uxth	r3, r3
 80016a0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80016a2:	e005      	b.n	80016b0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <ReadRtcSsrValue+0x3c>)
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1f5      	bne.n	80016a4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80016b8:	683b      	ldr	r3, [r7, #0]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40002800 	.word	0x40002800

080016cc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	460a      	mov	r2, r1
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80016dc:	79ba      	ldrb	r2, [r7, #6]
 80016de:	491d      	ldr	r1, [pc, #116]	; (8001754 <LinkTimerAfter+0x88>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3315      	adds	r3, #21
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d009      	beq.n	800170a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <LinkTimerAfter+0x88>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3314      	adds	r3, #20
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4911      	ldr	r1, [pc, #68]	; (8001754 <LinkTimerAfter+0x88>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3315      	adds	r3, #21
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <LinkTimerAfter+0x88>)
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3314      	adds	r3, #20
 800172e:	79ba      	ldrb	r2, [r7, #6]
 8001730:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001732:	79ba      	ldrb	r2, [r7, #6]
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <LinkTimerAfter+0x88>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	3315      	adds	r3, #21
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	701a      	strb	r2, [r3, #0]

  return;
 8001746:	bf00      	nop
}
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000094 	.word	0x20000094

08001758 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <LinkTimerBefore+0xb8>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	79ba      	ldrb	r2, [r7, #6]
 8001770:	429a      	cmp	r2, r3
 8001772:	d032      	beq.n	80017da <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001774:	79ba      	ldrb	r2, [r7, #6]
 8001776:	4927      	ldr	r1, [pc, #156]	; (8001814 <LinkTimerBefore+0xbc>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	3314      	adds	r3, #20
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	4922      	ldr	r1, [pc, #136]	; (8001814 <LinkTimerBefore+0xbc>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3315      	adds	r3, #21
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	491d      	ldr	r1, [pc, #116]	; (8001814 <LinkTimerBefore+0xbc>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3315      	adds	r3, #21
 80017ac:	79ba      	ldrb	r2, [r7, #6]
 80017ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	4918      	ldr	r1, [pc, #96]	; (8001814 <LinkTimerBefore+0xbc>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3314      	adds	r3, #20
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80017c4:	79ba      	ldrb	r2, [r7, #6]
 80017c6:	4913      	ldr	r1, [pc, #76]	; (8001814 <LinkTimerBefore+0xbc>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3314      	adds	r3, #20
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80017d8:	e014      	b.n	8001804 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	490d      	ldr	r1, [pc, #52]	; (8001814 <LinkTimerBefore+0xbc>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3315      	adds	r3, #21
 80017ea:	79ba      	ldrb	r2, [r7, #6]
 80017ec:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80017ee:	79ba      	ldrb	r2, [r7, #6]
 80017f0:	4908      	ldr	r1, [pc, #32]	; (8001814 <LinkTimerBefore+0xbc>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	3314      	adds	r3, #20
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	701a      	strb	r2, [r3, #0]
  return;
 8001802:	bf00      	nop
}
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000124 	.word	0x20000124
 8001814:	20000094 	.word	0x20000094

08001818 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <linkTimer+0x144>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b06      	cmp	r3, #6
 800182a:	d118      	bne.n	800185e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <linkTimer+0x144>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <linkTimer+0x148>)
 8001834:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <linkTimer+0x144>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	4949      	ldr	r1, [pc, #292]	; (8001964 <linkTimer+0x14c>)
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3315      	adds	r3, #21
 800184c:	2206      	movs	r2, #6
 800184e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <linkTimer+0x150>)
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	81fb      	strh	r3, [r7, #14]
 800185c:	e078      	b.n	8001950 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800185e:	f000 f909 	bl	8001a74 <ReturnTimeElapsed>
 8001862:	4603      	mov	r3, r0
 8001864:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	493e      	ldr	r1, [pc, #248]	; (8001964 <linkTimer+0x14c>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3308      	adds	r3, #8
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	4419      	add	r1, r3
 800187e:	4839      	ldr	r0, [pc, #228]	; (8001964 <linkTimer+0x14c>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4403      	add	r3, r0
 800188a:	3308      	adds	r3, #8
 800188c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	4934      	ldr	r1, [pc, #208]	; (8001964 <linkTimer+0x14c>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3308      	adds	r3, #8
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <linkTimer+0x144>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	4a2e      	ldr	r2, [pc, #184]	; (8001964 <linkTimer+0x14c>)
 80018ac:	460b      	mov	r3, r1
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	440b      	add	r3, r1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	3308      	adds	r3, #8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d337      	bcc.n	8001930 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <linkTimer+0x144>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80018c6:	7b7a      	ldrb	r2, [r7, #13]
 80018c8:	4926      	ldr	r1, [pc, #152]	; (8001964 <linkTimer+0x14c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3315      	adds	r3, #21
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80018da:	e013      	b.n	8001904 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80018dc:	7b7a      	ldrb	r2, [r7, #13]
 80018de:	4921      	ldr	r1, [pc, #132]	; (8001964 <linkTimer+0x14c>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3315      	adds	r3, #21
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80018f0:	7b7a      	ldrb	r2, [r7, #13]
 80018f2:	491c      	ldr	r1, [pc, #112]	; (8001964 <linkTimer+0x14c>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3315      	adds	r3, #21
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d00b      	beq.n	8001922 <linkTimer+0x10a>
 800190a:	7b3a      	ldrb	r2, [r7, #12]
 800190c:	4915      	ldr	r1, [pc, #84]	; (8001964 <linkTimer+0x14c>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3308      	adds	r3, #8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	429a      	cmp	r2, r3
 8001920:	d2dc      	bcs.n	80018dc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001922:	7b7a      	ldrb	r2, [r7, #13]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fecf 	bl	80016cc <LinkTimerAfter>
 800192e:	e00f      	b.n	8001950 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <linkTimer+0x144>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff0c 	bl	8001758 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <linkTimer+0x144>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <linkTimer+0x148>)
 8001948:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <linkTimer+0x144>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001950:	89fb      	ldrh	r3, [r7, #14]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000124 	.word	0x20000124
 8001960:	20000125 	.word	0x20000125
 8001964:	20000094 	.word	0x20000094
 8001968:	20000128 	.word	0x20000128

0800196c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <UnlinkTimer+0xf8>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	429a      	cmp	r2, r3
 8001986:	d111      	bne.n	80019ac <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <UnlinkTimer+0xf8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <UnlinkTimer+0xfc>)
 8001990:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	4935      	ldr	r1, [pc, #212]	; (8001a6c <UnlinkTimer+0x100>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	3315      	adds	r3, #21
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <UnlinkTimer+0xf8>)
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e03e      	b.n	8001a2a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	492f      	ldr	r1, [pc, #188]	; (8001a6c <UnlinkTimer+0x100>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3314      	adds	r3, #20
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	492a      	ldr	r1, [pc, #168]	; (8001a6c <UnlinkTimer+0x100>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3315      	adds	r3, #21
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80019d4:	79f9      	ldrb	r1, [r7, #7]
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	4824      	ldr	r0, [pc, #144]	; (8001a6c <UnlinkTimer+0x100>)
 80019da:	460b      	mov	r3, r1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	440b      	add	r3, r1
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4403      	add	r3, r0
 80019e4:	3315      	adds	r3, #21
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2d8      	uxtb	r0, r3
 80019ea:	4920      	ldr	r1, [pc, #128]	; (8001a6c <UnlinkTimer+0x100>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3315      	adds	r3, #21
 80019f8:	4602      	mov	r2, r0
 80019fa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d013      	beq.n	8001a2a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001a02:	79f9      	ldrb	r1, [r7, #7]
 8001a04:	7bba      	ldrb	r2, [r7, #14]
 8001a06:	4819      	ldr	r0, [pc, #100]	; (8001a6c <UnlinkTimer+0x100>)
 8001a08:	460b      	mov	r3, r1
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	440b      	add	r3, r1
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4403      	add	r3, r0
 8001a12:	3314      	adds	r3, #20
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2d8      	uxtb	r0, r3
 8001a18:	4914      	ldr	r1, [pc, #80]	; (8001a6c <UnlinkTimer+0x100>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3314      	adds	r3, #20
 8001a26:	4602      	mov	r2, r0
 8001a28:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	490f      	ldr	r1, [pc, #60]	; (8001a6c <UnlinkTimer+0x100>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	330c      	adds	r3, #12
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <UnlinkTimer+0xf8>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d107      	bne.n	8001a58 <UnlinkTimer+0xec>
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <UnlinkTimer+0x104>)
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	601a      	str	r2, [r3, #0]
  }

  return;
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
}
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20000124 	.word	0x20000124
 8001a68:	20000125 	.word	0x20000125
 8001a6c:	20000094 	.word	0x20000094
 8001a70:	20000128 	.word	0x20000128

08001a74 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <ReturnTimeElapsed+0x70>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d026      	beq.n	8001ad2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001a84:	f7ff fe02 	bl	800168c <ReadRtcSsrValue>
 8001a88:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <ReturnTimeElapsed+0x70>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d805      	bhi.n	8001aa0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <ReturnTimeElapsed+0x70>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	e00a      	b.n	8001ab6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <ReturnTimeElapsed+0x74>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <ReturnTimeElapsed+0x70>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <ReturnTimeElapsed+0x78>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <ReturnTimeElapsed+0x7c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	40d3      	lsrs	r3, r2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	e001      	b.n	8001ad6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b29b      	uxth	r3, r3
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000128 	.word	0x20000128
 8001ae8:	2000022e 	.word	0x2000022e
 8001aec:	2000022d 	.word	0x2000022d
 8001af0:	2000022c 	.word	0x2000022c

08001af4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d108      	bne.n	8001b16 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001b04:	f7ff fdc2 	bl	800168c <ReadRtcSsrValue>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <RestartWakeupCounter+0xa8>)
 8001b0c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f001 fc65 	bl	80033de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001b14:	e03e      	b.n	8001b94 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d803      	bhi.n	8001b24 <RestartWakeupCounter+0x30>
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <RestartWakeupCounter+0xac>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b2a:	bf00      	nop
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <RestartWakeupCounter+0xb0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f7      	beq.n	8001b2c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <RestartWakeupCounter+0xb0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <RestartWakeupCounter+0xb0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b50:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <RestartWakeupCounter+0xb4>)
 8001b54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b58:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f001 fc4d 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <RestartWakeupCounter+0xb8>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	4910      	ldr	r1, [pc, #64]	; (8001bac <RestartWakeupCounter+0xb8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001b70:	f7ff fd8c 	bl	800168c <ReadRtcSsrValue>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <RestartWakeupCounter+0xa8>)
 8001b78:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <RestartWakeupCounter+0xb0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <RestartWakeupCounter+0xb0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b8c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001b8e:	f3af 8000 	nop.w
  return ;
 8001b92:	bf00      	nop
}
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000128 	.word	0x20000128
 8001ba0:	2000022c 	.word	0x2000022c
 8001ba4:	20000228 	.word	0x20000228
 8001ba8:	58000800 	.word	0x58000800
 8001bac:	40002800 	.word	0x40002800

08001bb0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <RescheduleTimerList+0x124>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	d108      	bne.n	8001bd6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001bc4:	bf00      	nop
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <RescheduleTimerList+0x128>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f7      	bne.n	8001bc6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <RescheduleTimerList+0x128>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <RescheduleTimerList+0x128>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <RescheduleTimerList+0x12c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	493b      	ldr	r1, [pc, #236]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3308      	adds	r3, #8
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001c04:	f7ff ff36 	bl	8001a74 <ReturnTimeElapsed>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d205      	bcs.n	8001c20 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <RescheduleTimerList+0x134>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e04d      	b.n	8001cbc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <RescheduleTimerList+0x138>)
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	b292      	uxth	r2, r2
 8001c28:	4413      	add	r3, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d906      	bls.n	8001c40 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <RescheduleTimerList+0x138>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <RescheduleTimerList+0x134>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e03d      	b.n	8001cbc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <RescheduleTimerList+0x134>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c50:	e034      	b.n	8001cbc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	3308      	adds	r3, #8
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20a      	bcs.n	8001c80 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	491c      	ldr	r1, [pc, #112]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	3308      	adds	r3, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e013      	b.n	8001ca8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	4917      	ldr	r1, [pc, #92]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3308      	adds	r3, #8
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	1ac9      	subs	r1, r1, r3
 8001c98:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4403      	add	r3, r0
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <RescheduleTimerList+0x130>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3315      	adds	r3, #21
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d1c7      	bne.n	8001c52 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff15 	bl	8001af4 <RestartWakeupCounter>

  return ;
 8001cca:	bf00      	nop
}
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40002800 	.word	0x40002800
 8001cd8:	20000228 	.word	0x20000228
 8001cdc:	20000124 	.word	0x20000124
 8001ce0:	20000094 	.word	0x20000094
 8001ce4:	2000012c 	.word	0x2000012c
 8001ce8:	20000230 	.word	0x20000230

08001cec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8001cf6:	617b      	str	r3, [r7, #20]
  return(result);
 8001cf8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	22ca      	movs	r2, #202	; 0xca
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2253      	movs	r2, #83	; 0x53
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001d30:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d34:	4954      	ldr	r1, [pc, #336]	; (8001e88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	330c      	adds	r3, #12
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d172      	bne.n	8001e30 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001d4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d4e:	494e      	ldr	r1, [pc, #312]	; (8001e88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001d5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d62:	4949      	ldr	r1, [pc, #292]	; (8001e88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3310      	adds	r3, #16
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001d74:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d050      	beq.n	8001e20 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001d7e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d82:	4941      	ldr	r1, [pc, #260]	; (8001e88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	330d      	adds	r3, #13
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d126      	bne.n	8001de6 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fde4 	bl	800196c <UnlinkTimer>
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f383 8810 	msr	PRIMASK, r3
}
 8001dae:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001db0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001db4:	4934      	ldr	r1, [pc, #208]	; (8001e88 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f9d4 	bl	8002178 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	22ca      	movs	r2, #202	; 0xca
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2253      	movs	r2, #83	; 0x53
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
 8001de4:	e014      	b.n	8001e10 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f383 8810 	msr	PRIMASK, r3
}
 8001df0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f932 	bl	8002060 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	22ca      	movs	r2, #202	; 0xca
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2253      	movs	r2, #83	; 0x53
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	4619      	mov	r1, r3
 8001e18:	69b8      	ldr	r0, [r7, #24]
 8001e1a:	f000 fa35 	bl	8002288 <HW_TS_RTC_Int_AppNot>
 8001e1e:	e025      	b.n	8001e6c <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001e20:	f7ff fec6 	bl	8001bb0 <RescheduleTimerList>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f383 8810 	msr	PRIMASK, r3
}
 8001e2e:	e01d      	b.n	8001e6c <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001e30:	bf00      	nop
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f7      	beq.n	8001e32 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e56:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001e5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001e76:	bf00      	nop
}
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000228 	.word	0x20000228
 8001e84:	20000124 	.word	0x20000124
 8001e88:	20000094 	.word	0x20000094
 8001e8c:	2000012c 	.word	0x2000012c
 8001e90:	58000800 	.word	0x58000800

08001e94 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001ea0:	4a64      	ldr	r2, [pc, #400]	; (8002034 <HW_TS_Init+0x1a0>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HW_TS_Init+0x1a0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	22ca      	movs	r2, #202	; 0xca
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb0:	4b60      	ldr	r3, [pc, #384]	; (8002034 <HW_TS_Init+0x1a0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2253      	movs	r2, #83	; 0x53
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HW_TS_Init+0x1a4>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HW_TS_Init+0x1a4>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HW_TS_Init+0x1a4>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f1c3 0304 	rsb	r3, r3, #4
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HW_TS_Init+0x1a8>)
 8001eda:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HW_TS_Init+0x1a4>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ee4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001ee8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d101      	bne.n	8001f00 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001efc:	2220      	movs	r2, #32
 8001efe:	e003      	b.n	8001f08 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	40d3      	lsrs	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HW_TS_Init+0x1ac>)
 8001f12:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HW_TS_Init+0x1a4>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HW_TS_Init+0x1b0>)
 8001f26:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001f28:	4b46      	ldr	r3, [pc, #280]	; (8002044 <HW_TS_Init+0x1b0>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <HW_TS_Init+0x1ac>)
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <HW_TS_Init+0x1a8>)
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	40d3      	lsrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d904      	bls.n	8001f56 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HW_TS_Init+0x1b4>)
 8001f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e003      	b.n	8001f5e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HW_TS_Init+0x1b4>)
 8001f5c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001f5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f62:	f7ff fb81 	bl	8001668 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001f66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f6a:	f7ff fb69 	bl	8001640 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d143      	bne.n	8001ffc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HW_TS_Init+0x1b8>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HW_TS_Init+0x1bc>)
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	77fb      	strb	r3, [r7, #31]
 8001f86:	e00c      	b.n	8001fa2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001f88:	7ffa      	ldrb	r2, [r7, #31]
 8001f8a:	4932      	ldr	r1, [pc, #200]	; (8002054 <HW_TS_Init+0x1c0>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	330c      	adds	r3, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	77fb      	strb	r3, [r7, #31]
 8001fa2:	7ffb      	ldrb	r3, [r7, #31]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d9ef      	bls.n	8001f88 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HW_TS_Init+0x1c4>)
 8001faa:	2206      	movs	r2, #6
 8001fac:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HW_TS_Init+0x1a0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HW_TS_Init+0x1a0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HW_TS_Init+0x1a0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HW_TS_Init+0x1a0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fd6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001fd8:	4b20      	ldr	r3, [pc, #128]	; (800205c <HW_TS_Init+0x1c8>)
 8001fda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fde:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f001 fa0a 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HW_TS_Init+0x1a0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HW_TS_Init+0x1a0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e00a      	b.n	8002012 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HW_TS_Init+0x1a0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800200c:	2003      	movs	r0, #3
 800200e:	f001 f9e6 	bl	80033de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HW_TS_Init+0x1a0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800201c:	2200      	movs	r2, #0
 800201e:	2103      	movs	r1, #3
 8002020:	2003      	movs	r0, #3
 8002022:	f001 f99a 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002026:	2003      	movs	r0, #3
 8002028:	f001 f9b1 	bl	800338e <HAL_NVIC_EnableIRQ>

  return;
 800202c:	bf00      	nop
}
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000228 	.word	0x20000228
 8002038:	40002800 	.word	0x40002800
 800203c:	2000022c 	.word	0x2000022c
 8002040:	2000022d 	.word	0x2000022d
 8002044:	2000022e 	.word	0x2000022e
 8002048:	20000230 	.word	0x20000230
 800204c:	2000012c 	.word	0x2000012c
 8002050:	20000128 	.word	0x20000128
 8002054:	20000094 	.word	0x20000094
 8002058:	20000124 	.word	0x20000124
 800205c:	58000800 	.word	0x58000800

08002060 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206a:	f3ef 8310 	mrs	r3, PRIMASK
 800206e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002070:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002078:	2003      	movs	r0, #3
 800207a:	f001 f996 	bl	80033aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HW_TS_Stop+0x100>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	22ca      	movs	r2, #202	; 0xca
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HW_TS_Stop+0x100>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2253      	movs	r2, #83	; 0x53
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	4933      	ldr	r1, [pc, #204]	; (8002164 <HW_TS_Stop+0x104>)
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	330c      	adds	r3, #12
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d148      	bne.n	800213c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fc5c 	bl	800196c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <HW_TS_Stop+0x108>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d135      	bne.n	800212c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HW_TS_Stop+0x10c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020cc:	d108      	bne.n	80020e0 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80020ce:	bf00      	nop
 80020d0:	4b23      	ldr	r3, [pc, #140]	; (8002160 <HW_TS_Stop+0x100>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f7      	bne.n	80020d0 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HW_TS_Stop+0x100>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HW_TS_Stop+0x100>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f2:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80020f4:	bf00      	nop
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HW_TS_Stop+0x100>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f7      	beq.n	80020f6 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HW_TS_Stop+0x100>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HW_TS_Stop+0x100>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800211a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HW_TS_Stop+0x110>)
 800211e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002122:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002124:	2003      	movs	r0, #3
 8002126:	f001 f968 	bl	80033fa <HAL_NVIC_ClearPendingIRQ>
 800212a:	e007      	b.n	800213c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HW_TS_Stop+0x114>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	7cfa      	ldrb	r2, [r7, #19]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002138:	f7ff fd3a 	bl	8001bb0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HW_TS_Stop+0x100>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	22ff      	movs	r2, #255	; 0xff
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002146:	2003      	movs	r0, #3
 8002148:	f001 f921 	bl	800338e <HAL_NVIC_EnableIRQ>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f383 8810 	msr	PRIMASK, r3
}
 8002156:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002158:	bf00      	nop
}
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000228 	.word	0x20000228
 8002164:	20000094 	.word	0x20000094
 8002168:	20000124 	.word	0x20000124
 800216c:	40002800 	.word	0x40002800
 8002170:	58000800 	.word	0x58000800
 8002174:	20000125 	.word	0x20000125

08002178 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	493c      	ldr	r1, [pc, #240]	; (8002278 <HW_TS_Start+0x100>)
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	330c      	adds	r3, #12
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d103      	bne.n	80021a4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff5e 	bl	8002060 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a4:	f3ef 8310 	mrs	r3, PRIMASK
 80021a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021aa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ae:	b672      	cpsid	i
}
 80021b0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021b2:	2003      	movs	r0, #3
 80021b4:	f001 f8f9 	bl	80033aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HW_TS_Start+0x104>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ca      	movs	r2, #202	; 0xca
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
 80021c2:	4b2e      	ldr	r3, [pc, #184]	; (800227c <HW_TS_Start+0x104>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2253      	movs	r2, #83	; 0x53
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	492a      	ldr	r1, [pc, #168]	; (8002278 <HW_TS_Start+0x100>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	330c      	adds	r3, #12
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80021e0:	79fa      	ldrb	r2, [r7, #7]
 80021e2:	4925      	ldr	r1, [pc, #148]	; (8002278 <HW_TS_Start+0x100>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3308      	adds	r3, #8
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	4920      	ldr	r1, [pc, #128]	; (8002278 <HW_TS_Start+0x100>)
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	3304      	adds	r3, #4
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb04 	bl	8001818 <linkTimer>
 8002210:	4603      	mov	r3, r0
 8002212:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HW_TS_Start+0x108>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HW_TS_Start+0x10c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	7c7a      	ldrb	r2, [r7, #17]
 8002222:	429a      	cmp	r2, r3
 8002224:	d002      	beq.n	800222c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8002226:	f7ff fcc3 	bl	8001bb0 <RescheduleTimerList>
 800222a:	e013      	b.n	8002254 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	4912      	ldr	r1, [pc, #72]	; (8002278 <HW_TS_Start+0x100>)
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3308      	adds	r3, #8
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	8a7b      	ldrh	r3, [r7, #18]
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	1ac9      	subs	r1, r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <HW_TS_Start+0x100>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4403      	add	r3, r0
 8002250:	3308      	adds	r3, #8
 8002252:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HW_TS_Start+0x104>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800225e:	2003      	movs	r0, #3
 8002260:	f001 f895 	bl	800338e <HAL_NVIC_EnableIRQ>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f383 8810 	msr	PRIMASK, r3
}
 800226e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002270:	bf00      	nop
}
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000094 	.word	0x20000094
 800227c:	20000228 	.word	0x20000228
 8002280:	20000124 	.word	0x20000124
 8002284:	20000125 	.word	0x20000125

08002288 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	460b      	mov	r3, r1
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4798      	blx	r3

  return;
 800229a:	bf00      	nop
}
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4603      	mov	r3, r0
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	4613      	mov	r3, r2
 80022b4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HW_UART_Transmit_DMA+0x80>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HW_UART_Transmit_DMA+0x84>)
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HW_UART_Transmit_DMA+0x88>)
 80022ce:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80022d0:	89bb      	ldrh	r3, [r7, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	4814      	ldr	r0, [pc, #80]	; (8002328 <HW_UART_Transmit_DMA+0x84>)
 80022d8:	f004 f8d4 	bl	8006484 <HAL_UART_Transmit_DMA>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]
            break;
 80022e0:	e000      	b.n	80022e4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80022e2:	bf00      	nop
    }

    switch (hal_status)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d816      	bhi.n	8002318 <HW_UART_Transmit_DMA+0x74>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HW_UART_Transmit_DMA+0x4c>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002307 	.word	0x08002307
 80022f8:	0800230d 	.word	0x0800230d
 80022fc:	08002313 	.word	0x08002313
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002300:	2300      	movs	r3, #0
 8002302:	75bb      	strb	r3, [r7, #22]
            break;
 8002304:	e009      	b.n	800231a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002306:	2301      	movs	r3, #1
 8002308:	75bb      	strb	r3, [r7, #22]
            break;
 800230a:	e006      	b.n	800231a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800230c:	2302      	movs	r3, #2
 800230e:	75bb      	strb	r3, [r7, #22]
            break;
 8002310:	e003      	b.n	800231a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002312:	2303      	movs	r3, #3
 8002314:	75bb      	strb	r3, [r7, #22]
            break;
 8002316:	e000      	b.n	800231a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002318:	bf00      	nop
    }

    return hw_status;
 800231a:	7dbb      	ldrb	r3, [r7, #22]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000234 	.word	0x20000234
 8002328:	200016d8 	.word	0x200016d8
 800232c:	40013800 	.word	0x40013800

08002330 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_UART_TxCpltCallback+0x34>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_UART_TxCpltCallback+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_UART_TxCpltCallback+0x38>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4798      	blx	r3
            }
            break;
 8002352:	e001      	b.n	8002358 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002358:	bf00      	nop
    }

    return;
 800235a:	bf00      	nop
}
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40013800 	.word	0x40013800
 8002368:	20000234 	.word	0x20000234

0800236c <LL_RCC_LSE_SetDriveCapability>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f023 0218 	bic.w	r2, r3, #24
 8002380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_AHB1_GRP1_EnableClock>:
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_AHB2_GRP1_EnableClock>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002400:	f000 fdde 	bl	8002fc0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002404:	f7fe fe14 	bl	8001030 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002408:	f000 f816 	bl	8002438 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800240c:	f000 f890 	bl	8002530 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002410:	f000 f8ee 	bl	80025f0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f000 f9c4 	bl	80027a0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8002418:	f000 f988 	bl	800272c <MX_USB_PCD_Init>
  MX_I2C3_Init();
 800241c:	f000 f8a8 	bl	8002570 <MX_I2C3_Init>
  MX_RF_Init();
 8002420:	f000 f8fa 	bl	8002618 <MX_RF_Init>
  MX_RTC_Init();
 8002424:	f000 f900 	bl	8002628 <MX_RTC_Init>
  MX_DMA_Init();
 8002428:	f000 f9a8 	bl	800277c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800242c:	f7fe fe0e 	bl	800104c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002430:	f7ff f8b8 	bl	80015a4 <MX_APPE_Process>
 8002434:	e7fc      	b.n	8002430 <main+0x34>
	...

08002438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b09a      	sub	sp, #104	; 0x68
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 0320 	add.w	r3, r7, #32
 8002442:	2248      	movs	r2, #72	; 0x48
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f00a f852 	bl	800c4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]
 800245a:	615a      	str	r2, [r3, #20]
 800245c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800245e:	f001 ffad 	bl	80043bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff ff82 	bl	800236c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <SystemClock_Config+0xf4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <SystemClock_Config+0xf4>)
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <SystemClock_Config+0xf4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002484:	2327      	movs	r3, #39	; 0x27
 8002486:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800248e:	2301      	movs	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002498:	2301      	movs	r3, #1
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800249c:	2340      	movs	r3, #64	; 0x40
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80024a0:	2300      	movs	r3, #0
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024a4:	2360      	movs	r3, #96	; 0x60
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a8:	2302      	movs	r3, #2
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024ac:	2301      	movs	r3, #1
 80024ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80024b4:	2320      	movs	r3, #32
 80024b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fb1e 	bl	8004b10 <HAL_RCC_OscConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024da:	f000 f9e9 	bl	80028b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80024de:	236f      	movs	r3, #111	; 0x6f
 80024e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80024e2:	2302      	movs	r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fe7a 	bl	80051f8 <HAL_RCC_ClockConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800250a:	f000 f9d1 	bl	80028b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_8);
 800250e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002512:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 8002516:	f44f 7080 	mov.w	r0, #256	; 0x100
 800251a:	f002 ffad 	bl	8005478 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800251e:	f003 fc7f 	bl	8005e20 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002522:	bf00      	nop
 8002524:	3768      	adds	r7, #104	; 0x68
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	58000400 	.word	0x58000400

08002530 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	; 0x50
 8002534:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002536:	463b      	mov	r3, r7
 8002538:	2250      	movs	r2, #80	; 0x50
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f009 ffd7 	bl	800c4f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002542:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002546:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800254e:	2302      	movs	r3, #2
 8002550:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002552:	2310      	movs	r3, #16
 8002554:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	4618      	mov	r0, r3
 800255a:	f003 faeb 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002564:	f000 f9a4 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002568:	bf00      	nop
 800256a:	3750      	adds	r7, #80	; 0x50
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_I2C3_Init+0x74>)
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <MX_I2C3_Init+0x78>)
 8002578:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_I2C3_Init+0x74>)
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <MX_I2C3_Init+0x7c>)
 800257e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_I2C3_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_I2C3_Init+0x74>)
 8002588:	2201      	movs	r2, #1
 800258a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_I2C3_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_I2C3_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <MX_I2C3_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_I2C3_Init+0x74>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_I2C3_Init+0x74>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025aa:	480e      	ldr	r0, [pc, #56]	; (80025e4 <MX_I2C3_Init+0x74>)
 80025ac:	f001 fc44 	bl	8003e38 <HAL_I2C_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80025b6:	f000 f97b 	bl	80028b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ba:	2100      	movs	r1, #0
 80025bc:	4809      	ldr	r0, [pc, #36]	; (80025e4 <MX_I2C3_Init+0x74>)
 80025be:	f001 fcca 	bl	8003f56 <HAL_I2CEx_ConfigAnalogFilter>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80025c8:	f000 f972 	bl	80028b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80025cc:	2100      	movs	r1, #0
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_I2C3_Init+0x74>)
 80025d0:	f001 fd0c 	bl	8003fec <HAL_I2CEx_ConfigDigitalFilter>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80025da:	f000 f969 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001684 	.word	0x20001684
 80025e8:	40005c00 	.word	0x40005c00
 80025ec:	00707cbb 	.word	0x00707cbb

080025f0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_IPCC_Init+0x20>)
 80025f6:	4a07      	ldr	r2, [pc, #28]	; (8002614 <MX_IPCC_Init+0x24>)
 80025f8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_IPCC_Init+0x20>)
 80025fc:	f001 fd42 	bl	8004084 <HAL_IPCC_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002606:	f000 f953 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000238 	.word	0x20000238
 8002614:	58000c00 	.word	0x58000c00

08002618 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_RTC_Init+0x60>)
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <MX_RTC_Init+0x64>)
 8002630:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_RTC_Init+0x60>)
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_RTC_Init+0x60>)
 800263a:	220f      	movs	r2, #15
 800263c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_RTC_Init+0x60>)
 8002640:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002644:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_RTC_Init+0x60>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_RTC_Init+0x60>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MX_RTC_Init+0x60>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_RTC_Init+0x60>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800265e:	480a      	ldr	r0, [pc, #40]	; (8002688 <MX_RTC_Init+0x60>)
 8002660:	f003 fcf5 	bl	800604e <HAL_RTC_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800266a:	f000 f921 	bl	80028b0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_RTC_Init+0x60>)
 8002674:	f003 fdda 	bl	800622c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800267e:	f000 f917 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000274 	.word	0x20000274
 800268c:	40002800 	.word	0x40002800

08002690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <MX_USART1_UART_Init+0x94>)
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <MX_USART1_UART_Init+0x98>)
 8002698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <MX_USART1_UART_Init+0x94>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026c6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026da:	4812      	ldr	r0, [pc, #72]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026dc:	f003 fe82 	bl	80063e4 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80026e6:	f000 f8e3 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ea:	2100      	movs	r1, #0
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <MX_USART1_UART_Init+0x94>)
 80026ee:	f005 f848 	bl	8007782 <HAL_UARTEx_SetTxFifoThreshold>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80026f8:	f000 f8da 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fc:	2100      	movs	r1, #0
 80026fe:	4809      	ldr	r0, [pc, #36]	; (8002724 <MX_USART1_UART_Init+0x94>)
 8002700:	f005 f87d 	bl	80077fe <HAL_UARTEx_SetRxFifoThreshold>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800270a:	f000 f8d1 	bl	80028b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_USART1_UART_Init+0x94>)
 8002710:	f004 fffe 	bl	8007710 <HAL_UARTEx_DisableFifoMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800271a:	f000 f8c9 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200016d8 	.word	0x200016d8
 8002728:	40013800 	.word	0x40013800

0800272c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <MX_USB_PCD_Init+0x4c>)
 8002734:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002738:	2208      	movs	r2, #8
 800273a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <MX_USB_PCD_Init+0x48>)
 800273e:	2202      	movs	r2, #2
 8002740:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002744:	2202      	movs	r2, #2
 8002746:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_USB_PCD_Init+0x48>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USB_PCD_Init+0x48>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_USB_PCD_Init+0x48>)
 8002762:	f001 fd15 	bl	8004190 <HAL_PCD_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800276c:	f000 f8a0 	bl	80028b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200002f8 	.word	0x200002f8
 8002778:	40006800 	.word	0x40006800

0800277c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002780:	2004      	movs	r0, #4
 8002782:	f7ff fe09 	bl	8002398 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002786:	2001      	movs	r0, #1
 8002788:	f7ff fe06 	bl	8002398 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	210f      	movs	r1, #15
 8002790:	200b      	movs	r0, #11
 8002792:	f000 fde2 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002796:	200b      	movs	r0, #11
 8002798:	f000 fdf9 	bl	800338e <HAL_NVIC_EnableIRQ>

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	2004      	movs	r0, #4
 80027b6:	f7ff fe08 	bl	80023ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2002      	movs	r0, #2
 80027bc:	f7ff fe05 	bl	80023ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fe02 	bl	80023ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	2008      	movs	r0, #8
 80027c8:	f7ff fdff 	bl	80023ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2123      	movs	r1, #35	; 0x23
 80027d0:	4834      	ldr	r0, [pc, #208]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027d2:	f001 fac3 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : vsync_Pin hsync_Pin pxclk_Pin */
  GPIO_InitStruct.Pin = vsync_Pin|hsync_Pin|pxclk_Pin;
 80027d6:	f44f 7344 	mov.w	r3, #784	; 0x310
 80027da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	482e      	ldr	r0, [pc, #184]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027ea:	f001 f947 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027ee:	23ff      	movs	r3, #255	; 0xff
 80027f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f001 f93b 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f001 f92a 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 8002828:	2310      	movs	r3, #16
 800282a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800282c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	4619      	mov	r1, r3
 800283a:	481b      	ldr	r0, [pc, #108]	; (80028a8 <MX_GPIO_Init+0x108>)
 800283c:	f001 f91e 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8002840:	2303      	movs	r3, #3
 8002842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002844:	2301      	movs	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4813      	ldr	r0, [pc, #76]	; (80028a4 <MX_GPIO_Init+0x104>)
 8002856:	f001 f911 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800285a:	2303      	movs	r3, #3
 800285c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4810      	ldr	r0, [pc, #64]	; (80028ac <MX_GPIO_Init+0x10c>)
 800286c:	f001 f906 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Led_Pin */
  GPIO_InitStruct.Pin = Blue_Led_Pin;
 8002870:	2320      	movs	r3, #32
 8002872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	2301      	movs	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Blue_Led_GPIO_Port, &GPIO_InitStruct);
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4807      	ldr	r0, [pc, #28]	; (80028a4 <MX_GPIO_Init+0x104>)
 8002886:	f001 f8f9 	bl	8003a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	200a      	movs	r0, #10
 8002890:	f000 fd63 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002894:	200a      	movs	r0, #10
 8002896:	f000 fd7a 	bl	800338e <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	48000400 	.word	0x48000400
 80028a8:	48000800 	.word	0x48000800
 80028ac:	48000c00 	.word	0x48000c00

080028b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028b4:	b672      	cpsid	i
}
 80028b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <Error_Handler+0x8>

080028ba <LL_RCC_EnableRTC>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_AHB2_GRP1_EnableClock>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_AHB3_GRP1_EnableClock>:
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4313      	orrs	r3, r2
 8002924:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_APB1_GRP1_EnableClock>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_APB2_GRP1_EnableClock>:
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80029a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029ac:	f7ff ffaf 	bl	800290e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	202e      	movs	r0, #46	; 0x2e
 80029b6:	f000 fcd0 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80029ba:	202e      	movs	r0, #46	; 0x2e
 80029bc:	f000 fce7 	bl	800338e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b09c      	sub	sp, #112	; 0x70
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	2250      	movs	r2, #80	; 0x50
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f009 fd83 	bl	800c4f0 <memset>
  if(hi2c->Instance==I2C3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_I2C_MspInit+0x84>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d125      	bne.n	8002a40 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029f4:	2308      	movs	r3, #8
 80029f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029f8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 f896 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a0e:	f7ff ff4f 	bl	80028b0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2004      	movs	r0, #4
 8002a14:	f7ff ff62 	bl	80028dc <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a30:	4619      	mov	r1, r3
 8002a32:	4806      	ldr	r0, [pc, #24]	; (8002a4c <HAL_I2C_MspInit+0x88>)
 8002a34:	f001 f822 	bl	8003a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a3c:	f7ff ff80 	bl	8002940 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3770      	adds	r7, #112	; 0x70
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40005c00 	.word	0x40005c00
 8002a4c:	48000800 	.word	0x48000800

08002a50 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <HAL_IPCC_MspInit+0x44>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d113      	bne.n	8002a8a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a66:	f7ff ff52 	bl	800290e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	202c      	movs	r0, #44	; 0x2c
 8002a70:	f000 fc73 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a74:	202c      	movs	r0, #44	; 0x2c
 8002a76:	f000 fc8a 	bl	800338e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	202d      	movs	r0, #45	; 0x2d
 8002a80:	f000 fc6b 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a84:	202d      	movs	r0, #45	; 0x2d
 8002a86:	f000 fc82 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58000c00 	.word	0x58000c00

08002a98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b096      	sub	sp, #88	; 0x58
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	2250      	movs	r2, #80	; 0x50
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f009 fd21 	bl	800c4f0 <memset>
  if(hrtc->Instance==RTC)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_RTC_MspInit+0x64>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d11d      	bne.n	8002af4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002abc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 f833 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002ad4:	f7ff feec 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad8:	f7ff feef 	bl	80028ba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002adc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ae0:	f7ff ff2e 	bl	8002940 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 fc36 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002aee:	2003      	movs	r0, #3
 8002af0:	f000 fc4d 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002af4:	bf00      	nop
 8002af6:	3758      	adds	r7, #88	; 0x58
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40002800 	.word	0x40002800

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b09c      	sub	sp, #112	; 0x70
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2250      	movs	r2, #80	; 0x50
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f009 fce5 	bl	800c4f0 <memset>
  if(huart->Instance==USART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_UART_MspInit+0xe4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d155      	bne.n	8002bdc <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fff9 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b48:	f7ff feb2 	bl	80028b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b50:	f7ff ff0f 	bl	8002972 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7ff fec1 	bl	80028dc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b5a:	23c0      	movs	r3, #192	; 0xc0
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b72:	4619      	mov	r1, r3
 8002b74:	481c      	ldr	r0, [pc, #112]	; (8002be8 <HAL_UART_MspInit+0xe8>)
 8002b76:	f000 ff81 	bl	8003a7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_UART_MspInit+0xf0>)
 8002b7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b82:	220f      	movs	r2, #15
 8002b84:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b88:	2210      	movs	r2, #16
 8002b8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bb0:	480e      	ldr	r0, [pc, #56]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bb2:	f000 fc31 	bl	8003418 <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002bbc:	f7ff fe78 	bl	80028b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bc4:	679a      	str	r2, [r3, #120]	; 0x78
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_UART_MspInit+0xec>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2024      	movs	r0, #36	; 0x24
 8002bd2:	f000 fbc2 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd6:	2024      	movs	r0, #36	; 0x24
 8002bd8:	f000 fbd9 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	3770      	adds	r7, #112	; 0x70
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40013800 	.word	0x40013800
 8002be8:	48000400 	.word	0x48000400
 8002bec:	20000298 	.word	0x20000298
 8002bf0:	40020008 	.word	0x40020008

08002bf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b09c      	sub	sp, #112	; 0x70
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2250      	movs	r2, #80	; 0x50
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f009 fc6b 	bl	800c4f0 <memset>
  if(hpcd->Instance==USB)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <HAL_PCD_MspInit+0xa8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d136      	bne.n	8002c92 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002c2a:	2318      	movs	r3, #24
 8002c2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c4a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 ff6f 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002c5c:	f7ff fe28 	bl	80028b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff fe3b 	bl	80028dc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002c78:	230a      	movs	r3, #10
 8002c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c80:	4619      	mov	r1, r3
 8002c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c86:	f000 fef9 	bl	8003a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c8e:	f7ff fe57 	bl	8002940 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002c92:	bf00      	nop
 8002c94:	3770      	adds	r7, #112	; 0x70
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40006800 	.word	0x40006800

08002ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x4>

08002ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cec:	f000 f9c2 	bl	8003074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002cf8:	f7fe fff8 	bl	8001cec <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f001 f85b 	bl	8003dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA1_Channel1_IRQHandler+0x10>)
 8002d16:	f000 fd60 	bl	80037da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000298 	.word	0x20000298

08002d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <USART1_IRQHandler+0x10>)
 8002d2a:	f003 fc3d 	bl	80065a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200016d8 	.word	0x200016d8

08002d38 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002d3c:	f008 ffdc 	bl	800bcf8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002d48:	f009 f80e 	bl	800bd68 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d54:	f001 f84c 	bl	8003df0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e00a      	b.n	8002d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6e:	f3af 8000 	nop.w
 8002d72:	4601      	mov	r1, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	60ba      	str	r2, [r7, #8]
 8002d7a:	b2ca      	uxtb	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf0      	blt.n	8002d6e <_read+0x12>
	}

return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_isatty>:

int _isatty(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f009 fb26 	bl	800c480 <__errno>
 8002e34:	4603      	mov	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20030000 	.word	0x20030000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	200005f0 	.word	0x200005f0
 8002e68:	20001928 	.word	0x20001928

08002e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <SystemInit+0x98>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <SystemInit+0x98>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e98:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <SystemInit+0x9c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb6:	f023 0305 	bic.w	r3, r3, #5
 8002eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <SystemInit+0xa0>)
 8002ed8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <SystemInit+0xa0>)
 8002ee0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00
 8002f08:	faf6fefb 	.word	0xfaf6fefb
 8002f0c:	22041000 	.word	0x22041000

08002f10 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f10:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f12:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f14:	3304      	adds	r3, #4

08002f16 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f16:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f18:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f1a:	d3f9      	bcc.n	8002f10 <CopyDataInit>
  bx lr
 8002f1c:	4770      	bx	lr

08002f1e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f1e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002f20:	3004      	adds	r0, #4

08002f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002f22:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002f24:	d3fb      	bcc.n	8002f1e <FillZerobss>
  bx lr
 8002f26:	4770      	bx	lr

08002f28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002f2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f2c:	f7ff ff9e 	bl	8002e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <LoopForever+0x8>)
 8002f32:	490c      	ldr	r1, [pc, #48]	; (8002f64 <LoopForever+0xc>)
 8002f34:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <LoopForever+0x10>)
 8002f36:	2300      	movs	r3, #0
 8002f38:	f7ff ffed 	bl	8002f16 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <LoopForever+0x14>)
 8002f3e:	490c      	ldr	r1, [pc, #48]	; (8002f70 <LoopForever+0x18>)
 8002f40:	2300      	movs	r3, #0
 8002f42:	f7ff ffee 	bl	8002f22 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f46:	480b      	ldr	r0, [pc, #44]	; (8002f74 <LoopForever+0x1c>)
 8002f48:	490b      	ldr	r1, [pc, #44]	; (8002f78 <LoopForever+0x20>)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f7ff ffe9 	bl	8002f22 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f50:	f009 fa9c 	bl	800c48c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002f54:	f7ff fa52 	bl	80023fc <main>

08002f58 <LoopForever>:

LoopForever:
  b LoopForever
 8002f58:	e7fe      	b.n	8002f58 <LoopForever>
 8002f5a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002f5c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002f60:	20000004 	.word	0x20000004
 8002f64:	20000094 	.word	0x20000094
 8002f68:	0800ed90 	.word	0x0800ed90
  INIT_BSS _sbss, _ebss
 8002f6c:	2000020c 	.word	0x2000020c
 8002f70:	20001928 	.word	0x20001928
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002f74:	200301e4 	.word	0x200301e4
 8002f78:	20030a67 	.word	0x20030a67

08002f7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC1_IRQHandler>
	...

08002f80 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6053      	str	r3, [r2, #4]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e0042000 	.word	0xe0042000

08002fa0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	6053      	str	r3, [r2, #4]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e0042000 	.word	0xe0042000

08002fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_Init+0x3c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_Init+0x3c>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	f000 f9b4 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 f80f 	bl	8003000 <HAL_InitTick>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	e001      	b.n	8002ff2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fee:	f7ff fcd9 	bl	80029a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	58004000 	.word	0x58004000

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800300c:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_InitTick+0x6c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003014:	f002 faee 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_InitTick+0x6c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003024:	fbb3 f3f1 	udiv	r3, r3, r1
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f9ca 	bl	80033c6 <HAL_SYSTICK_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d809      	bhi.n	8003052 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800303e:	2200      	movs	r2, #0
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	f04f 30ff 	mov.w	r0, #4294967295
 8003046:	f000 f988 	bl	800335a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_InitTick+0x70>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e007      	b.n	8003062 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e004      	b.n	8003062 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e001      	b.n	8003062 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20000008 	.word	0x20000008

08003074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	2000000c 	.word	0x2000000c
 8003098:	200005f4 	.word	0x200005f4

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	200005f4 	.word	0x200005f4

080030b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTickPrio+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000008 	.word	0x20000008

080030cc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030d0:	f7ff ff56 	bl	8002f80 <LL_DBGMCU_EnableDBGSleepMode>
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030dc:	f7ff ff60 	bl	8002fa0 <LL_DBGMCU_EnableDBGStopMode>
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db12      	blt.n	80031bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	490a      	ldr	r1, [pc, #40]	; (80031c8 <__NVIC_DisableIRQ+0x44>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	3320      	adds	r3, #32
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031b0:	f3bf 8f4f 	dsb	sy
}
 80031b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031b6:	f3bf 8f6f 	isb	sy
}
 80031ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db0c      	blt.n	80031f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	4907      	ldr	r1, [pc, #28]	; (8003204 <__NVIC_SetPendingIRQ+0x38>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2001      	movs	r0, #1
 80031ee:	fa00 f202 	lsl.w	r2, r0, r2
 80031f2:	3340      	adds	r3, #64	; 0x40
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0c      	blt.n	8003234 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_ClearPendingIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	3360      	adds	r3, #96	; 0x60
 8003230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fec9 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff fee0 	bl	800312c <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff90 	bl	8003298 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5f 	bl	8003244 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fed3 	bl	8003148 <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fee3 	bl	8003184 <__NVIC_DisableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff96 	bl	8003300 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff feed 	bl	80031cc <__NVIC_SetPendingIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fefd 	bl	8003208 <__NVIC_ClearPendingIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e08e      	b.n	8003548 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_DMA_Init+0x138>)
 8003432:	429a      	cmp	r2, r3
 8003434:	d80f      	bhi.n	8003456 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	4b45      	ldr	r3, [pc, #276]	; (8003554 <HAL_DMA_Init+0x13c>)
 800343e:	4413      	add	r3, r2
 8003440:	4a45      	ldr	r2, [pc, #276]	; (8003558 <HAL_DMA_Init+0x140>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	009a      	lsls	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_DMA_Init+0x144>)
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
 8003454:	e00e      	b.n	8003474 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_DMA_Init+0x148>)
 800345e:	4413      	add	r3, r2
 8003460:	4a3d      	ldr	r2, [pc, #244]	; (8003558 <HAL_DMA_Init+0x140>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	009a      	lsls	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_DMA_Init+0x14c>)
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa74 	bl	80039b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d4:	d102      	bne.n	80034dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80034e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_DMA_Init+0x106>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d80c      	bhi.n	800351e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa93 	bl	8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e008      	b.n	8003530 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40020407 	.word	0x40020407
 8003554:	bffdfff8 	.word	0xbffdfff8
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	40020000 	.word	0x40020000
 8003560:	bffdfbf8 	.word	0xbffdfbf8
 8003564:	40020400 	.word	0x40020400

08003568 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_DMA_Start_IT+0x20>
 8003584:	2302      	movs	r3, #2
 8003586:	e066      	b.n	8003656 <HAL_DMA_Start_IT+0xee>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d155      	bne.n	8003648 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0201 	bic.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f9b9 	bl	8003938 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 020e 	orr.w	r2, r2, #14
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e00f      	b.n	8003600 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 020a 	orr.w	r2, r2, #10
 80035fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003634:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e005      	b.n	8003654 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04f      	b.n	8003710 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d008      	beq.n	800368e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e040      	b.n	8003710 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 020e 	bic.w	r2, r2, #14
 800369c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f003 021c 	and.w	r2, r3, #28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f202 	lsl.w	r2, r1, r2
 80036d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d005      	beq.n	8003740 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2204      	movs	r2, #4
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	e047      	b.n	80037d0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 020e 	bic.w	r2, r2, #14
 800374e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f003 021c 	and.w	r2, r3, #28
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800378c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
    }
  }
  return status;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 031c 	and.w	r3, r3, #28
 80037fa:	2204      	movs	r2, #4
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d026      	beq.n	8003854 <HAL_DMA_IRQHandler+0x7a>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d021      	beq.n	8003854 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0204 	bic.w	r2, r2, #4
 800382c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f003 021c 	and.w	r2, r3, #28
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2104      	movs	r1, #4
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	2b00      	cmp	r3, #0
 8003848:	d071      	beq.n	800392e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003852:	e06c      	b.n	800392e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	f003 031c 	and.w	r3, r3, #28
 800385c:	2202      	movs	r2, #2
 800385e:	409a      	lsls	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02e      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xec>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d029      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 020a 	bic.w	r2, r2, #10
 800388e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f003 021c 	and.w	r2, r3, #28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	2102      	movs	r1, #2
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d038      	beq.n	800392e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038c4:	e033      	b.n	800392e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 031c 	and.w	r3, r3, #28
 80038ce:	2208      	movs	r2, #8
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02a      	beq.n	8003930 <HAL_DMA_IRQHandler+0x156>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d025      	beq.n	8003930 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020e 	bic.w	r2, r2, #14
 80038f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 021c 	and.w	r2, r3, #28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800392e:	bf00      	nop
 8003930:	bf00      	nop
}
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800394e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f003 021c 	and.w	r2, r3, #28
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d108      	bne.n	8003998 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003996:	e007      	b.n	80039a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d80a      	bhi.n	80039de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6493      	str	r3, [r2, #72]	; 0x48
 80039dc:	e007      	b.n	80039ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	009a      	lsls	r2, r3, #2
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039e8:	4413      	add	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3b08      	subs	r3, #8
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40020407 	.word	0x40020407
 8003a24:	4002081c 	.word	0x4002081c
 8003a28:	cccccccd 	.word	0xcccccccd
 8003a2c:	40020880 	.word	0x40020880

08003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003a54:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2201      	movs	r2, #1
 8003a60:	409a      	lsls	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	1000823f 	.word	0x1000823f
 8003a78:	40020940 	.word	0x40020940

08003a7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a8a:	e14c      	b.n	8003d26 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 813e 	beq.w	8003d20 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d005      	beq.n	8003abc <HAL_GPIO_Init+0x40>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d130      	bne.n	8003b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003af2:	2201      	movs	r2, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0201 	and.w	r2, r3, #1
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d123      	bne.n	8003bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8098 	beq.w	8003d20 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_GPIO_Init+0x2c8>)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	220f      	movs	r2, #15
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c1a:	d019      	beq.n	8003c50 <HAL_GPIO_Init+0x1d4>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a4a      	ldr	r2, [pc, #296]	; (8003d48 <HAL_GPIO_Init+0x2cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_GPIO_Init+0x1d0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a49      	ldr	r2, [pc, #292]	; (8003d4c <HAL_GPIO_Init+0x2d0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00d      	beq.n	8003c48 <HAL_GPIO_Init+0x1cc>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a48      	ldr	r2, [pc, #288]	; (8003d50 <HAL_GPIO_Init+0x2d4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <HAL_GPIO_Init+0x1c8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a47      	ldr	r2, [pc, #284]	; (8003d54 <HAL_GPIO_Init+0x2d8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_GPIO_Init+0x1c4>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e008      	b.n	8003c52 <HAL_GPIO_Init+0x1d6>
 8003c40:	2307      	movs	r3, #7
 8003c42:	e006      	b.n	8003c52 <HAL_GPIO_Init+0x1d6>
 8003c44:	2303      	movs	r3, #3
 8003c46:	e004      	b.n	8003c52 <HAL_GPIO_Init+0x1d6>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e002      	b.n	8003c52 <HAL_GPIO_Init+0x1d6>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_GPIO_Init+0x1d6>
 8003c50:	2300      	movs	r3, #0
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	f002 0203 	and.w	r2, r2, #3
 8003c58:	0092      	lsls	r2, r2, #2
 8003c5a:	4093      	lsls	r3, r2
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c62:	4938      	ldr	r1, [pc, #224]	; (8003d44 <HAL_GPIO_Init+0x2c8>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c94:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c9a:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cbe:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cea:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d18:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <HAL_GPIO_Init+0x2dc>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f aeab 	bne.w	8003a8c <HAL_GPIO_Init+0x10>
  }
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40010000 	.word	0x40010000
 8003d48:	48000400 	.word	0x48000400
 8003d4c:	48000800 	.word	0x48000800
 8003d50:	48000c00 	.word	0x48000c00
 8003d54:	48001000 	.word	0x48001000
 8003d58:	58000800 	.word	0x58000800

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	041a      	lsls	r2, r3, #16
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43d9      	mvns	r1, r3
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	400b      	ands	r3, r1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fc1e 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	58000800 	.word	0x58000800

08003df0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <HAL_HSEM_IRQHandler+0x30>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_HSEM_IRQHandler+0x30>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <HAL_HSEM_IRQHandler+0x30>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003e0a:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <HAL_HSEM_IRQHandler+0x30>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f807 	bl	8003e24 <HAL_HSEM_FreeCallback>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	58001500 	.word	0x58001500

08003e24 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e081      	b.n	8003f4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fdb0 	bl	80029c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e006      	b.n	8003ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d104      	bne.n	8003ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d138      	bne.n	8003fde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e032      	b.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2224      	movs	r2, #36	; 0x24
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d139      	bne.n	8004076 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800400c:	2302      	movs	r3, #2
 800400e:	e033      	b.n	8004078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2224      	movs	r2, #36	; 0x24
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800403e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01e      	beq.n	80040d4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_IPCC_Init+0x60>)
 8004098:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fe fcd2 	bl	8002a50 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80040ac:	68b8      	ldr	r0, [r7, #8]
 80040ae:	f000 f85b 	bl	8004168 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82c 	bl	800411c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80040d2:	e001      	b.n	80040d8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	58000c00 	.word	0x58000c00

080040e8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e00f      	b.n	800414a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <IPCC_SetDefaultCallbacks+0x44>)
 8004134:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3306      	adds	r3, #6
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <IPCC_SetDefaultCallbacks+0x48>)
 8004142:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b05      	cmp	r3, #5
 800414e:	d9ec      	bls.n	800412a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	080040e9 	.word	0x080040e9
 8004164:	08004103 	.word	0x08004103

08004168 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800417c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	223f      	movs	r2, #63	; 0x3f
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004192:	b08b      	sub	sp, #44	; 0x2c
 8004194:	af06      	add	r7, sp, #24
 8004196:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0dd      	b.n	800435e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fd1c 	bl	8002bf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2203      	movs	r2, #3
 80041c0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f003 fba2 	bl	8007918 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e04d      	b.n	8004276 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	3305      	adds	r3, #5
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	3304      	adds	r3, #4
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	b298      	uxth	r0, r3
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	333a      	adds	r3, #58	; 0x3a
 800421a:	4602      	mov	r2, r0
 800421c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	3307      	adds	r3, #7
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	333c      	adds	r3, #60	; 0x3c
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	3340      	adds	r3, #64	; 0x40
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	3344      	adds	r3, #68	; 0x44
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	3301      	adds	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3ac      	bcc.n	80041da <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	e044      	b.n	8004310 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042f4:	7bfa      	ldrb	r2, [r7, #15]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	3301      	adds	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d3b5      	bcc.n	8004286 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	687e      	ldr	r6, [r7, #4]
 8004322:	466d      	mov	r5, sp
 8004324:	f106 0410 	add.w	r4, r6, #16
 8004328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800432a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800432c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004330:	e885 0003 	stmia.w	r5, {r0, r1}
 8004334:	1d33      	adds	r3, r6, #4
 8004336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004338:	6838      	ldr	r0, [r7, #0]
 800433a:	f003 fb08 	bl	800794e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f805 	bl	8004366 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004366 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800438a:	b29b      	uxth	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58000400 	.word	0x58000400

080043dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	58000400 	.word	0x58000400

080043f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d101      	bne.n	8004410 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_RCC_HSE_Enable>:
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800442a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_HSE_Disable>:
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_HSE_IsReady>:
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446a:	d101      	bne.n	8004470 <LL_RCC_HSE_IsReady+0x18>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <LL_RCC_HSE_IsReady+0x1a>
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_HSI_Enable>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_HSI_Disable>:
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_RCC_HSI_IsReady>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d101      	bne.n	80044d0 <LL_RCC_HSI_IsReady+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_RCC_HSI_IsReady+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_RCC_HSI_SetCalibTrimming>:
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_RCC_HSI48_Enable>:
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_RCC_HSI48_Disable>:
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <LL_RCC_HSI48_IsReady>:
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	d101      	bne.n	8004562 <LL_RCC_HSI48_IsReady+0x18>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <LL_RCC_HSI48_IsReady+0x1a>
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_RCC_LSE_Enable>:
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004586:	bf00      	nop
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <LL_RCC_LSE_Disable>:
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_LSE_EnableBypass>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045ca:	bf00      	nop
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_RCC_LSE_DisableBypass>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_RCC_LSE_IsReady>:
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80045fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d101      	bne.n	800460e <LL_RCC_LSE_IsReady+0x18>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <LL_RCC_LSE_IsReady+0x1a>
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_RCC_LSI1_Enable>:
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_LSI1_Disable>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <LL_RCC_LSI1_IsReady>:
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b02      	cmp	r3, #2
 8004670:	d101      	bne.n	8004676 <LL_RCC_LSI1_IsReady+0x18>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <LL_RCC_LSI1_IsReady+0x1a>
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <LL_RCC_LSI2_Enable>:
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_RCC_LSI2_Disable>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_LSI2_IsReady>:
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d101      	bne.n	80046de <LL_RCC_LSI2_IsReady+0x18>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <LL_RCC_LSI2_IsReady+0x1a>
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_RCC_LSI2_SetTrimming>:
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80046f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <LL_RCC_MSI_Enable>:
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6013      	str	r3, [r2, #0]
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <LL_RCC_MSI_Disable>:
{
 8004736:	b480      	push	{r7}
 8004738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800473a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6013      	str	r3, [r2, #0]
}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_RCC_MSI_IsReady>:
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d101      	bne.n	800476a <LL_RCC_MSI_IsReady+0x16>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <LL_RCC_MSI_IsReady+0x18>
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_MSI_SetRange>:
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_RCC_MSI_GetRange>:
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2bb0      	cmp	r3, #176	; 0xb0
 80047b4:	d901      	bls.n	80047ba <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80047b6:	23b0      	movs	r3, #176	; 0xb0
 80047b8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80047ba:	687b      	ldr	r3, [r7, #4]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_SetSysClkSource>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 0203 	bic.w	r2, r3, #3
 8004804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_RCC_GetSysClkSource>:
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 030c 	and.w	r3, r3, #12
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_RCC_SetAHBPrescaler>:
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <LL_C2_RCC_SetAHBPrescaler>:
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004866:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800486a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_SetAHB4Prescaler>:
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004896:	f023 020f 	bic.w	r2, r3, #15
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_SetAPB1Prescaler>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_SetAPB2Prescaler>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_GetAHBPrescaler>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_RCC_GetAHB4Prescaler>:
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_RCC_GetAPB1Prescaler>:
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_RCC_GetAPB2Prescaler>:
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800495e:	4618      	mov	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_RCC_ConfigMCO>:
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	430b      	orrs	r3, r1
 8004982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_PLL_Enable>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <LL_RCC_PLL_Disable>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80049b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_RCC_PLL_IsReady>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049e4:	d101      	bne.n	80049ea <LL_RCC_PLL_IsReady+0x18>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_RCC_PLL_IsReady+0x1a>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_PLL_GetN>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	0a1b      	lsrs	r3, r3, #8
 8004a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_PLL_GetR>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_PLL_GetDivider>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_PLL_GetMainSource>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6a:	d101      	bne.n	8004a70 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a90:	d101      	bne.n	8004a96 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d101      	bne.n	8004abc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ada:	d101      	bne.n	8004ae0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afe:	d101      	bne.n	8004b04 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b08d      	sub	sp, #52	; 0x34
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e363      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 808d 	beq.w	8004c4a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b30:	f7ff fe73 	bl	800481a <LL_RCC_GetSysClkSource>
 8004b34:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b36:	f7ff ff83 	bl	8004a40 <LL_RCC_PLL_GetMainSource>
 8004b3a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x3e>
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d147      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d144      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e347      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004b5e:	f7ff fe1e 	bl	800479e <LL_RCC_MSI_GetRange>
 8004b62:	4603      	mov	r3, r0
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d914      	bls.n	8004b92 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd81 	bl	8005674 <RCC_SetFlashLatencyFromMSIRange>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e336      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fdf8 	bl	8004776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fe1c 	bl	80047c8 <LL_RCC_MSI_SetCalibTrimming>
 8004b90:	e013      	b.n	8004bba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fded 	bl	8004776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fe11 	bl	80047c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fd62 	bl	8005674 <RCC_SetFlashLatencyFromMSIRange>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e317      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bba:	f000 fd1b 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4aa4      	ldr	r2, [pc, #656]	; (8004e54 <HAL_RCC_OscConfig+0x344>)
 8004bc2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bc4:	4ba4      	ldr	r3, [pc, #656]	; (8004e58 <HAL_RCC_OscConfig+0x348>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fa19 	bl	8003000 <HAL_InitTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d039      	beq.n	8004c48 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e308      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004be0:	f7ff fd9a 	bl	8004718 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004be4:	f7fe fa5a 	bl	800309c <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bec:	f7fe fa56 	bl	800309c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e2f5      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004bfe:	f7ff fda9 	bl	8004754 <LL_RCC_MSI_IsReady>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f1      	beq.n	8004bec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fdb2 	bl	8004776 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fdd6 	bl	80047c8 <LL_RCC_MSI_SetCalibTrimming>
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c1e:	f7ff fd8a 	bl	8004736 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c22:	f7fe fa3b 	bl	800309c <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c2a:	f7fe fa37 	bl	800309c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e2d6      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c3c:	f7ff fd8a 	bl	8004754 <LL_RCC_MSI_IsReady>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f1      	bne.n	8004c2a <HAL_RCC_OscConfig+0x11a>
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c48:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d047      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c56:	f7ff fde0 	bl	800481a <LL_RCC_GetSysClkSource>
 8004c5a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c5c:	f7ff fef0 	bl	8004a40 <LL_RCC_PLL_GetMainSource>
 8004c60:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x164>
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d105      	bne.n	8004c80 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d134      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e2b4      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d102      	bne.n	8004c90 <HAL_RCC_OscConfig+0x180>
 8004c8a:	f7ff fbc7 	bl	800441c <LL_RCC_HSE_Enable>
 8004c8e:	e001      	b.n	8004c94 <HAL_RCC_OscConfig+0x184>
 8004c90:	f7ff fbd3 	bl	800443a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe f9fe 	bl	800309c <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f9fa 	bl	800309c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e299      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004cb6:	f7ff fbcf 	bl	8004458 <LL_RCC_HSE_IsReady>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f1      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x194>
 8004cc0:	e011      	b.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fe f9eb 	bl	800309c <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cca:	f7fe f9e7 	bl	800309c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e286      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004cdc:	f7ff fbbc 	bl	8004458 <LL_RCC_HSE_IsReady>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f1      	bne.n	8004cca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d04c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	f7ff fd92 	bl	800481a <LL_RCC_GetSysClkSource>
 8004cf6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	f7ff fea2 	bl	8004a40 <LL_RCC_PLL_GetMainSource>
 8004cfc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_OscConfig+0x200>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d10e      	bne.n	8004d28 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d10b      	bne.n	8004d28 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e266      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fbdb 	bl	80044dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d26:	e031      	b.n	8004d8c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d019      	beq.n	8004d64 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d30:	f7ff fba4 	bl	800447c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe f9b2 	bl	800309c <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fe f9ae 	bl	800309c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e24d      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d4e:	f7ff fbb3 	bl	80044b8 <LL_RCC_HSI_IsReady>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f1      	beq.n	8004d3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fbbd 	bl	80044dc <LL_RCC_HSI_SetCalibTrimming>
 8004d62:	e013      	b.n	8004d8c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d64:	f7ff fb99 	bl	800449a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe f998 	bl	800309c <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fe f994 	bl	800309c <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e233      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004d82:	f7ff fb99 	bl	80044b8 <LL_RCC_HSI_IsReady>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a3 	beq.w	8004eec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d076      	beq.n	8004e9c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d046      	beq.n	8004e48 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004dba:	f7ff fc50 	bl	800465e <LL_RCC_LSI1_IsReady>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d113      	bne.n	8004dec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004dc4:	f7ff fc29 	bl	800461a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc8:	f7fe f968 	bl	800309c <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004dd0:	f7fe f964 	bl	800309c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e203      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004de2:	f7ff fc3c 	bl	800465e <LL_RCC_LSI1_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f1      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004dec:	f7ff fc49 	bl	8004682 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe f954 	bl	800309c <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004df8:	f7fe f950 	bl	800309c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1ef      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e0a:	f7ff fc5c 	bl	80046c6 <LL_RCC_LSI2_IsReady>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f1      	beq.n	8004df8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fc66 	bl	80046ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004e1e:	f7ff fc0d 	bl	800463c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fe f93b 	bl	800309c <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e2a:	f7fe f937 	bl	800309c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1d6      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e3c:	f7ff fc0f 	bl	800465e <LL_RCC_LSI1_IsReady>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f1      	bne.n	8004e2a <HAL_RCC_OscConfig+0x31a>
 8004e46:	e051      	b.n	8004eec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004e48:	f7ff fbe7 	bl	800461a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fe f926 	bl	800309c <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004e52:	e00c      	b.n	8004e6e <HAL_RCC_OscConfig+0x35e>
 8004e54:	20000004 	.word	0x20000004
 8004e58:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e5c:	f7fe f91e 	bl	800309c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1bd      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004e6e:	f7ff fbf6 	bl	800465e <LL_RCC_LSI1_IsReady>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f1      	beq.n	8004e5c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004e78:	f7ff fc14 	bl	80046a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e7e:	f7fe f90d 	bl	800309c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1ac      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004e90:	f7ff fc19 	bl	80046c6 <LL_RCC_LSI2_IsReady>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f1      	bne.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e9a:	e027      	b.n	8004eec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004e9c:	f7ff fc02 	bl	80046a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fe f8fc 	bl	800309c <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ea8:	f7fe f8f8 	bl	800309c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e197      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004eba:	f7ff fc04 	bl	80046c6 <LL_RCC_LSI2_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f1      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004ec4:	f7ff fbba 	bl	800463c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fe f8e8 	bl	800309c <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ed0:	f7fe f8e4 	bl	800309c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e183      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ee2:	f7ff fbbc 	bl	800465e <LL_RCC_LSI1_IsReady>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f1      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef8:	4ba7      	ldr	r3, [pc, #668]	; (8005198 <HAL_RCC_OscConfig+0x688>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d114      	bne.n	8004f2e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f04:	f7ff fa5a 	bl	80043bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f08:	f7fe f8c8 	bl	800309c <HAL_GetTick>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f10:	f7fe f8c4 	bl	800309c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e163      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f22:	4b9d      	ldr	r3, [pc, #628]	; (8005198 <HAL_RCC_OscConfig+0x688>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d102      	bne.n	8004f3c <HAL_RCC_OscConfig+0x42c>
 8004f36:	f7ff fb1a 	bl	800456e <LL_RCC_LSE_Enable>
 8004f3a:	e00c      	b.n	8004f56 <HAL_RCC_OscConfig+0x446>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b05      	cmp	r3, #5
 8004f42:	d104      	bne.n	8004f4e <HAL_RCC_OscConfig+0x43e>
 8004f44:	f7ff fb35 	bl	80045b2 <LL_RCC_LSE_EnableBypass>
 8004f48:	f7ff fb11 	bl	800456e <LL_RCC_LSE_Enable>
 8004f4c:	e003      	b.n	8004f56 <HAL_RCC_OscConfig+0x446>
 8004f4e:	f7ff fb1f 	bl	8004590 <LL_RCC_LSE_Disable>
 8004f52:	f7ff fb3f 	bl	80045d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fe f89d 	bl	800309c <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fe f899 	bl	800309c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e136      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f7c:	f7ff fb3b 	bl	80045f6 <LL_RCC_LSE_IsReady>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ef      	beq.n	8004f66 <HAL_RCC_OscConfig+0x456>
 8004f86:	e013      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fe f888 	bl	800309c <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fe f884 	bl	800309c <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e121      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004fa6:	f7ff fb26 	bl	80045f6 <LL_RCC_LSE_IsReady>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ef      	bne.n	8004f90 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02c      	beq.n	8005016 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d014      	beq.n	8004fee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fc4:	f7ff fa9f 	bl	8004506 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fe f868 	bl	800309c <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd0:	f7fe f864 	bl	800309c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e103      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004fe2:	f7ff fab2 	bl	800454a <LL_RCC_HSI48_IsReady>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f1      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x4c0>
 8004fec:	e013      	b.n	8005016 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fee:	f7ff fa9b 	bl	8004528 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fe f853 	bl	800309c <HAL_GetTick>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffa:	f7fe f84f 	bl	800309c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e0ee      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800500c:	f7ff fa9d 	bl	800454a <LL_RCC_HSI48_IsReady>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f1      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80e4 	beq.w	80051e8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005020:	f7ff fbfb 	bl	800481a <LL_RCC_GetSysClkSource>
 8005024:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	2b02      	cmp	r3, #2
 8005034:	f040 80b4 	bne.w	80051a0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0203 	and.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	429a      	cmp	r2, r3
 8005044:	d123      	bne.n	800508e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d11c      	bne.n	800508e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d114      	bne.n	800508e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d10d      	bne.n	800508e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d106      	bne.n	800508e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d05d      	beq.n	800514a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d058      	beq.n	8005146 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0a1      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050a6:	f7ff fc85 	bl	80049b4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050aa:	f7fd fff7 	bl	800309c <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b2:	f7fd fff3 	bl	800309c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e092      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ef      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_RCC_OscConfig+0x68c>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050e4:	4311      	orrs	r1, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050ea:	0212      	lsls	r2, r2, #8
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050f2:	4311      	orrs	r1, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050f8:	4311      	orrs	r1, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050fe:	430a      	orrs	r2, r1
 8005100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005104:	4313      	orrs	r3, r2
 8005106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005108:	f7ff fc45 	bl	8004996 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800511c:	f7fd ffbe 	bl	800309c <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd ffba 	bl	800309c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e059      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ef      	beq.n	8005124 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005144:	e050      	b.n	80051e8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e04f      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d147      	bne.n	80051e8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005158:	f7ff fc1d 	bl	8004996 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800516c:	f7fd ff96 	bl	800309c <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005174:	f7fd ff92 	bl	800309c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e031      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ef      	beq.n	8005174 <HAL_RCC_OscConfig+0x664>
 8005194:	e028      	b.n	80051e8 <HAL_RCC_OscConfig+0x6d8>
 8005196:	bf00      	nop
 8005198:	58000400 	.word	0x58000400
 800519c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d01e      	beq.n	80051e4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	f7ff fc05 	bl	80049b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fd ff77 	bl	800309c <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fd ff73 	bl	800309c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e012      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ef      	bne.n	80051b2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_OscConfig+0x6e4>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
 80051e2:	e001      	b.n	80051e8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3734      	adds	r7, #52	; 0x34
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	eefefffc 	.word	0xeefefffc

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e12d      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b98      	ldr	r3, [pc, #608]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d91b      	bls.n	8005252 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b95      	ldr	r3, [pc, #596]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	4993      	ldr	r1, [pc, #588]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fd ff37 	bl	800309c <HAL_GetTick>
 800522e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005230:	e008      	b.n	8005244 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005232:	f7fd ff33 	bl	800309c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e111      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005244:	4b8a      	ldr	r3, [pc, #552]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d1ef      	bne.n	8005232 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fae5 	bl	8004832 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005268:	f7fd ff18 	bl	800309c <HAL_GetTick>
 800526c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005270:	f7fd ff14 	bl	800309c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0f2      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005282:	f7ff fbe9 	bl	8004a58 <LL_RCC_IsActiveFlag_HPRE>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f1      	beq.n	8005270 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d016      	beq.n	80052c6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fadc 	bl	800485a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052a2:	f7fd fefb 	bl	800309c <HAL_GetTick>
 80052a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052aa:	f7fd fef7 	bl	800309c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e0d5      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052bc:	f7ff fbde 	bl	8004a7c <LL_RCC_IsActiveFlag_C2HPRE>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f1      	beq.n	80052aa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fad5 	bl	8004886 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052dc:	f7fd fede 	bl	800309c <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052e4:	f7fd feda 	bl	800309c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e0b8      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80052f6:	f7ff fbd4 	bl	8004aa2 <LL_RCC_IsActiveFlag_SHDHPRE>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f1      	beq.n	80052e4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff facf 	bl	80048b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005316:	f7fd fec1 	bl	800309c <HAL_GetTick>
 800531a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800531e:	f7fd febd 	bl	800309c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e09b      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005330:	f7ff fbca 	bl	8004ac8 <LL_RCC_IsActiveFlag_PPRE1>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f1      	beq.n	800531e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d017      	beq.n	8005376 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fac5 	bl	80048dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005352:	f7fd fea3 	bl	800309c <HAL_GetTick>
 8005356:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800535a:	f7fd fe9f 	bl	800309c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e07d      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800536c:	f7ff fbbe 	bl	8004aec <LL_RCC_IsActiveFlag_PPRE2>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f1      	beq.n	800535a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d043      	beq.n	800540a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d106      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800538a:	f7ff f865 	bl	8004458 <LL_RCC_HSE_IsReady>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11e      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e067      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d106      	bne.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80053a0:	f7ff fb17 	bl	80049d2 <LL_RCC_PLL_IsReady>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d113      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e05c      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80053b6:	f7ff f9cd 	bl	8004754 <LL_RCC_MSI_IsReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e051      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80053c4:	f7ff f878 	bl	80044b8 <LL_RCC_HSI_IsReady>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e04a      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fa0b 	bl	80047f2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fd fe5e 	bl	800309c <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fd fe5a 	bl	800309c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e036      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	f7ff fa0e 	bl	800481a <LL_RCC_GetSysClkSource>
 80053fe:	4602      	mov	r2, r0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	429a      	cmp	r2, r3
 8005408:	d1ec      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d21b      	bcs.n	8005450 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 0207 	bic.w	r2, r3, #7
 8005420:	4913      	ldr	r1, [pc, #76]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005428:	f7fd fe38 	bl	800309c <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	e008      	b.n	8005442 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005430:	f7fd fe34 	bl	800309c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e012      	b.n	8005468 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d1ef      	bne.n	8005430 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005450:	f000 f8d0 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005454:	4603      	mov	r3, r0
 8005456:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_RCC_ClockConfig+0x27c>)
 8005458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800545a:	f7fd fe2b 	bl	80030b4 <HAL_GetTickPrio>
 800545e:	4603      	mov	r3, r0
 8005460:	4618      	mov	r0, r3
 8005462:	f7fd fdcd 	bl	8003000 <HAL_InitTick>
 8005466:	4603      	mov	r3, r0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58004000 	.word	0x58004000
 8005474:	20000004 	.word	0x20000004

08005478 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8005484:	2302      	movs	r3, #2
 8005486:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005488:	2303      	movs	r3, #3
 800548a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054b8:	2101      	movs	r1, #1
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c4:	4313      	orrs	r3, r2
 80054c6:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0d1b      	lsrs	r3, r3, #20
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	4619      	mov	r1, r3
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f7fe facd 	bl	8003a7c <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	68b8      	ldr	r0, [r7, #8]
 80054ec:	f7ff fa3c 	bl	8004968 <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 80054f0:	e010      	b.n	8005514 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f8:	d104      	bne.n	8005504 <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	68b8      	ldr	r0, [r7, #8]
 80054fe:	f7ff fa33 	bl	8004968 <LL_RCC_ConfigMCO>
}
 8005502:	e007      	b.n	8005514 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550a:	d103      	bne.n	8005514 <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff fa2a 	bl	8004968 <LL_RCC_ConfigMCO>
}
 8005514:	bf00      	nop
 8005516:	3730      	adds	r7, #48	; 0x30
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005522:	f7ff f97a 	bl	800481a <LL_RCC_GetSysClkSource>
 8005526:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800552e:	f7ff f936 	bl	800479e <LL_RCC_MSI_GetRange>
 8005532:	4603      	mov	r3, r0
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e04b      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b04      	cmp	r3, #4
 8005548:	d102      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800554a:	4b28      	ldr	r3, [pc, #160]	; (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	e045      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b08      	cmp	r3, #8
 8005554:	d10a      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005556:	f7fe ff4f 	bl	80043f8 <LL_RCC_HSE_IsEnabledDiv2>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d102      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005560:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e03a      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e037      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800556c:	f7ff fa68 	bl	8004a40 <LL_RCC_PLL_GetMainSource>
 8005570:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d003      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x64>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x6a>
 800557e:	e00d      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005582:	60bb      	str	r3, [r7, #8]
        break;
 8005584:	e015      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005586:	f7fe ff37 	bl	80043f8 <LL_RCC_HSE_IsEnabledDiv2>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005592:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005594:	e00d      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005598:	60bb      	str	r3, [r7, #8]
        break;
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800559c:	f7ff f8ff 	bl	800479e <LL_RCC_MSI_GetRange>
 80055a0:	4603      	mov	r3, r0
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	4a0f      	ldr	r2, [pc, #60]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80055aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ae:	60bb      	str	r3, [r7, #8]
        break;
 80055b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80055b2:	f7ff fa20 	bl	80049f6 <LL_RCC_PLL_GetN>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	fb03 f402 	mul.w	r4, r3, r2
 80055be:	f7ff fa33 	bl	8004a28 <LL_RCC_PLL_GetDivider>
 80055c2:	4603      	mov	r3, r0
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	3301      	adds	r3, #1
 80055c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80055cc:	f7ff fa20 	bl	8004a10 <LL_RCC_PLL_GetR>
 80055d0:	4603      	mov	r3, r0
 80055d2:	0f5b      	lsrs	r3, r3, #29
 80055d4:	3301      	adds	r3, #1
 80055d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80055da:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd90      	pop	{r4, r7, pc}
 80055e6:	bf00      	nop
 80055e8:	0800eb7c 	.word	0x0800eb7c
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	01e84800 	.word	0x01e84800

080055f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b598      	push	{r3, r4, r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055f8:	f7ff ff90 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80055fc:	4604      	mov	r4, r0
 80055fe:	f7ff f981 	bl	8004904 <LL_RCC_GetAHBPrescaler>
 8005602:	4603      	mov	r3, r0
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	4a03      	ldr	r2, [pc, #12]	; (8005618 <HAL_RCC_GetHCLKFreq+0x24>)
 800560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005610:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd98      	pop	{r3, r4, r7, pc}
 8005618:	0800eb1c 	.word	0x0800eb1c

0800561c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800561c:	b598      	push	{r3, r4, r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005620:	f7ff ffe8 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005624:	4604      	mov	r4, r0
 8005626:	f7ff f987 	bl	8004938 <LL_RCC_GetAPB1Prescaler>
 800562a:	4603      	mov	r3, r0
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	4a04      	ldr	r2, [pc, #16]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd98      	pop	{r3, r4, r7, pc}
 8005644:	0800eb5c 	.word	0x0800eb5c

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b598      	push	{r3, r4, r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800564c:	f7ff ffd2 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005650:	4604      	mov	r4, r0
 8005652:	f7ff f97d 	bl	8004950 <LL_RCC_GetAPB2Prescaler>
 8005656:	4603      	mov	r3, r0
 8005658:	0adb      	lsrs	r3, r3, #11
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	4a04      	ldr	r2, [pc, #16]	; (8005670 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa24 f303 	lsr.w	r3, r4, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd98      	pop	{r3, r4, r7, pc}
 8005670:	0800eb5c 	.word	0x0800eb5c

08005674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2bb0      	cmp	r3, #176	; 0xb0
 8005680:	d903      	bls.n	800568a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e007      	b.n	800569a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005698:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800569a:	f7ff f93f 	bl	800491c <LL_RCC_GetAHB4Prescaler>
 800569e:	4603      	mov	r3, r0
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	0c9c      	lsrs	r4, r3, #18
 80056be:	f7fe fe8d 	bl	80043dc <HAL_PWREx_GetVoltageRange>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4619      	mov	r1, r3
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f80c 	bl	80056e4 <RCC_SetFlashLatency>
 80056cc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	0800eb7c 	.word	0x0800eb7c
 80056dc:	0800eb1c 	.word	0x0800eb1c
 80056e0:	431bde83 	.word	0x431bde83

080056e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b093      	sub	sp, #76	; 0x4c
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <RCC_SetFlashLatency+0xe8>)
 80056f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80056f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80056fa:	4a35      	ldr	r2, [pc, #212]	; (80057d0 <RCC_SetFlashLatency+0xec>)
 80056fc:	f107 031c 	add.w	r3, r7, #28
 8005700:	ca07      	ldmia	r2, {r0, r1, r2}
 8005702:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005706:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <RCC_SetFlashLatency+0xf0>)
 8005708:	f107 040c 	add.w	r4, r7, #12
 800570c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800570e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005712:	2300      	movs	r3, #0
 8005714:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571c:	d11a      	bne.n	8005754 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800571e:	2300      	movs	r3, #0
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
 8005722:	e013      	b.n	800574c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	3348      	adds	r3, #72	; 0x48
 800572a:	443b      	add	r3, r7
 800572c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d807      	bhi.n	8005746 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	3348      	adds	r3, #72	; 0x48
 800573c:	443b      	add	r3, r7
 800573e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005742:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005744:	e020      	b.n	8005788 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	3301      	adds	r3, #1
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	2b03      	cmp	r3, #3
 8005750:	d9e8      	bls.n	8005724 <RCC_SetFlashLatency+0x40>
 8005752:	e019      	b.n	8005788 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005754:	2300      	movs	r3, #0
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005758:	e013      	b.n	8005782 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3348      	adds	r3, #72	; 0x48
 8005760:	443b      	add	r3, r7
 8005762:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d807      	bhi.n	800577c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800576c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	3348      	adds	r3, #72	; 0x48
 8005772:	443b      	add	r3, r7
 8005774:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800577a:	e005      	b.n	8005788 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	3301      	adds	r3, #1
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005784:	2b02      	cmp	r3, #2
 8005786:	d9e8      	bls.n	800575a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <RCC_SetFlashLatency+0xf4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 0207 	bic.w	r2, r3, #7
 8005790:	4911      	ldr	r1, [pc, #68]	; (80057d8 <RCC_SetFlashLatency+0xf4>)
 8005792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005798:	f7fd fc80 	bl	800309c <HAL_GetTick>
 800579c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800579e:	e008      	b.n	80057b2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057a0:	f7fd fc7c 	bl	800309c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e007      	b.n	80057c2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <RCC_SetFlashLatency+0xf4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1ef      	bne.n	80057a0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	374c      	adds	r7, #76	; 0x4c
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	0800d984 	.word	0x0800d984
 80057d0:	0800d994 	.word	0x0800d994
 80057d4:	0800d9a0 	.word	0x0800d9a0
 80057d8:	58004000 	.word	0x58004000

080057dc <LL_RCC_LSE_IsEnabled>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <LL_RCC_LSE_IsEnabled+0x18>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <LL_RCC_LSE_IsReady>:
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d101      	bne.n	8005818 <LL_RCC_LSE_IsReady+0x18>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <LL_RCC_LSE_IsReady+0x1a>
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <LL_RCC_MSI_EnablePLLMode>:
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005832:	f043 0304 	orr.w	r3, r3, #4
 8005836:	6013      	str	r3, [r2, #0]
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_RCC_SetRFWKPClockSource>:
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <LL_RCC_SetSMPSClockSource>:
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f023 0203 	bic.w	r2, r3, #3
 8005880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4313      	orrs	r3, r2
 8005888:	624b      	str	r3, [r1, #36]	; 0x24
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <LL_RCC_SetSMPSPrescaler>:
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <LL_RCC_SetUSARTClockSource>:
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	f023 0203 	bic.w	r2, r3, #3
 80058d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <LL_RCC_SetLPUARTClockSource>:
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <LL_RCC_SetI2CClockSource>:
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800591e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005922:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800592e:	43db      	mvns	r3, r3
 8005930:	401a      	ands	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800593a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_SetLPTIMClockSource>:
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	43db      	mvns	r3, r3
 8005968:	401a      	ands	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_RCC_SetSAIClockSource>:
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <LL_RCC_SetRNGClockSource>:
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_RCC_SetCLK48ClockSource>:
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <LL_RCC_SetUSBClockSource>:
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ffe3 	bl	80059dc <LL_RCC_SetCLK48ClockSource>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <LL_RCC_SetADCClockSource>:
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <LL_RCC_SetRTCClockSource>:
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_GetRTCClockSource>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_RCC_ForceBackupDomainReset>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_PLLSAI1_Enable>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <LL_RCC_PLLSAI1_Disable>:
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b04:	6013      	str	r3, [r2, #0]
}
 8005b06:	bf00      	nop
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b22:	d101      	bne.n	8005b28 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b40:	2300      	movs	r3, #0
 8005b42:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d034      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b58:	d021      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b5e:	d81b      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b64:	d01d      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b6a:	d815      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b74:	d110      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b84:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b86:	e00d      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f94d 	bl	8005e2c <RCCEx_PLLSAI1_ConfigNP>
 8005b92:	4603      	mov	r3, r0
 8005b94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b96:	e005      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
        break;
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fee8 	bl	8005984 <LL_RCC_SetSAIClockSource>
 8005bb4:	e001      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
 8005bb8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d046      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bc6:	f7ff ff56 	bl	8005a76 <LL_RCC_GetRTCClockSource>
 8005bca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d03c      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bd6:	f7fe fbf1 	bl	80043bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff30 	bl	8005a4a <LL_RCC_SetRTCClockSource>
 8005bea:	e02e      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005bf6:	f7ff ff4b 	bl	8005a90 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005bfa:	f7ff ff5a 	bl	8005ab2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c16:	f7ff fde1 	bl	80057dc <LL_RCC_LSE_IsEnabled>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d114      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c20:	f7fd fa3c 	bl	800309c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c26:	e00b      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fd fa38 	bl	800309c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d902      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	77fb      	strb	r3, [r7, #31]
              break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c40:	f7ff fdde 	bl	8005800 <LL_RCC_LSE_IsReady>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d1ee      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	77bb      	strb	r3, [r7, #30]
 8005c4e:	e001      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	7ffb      	ldrb	r3, [r7, #31]
 8005c52:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fe2a 	bl	80058be <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fe35 	bl	80058ea <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fe5d 	bl	8005950 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fe52 	bl	8005950 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fe2a 	bl	8005916 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fe1f 	bl	8005916 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d022      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fe8d 	bl	8005a08 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d06:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d10:	d10b      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f8e3 	bl	8005ee2 <RCCEx_PLLSAI1_ConfigNQ>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005d26:	7ffb      	ldrb	r3, [r7, #31]
 8005d28:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02b      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d008      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d48:	d003      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fe2a 	bl	80059b0 <LL_RCC_SetRNGClockSource>
 8005d5c:	e00a      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f7ff fe21 	bl	80059b0 <LL_RCC_SetRNGClockSource>
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff fe34 	bl	80059dc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d022      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fe3d 	bl	8005a1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dac:	d107      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc6:	d10b      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f8e3 	bl	8005f98 <RCCEx_PLLSAI1_ConfigNR>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005dd6:	7ffb      	ldrb	r3, [r7, #31]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fd26 	bl	8005842 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fd45 	bl	8005896 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fd2c 	bl	800586e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e16:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005e24:	f7ff fcfe 	bl	8005824 <LL_RCC_MSI_EnablePLLMode>
}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e38:	f7ff fe5b 	bl	8005af2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e3c:	f7fd f92e 	bl	800309c <HAL_GetTick>
 8005e40:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e42:	e009      	b.n	8005e58 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e44:	f7fd f92a 	bl	800309c <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d902      	bls.n	8005e58 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	e004      	b.n	8005e62 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e58:	f7ff fe5a 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d137      	bne.n	8005ed8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e92:	4313      	orrs	r3, r2
 8005e94:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e96:	f7ff fe1d 	bl	8005ad4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9a:	f7fd f8ff 	bl	800309c <HAL_GetTick>
 8005e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ea0:	e009      	b.n	8005eb6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ea2:	f7fd f8fb 	bl	800309c <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d902      	bls.n	8005eb6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	73fb      	strb	r3, [r7, #15]
        break;
 8005eb4:	e004      	b.n	8005ec0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eb6:	f7ff fe2b 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d1f0      	bne.n	8005ea2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d108      	bne.n	8005ed8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005eee:	f7ff fe00 	bl	8005af2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ef2:	f7fd f8d3 	bl	800309c <HAL_GetTick>
 8005ef6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ef8:	e009      	b.n	8005f0e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005efa:	f7fd f8cf 	bl	800309c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d902      	bls.n	8005f0e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0c:	e004      	b.n	8005f18 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f0e:	f7ff fdff 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f0      	bne.n	8005efa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d137      	bne.n	8005f8e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f32:	4313      	orrs	r3, r2
 8005f34:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f4c:	f7ff fdc2 	bl	8005ad4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f50:	f7fd f8a4 	bl	800309c <HAL_GetTick>
 8005f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f56:	e009      	b.n	8005f6c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f58:	f7fd f8a0 	bl	800309c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d902      	bls.n	8005f6c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6a:	e004      	b.n	8005f76 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f6c:	f7ff fdd0 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d1f0      	bne.n	8005f58 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fa4:	f7ff fda5 	bl	8005af2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fa8:	f7fd f878 	bl	800309c <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fae:	e009      	b.n	8005fc4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb0:	f7fd f874 	bl	800309c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d902      	bls.n	8005fc4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc2:	e004      	b.n	8005fce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fc4:	f7ff fda4 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d137      	bne.n	8006044 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffe:	4313      	orrs	r3, r2
 8006000:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006002:	f7ff fd67 	bl	8005ad4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006006:	f7fd f849 	bl	800309c <HAL_GetTick>
 800600a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800600c:	e009      	b.n	8006022 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800600e:	f7fd f845 	bl	800309c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d902      	bls.n	8006022 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	73fb      	strb	r3, [r7, #15]
        break;
 8006020:	e004      	b.n	800602c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006022:	f7ff fd75 	bl	8005b10 <LL_RCC_PLLSAI1_IsReady>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d1f0      	bne.n	800600e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006040:	4313      	orrs	r3, r2
 8006042:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e090      	b.n	8006182 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7fc fd0f 	bl	8002a98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	22ca      	movs	r2, #202	; 0xca
 8006088:	625a      	str	r2, [r3, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2253      	movs	r2, #83	; 0x53
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f89f 	bl	80061d6 <RTC_EnterInitMode>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e067      	b.n	8006182 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6899      	ldr	r1, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	68d2      	ldr	r2, [r2, #12]
 80060ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6919      	ldr	r1, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	041a      	lsls	r2, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006110:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0203 	bic.w	r2, r2, #3
 8006120:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d113      	bne.n	8006170 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f81e 	bl	800618a <HAL_RTC_WaitForSynchro>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2204      	movs	r2, #4
 8006160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e008      	b.n	8006182 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061a2:	f7fc ff7b 	bl	800309c <HAL_GetTick>
 80061a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061a8:	e009      	b.n	80061be <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061aa:	f7fc ff77 	bl	800309c <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b8:	d901      	bls.n	80061be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e007      	b.n	80061ce <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ee      	beq.n	80061aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d119      	bne.n	8006220 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061f6:	f7fc ff51 	bl	800309c <HAL_GetTick>
 80061fa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061fc:	e009      	b.n	8006212 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061fe:	f7fc ff4d 	bl	800309c <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800620c:	d901      	bls.n	8006212 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e007      	b.n	8006222 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ee      	beq.n	80061fe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006242:	2302      	movs	r3, #2
 8006244:	e0a8      	b.n	8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22ca      	movs	r2, #202	; 0xca
 800625c:	625a      	str	r2, [r3, #36]	; 0x24
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2253      	movs	r2, #83	; 0x53
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006274:	f7fc ff12 	bl	800309c <HAL_GetTick>
 8006278:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800627a:	e015      	b.n	80062a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800627c:	f7fc ff0e 	bl	800309c <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628a:	d90d      	bls.n	80062a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	22ff      	movs	r2, #255	; 0xff
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2203      	movs	r2, #3
 8006298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e077      	b.n	8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e2      	bne.n	800627c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80062d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062d8:	f7fc fee0 	bl	800309c <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062de:	e015      	b.n	800630c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062e0:	f7fc fedc 	bl	800309c <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ee:	d90d      	bls.n	800630c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2203      	movs	r2, #3
 80062fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e045      	b.n	8006398 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0e2      	beq.n	80062e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0207 	bic.w	r2, r2, #7
 8006330:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6899      	ldr	r1, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006342:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800634a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800634e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800635c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800637c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	22ff      	movs	r2, #255	; 0xff
 8006384:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	58000800 	.word	0x58000800

080063a4 <LL_RCC_GetUSARTClockSource>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80063ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4013      	ands	r3, r2
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_RCC_GetLPUARTClockSource>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80063cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4013      	ands	r3, r2
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e042      	b.n	800647c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fc fb79 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fbf6 	bl	8006c18 <UART_SetConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e022      	b.n	800647c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fe10 	bl	8007064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fe97 	bl	80071a8 <UART_CheckIdleState>
 800647a:	4603      	mov	r3, r0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08a      	sub	sp, #40	; 0x28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006498:	2b20      	cmp	r3, #32
 800649a:	d17a      	bne.n	8006592 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Transmit_DMA+0x24>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e073      	b.n	8006594 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Transmit_DMA+0x36>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e06c      	b.n	8006594 <HAL_UART_Transmit_DMA+0x110>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2221      	movs	r2, #33	; 0x21
 80064e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d02c      	beq.n	800654a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f4:	4a29      	ldr	r2, [pc, #164]	; (800659c <HAL_UART_Transmit_DMA+0x118>)
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_UART_Transmit_DMA+0x11c>)
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006504:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <HAL_UART_Transmit_DMA+0x120>)
 8006506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650c:	2200      	movs	r2, #0
 800650e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	4619      	mov	r1, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3328      	adds	r3, #40	; 0x28
 8006520:	461a      	mov	r2, r3
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f7fd f820 	bl	8003568 <HAL_DMA_Start_IT>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2210      	movs	r2, #16
 8006532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e024      	b.n	8006594 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2240      	movs	r2, #64	; 0x40
 8006550:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	613b      	str	r3, [r7, #16]
   return(result);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	623a      	str	r2, [r7, #32]
 800657c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	69f9      	ldr	r1, [r7, #28]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	61bb      	str	r3, [r7, #24]
   return(result);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3728      	adds	r7, #40	; 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	0800751d 	.word	0x0800751d
 80065a0:	080075b7 	.word	0x080075b7
 80065a4:	080075d3 	.word	0x080075d3

080065a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b0ba      	sub	sp, #232	; 0xe8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80065d6:	4013      	ands	r3, r2
 80065d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11b      	bne.n	800661c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 82d6 	beq.w	8006bbe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
      }
      return;
 800661a:	e2d0      	b.n	8006bbe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800661c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 811f 	beq.w	8006864 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006626:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800662a:	4b8b      	ldr	r3, [pc, #556]	; (8006858 <HAL_UART_IRQHandler+0x2b0>)
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006636:	4b89      	ldr	r3, [pc, #548]	; (800685c <HAL_UART_IRQHandler+0x2b4>)
 8006638:	4013      	ands	r3, r2
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8112 	beq.w	8006864 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d011      	beq.n	8006670 <HAL_UART_IRQHandler+0xc8>
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006666:	f043 0201 	orr.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_UART_IRQHandler+0xf8>
 800667c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2202      	movs	r2, #2
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006696:	f043 0204 	orr.w	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d011      	beq.n	80066d0 <HAL_UART_IRQHandler+0x128>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2204      	movs	r2, #4
 80066be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c6:	f043 0202 	orr.w	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d017      	beq.n	800670c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066ec:	4b5a      	ldr	r3, [pc, #360]	; (8006858 <HAL_UART_IRQHandler+0x2b0>)
 80066ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2208      	movs	r2, #8
 80066fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006702:	f043 0208 	orr.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800670c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006714:	2b00      	cmp	r3, #0
 8006716:	d012      	beq.n	800673e <HAL_UART_IRQHandler+0x196>
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800672c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 823c 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d013      	beq.n	800677e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d005      	beq.n	80067a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04f      	beq.n	8006842 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fe54 	bl	8007450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d141      	bne.n	800683a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d9      	bne.n	80067b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680e:	4a14      	ldr	r2, [pc, #80]	; (8006860 <HAL_UART_IRQHandler+0x2b8>)
 8006810:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006816:	4618      	mov	r0, r3
 8006818:	f7fc ff80 	bl	800371c <HAL_DMA_Abort_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d017      	beq.n	8006852 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	e00f      	b.n	8006852 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f9da 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	e00b      	b.n	8006852 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9d6 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e007      	b.n	8006852 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9d2 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006850:	e1b7      	b.n	8006bc2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006852:	bf00      	nop
    return;
 8006854:	e1b5      	b.n	8006bc2 <HAL_UART_IRQHandler+0x61a>
 8006856:	bf00      	nop
 8006858:	10000001 	.word	0x10000001
 800685c:	04000120 	.word	0x04000120
 8006860:	08007653 	.word	0x08007653

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 814a 	bne.w	8006b02 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8143 	beq.w	8006b02 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 813c 	beq.w	8006b02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2210      	movs	r2, #16
 8006890:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	f040 80b5 	bne.w	8006a0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80068ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8187 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068c2:	429a      	cmp	r2, r3
 80068c4:	f080 817f 	bcs.w	8006bc6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 8086 	bne.w	80069f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800690e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006912:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800691a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1da      	bne.n	80068e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800693e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006952:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006956:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800695a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e1      	bne.n	800692e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800697a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800698e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006990:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006994:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800699c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e3      	bne.n	800696a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c0:	f023 0310 	bic.w	r3, r3, #16
 80069c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80069d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e4      	bne.n	80069b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fc fe37 	bl	800365e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8fb 	bl	8006c00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006a0a:	e0dc      	b.n	8006bc6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80ce 	beq.w	8006bca <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80c9 	beq.w	8006bca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e4      	bne.n	8006a38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a96:	633a      	str	r2, [r7, #48]	; 0x30
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e1      	bne.n	8006a6e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	617b      	str	r3, [r7, #20]
   return(result);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f880 	bl	8006c00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b00:	e063      	b.n	8006bca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <HAL_UART_IRQHandler+0x584>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fdd5 	bl	80076d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b2a:	e051      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d014      	beq.n	8006b62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d03a      	beq.n	8006bce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
    }
    return;
 8006b60:	e035      	b.n	8006bce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_UART_IRQHandler+0x5da>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fd7f 	bl	800767e <UART_EndTransmit_IT>
    return;
 8006b80:	e026      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x5fa>
 8006b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fdae 	bl	80076fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba0:	e016      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d010      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x628>
 8006bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da0c      	bge.n	8006bd0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fd96 	bl	80076e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bbc:	e008      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006bbe:	bf00      	nop
 8006bc0:	e006      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
    return;
 8006bc2:	bf00      	nop
 8006bc4:	e004      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
      return;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <HAL_UART_IRQHandler+0x628>
    return;
 8006bce:	bf00      	nop
  }
}
 8006bd0:	37e8      	adds	r7, #232	; 0xe8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop

08006bd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b08c      	sub	sp, #48	; 0x30
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4baf      	ldr	r3, [pc, #700]	; (8006f04 <UART_SetConfig+0x2ec>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4aa4      	ldr	r2, [pc, #656]	; (8006f08 <UART_SetConfig+0x2f0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	4313      	orrs	r3, r2
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f023 010f 	bic.w	r1, r3, #15
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a95      	ldr	r2, [pc, #596]	; (8006f0c <UART_SetConfig+0x2f4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d125      	bne.n	8006d08 <UART_SetConfig+0xf0>
 8006cbc:	2003      	movs	r0, #3
 8006cbe:	f7ff fb71 	bl	80063a4 <LL_RCC_GetUSARTClockSource>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d81b      	bhi.n	8006d00 <UART_SetConfig+0xe8>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0xb8>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e042      	b.n	8006d6e <UART_SetConfig+0x156>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e03e      	b.n	8006d6e <UART_SetConfig+0x156>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e03a      	b.n	8006d6e <UART_SetConfig+0x156>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e036      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e032      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a7e      	ldr	r2, [pc, #504]	; (8006f08 <UART_SetConfig+0x2f0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d12a      	bne.n	8006d68 <UART_SetConfig+0x150>
 8006d12:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006d16:	f7ff fb55 	bl	80063c4 <LL_RCC_GetLPUARTClockSource>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d20:	d01a      	beq.n	8006d58 <UART_SetConfig+0x140>
 8006d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d26:	d81b      	bhi.n	8006d60 <UART_SetConfig+0x148>
 8006d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2c:	d00c      	beq.n	8006d48 <UART_SetConfig+0x130>
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d32:	d815      	bhi.n	8006d60 <UART_SetConfig+0x148>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <UART_SetConfig+0x128>
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3c:	d008      	beq.n	8006d50 <UART_SetConfig+0x138>
 8006d3e:	e00f      	b.n	8006d60 <UART_SetConfig+0x148>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d46:	e012      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	e00e      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d50:	2304      	movs	r3, #4
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e00a      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d58:	2308      	movs	r3, #8
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	e006      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d60:	2310      	movs	r3, #16
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d66:	e002      	b.n	8006d6e <UART_SetConfig+0x156>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a65      	ldr	r2, [pc, #404]	; (8006f08 <UART_SetConfig+0x2f0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	f040 8097 	bne.w	8006ea8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d823      	bhi.n	8006dca <UART_SetConfig+0x1b2>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x170>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dcb 	.word	0x08006dcb
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dcb 	.word	0x08006dcb
 8006d98:	08006dbb 	.word	0x08006dbb
 8006d9c:	08006dcb 	.word	0x08006dcb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006dcb 	.word	0x08006dcb
 8006da8:	08006dc3 	.word	0x08006dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fe fc36 	bl	800561c <HAL_RCC_GetPCLK1Freq>
 8006db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006db2:	e010      	b.n	8006dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db4:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <UART_SetConfig+0x2f8>)
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006db8:	e00d      	b.n	8006dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dba:	f7fe fbaf 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8006dbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dc0:	e009      	b.n	8006dd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dc8:	e005      	b.n	8006dd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 812a 	beq.w	8007032 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	4a4c      	ldr	r2, [pc, #304]	; (8006f14 <UART_SetConfig+0x2fc>)
 8006de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d305      	bcc.n	8006e0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d903      	bls.n	8006e16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e14:	e10d      	b.n	8007032 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	2200      	movs	r2, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	60fa      	str	r2, [r7, #12]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	4a3c      	ldr	r2, [pc, #240]	; (8006f14 <UART_SetConfig+0x2fc>)
 8006e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e38:	f7f9 fce0 	bl	80007fc <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	020b      	lsls	r3, r1, #8
 8006e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e52:	0202      	lsls	r2, r0, #8
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	6849      	ldr	r1, [r1, #4]
 8006e58:	0849      	lsrs	r1, r1, #1
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	4605      	mov	r5, r0
 8006e60:	eb12 0804 	adds.w	r8, r2, r4
 8006e64:	eb43 0905 	adc.w	r9, r3, r5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	469a      	mov	sl, r3
 8006e70:	4693      	mov	fp, r2
 8006e72:	4652      	mov	r2, sl
 8006e74:	465b      	mov	r3, fp
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fcbf 	bl	80007fc <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4613      	mov	r3, r2
 8006e84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8c:	d308      	bcc.n	8006ea0 <UART_SetConfig+0x288>
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e94:	d204      	bcs.n	8006ea0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e0c8      	b.n	8007032 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ea6:	e0c4      	b.n	8007032 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb0:	d16d      	bne.n	8006f8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	2b07      	cmp	r3, #7
 8006eba:	d82d      	bhi.n	8006f18 <UART_SetConfig+0x300>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x2ac>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ee5 	.word	0x08006ee5
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006f19 	.word	0x08006f19
 8006ed0:	08006ef3 	.word	0x08006ef3
 8006ed4:	08006f19 	.word	0x08006f19
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f19 	.word	0x08006f19
 8006ee0:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee4:	f7fe fbb0 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eea:	e01b      	b.n	8006f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <UART_SetConfig+0x2f8>)
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef0:	e018      	b.n	8006f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fe fb13 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef8:	e014      	b.n	8006f24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f00:	e010      	b.n	8006f24 <UART_SetConfig+0x30c>
 8006f02:	bf00      	nop
 8006f04:	cfff69f3 	.word	0xcfff69f3
 8006f08:	40008000 	.word	0x40008000
 8006f0c:	40013800 	.word	0x40013800
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	0800ebbc 	.word	0x0800ebbc
      default:
        pclk = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8083 	beq.w	8007032 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	4a4a      	ldr	r2, [pc, #296]	; (800705c <UART_SetConfig+0x444>)
 8006f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f3e:	005a      	lsls	r2, r3, #1
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	441a      	add	r2, r3
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2b0f      	cmp	r3, #15
 8006f56:	d916      	bls.n	8006f86 <UART_SetConfig+0x36e>
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5e:	d212      	bcs.n	8006f86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f023 030f 	bic.w	r3, r3, #15
 8006f68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	8bfb      	ldrh	r3, [r7, #30]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	8bfa      	ldrh	r2, [r7, #30]
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	e055      	b.n	8007032 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f8c:	e051      	b.n	8007032 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b07      	cmp	r3, #7
 8006f96:	d822      	bhi.n	8006fde <UART_SetConfig+0x3c6>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x388>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fc1 	.word	0x08006fc1
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fdf 	.word	0x08006fdf
 8006fac:	08006fcf 	.word	0x08006fcf
 8006fb0:	08006fdf 	.word	0x08006fdf
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fdf 	.word	0x08006fdf
 8006fbc:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc0:	f7fe fb42 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8006fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fc6:	e010      	b.n	8006fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <UART_SetConfig+0x448>)
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fcc:	e00d      	b.n	8006fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fe faa5 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8006fd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fd4:	e009      	b.n	8006fea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fdc:	e005      	b.n	8006fea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d020      	beq.n	8007032 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	4a19      	ldr	r2, [pc, #100]	; (800705c <UART_SetConfig+0x444>)
 8006ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	441a      	add	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	2b0f      	cmp	r3, #15
 8007018:	d908      	bls.n	800702c <UART_SetConfig+0x414>
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007020:	d204      	bcs.n	800702c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	e002      	b.n	8007032 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2201      	movs	r2, #1
 8007036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2201      	movs	r2, #1
 800703e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2200      	movs	r2, #0
 8007046:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800704e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007052:	4618      	mov	r0, r3
 8007054:	3730      	adds	r7, #48	; 0x30
 8007056:	46bd      	mov	sp, r7
 8007058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705c:	0800ebbc 	.word	0x0800ebbc
 8007060:	00f42400 	.word	0x00f42400

08007064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01a      	beq.n	800717a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007162:	d10a      	bne.n	800717a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	605a      	str	r2, [r3, #4]
  }
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b8:	f7fb ff70 	bl	800309c <HAL_GetTick>
 80071bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d10e      	bne.n	80071ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f82f 	bl	800723e <UART_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e025      	b.n	8007236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d10e      	bne.n	8007216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f819 	bl	800723e <UART_WaitOnFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e00f      	b.n	8007236 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b09c      	sub	sp, #112	; 0x70
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	4613      	mov	r3, r2
 800724c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724e:	e0a9      	b.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	f000 80a5 	beq.w	80073a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725a:	f7fb ff1f 	bl	800309c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007266:	429a      	cmp	r2, r3
 8007268:	d302      	bcc.n	8007270 <UART_WaitOnFlagUntilTimeout+0x32>
 800726a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800726c:	2b00      	cmp	r3, #0
 800726e:	d140      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007284:	667b      	str	r3, [r7, #100]	; 0x64
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800728e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007290:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800729c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e6      	bne.n	8007270 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	663b      	str	r3, [r7, #96]	; 0x60
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e5      	bne.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e069      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d051      	beq.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d149      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007318:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800732e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800733e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	66bb      	str	r3, [r7, #104]	; 0x68
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800736c:	623a      	str	r2, [r7, #32]
 800736e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69f9      	ldr	r1, [r7, #28]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	61bb      	str	r3, [r7, #24]
   return(result);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e010      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69da      	ldr	r2, [r3, #28]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	4013      	ands	r3, r2
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	bf0c      	ite	eq
 80073b4:	2301      	moveq	r3, #1
 80073b6:	2300      	movne	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	429a      	cmp	r2, r3
 80073c0:	f43f af46 	beq.w	8007250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3770      	adds	r7, #112	; 0x70
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b08f      	sub	sp, #60	; 0x3c
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	60bb      	str	r3, [r7, #8]
   return(result);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800741e:	633b      	str	r3, [r7, #48]	; 0x30
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007428:	61ba      	str	r2, [r7, #24]
 800742a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6979      	ldr	r1, [r7, #20]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007444:	bf00      	nop
 8007446:	373c      	adds	r7, #60	; 0x3c
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b095      	sub	sp, #84	; 0x54
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800746c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007476:	643b      	str	r3, [r7, #64]	; 0x40
 8007478:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800747c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	61fb      	str	r3, [r7, #28]
   return(result);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d118      	bne.n	80074fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	647b      	str	r3, [r7, #68]	; 0x44
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6979      	ldr	r1, [r7, #20]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007510:	bf00      	nop
 8007512:	3754      	adds	r7, #84	; 0x54
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b090      	sub	sp, #64	; 0x40
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d137      	bne.n	80075a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	2200      	movs	r2, #0
 800753c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	623b      	str	r3, [r7, #32]
   return(result);
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007560:	633a      	str	r2, [r7, #48]	; 0x30
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e5      	bne.n	8007540 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	60fb      	str	r3, [r7, #12]
   return(result);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	69b9      	ldr	r1, [r7, #24]
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	617b      	str	r3, [r7, #20]
   return(result);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075a6:	e002      	b.n	80075ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075aa:	f7fa fec1 	bl	8002330 <HAL_UART_TxCpltCallback>
}
 80075ae:	bf00      	nop
 80075b0:	3740      	adds	r7, #64	; 0x40
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff fb07 	bl	8006bd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ca:	bf00      	nop
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b086      	sub	sp, #24
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d109      	bne.n	8007612 <UART_DMAError+0x40>
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b21      	cmp	r3, #33	; 0x21
 8007602:	d106      	bne.n	8007612 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7ff fede 	bl	80073ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d109      	bne.n	8007634 <UART_DMAError+0x62>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b22      	cmp	r3, #34	; 0x22
 8007624:	d106      	bne.n	8007634 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f7ff ff0e 	bl	8007450 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763a:	f043 0210 	orr.w	r2, r3, #16
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007644:	6978      	ldr	r0, [r7, #20]
 8007646:	f7ff fad1 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800764a:	bf00      	nop
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff fabb 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b088      	sub	sp, #32
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	60bb      	str	r3, [r7, #8]
   return(result);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	613b      	str	r3, [r7, #16]
   return(result);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fa fe32 	bl	8002330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076cc:	bf00      	nop
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_UARTEx_DisableFifoMode+0x16>
 8007722:	2302      	movs	r3, #2
 8007724:	e027      	b.n	8007776 <HAL_UARTEx_DisableFifoMode+0x66>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	; 0x24
 8007732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007796:	2302      	movs	r3, #2
 8007798:	e02d      	b.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2224      	movs	r2, #36	; 0x24
 80077a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f850 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007812:	2302      	movs	r3, #2
 8007814:	e02d      	b.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f812 	bl	800787c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007888:	2b00      	cmp	r3, #0
 800788a:	d108      	bne.n	800789e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800789c:	e031      	b.n	8007902 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800789e:	2308      	movs	r3, #8
 80078a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078a2:	2308      	movs	r3, #8
 80078a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	0e5b      	lsrs	r3, r3, #25
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	0f5b      	lsrs	r3, r3, #29
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	7b3a      	ldrb	r2, [r7, #12]
 80078ca:	4911      	ldr	r1, [pc, #68]	; (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078cc:	5c8a      	ldrb	r2, [r1, r2]
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078d2:	7b3a      	ldrb	r2, [r7, #12]
 80078d4:	490f      	ldr	r1, [pc, #60]	; (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	7b7a      	ldrb	r2, [r7, #13]
 80078e8:	4909      	ldr	r1, [pc, #36]	; (8007910 <UARTEx_SetNbDataToProcess+0x94>)
 80078ea:	5c8a      	ldrb	r2, [r1, r2]
 80078ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078f0:	7b7a      	ldrb	r2, [r7, #13]
 80078f2:	4908      	ldr	r1, [pc, #32]	; (8007914 <UARTEx_SetNbDataToProcess+0x98>)
 80078f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	0800ebd4 	.word	0x0800ebd4
 8007914:	0800ebdc 	.word	0x0800ebdc

08007918 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007920:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007924:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	b29b      	uxth	r3, r3
 8007932:	43db      	mvns	r3, r3
 8007934:	b29b      	uxth	r3, r3
 8007936:	4013      	ands	r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800794e:	b084      	sub	sp, #16
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	f107 0014 	add.w	r0, r7, #20
 800795c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	b004      	add	sp, #16
 800798e:	4770      	bx	lr

08007990 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	2218      	movs	r2, #24
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 f8d8 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079a8:	233f      	movs	r3, #63	; 0x3f
 80079aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80079ac:	2381      	movs	r3, #129	; 0x81
 80079ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80079b0:	1dfb      	adds	r3, r7, #7
 80079b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fb54 	bl	800906c <hci_send_req>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da01      	bge.n	80079ce <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80079ca:	23ff      	movs	r3, #255	; 0xff
 80079cc:	e000      	b.n	80079d0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80079ce:	79fb      	ldrb	r3, [r7, #7]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80079d8:	b5b0      	push	{r4, r5, r7, lr}
 80079da:	b0ce      	sub	sp, #312	; 0x138
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4605      	mov	r5, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	4610      	mov	r0, r2
 80079e4:	4619      	mov	r1, r3
 80079e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079ea:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80079ee:	462a      	mov	r2, r5
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80079fa:	4622      	mov	r2, r4
 80079fc:	801a      	strh	r2, [r3, #0]
 80079fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a02:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007a06:	4602      	mov	r2, r0
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a0e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007a12:	460a      	mov	r2, r1
 8007a14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007a16:	f107 0310 	add.w	r3, r7, #16
 8007a1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007a1e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007a22:	3308      	adds	r3, #8
 8007a24:	f107 0210 	add.w	r2, r7, #16
 8007a28:	4413      	add	r3, r2
 8007a2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007a2e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a32:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007a36:	4413      	add	r3, r2
 8007a38:	3309      	adds	r3, #9
 8007a3a:	f107 0210 	add.w	r2, r7, #16
 8007a3e:	4413      	add	r3, r2
 8007a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a48:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a5a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a5e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007a62:	7812      	ldrb	r2, [r2, #0]
 8007a64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007a70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a78:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007a7c:	8812      	ldrh	r2, [r2, #0]
 8007a7e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a86:	3302      	adds	r3, #2
 8007a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a94:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8007a98:	8812      	ldrh	r2, [r2, #0]
 8007a9a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007aac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007ab0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007abc:	3301      	adds	r3, #1
 8007abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ac6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007aca:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007ad6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ada:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007ade:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007aea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007aee:	3308      	adds	r3, #8
 8007af0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007af4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f81d 	bl	8008b38 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007afe:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007b02:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b06:	4413      	add	r3, r2
 8007b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b10:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007b14:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007b20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b24:	3301      	adds	r3, #1
 8007b26:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007b2a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 f802 	bl	8008b38 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007b34:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007b38:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b46:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007b4a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b50:	3302      	adds	r3, #2
 8007b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007b5e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b64:	3302      	adds	r3, #2
 8007b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b6e:	2218      	movs	r2, #24
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fff0 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b78:	233f      	movs	r3, #63	; 0x3f
 8007b7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007b7e:	2383      	movs	r3, #131	; 0x83
 8007b80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b94:	f107 030f 	add.w	r3, r7, #15
 8007b98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fa5f 	bl	800906c <hci_send_req>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da01      	bge.n	8007bb8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007bb4:	23ff      	movs	r3, #255	; 0xff
 8007bb6:	e004      	b.n	8007bc2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8007bb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bbc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bc0:	781b      	ldrb	r3, [r3, #0]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bdb0      	pop	{r4, r5, r7, pc}

08007bcc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b0cc      	sub	sp, #304	; 0x130
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007bde:	f107 0310 	add.w	r3, r7, #16
 8007be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c00:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c16:	2218      	movs	r2, #24
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 ff9c 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c20:	233f      	movs	r3, #63	; 0x3f
 8007c22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007c26:	2385      	movs	r3, #133	; 0x85
 8007c28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c2c:	f107 0310 	add.w	r3, r7, #16
 8007c30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c3c:	f107 030f 	add.w	r3, r7, #15
 8007c40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fa0b 	bl	800906c <hci_send_req>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da01      	bge.n	8007c60 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007c5c:	23ff      	movs	r3, #255	; 0xff
 8007c5e:	e004      	b.n	8007c6a <aci_gap_set_io_capability+0x9e>
  return status;
 8007c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c64:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c68:	781b      	ldrb	r3, [r3, #0]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b0cc      	sub	sp, #304	; 0x130
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4619      	mov	r1, r3
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c96:	4622      	mov	r2, r4
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	701a      	strb	r2, [r3, #0]
 8007ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cae:	460a      	mov	r2, r1
 8007cb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007cb2:	f107 0310 	add.w	r3, r7, #16
 8007cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cd4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007cd8:	7812      	ldrb	r2, [r2, #0]
 8007cda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d08:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d14:	3301      	adds	r3, #1
 8007d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d22:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d2e:	3301      	adds	r3, #1
 8007d30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d38:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007d3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d42:	3301      	adds	r3, #1
 8007d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007d50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d56:	3301      	adds	r3, #1
 8007d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d60:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007d64:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d74:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007d78:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d80:	3304      	adds	r3, #4
 8007d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d8a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007d8e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d9e:	2218      	movs	r2, #24
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fed8 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007da8:	233f      	movs	r3, #63	; 0x3f
 8007daa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007dae:	2386      	movs	r3, #134	; 0x86
 8007db0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007db4:	f107 0310 	add.w	r3, r7, #16
 8007db8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007dc4:	f107 030f 	add.w	r3, r7, #15
 8007dc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f947 	bl	800906c <hci_send_req>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da01      	bge.n	8007de8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007de4:	23ff      	movs	r3, #255	; 0xff
 8007de6:	e004      	b.n	8007df2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007df0:	781b      	ldrb	r3, [r3, #0]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bdb0      	pop	{r4, r5, r7, pc}

08007dfc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b0cc      	sub	sp, #304	; 0x130
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4602      	mov	r2, r0
 8007e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0c:	6019      	str	r1, [r3, #0]
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007e18:	f107 0310 	add.w	r3, r7, #16
 8007e1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e3a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e3e:	8812      	ldrh	r2, [r2, #0]
 8007e40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e46:	3302      	adds	r3, #2
 8007e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e54:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e62:	3304      	adds	r3, #4
 8007e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e6c:	2218      	movs	r2, #24
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fe71 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e76:	233f      	movs	r3, #63	; 0x3f
 8007e78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007e7c:	2388      	movs	r3, #136	; 0x88
 8007e7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e92:	f107 030f 	add.w	r3, r7, #15
 8007e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f8e0 	bl	800906c <hci_send_req>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da01      	bge.n	8007eb6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	e004      	b.n	8007ec0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ebe:	781b      	ldrb	r3, [r3, #0]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007eca:	b590      	push	{r4, r7, lr}
 8007ecc:	b0cd      	sub	sp, #308	; 0x134
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007eda:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ee8:	4622      	mov	r2, r4
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007f00:	460a      	mov	r2, r1
 8007f02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007f04:	f107 0310 	add.w	r3, r7, #16
 8007f08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	2207      	movs	r2, #7
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fe1f 	bl	8008b58 <Osal_MemSet>
  int index_input = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f34:	3301      	adds	r3, #1
 8007f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f4e:	3301      	adds	r3, #1
 8007f50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f5c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f72:	2218      	movs	r2, #24
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fdee 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f7c:	233f      	movs	r3, #63	; 0x3f
 8007f7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007f82:	238a      	movs	r3, #138	; 0x8a
 8007f84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f88:	f107 0310 	add.w	r3, r7, #16
 8007f8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007f98:	f107 0308 	add.w	r3, r7, #8
 8007f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007fa0:	2307      	movs	r3, #7
 8007fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 f85d 	bl	800906c <hci_send_req>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da01      	bge.n	8007fbc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007fb8:	23ff      	movs	r3, #255	; 0xff
 8007fba:	e02e      	b.n	800801a <aci_gap_init+0x150>
  if ( resp.Status )
 8007fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <aci_gap_init+0x10c>
    return resp.Status;
 8007fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	e021      	b.n	800801a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007ff8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008002:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008008:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800800c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008016:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008020:	46bd      	mov	sp, r7
 8008022:	bd90      	pop	{r4, r7, pc}

08008024 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b0cc      	sub	sp, #304	; 0x130
 8008028:	af00      	add	r7, sp, #0
 800802a:	4602      	mov	r2, r0
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008034:	6019      	str	r1, [r3, #0]
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800803e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008040:	f107 0310 	add.w	r3, r7, #16
 8008044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800805a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008062:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800806a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800806e:	3301      	adds	r3, #1
 8008070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008078:	1c58      	adds	r0, r3, #1
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008082:	781a      	ldrb	r2, [r3, #0]
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	f000 fd53 	bl	8008b38 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080a0:	4413      	add	r3, r2
 80080a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080aa:	2218      	movs	r2, #24
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fd52 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080b4:	233f      	movs	r3, #63	; 0x3f
 80080b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80080ba:	238e      	movs	r3, #142	; 0x8e
 80080bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80080c0:	f107 0310 	add.w	r3, r7, #16
 80080c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080d0:	f107 030f 	add.w	r3, r7, #15
 80080d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080d8:	2301      	movs	r3, #1
 80080da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ffc1 	bl	800906c <hci_send_req>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	da01      	bge.n	80080f4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80080f0:	23ff      	movs	r3, #255	; 0xff
 80080f2:	e004      	b.n	80080fe <aci_gap_update_adv_data+0xda>
  return status;
 80080f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080fc:	781b      	ldrb	r3, [r3, #0]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	2218      	movs	r2, #24
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fd1c 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008120:	233f      	movs	r3, #63	; 0x3f
 8008122:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008124:	2392      	movs	r3, #146	; 0x92
 8008126:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008128:	1dfb      	adds	r3, r7, #7
 800812a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800812c:	2301      	movs	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ff98 	bl	800906c <hci_send_req>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	da01      	bge.n	8008146 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008142:	23ff      	movs	r3, #255	; 0xff
 8008144:	e000      	b.n	8008148 <aci_gap_configure_whitelist+0x40>
  return status;
 8008146:	79fb      	ldrb	r3, [r7, #7]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b0cc      	sub	sp, #304	; 0x130
 8008154:	af00      	add	r7, sp, #0
 8008156:	4602      	mov	r2, r0
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800816a:	460a      	mov	r2, r1
 800816c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800816e:	f107 0310 	add.w	r3, r7, #16
 8008172:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008190:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008194:	8812      	ldrh	r2, [r2, #0]
 8008196:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800819c:	3302      	adds	r3, #2
 800819e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80081a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081aa:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80081ae:	7812      	ldrb	r2, [r2, #0]
 80081b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80081b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081c0:	2218      	movs	r2, #24
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fcc7 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081ca:	233f      	movs	r3, #63	; 0x3f
 80081cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80081d0:	23a5      	movs	r3, #165	; 0xa5
 80081d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081e6:	f107 030f 	add.w	r3, r7, #15
 80081ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081f8:	2100      	movs	r1, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff36 	bl	800906c <hci_send_req>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	da01      	bge.n	800820a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008206:	23ff      	movs	r3, #255	; 0xff
 8008208:	e004      	b.n	8008214 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	4618      	mov	r0, r3
 8008216:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b088      	sub	sp, #32
 8008222:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008228:	f107 0308 	add.w	r3, r7, #8
 800822c:	2218      	movs	r2, #24
 800822e:	2100      	movs	r1, #0
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fc91 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008236:	233f      	movs	r3, #63	; 0x3f
 8008238:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800823a:	f240 1301 	movw	r3, #257	; 0x101
 800823e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008240:	1dfb      	adds	r3, r7, #7
 8008242:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008244:	2301      	movs	r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff0c 	bl	800906c <hci_send_req>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	da01      	bge.n	800825e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800825a:	23ff      	movs	r3, #255	; 0xff
 800825c:	e000      	b.n	8008260 <aci_gatt_init+0x42>
  return status;
 800825e:	79fb      	ldrb	r3, [r7, #7]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b0cf      	sub	sp, #316	; 0x13c
 800826c:	af00      	add	r7, sp, #0
 800826e:	4604      	mov	r4, r0
 8008270:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008274:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008278:	6001      	str	r1, [r0, #0]
 800827a:	4610      	mov	r0, r2
 800827c:	4619      	mov	r1, r3
 800827e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008282:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008286:	4622      	mov	r2, r4
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800828e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008292:	4602      	mov	r2, r0
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800829a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800829e:	460a      	mov	r2, r1
 80082a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80082aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d00a      	beq.n	80082ce <aci_gatt_add_service+0x66>
 80082b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082bc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d101      	bne.n	80082ca <aci_gatt_add_service+0x62>
 80082c6:	2311      	movs	r3, #17
 80082c8:	e002      	b.n	80082d0 <aci_gatt_add_service+0x68>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <aci_gatt_add_service+0x68>
 80082ce:	2303      	movs	r3, #3
 80082d0:	f107 0210 	add.w	r2, r7, #16
 80082d4:	4413      	add	r3, r2
 80082d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	2203      	movs	r2, #3
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fc38 	bl	8008b58 <Osal_MemSet>
  int index_input = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80082ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80082f6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80082fa:	7812      	ldrb	r2, [r2, #0]
 80082fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80082fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008302:	3301      	adds	r3, #1
 8008304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008308:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800830c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d002      	beq.n	800831c <aci_gatt_add_service+0xb4>
 8008316:	2b02      	cmp	r3, #2
 8008318:	d004      	beq.n	8008324 <aci_gatt_add_service+0xbc>
 800831a:	e007      	b.n	800832c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800831c:	2302      	movs	r3, #2
 800831e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008322:	e005      	b.n	8008330 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008324:	2310      	movs	r3, #16
 8008326:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800832a:	e001      	b.n	8008330 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800832c:	2397      	movs	r3, #151	; 0x97
 800832e:	e06c      	b.n	800840a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008330:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008334:	1c58      	adds	r0, r3, #1
 8008336:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800833a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800833e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	f000 fbf8 	bl	8008b38 <Osal_MemCpy>
    index_input += size;
 8008348:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800834c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008350:	4413      	add	r3, r2
 8008352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800835e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800836a:	3301      	adds	r3, #1
 800836c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008374:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008378:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800837c:	7812      	ldrb	r2, [r2, #0]
 800837e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008384:	3301      	adds	r3, #1
 8008386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800838a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800838e:	2218      	movs	r2, #24
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fbe0 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008398:	233f      	movs	r3, #63	; 0x3f
 800839a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800839e:	f44f 7381 	mov.w	r3, #258	; 0x102
 80083a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083a6:	f107 0310 	add.w	r3, r7, #16
 80083aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80083be:	2303      	movs	r3, #3
 80083c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083c8:	2100      	movs	r1, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fe4e 	bl	800906c <hci_send_req>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	da01      	bge.n	80083da <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80083d6:	23ff      	movs	r3, #255	; 0xff
 80083d8:	e017      	b.n	800840a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80083da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80083e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	e00a      	b.n	800840a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80083f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008406:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008410:	46bd      	mov	sp, r7
 8008412:	bd90      	pop	{r4, r7, pc}

08008414 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b0d1      	sub	sp, #324	; 0x144
 8008418:	af00      	add	r7, sp, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008422:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008426:	600a      	str	r2, [r1, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800842e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008432:	4622      	mov	r2, r4
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800843a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800843e:	4602      	mov	r2, r0
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008446:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800844a:	460a      	mov	r2, r1
 800844c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800844e:	f107 0318 	add.w	r3, r7, #24
 8008452:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008456:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800845a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d00a      	beq.n	800847a <aci_gatt_add_char+0x66>
 8008464:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008468:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d101      	bne.n	8008476 <aci_gatt_add_char+0x62>
 8008472:	2313      	movs	r3, #19
 8008474:	e002      	b.n	800847c <aci_gatt_add_char+0x68>
 8008476:	2303      	movs	r3, #3
 8008478:	e000      	b.n	800847c <aci_gatt_add_char+0x68>
 800847a:	2305      	movs	r3, #5
 800847c:	f107 0218 	add.w	r2, r7, #24
 8008480:	4413      	add	r3, r2
 8008482:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	2203      	movs	r2, #3
 800848c:	2100      	movs	r1, #0
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fb62 	bl	8008b58 <Osal_MemSet>
  int index_input = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800849a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800849e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80084a2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80084a6:	8812      	ldrh	r2, [r2, #0]
 80084a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80084aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084ae:	3302      	adds	r3, #2
 80084b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80084b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084b8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80084bc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80084c0:	7812      	ldrb	r2, [r2, #0]
 80084c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80084c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084c8:	3301      	adds	r3, #1
 80084ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80084ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084d2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <aci_gatt_add_char+0xce>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d004      	beq.n	80084ea <aci_gatt_add_char+0xd6>
 80084e0:	e007      	b.n	80084f2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80084e2:	2302      	movs	r3, #2
 80084e4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80084e8:	e005      	b.n	80084f6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80084ea:	2310      	movs	r3, #16
 80084ec:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80084f0:	e001      	b.n	80084f6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80084f2:	2397      	movs	r3, #151	; 0x97
 80084f4:	e091      	b.n	800861a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80084f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084fa:	1cd8      	adds	r0, r3, #3
 80084fc:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008500:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008504:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	f000 fb15 	bl	8008b38 <Osal_MemCpy>
    index_input += size;
 800850e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008512:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008516:	4413      	add	r3, r2
 8008518:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800851c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008520:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008524:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008528:	8812      	ldrh	r2, [r2, #0]
 800852a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800852c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008530:	3302      	adds	r3, #2
 8008532:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008536:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800853a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800853e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008540:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008544:	3301      	adds	r3, #1
 8008546:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800854a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800854e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008552:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008558:	3301      	adds	r3, #1
 800855a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800855e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008562:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008566:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800856c:	3301      	adds	r3, #1
 800856e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008576:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800857a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800857c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008580:	3301      	adds	r3, #1
 8008582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008586:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800858a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800858e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008594:	3301      	adds	r3, #1
 8008596:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800859a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800859e:	2218      	movs	r2, #24
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fad8 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085a8:	233f      	movs	r3, #63	; 0x3f
 80085aa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80085ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80085b2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80085b6:	f107 0318 	add.w	r3, r7, #24
 80085ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80085be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80085ce:	2303      	movs	r3, #3
 80085d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085d8:	2100      	movs	r1, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fd46 	bl	800906c <hci_send_req>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da01      	bge.n	80085ea <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80085e6:	23ff      	movs	r3, #255	; 0xff
 80085e8:	e017      	b.n	800861a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80085ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80085f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80085fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	e00a      	b.n	800861a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008604:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008616:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008620:	46bd      	mov	sp, r7
 8008622:	bd90      	pop	{r4, r7, pc}

08008624 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008624:	b5b0      	push	{r4, r5, r7, lr}
 8008626:	b0cc      	sub	sp, #304	; 0x130
 8008628:	af00      	add	r7, sp, #0
 800862a:	4605      	mov	r5, r0
 800862c:	460c      	mov	r4, r1
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008636:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800863a:	462a      	mov	r2, r5
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008646:	4622      	mov	r2, r4
 8008648:	801a      	strh	r2, [r3, #0]
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008652:	4602      	mov	r2, r0
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800865e:	460a      	mov	r2, r1
 8008660:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008662:	f107 0310 	add.w	r3, r7, #16
 8008666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800866a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800867c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008680:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008684:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008688:	8812      	ldrh	r2, [r2, #0]
 800868a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800868c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008690:	3302      	adds	r3, #2
 8008692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800869e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80086a2:	8812      	ldrh	r2, [r2, #0]
 80086a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086aa:	3302      	adds	r3, #2
 80086ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80086b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80086bc:	7812      	ldrb	r2, [r2, #0]
 80086be:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c4:	3301      	adds	r3, #1
 80086c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80086ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086d2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086de:	3301      	adds	r3, #1
 80086e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80086e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e8:	1d98      	adds	r0, r3, #6
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80086fa:	f000 fa1d 	bl	8008b38 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80086fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008702:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800870c:	4413      	add	r3, r2
 800870e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008716:	2218      	movs	r2, #24
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fa1c 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008720:	233f      	movs	r3, #63	; 0x3f
 8008722:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008726:	f44f 7383 	mov.w	r3, #262	; 0x106
 800872a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800872e:	f107 0310 	add.w	r3, r7, #16
 8008732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800873a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800873e:	f107 030f 	add.w	r3, r7, #15
 8008742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800874c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fc8a 	bl	800906c <hci_send_req>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	da01      	bge.n	8008762 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800875e:	23ff      	movs	r3, #255	; 0xff
 8008760:	e004      	b.n	800876c <aci_gatt_update_char_value+0x148>
  return status;
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800876a:	781b      	ldrb	r3, [r3, #0]
}
 800876c:	4618      	mov	r0, r3
 800876e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008772:	46bd      	mov	sp, r7
 8008774:	bdb0      	pop	{r4, r5, r7, pc}

08008776 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b0cc      	sub	sp, #304	; 0x130
 800877a:	af00      	add	r7, sp, #0
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800878e:	4602      	mov	r2, r0
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800879a:	460a      	mov	r2, r1
 800879c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800879e:	f107 0310 	add.w	r3, r7, #16
 80087a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80087b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087cc:	3301      	adds	r3, #1
 80087ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80087d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087de:	7812      	ldrb	r2, [r2, #0]
 80087e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80087e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e6:	3301      	adds	r3, #1
 80087e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80087ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f0:	1c98      	adds	r0, r3, #2
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	f000 f997 	bl	8008b38 <Osal_MemCpy>
  index_input += Length;
 800880a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008818:	4413      	add	r3, r2
 800881a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800881e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008822:	2218      	movs	r2, #24
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f996 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800882c:	233f      	movs	r3, #63	; 0x3f
 800882e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008832:	230c      	movs	r3, #12
 8008834:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008838:	f107 0310 	add.w	r3, r7, #16
 800883c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008844:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008848:	f107 030f 	add.w	r3, r7, #15
 800884c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008850:	2301      	movs	r3, #1
 8008852:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800885a:	2100      	movs	r1, #0
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fc05 	bl	800906c <hci_send_req>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	da01      	bge.n	800886c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008868:	23ff      	movs	r3, #255	; 0xff
 800886a:	e004      	b.n	8008876 <aci_hal_write_config_data+0x100>
  return status;
 800886c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008870:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008874:	781b      	ldrb	r3, [r3, #0]
}
 8008876:	4618      	mov	r0, r3
 8008878:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b0cc      	sub	sp, #304	; 0x130
 8008884:	af00      	add	r7, sp, #0
 8008886:	4602      	mov	r2, r0
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008896:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800889a:	460a      	mov	r2, r1
 800889c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800889e:	f107 0310 	add.w	r3, r7, #16
 80088a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088ae:	2200      	movs	r2, #0
 80088b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80088b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80088d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088de:	7812      	ldrb	r2, [r2, #0]
 80088e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088e6:	3301      	adds	r3, #1
 80088e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088f0:	2218      	movs	r2, #24
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f92f 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088fa:	233f      	movs	r3, #63	; 0x3f
 80088fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008900:	230f      	movs	r3, #15
 8008902:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800890e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008916:	f107 030f 	add.w	r3, r7, #15
 800891a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fb9e 	bl	800906c <hci_send_req>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	da01      	bge.n	800893a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008936:	23ff      	movs	r3, #255	; 0xff
 8008938:	e004      	b.n	8008944 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800893a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008942:	781b      	ldrb	r3, [r3, #0]
}
 8008944:	4618      	mov	r0, r3
 8008946:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b0cc      	sub	sp, #304	; 0x130
 8008952:	af00      	add	r7, sp, #0
 8008954:	4602      	mov	r2, r0
 8008956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800895e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800897a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008982:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008986:	8812      	ldrh	r2, [r2, #0]
 8008988:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800898a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898e:	3302      	adds	r3, #2
 8008990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008994:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008998:	2218      	movs	r2, #24
 800899a:	2100      	movs	r1, #0
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f8db 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089a2:	233f      	movs	r3, #63	; 0x3f
 80089a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80089a8:	2318      	movs	r3, #24
 80089aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089ae:	f107 0310 	add.w	r3, r7, #16
 80089b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089be:	f107 030f 	add.w	r3, r7, #15
 80089c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089c6:	2301      	movs	r3, #1
 80089c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fb4a 	bl	800906c <hci_send_req>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	da01      	bge.n	80089e2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80089de:	23ff      	movs	r3, #255	; 0xff
 80089e0:	e004      	b.n	80089ec <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80089e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089ea:	781b      	ldrb	r3, [r3, #0]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b088      	sub	sp, #32
 80089fa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	2218      	movs	r2, #24
 8008a06:	2100      	movs	r1, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f8a5 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x03;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008a12:	2303      	movs	r3, #3
 8008a14:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a16:	1dfb      	adds	r3, r7, #7
 8008a18:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fb21 	bl	800906c <hci_send_req>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	da01      	bge.n	8008a34 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a30:	23ff      	movs	r3, #255	; 0xff
 8008a32:	e000      	b.n	8008a36 <hci_reset+0x40>
  return status;
 8008a34:	79fb      	ldrb	r3, [r7, #7]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b0cd      	sub	sp, #308	; 0x134
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008a52:	4622      	mov	r2, r4
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a5e:	4602      	mov	r2, r0
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a6a:	460a      	mov	r2, r1
 8008a6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008a6e:	f107 0310 	add.w	r3, r7, #16
 8008a72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a90:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aaa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ac4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ada:	2218      	movs	r2, #24
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f83a 	bl	8008b58 <Osal_MemSet>
  rq.ogf = 0x08;
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008aea:	2331      	movs	r3, #49	; 0x31
 8008aec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008af0:	f107 0310 	add.w	r3, r7, #16
 8008af4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008afc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b00:	f107 030f 	add.w	r3, r7, #15
 8008b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 faa9 	bl	800906c <hci_send_req>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da01      	bge.n	8008b24 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008b20:	23ff      	movs	r3, #255	; 0xff
 8008b22:	e004      	b.n	8008b2e <hci_le_set_default_phy+0xf0>
  return status;
 8008b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b28:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b2c:	781b      	ldrb	r3, [r3, #0]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}

08008b38 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f003 fcc3 	bl	800c4d4 <memcpy>
 8008b4e:	4603      	mov	r3, r0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f003 fcc1 	bl	800c4f0 <memset>
 8008b6e:	4603      	mov	r3, r0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  return;
 8008b7c:	bf00      	nop
}
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008b86:	b480      	push	{r7}
 8008b88:	af00      	add	r7, sp, #0
  return;
 8008b8a:	bf00      	nop
}
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return;
 8008b98:	bf00      	nop
}
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0
  return;
 8008ba6:	bf00      	nop
}
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  return;
 8008bb4:	bf00      	nop
}
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	af00      	add	r7, sp, #0
  return;
 8008bc2:	bf00      	nop
}
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
  return;
 8008bd0:	bf00      	nop
}
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008bda:	b480      	push	{r7}
 8008bdc:	af00      	add	r7, sp, #0
  return;
 8008bde:	bf00      	nop
}
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  return;
 8008bec:	bf00      	nop
}
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	af00      	add	r7, sp, #0
  return;
 8008bfa:	bf00      	nop
}
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return;
 8008c08:	bf00      	nop
}
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008c12:	b480      	push	{r7}
 8008c14:	af00      	add	r7, sp, #0
  return;
 8008c16:	bf00      	nop
}
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return;
 8008c24:	bf00      	nop
}
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008c2e:	b480      	push	{r7}
 8008c30:	af00      	add	r7, sp, #0
  return;
 8008c32:	bf00      	nop
}
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return;
 8008c40:	bf00      	nop
}
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	af00      	add	r7, sp, #0
  return;
 8008c4e:	bf00      	nop
}
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  return;
 8008c5c:	bf00      	nop
}
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <SVCCTL_Init+0x18>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <SVCCTL_Init+0x1c>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008c78:	f000 f806 	bl	8008c88 <SVCCTL_SvcInit>

  return;
 8008c7c:	bf00      	nop
}
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000130 	.word	0x20000130
 8008c84:	20000150 	.word	0x20000150

08008c88 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  BAS_Init();
 8008c8c:	f7ff ff74 	bl	8008b78 <BAS_Init>

  BLS_Init();
 8008c90:	f7ff ff79 	bl	8008b86 <BLS_Init>

  CRS_STM_Init();
 8008c94:	f7ff ff7e 	bl	8008b94 <CRS_STM_Init>

  DIS_Init();
 8008c98:	f7ff ff83 	bl	8008ba2 <DIS_Init>

  EDS_STM_Init();
 8008c9c:	f7ff ff88 	bl	8008bb0 <EDS_STM_Init>

  HIDS_Init();
 8008ca0:	f7ff ff8d 	bl	8008bbe <HIDS_Init>

  HRS_Init();
 8008ca4:	f7ff ff92 	bl	8008bcc <HRS_Init>

  HTS_Init();
 8008ca8:	f7ff ff97 	bl	8008bda <HTS_Init>

  IAS_Init();
 8008cac:	f7ff ff9c 	bl	8008be8 <IAS_Init>

  LLS_Init();
 8008cb0:	f7ff ffa1 	bl	8008bf6 <LLS_Init>

  TPS_Init();
 8008cb4:	f7ff ffa6 	bl	8008c04 <TPS_Init>

  MOTENV_STM_Init();
 8008cb8:	f7ff ffab 	bl	8008c12 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008cbc:	f7ff ffb0 	bl	8008c20 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008cc0:	f7ff ffb5 	bl	8008c2e <ZDD_STM_Init>

  OTAS_STM_Init();
 8008cc4:	f7ff ffba 	bl	8008c3c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008cc8:	f7ff ffc6 	bl	8008c58 <BVOPUS_STM_Init>

  MESH_Init();
 8008ccc:	f7ff ffbd 	bl	8008c4a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008cd0:	f002 fd64 	bl	800b79c <SVCCTL_InitCustomSvc>
  
  return;
 8008cd4:	bf00      	nop
}
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008ce0:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <SVCCTL_RegisterSvcHandler+0x30>)
 8008ce2:	7f1b      	ldrb	r3, [r3, #28]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <SVCCTL_RegisterSvcHandler+0x30>)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <SVCCTL_RegisterSvcHandler+0x30>)
 8008cf0:	7f1b      	ldrb	r3, [r3, #28]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <SVCCTL_RegisterSvcHandler+0x30>)
 8008cf8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008cfa:	bf00      	nop
}
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000130 	.word	0x20000130

08008d0c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3301      	adds	r3, #1
 8008d18:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2bff      	cmp	r3, #255	; 0xff
 8008d24:	d125      	bne.n	8008d72 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3302      	adds	r3, #2
 8008d2a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d3a:	d118      	bne.n	8008d6e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	757b      	strb	r3, [r7, #21]
 8008d40:	e00d      	b.n	8008d5e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008d42:	7d7b      	ldrb	r3, [r7, #21]
 8008d44:	4a1a      	ldr	r2, [pc, #104]	; (8008db0 <SVCCTL_UserEvtRx+0xa4>)
 8008d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d108      	bne.n	8008d6a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008d58:	7d7b      	ldrb	r3, [r7, #21]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	757b      	strb	r3, [r7, #21]
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <SVCCTL_UserEvtRx+0xa4>)
 8008d60:	7f1b      	ldrb	r3, [r3, #28]
 8008d62:	7d7a      	ldrb	r2, [r7, #21]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d3ec      	bcc.n	8008d42 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008d68:	e002      	b.n	8008d70 <SVCCTL_UserEvtRx+0x64>
              break;
 8008d6a:	bf00      	nop
          break;
 8008d6c:	e000      	b.n	8008d70 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008d6e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008d70:	e000      	b.n	8008d74 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008d72:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d00f      	beq.n	8008d9a <SVCCTL_UserEvtRx+0x8e>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	dc10      	bgt.n	8008da0 <SVCCTL_UserEvtRx+0x94>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <SVCCTL_UserEvtRx+0x7c>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d006      	beq.n	8008d94 <SVCCTL_UserEvtRx+0x88>
 8008d86:	e00b      	b.n	8008da0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fca9 	bl	800a6e0 <SVCCTL_App_Notification>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75bb      	strb	r3, [r7, #22]
      break;
 8008d92:	e008      	b.n	8008da6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75bb      	strb	r3, [r7, #22]
      break;
 8008d98:	e005      	b.n	8008da6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75bb      	strb	r3, [r7, #22]
      break;
 8008d9e:	e002      	b.n	8008da6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75bb      	strb	r3, [r7, #22]
      break;
 8008da4:	bf00      	nop
  }

  return (return_status);
 8008da6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000130 	.word	0x20000130

08008db4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	212c      	movs	r1, #44	; 0x2c
 8008dcc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008dd0:	f000 fae2 	bl	8009398 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	330b      	adds	r3, #11
 8008dd8:	78db      	ldrb	r3, [r3, #3]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b088      	sub	sp, #32
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	210f      	movs	r1, #15
 8008dfa:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008dfe:	f000 facb 	bl	8009398 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	330b      	adds	r3, #11
 8008e06:	78db      	ldrb	r3, [r3, #3]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008e18:	f107 030c 	add.w	r3, r7, #12
 8008e1c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	210e      	movs	r1, #14
 8008e24:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008e28:	f000 fab6 	bl	8009398 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	330b      	adds	r3, #11
 8008e30:	78db      	ldrb	r3, [r3, #3]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b08b      	sub	sp, #44	; 0x2c
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008e64:	4b4a      	ldr	r3, [pc, #296]	; (8008f90 <SHCI_GetWirelessFwInfo+0x154>)
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008e6c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008e76:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a44      	ldr	r2, [pc, #272]	; (8008f94 <SHCI_GetWirelessFwInfo+0x158>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d10f      	bne.n	8008ea8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	e01a      	b.n	8008ede <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008eb0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008eb4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	0e1b      	lsrs	r3, r3, #24
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	0e1b      	lsrs	r3, r3, #24
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	0a1b      	lsrs	r3, r3, #8
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	0e1b      	lsrs	r3, r3, #24
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	0c1b      	lsrs	r3, r3, #16
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	0c1b      	lsrs	r3, r3, #16
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	372c      	adds	r7, #44	; 0x2c
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	58004000 	.word	0x58004000
 8008f94:	a94656b9 	.word	0xa94656b9

08008f98 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	4a08      	ldr	r2, [pc, #32]	; (8008fc8 <hci_init+0x30>)
 8008fa8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008faa:	4a08      	ldr	r2, [pc, #32]	; (8008fcc <hci_init+0x34>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008fb0:	4806      	ldr	r0, [pc, #24]	; (8008fcc <hci_init+0x34>)
 8008fb2:	f000 f973 	bl	800929c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 f8d4 	bl	8009168 <TlInit>

  return;
 8008fc0:	bf00      	nop
}
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20000620 	.word	0x20000620
 8008fcc:	200005f8 	.word	0x200005f8

08008fd0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008fd6:	4822      	ldr	r0, [pc, #136]	; (8009060 <hci_user_evt_proc+0x90>)
 8008fd8:	f000 fe06 	bl	8009be8 <LST_is_empty>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d12b      	bne.n	800903a <hci_user_evt_proc+0x6a>
 8008fe2:	4b20      	ldr	r3, [pc, #128]	; (8009064 <hci_user_evt_proc+0x94>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d027      	beq.n	800903a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4619      	mov	r1, r3
 8008ff0:	481b      	ldr	r0, [pc, #108]	; (8009060 <hci_user_evt_proc+0x90>)
 8008ff2:	f000 fe88 	bl	8009d06 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008ff6:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <hci_user_evt_proc+0x98>)
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009002:	2301      	movs	r3, #1
 8009004:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009006:	4b18      	ldr	r3, [pc, #96]	; (8009068 <hci_user_evt_proc+0x98>)
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	1d3a      	adds	r2, r7, #4
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009010:	793a      	ldrb	r2, [r7, #4]
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <hci_user_evt_proc+0x94>)
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	e002      	b.n	800901e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009018:	4b12      	ldr	r3, [pc, #72]	; (8009064 <hci_user_evt_proc+0x94>)
 800901a:	2201      	movs	r2, #1
 800901c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <hci_user_evt_proc+0x94>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fc03 	bl	8009834 <TL_MM_EvtDone>
 800902e:	e004      	b.n	800903a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4619      	mov	r1, r3
 8009034:	480a      	ldr	r0, [pc, #40]	; (8009060 <hci_user_evt_proc+0x90>)
 8009036:	f000 fdf9 	bl	8009c2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800903a:	4809      	ldr	r0, [pc, #36]	; (8009060 <hci_user_evt_proc+0x90>)
 800903c:	f000 fdd4 	bl	8009be8 <LST_is_empty>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d107      	bne.n	8009056 <hci_user_evt_proc+0x86>
 8009046:	4b07      	ldr	r3, [pc, #28]	; (8009064 <hci_user_evt_proc+0x94>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800904e:	4804      	ldr	r0, [pc, #16]	; (8009060 <hci_user_evt_proc+0x90>)
 8009050:	f002 f9ac 	bl	800b3ac <hci_notify_asynch_evt>
  }


  return;
 8009054:	bf00      	nop
 8009056:	bf00      	nop
}
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000158 	.word	0x20000158
 8009064:	20000164 	.word	0x20000164
 8009068:	200005f8 	.word	0x200005f8

0800906c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009078:	2000      	movs	r0, #0
 800907a:	f000 f8cb 	bl	8009214 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800907e:	2300      	movs	r3, #0
 8009080:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	b21b      	sxth	r3, r3
 8009088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908c:	b21a      	sxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	029b      	lsls	r3, r3, #10
 8009094:	b21b      	sxth	r3, r3
 8009096:	4313      	orrs	r3, r2
 8009098:	b21b      	sxth	r3, r3
 800909a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	b2d9      	uxtb	r1, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	8bbb      	ldrh	r3, [r7, #28]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f88d 	bl	80091c8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80090ae:	e04e      	b.n	800914e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80090b0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80090b4:	f002 f991 	bl	800b3da <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80090b8:	e043      	b.n	8009142 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80090ba:	f107 030c 	add.w	r3, r7, #12
 80090be:	4619      	mov	r1, r3
 80090c0:	4828      	ldr	r0, [pc, #160]	; (8009164 <hci_send_req+0xf8>)
 80090c2:	f000 fe20 	bl	8009d06 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	7a5b      	ldrb	r3, [r3, #9]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	d114      	bne.n	80090f8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	330b      	adds	r3, #11
 80090d2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	885b      	ldrh	r3, [r3, #2]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8bba      	ldrh	r2, [r7, #28]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d104      	bne.n	80090ea <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	7812      	ldrb	r2, [r2, #0]
 80090e8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d027      	beq.n	8009142 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80090f2:	2301      	movs	r3, #1
 80090f4:	77fb      	strb	r3, [r7, #31]
 80090f6:	e024      	b.n	8009142 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	330b      	adds	r3, #11
 80090fc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009104:	b29b      	uxth	r3, r3
 8009106:	8bba      	ldrh	r2, [r7, #28]
 8009108:	429a      	cmp	r2, r3
 800910a:	d114      	bne.n	8009136 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	7a9b      	ldrb	r3, [r3, #10]
 8009110:	3b03      	subs	r3, #3
 8009112:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695a      	ldr	r2, [r3, #20]
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	429a      	cmp	r2, r3
 800911c:	bfa8      	it	ge
 800911e:	461a      	movge	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6918      	ldr	r0, [r3, #16]
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	1cd9      	adds	r1, r3, #3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	461a      	mov	r2, r3
 8009132:	f003 f9cf 	bl	800c4d4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800913e:	2301      	movs	r3, #1
 8009140:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009142:	4808      	ldr	r0, [pc, #32]	; (8009164 <hci_send_req+0xf8>)
 8009144:	f000 fd50 	bl	8009be8 <LST_is_empty>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0b5      	beq.n	80090ba <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800914e:	7ffb      	ldrb	r3, [r7, #31]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0ad      	beq.n	80090b0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009154:	2001      	movs	r0, #1
 8009156:	f000 f85d 	bl	8009214 <NotifyCmdStatus>

  return 0;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3720      	adds	r7, #32
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000618 	.word	0x20000618

08009168 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009170:	480f      	ldr	r0, [pc, #60]	; (80091b0 <TlInit+0x48>)
 8009172:	f000 fd29 	bl	8009bc8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009176:	4a0f      	ldr	r2, [pc, #60]	; (80091b4 <TlInit+0x4c>)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800917c:	480e      	ldr	r0, [pc, #56]	; (80091b8 <TlInit+0x50>)
 800917e:	f000 fd23 	bl	8009bc8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009182:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <TlInit+0x54>)
 8009184:	2201      	movs	r2, #1
 8009186:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <TlInit+0x58>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <TlInit+0x5c>)
 8009196:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <TlInit+0x58>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f107 0208 	add.w	r2, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
  }

  return;
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
}
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000618 	.word	0x20000618
 80091b4:	20000160 	.word	0x20000160
 80091b8:	20000158 	.word	0x20000158
 80091bc:	20000164 	.word	0x20000164
 80091c0:	200005f8 	.word	0x200005f8
 80091c4:	08009255 	.word	0x08009255

080091c8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	603a      	str	r2, [r7, #0]
 80091d2:	80fb      	strh	r3, [r7, #6]
 80091d4:	460b      	mov	r3, r1
 80091d6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80091d8:	4b0c      	ldr	r3, [pc, #48]	; (800920c <SendCmd+0x44>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80091e2:	4b0a      	ldr	r3, [pc, #40]	; (800920c <SendCmd+0x44>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	797a      	ldrb	r2, [r7, #5]
 80091e8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80091ea:	4b08      	ldr	r3, [pc, #32]	; (800920c <SendCmd+0x44>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	797a      	ldrb	r2, [r7, #5]
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f003 f96d 	bl	800c4d4 <memcpy>

  hciContext.io.Send(0,0);
 80091fa:	4b05      	ldr	r3, [pc, #20]	; (8009210 <SendCmd+0x48>)
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2100      	movs	r1, #0
 8009200:	2000      	movs	r0, #0
 8009202:	4798      	blx	r3

  return;
 8009204:	bf00      	nop
}
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000160 	.word	0x20000160
 8009210:	200005f8 	.word	0x200005f8

08009214 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009224:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <NotifyCmdStatus+0x3c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800922c:	4b08      	ldr	r3, [pc, #32]	; (8009250 <NotifyCmdStatus+0x3c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2000      	movs	r0, #0
 8009232:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009234:	e008      	b.n	8009248 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <NotifyCmdStatus+0x3c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800923e:	4b04      	ldr	r3, [pc, #16]	; (8009250 <NotifyCmdStatus+0x3c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2001      	movs	r0, #1
 8009244:	4798      	blx	r3
  return;
 8009246:	bf00      	nop
 8009248:	bf00      	nop
}
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20000620 	.word	0x20000620

08009254 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7a5b      	ldrb	r3, [r3, #9]
 8009260:	2b0f      	cmp	r3, #15
 8009262:	d003      	beq.n	800926c <TlEvtReceived+0x18>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7a5b      	ldrb	r3, [r3, #9]
 8009268:	2b0e      	cmp	r3, #14
 800926a:	d107      	bne.n	800927c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4809      	ldr	r0, [pc, #36]	; (8009294 <TlEvtReceived+0x40>)
 8009270:	f000 fd02 	bl	8009c78 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009274:	2000      	movs	r0, #0
 8009276:	f002 f8a5 	bl	800b3c4 <hci_cmd_resp_release>
 800927a:	e006      	b.n	800928a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	4806      	ldr	r0, [pc, #24]	; (8009298 <TlEvtReceived+0x44>)
 8009280:	f000 fcfa 	bl	8009c78 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009284:	4804      	ldr	r0, [pc, #16]	; (8009298 <TlEvtReceived+0x44>)
 8009286:	f002 f891 	bl	800b3ac <hci_notify_asynch_evt>
  }

  return;
 800928a:	bf00      	nop
}
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000618 	.word	0x20000618
 8009298:	20000158 	.word	0x20000158

0800929c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a05      	ldr	r2, [pc, #20]	; (80092bc <hci_register_io_bus+0x20>)
 80092a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <hci_register_io_bus+0x24>)
 80092ae:	611a      	str	r2, [r3, #16]

  return;
 80092b0:	bf00      	nop
}
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	080095ad 	.word	0x080095ad
 80092c0:	08009615 	.word	0x08009615

080092c4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <shci_init+0x30>)
 80092d4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80092d6:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <shci_init+0x34>)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80092dc:	4806      	ldr	r0, [pc, #24]	; (80092f8 <shci_init+0x34>)
 80092de:	f000 f911 	bl	8009504 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f894 	bl	8009414 <TlInit>

  return;
 80092ec:	bf00      	nop
}
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000644 	.word	0x20000644
 80092f8:	20000624 	.word	0x20000624

080092fc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009302:	4822      	ldr	r0, [pc, #136]	; (800938c <shci_user_evt_proc+0x90>)
 8009304:	f000 fc70 	bl	8009be8 <LST_is_empty>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d12b      	bne.n	8009366 <shci_user_evt_proc+0x6a>
 800930e:	4b20      	ldr	r3, [pc, #128]	; (8009390 <shci_user_evt_proc+0x94>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d027      	beq.n	8009366 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	4619      	mov	r1, r3
 800931c:	481b      	ldr	r0, [pc, #108]	; (800938c <shci_user_evt_proc+0x90>)
 800931e:	f000 fcf2 	bl	8009d06 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <shci_user_evt_proc+0x98>)
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00c      	beq.n	8009344 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800932e:	2301      	movs	r3, #1
 8009330:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009332:	4b18      	ldr	r3, [pc, #96]	; (8009394 <shci_user_evt_proc+0x98>)
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	1d3a      	adds	r2, r7, #4
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800933c:	793a      	ldrb	r2, [r7, #4]
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <shci_user_evt_proc+0x94>)
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e002      	b.n	800934a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009344:	4b12      	ldr	r3, [pc, #72]	; (8009390 <shci_user_evt_proc+0x94>)
 8009346:	2201      	movs	r2, #1
 8009348:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800934a:	4b11      	ldr	r3, [pc, #68]	; (8009390 <shci_user_evt_proc+0x94>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fa6d 	bl	8009834 <TL_MM_EvtDone>
 800935a:	e004      	b.n	8009366 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4619      	mov	r1, r3
 8009360:	480a      	ldr	r0, [pc, #40]	; (800938c <shci_user_evt_proc+0x90>)
 8009362:	f000 fc63 	bl	8009c2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009366:	4809      	ldr	r0, [pc, #36]	; (800938c <shci_user_evt_proc+0x90>)
 8009368:	f000 fc3e 	bl	8009be8 <LST_is_empty>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d107      	bne.n	8009382 <shci_user_evt_proc+0x86>
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <shci_user_evt_proc+0x94>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800937a:	4804      	ldr	r0, [pc, #16]	; (800938c <shci_user_evt_proc+0x90>)
 800937c:	f7f8 f92e 	bl	80015dc <shci_notify_asynch_evt>
  }


  return;
 8009380:	bf00      	nop
 8009382:	bf00      	nop
}
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000170 	.word	0x20000170
 8009390:	20000180 	.word	0x20000180
 8009394:	20000624 	.word	0x20000624

08009398 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60ba      	str	r2, [r7, #8]
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	4603      	mov	r3, r0
 80093a4:	81fb      	strh	r3, [r7, #14]
 80093a6:	460b      	mov	r3, r1
 80093a8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80093aa:	2000      	movs	r0, #0
 80093ac:	f000 f864 	bl	8009478 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80093b0:	4b16      	ldr	r3, [pc, #88]	; (800940c <shci_send+0x74>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	89fa      	ldrh	r2, [r7, #14]
 80093b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <shci_send+0x74>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	7b7a      	ldrb	r2, [r7, #13]
 80093c0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80093c2:	4b12      	ldr	r3, [pc, #72]	; (800940c <shci_send+0x74>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	330c      	adds	r3, #12
 80093c8:	7b7a      	ldrb	r2, [r7, #13]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f003 f881 	bl	800c4d4 <memcpy>

  shciContext.io.Send(0,0);
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <shci_send+0x78>)
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2100      	movs	r1, #0
 80093d8:	2000      	movs	r0, #0
 80093da:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80093dc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80093e0:	f7f8 f913 	bl	800160a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0008 	add.w	r0, r3, #8
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <shci_send+0x74>)
 80093ec:	6819      	ldr	r1, [r3, #0]
 80093ee:	4b07      	ldr	r3, [pc, #28]	; (800940c <shci_send+0x74>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	789b      	ldrb	r3, [r3, #2]
 80093f4:	3303      	adds	r3, #3
 80093f6:	461a      	mov	r2, r3
 80093f8:	f003 f86c 	bl	800c4d4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80093fc:	2001      	movs	r0, #1
 80093fe:	f000 f83b 	bl	8009478 <Cmd_SetStatus>

  return;
 8009402:	bf00      	nop
}
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	2000017c 	.word	0x2000017c
 8009410:	20000624 	.word	0x20000624

08009414 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800941c:	4a10      	ldr	r2, [pc, #64]	; (8009460 <TlInit+0x4c>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009422:	4810      	ldr	r0, [pc, #64]	; (8009464 <TlInit+0x50>)
 8009424:	f000 fbd0 	bl	8009bc8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009428:	2001      	movs	r0, #1
 800942a:	f000 f825 	bl	8009478 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800942e:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <TlInit+0x54>)
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009434:	4b0d      	ldr	r3, [pc, #52]	; (800946c <TlInit+0x58>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00c      	beq.n	8009456 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009440:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <TlInit+0x5c>)
 8009442:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009444:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <TlInit+0x60>)
 8009446:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009448:	4b08      	ldr	r3, [pc, #32]	; (800946c <TlInit+0x58>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f107 020c 	add.w	r2, r7, #12
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
  }

  return;
 8009454:	bf00      	nop
 8009456:	bf00      	nop
}
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000017c 	.word	0x2000017c
 8009464:	20000170 	.word	0x20000170
 8009468:	20000180 	.word	0x20000180
 800946c:	20000624 	.word	0x20000624
 8009470:	080094c9 	.word	0x080094c9
 8009474:	080094e1 	.word	0x080094e1

08009478 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <Cmd_SetStatus+0x48>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <Cmd_SetStatus+0x48>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2000      	movs	r0, #0
 8009496:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <Cmd_SetStatus+0x4c>)
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800949e:	e00b      	b.n	80094b8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80094a0:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <Cmd_SetStatus+0x4c>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80094a6:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <Cmd_SetStatus+0x48>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80094ae:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <Cmd_SetStatus+0x48>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2001      	movs	r0, #1
 80094b4:	4798      	blx	r3
  return;
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
}
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000644 	.word	0x20000644
 80094c4:	20000178 	.word	0x20000178

080094c8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7f8 f88f 	bl	80015f4 <shci_cmd_resp_release>

  return;
 80094d6:	bf00      	nop
}
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4805      	ldr	r0, [pc, #20]	; (8009500 <TlUserEvtReceived+0x20>)
 80094ec:	f000 fbc4 	bl	8009c78 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80094f0:	4803      	ldr	r0, [pc, #12]	; (8009500 <TlUserEvtReceived+0x20>)
 80094f2:	f7f8 f873 	bl	80015dc <shci_notify_asynch_evt>

  return;
 80094f6:	bf00      	nop
}
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000170 	.word	0x20000170

08009504 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a05      	ldr	r2, [pc, #20]	; (8009524 <shci_register_io_bus+0x20>)
 8009510:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a04      	ldr	r2, [pc, #16]	; (8009528 <shci_register_io_bus+0x24>)
 8009516:	611a      	str	r2, [r3, #16]

  return;
 8009518:	bf00      	nop
}
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	080096c1 	.word	0x080096c1
 8009528:	08009715 	.word	0x08009715

0800952c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009530:	f002 fc54 	bl	800bddc <HW_IPCC_Enable>

  return;
 8009534:	bf00      	nop
}
 8009536:	bd80      	pop	{r7, pc}

08009538 <TL_Init>:


void TL_Init( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800953c:	4b10      	ldr	r3, [pc, #64]	; (8009580 <TL_Init+0x48>)
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <TL_Init+0x4c>)
 8009540:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <TL_Init+0x48>)
 8009544:	4a10      	ldr	r2, [pc, #64]	; (8009588 <TL_Init+0x50>)
 8009546:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <TL_Init+0x48>)
 800954a:	4a10      	ldr	r2, [pc, #64]	; (800958c <TL_Init+0x54>)
 800954c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <TL_Init+0x48>)
 8009550:	4a0f      	ldr	r2, [pc, #60]	; (8009590 <TL_Init+0x58>)
 8009552:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <TL_Init+0x48>)
 8009556:	4a0f      	ldr	r2, [pc, #60]	; (8009594 <TL_Init+0x5c>)
 8009558:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800955a:	4b09      	ldr	r3, [pc, #36]	; (8009580 <TL_Init+0x48>)
 800955c:	4a0e      	ldr	r2, [pc, #56]	; (8009598 <TL_Init+0x60>)
 800955e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <TL_Init+0x48>)
 8009562:	4a0e      	ldr	r2, [pc, #56]	; (800959c <TL_Init+0x64>)
 8009564:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <TL_Init+0x48>)
 8009568:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <TL_Init+0x68>)
 800956a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <TL_Init+0x48>)
 800956e:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <TL_Init+0x6c>)
 8009570:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <TL_Init+0x48>)
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <TL_Init+0x70>)
 8009576:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009578:	f002 fc44 	bl	800be04 <HW_IPCC_Init>

  return;
 800957c:	bf00      	nop
}
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20030000 	.word	0x20030000
 8009584:	20030028 	.word	0x20030028
 8009588:	20030048 	.word	0x20030048
 800958c:	20030058 	.word	0x20030058
 8009590:	20030068 	.word	0x20030068
 8009594:	20030070 	.word	0x20030070
 8009598:	20030078 	.word	0x20030078
 800959c:	20030080 	.word	0x20030080
 80095a0:	2003009c 	.word	0x2003009c
 80095a4:	200300a0 	.word	0x200300a0
 80095a8:	200300ac 	.word	0x200300ac

080095ac <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80095b8:	4811      	ldr	r0, [pc, #68]	; (8009600 <TL_BLE_Init+0x54>)
 80095ba:	f000 fb05 	bl	8009bc8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <TL_BLE_Init+0x58>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	4a0c      	ldr	r2, [pc, #48]	; (8009608 <TL_BLE_Init+0x5c>)
 80095d8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a08      	ldr	r2, [pc, #32]	; (8009600 <TL_BLE_Init+0x54>)
 80095de:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80095e0:	f002 fc26 	bl	800be30 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a08      	ldr	r2, [pc, #32]	; (800960c <TL_BLE_Init+0x60>)
 80095ea:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	4a07      	ldr	r2, [pc, #28]	; (8009610 <TL_BLE_Init+0x64>)
 80095f2:	6013      	str	r3, [r2, #0]

  return 0;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	200300c8 	.word	0x200300c8
 8009604:	20030000 	.word	0x20030000
 8009608:	20030a58 	.word	0x20030a58
 800960c:	20000650 	.word	0x20000650
 8009610:	20000654 	.word	0x20000654

08009614 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <TL_BLE_SendCmd+0x34>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2201      	movs	r2, #1
 8009628:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <TL_BLE_SendCmd+0x34>)
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	2001      	movs	r0, #1
 8009634:	f000 f96c 	bl	8009910 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009638:	f002 fc04 	bl	800be44 <HW_IPCC_BLE_SendCmd>

  return 0;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20030000 	.word	0x20030000

0800964c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009652:	e01c      	b.n	800968e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009654:	1d3b      	adds	r3, r7, #4
 8009656:	4619      	mov	r1, r3
 8009658:	4812      	ldr	r0, [pc, #72]	; (80096a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800965a:	f000 fb54 	bl	8009d06 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	7a5b      	ldrb	r3, [r3, #9]
 8009662:	2b0f      	cmp	r3, #15
 8009664:	d003      	beq.n	800966e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	7a5b      	ldrb	r3, [r3, #9]
 800966a:	2b0e      	cmp	r3, #14
 800966c:	d105      	bne.n	800967a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	2002      	movs	r0, #2
 8009674:	f000 f94c 	bl	8009910 <OutputDbgTrace>
 8009678:	e004      	b.n	8009684 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4619      	mov	r1, r3
 800967e:	2003      	movs	r0, #3
 8009680:	f000 f946 	bl	8009910 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009684:	4b08      	ldr	r3, [pc, #32]	; (80096a8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4610      	mov	r0, r2
 800968c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800968e:	4805      	ldr	r0, [pc, #20]	; (80096a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009690:	f000 faaa 	bl	8009be8 <LST_is_empty>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0dc      	beq.n	8009654 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800969a:	bf00      	nop
}
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	200300c8 	.word	0x200300c8
 80096a8:	20000650 	.word	0x20000650

080096ac <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4798      	blx	r3

  return;
 80096b6:	bf00      	nop
}
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000654 	.word	0x20000654

080096c0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80096cc:	480d      	ldr	r0, [pc, #52]	; (8009704 <TL_SYS_Init+0x44>)
 80096ce:	f000 fa7b 	bl	8009bc8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <TL_SYS_Init+0x48>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4a08      	ldr	r2, [pc, #32]	; (8009704 <TL_SYS_Init+0x44>)
 80096e4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80096e6:	f002 fbcf 	bl	800be88 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a07      	ldr	r2, [pc, #28]	; (800970c <TL_SYS_Init+0x4c>)
 80096f0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4a06      	ldr	r2, [pc, #24]	; (8009710 <TL_SYS_Init+0x50>)
 80096f8:	6013      	str	r3, [r2, #0]

  return 0;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	200300d0 	.word	0x200300d0
 8009708:	20030000 	.word	0x20030000
 800970c:	20000658 	.word	0x20000658
 8009710:	2000065c 	.word	0x2000065c

08009714 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009720:	4b09      	ldr	r3, [pc, #36]	; (8009748 <TL_SYS_SendCmd+0x34>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2210      	movs	r2, #16
 8009728:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800972a:	4b07      	ldr	r3, [pc, #28]	; (8009748 <TL_SYS_SendCmd+0x34>)
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4619      	mov	r1, r3
 8009732:	2004      	movs	r0, #4
 8009734:	f000 f8ec 	bl	8009910 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009738:	f002 fbb0 	bl	800be9c <HW_IPCC_SYS_SendCmd>

  return 0;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20030000 	.word	0x20030000

0800974c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	2005      	movs	r0, #5
 800975a:	f000 f8d9 	bl	8009910 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a03      	ldr	r2, [pc, #12]	; (8009770 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009764:	68d2      	ldr	r2, [r2, #12]
 8009766:	6812      	ldr	r2, [r2, #0]
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3

  return;
 800976c:	bf00      	nop
}
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20030000 	.word	0x20030000
 8009774:	20000658 	.word	0x20000658

08009778 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800977e:	e00e      	b.n	800979e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009780:	1d3b      	adds	r3, r7, #4
 8009782:	4619      	mov	r1, r3
 8009784:	480b      	ldr	r0, [pc, #44]	; (80097b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009786:	f000 fabe 	bl	8009d06 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4619      	mov	r1, r3
 800978e:	2006      	movs	r0, #6
 8009790:	f000 f8be 	bl	8009910 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009794:	4b08      	ldr	r3, [pc, #32]	; (80097b8 <HW_IPCC_SYS_EvtNot+0x40>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4610      	mov	r0, r2
 800979c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80097a0:	f000 fa22 	bl	8009be8 <LST_is_empty>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0ea      	beq.n	8009780 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80097aa:	bf00      	nop
}
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	200300d0 	.word	0x200300d0
 80097b8:	2000065c 	.word	0x2000065c

080097bc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80097c4:	4817      	ldr	r0, [pc, #92]	; (8009824 <TL_MM_Init+0x68>)
 80097c6:	f000 f9ff 	bl	8009bc8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80097ca:	4817      	ldr	r0, [pc, #92]	; (8009828 <TL_MM_Init+0x6c>)
 80097cc:	f000 f9fc 	bl	8009bc8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80097d0:	4b16      	ldr	r3, [pc, #88]	; (800982c <TL_MM_Init+0x70>)
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	4a16      	ldr	r2, [pc, #88]	; (8009830 <TL_MM_Init+0x74>)
 80097d6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80097d8:	4b15      	ldr	r3, [pc, #84]	; (8009830 <TL_MM_Init+0x74>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	6892      	ldr	r2, [r2, #8]
 80097e0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80097e2:	4b13      	ldr	r3, [pc, #76]	; (8009830 <TL_MM_Init+0x74>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	68d2      	ldr	r2, [r2, #12]
 80097ea:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80097ec:	4b10      	ldr	r3, [pc, #64]	; (8009830 <TL_MM_Init+0x74>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0c      	ldr	r2, [pc, #48]	; (8009824 <TL_MM_Init+0x68>)
 80097f2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80097f4:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <TL_MM_Init+0x74>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80097fe:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <TL_MM_Init+0x74>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	6852      	ldr	r2, [r2, #4]
 8009806:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009808:	4b09      	ldr	r3, [pc, #36]	; (8009830 <TL_MM_Init+0x74>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6912      	ldr	r2, [r2, #16]
 8009810:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009812:	4b07      	ldr	r3, [pc, #28]	; (8009830 <TL_MM_Init+0x74>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	6952      	ldr	r2, [r2, #20]
 800981a:	619a      	str	r2, [r3, #24]

  return;
 800981c:	bf00      	nop
}
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	200300b8 	.word	0x200300b8
 8009828:	20000648 	.word	0x20000648
 800982c:	20030000 	.word	0x20030000
 8009830:	20000660 	.word	0x20000660

08009834 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4807      	ldr	r0, [pc, #28]	; (800985c <TL_MM_EvtDone+0x28>)
 8009840:	f000 fa1a 	bl	8009c78 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	2000      	movs	r0, #0
 8009848:	f000 f862 	bl	8009910 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800984c:	4804      	ldr	r0, [pc, #16]	; (8009860 <TL_MM_EvtDone+0x2c>)
 800984e:	f002 fb4b 	bl	800bee8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009852:	bf00      	nop
}
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000648 	.word	0x20000648
 8009860:	08009865 	.word	0x08009865

08009864 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800986a:	e00c      	b.n	8009886 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800986c:	1d3b      	adds	r3, r7, #4
 800986e:	4619      	mov	r1, r3
 8009870:	480a      	ldr	r0, [pc, #40]	; (800989c <SendFreeBuf+0x38>)
 8009872:	f000 fa48 	bl	8009d06 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009876:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <SendFreeBuf+0x3c>)
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f9f9 	bl	8009c78 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009886:	4805      	ldr	r0, [pc, #20]	; (800989c <SendFreeBuf+0x38>)
 8009888:	f000 f9ae 	bl	8009be8 <LST_is_empty>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0ec      	beq.n	800986c <SendFreeBuf+0x8>
  }

  return;
 8009892:	bf00      	nop
}
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000648 	.word	0x20000648
 80098a0:	20030000 	.word	0x20030000

080098a4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <TL_TRACES_Init+0x1c>)
 80098aa:	f000 f98d 	bl	8009bc8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <TL_TRACES_Init+0x20>)
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	4a03      	ldr	r2, [pc, #12]	; (80098c0 <TL_TRACES_Init+0x1c>)
 80098b4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80098b6:	f002 fb4d 	bl	800bf54 <HW_IPCC_TRACES_Init>

  return;
 80098ba:	bf00      	nop
}
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	200300c0 	.word	0x200300c0
 80098c4:	20030000 	.word	0x20030000

080098c8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80098ce:	e008      	b.n	80098e2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80098d0:	1d3b      	adds	r3, r7, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	4808      	ldr	r0, [pc, #32]	; (80098f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80098d6:	f000 fa16 	bl	8009d06 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f80d 	bl	80098fc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80098e2:	4805      	ldr	r0, [pc, #20]	; (80098f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80098e4:	f000 f980 	bl	8009be8 <LST_is_empty>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f0      	beq.n	80098d0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80098ee:	bf00      	nop
}
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	200300c0 	.word	0x200300c0

080098fc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	2b06      	cmp	r3, #6
 8009920:	d845      	bhi.n	80099ae <OutputDbgTrace+0x9e>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <OutputDbgTrace+0x18>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009945 	.word	0x08009945
 800992c:	08009969 	.word	0x08009969
 8009930:	0800996f 	.word	0x0800996f
 8009934:	08009983 	.word	0x08009983
 8009938:	0800998f 	.word	0x0800998f
 800993c:	08009995 	.word	0x08009995
 8009940:	080099a3 	.word	0x080099a3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	7a5b      	ldrb	r3, [r3, #9]
 800994c:	2bff      	cmp	r3, #255	; 0xff
 800994e:	d005      	beq.n	800995c <OutputDbgTrace+0x4c>
 8009950:	2bff      	cmp	r3, #255	; 0xff
 8009952:	dc05      	bgt.n	8009960 <OutputDbgTrace+0x50>
 8009954:	2b0e      	cmp	r3, #14
 8009956:	d005      	beq.n	8009964 <OutputDbgTrace+0x54>
 8009958:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800995a:	e001      	b.n	8009960 <OutputDbgTrace+0x50>
          break;
 800995c:	bf00      	nop
 800995e:	e027      	b.n	80099b0 <OutputDbgTrace+0xa0>
          break;
 8009960:	bf00      	nop
 8009962:	e025      	b.n	80099b0 <OutputDbgTrace+0xa0>
          break;
 8009964:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009966:	e023      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800996c:	e020      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	7a5b      	ldrb	r3, [r3, #9]
 8009976:	2b0e      	cmp	r3, #14
 8009978:	d001      	beq.n	800997e <OutputDbgTrace+0x6e>
 800997a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800997c:	e000      	b.n	8009980 <OutputDbgTrace+0x70>
          break;
 800997e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009980:	e016      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	7a5b      	ldrb	r3, [r3, #9]
 800998a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800998c:	e010      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009992:	e00d      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	7a5b      	ldrb	r3, [r3, #9]
 800999c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800999e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80099a0:	e006      	b.n	80099b0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	7a5b      	ldrb	r3, [r3, #9]
 80099aa:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80099ac:	e000      	b.n	80099b0 <OutputDbgTrace+0xa0>

    default:
      break;
 80099ae:	bf00      	nop
  }

  return;
 80099b0:	bf00      	nop
}
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80099c8:	215c      	movs	r1, #92	; 0x5c
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f002 fe3c 	bl	800c648 <strrchr>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80099d6:	215c      	movs	r1, #92	; 0x5c
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f002 fe35 	bl	800c648 <strrchr>
 80099de:	4603      	mov	r3, r0
 80099e0:	3301      	adds	r3, #1
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e00d      	b.n	8009a02 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80099e6:	212f      	movs	r1, #47	; 0x2f
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f002 fe2d 	bl	800c648 <strrchr>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80099f4:	212f      	movs	r1, #47	; 0x2f
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f002 fe26 	bl	800c648 <strrchr>
 80099fc:	4603      	mov	r3, r0
 80099fe:	3301      	adds	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009a02:	68fb      	ldr	r3, [r7, #12]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a12:	f3ef 8310 	mrs	r3, PRIMASK
 8009a16:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a18:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a1c:	b672      	cpsid	i
}
 8009a1e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009a20:	1cbb      	adds	r3, r7, #2
 8009a22:	4619      	mov	r1, r3
 8009a24:	4812      	ldr	r0, [pc, #72]	; (8009a70 <DbgTrace_TxCpltCallback+0x64>)
 8009a26:	f000 fbe6 	bl	800a1f6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009a2a:	1cbb      	adds	r3, r7, #2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4810      	ldr	r0, [pc, #64]	; (8009a70 <DbgTrace_TxCpltCallback+0x64>)
 8009a30:	f000 fcd2 	bl	800a3d8 <CircularQueue_Sense>
 8009a34:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00c      	beq.n	8009a56 <DbgTrace_TxCpltCallback+0x4a>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f383 8810 	msr	PRIMASK, r3
}
 8009a46:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	4a0a      	ldr	r2, [pc, #40]	; (8009a74 <DbgTrace_TxCpltCallback+0x68>)
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6938      	ldr	r0, [r7, #16]
 8009a50:	f7f7 f97f 	bl	8000d52 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009a54:	e008      	b.n	8009a68 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <DbgTrace_TxCpltCallback+0x6c>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f383 8810 	msr	PRIMASK, r3
}
 8009a66:	bf00      	nop
}
 8009a68:	bf00      	nop
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	20000664 	.word	0x20000664
 8009a74:	08009a0d 	.word	0x08009a0d
 8009a78:	2000000d 	.word	0x2000000d

08009a7c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009a82:	f7f7 f960 	bl	8000d46 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009a86:	2302      	movs	r3, #2
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a90:	4903      	ldr	r1, [pc, #12]	; (8009aa0 <DbgTraceInit+0x24>)
 8009a92:	4804      	ldr	r0, [pc, #16]	; (8009aa4 <DbgTraceInit+0x28>)
 8009a94:	f000 f956 	bl	8009d44 <CircularQueue_Init>
#endif 
#endif
  return;
 8009a98:	bf00      	nop
}
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000684 	.word	0x20000684
 8009aa4:	20000664 	.word	0x20000664

08009aa8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f805 	bl	8009ac8 <DbgTraceWrite>
 8009abe:	4603      	mov	r3, r0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8009adc:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ade:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009ae0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae8:	d102      	bne.n	8009af0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
 8009aee:	e037      	b.n	8009b60 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d006      	beq.n	8009b04 <DbgTraceWrite+0x3c>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d003      	beq.n	8009b04 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009afc:	f04f 33ff 	mov.w	r3, #4294967295
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
 8009b02:	e02d      	b.n	8009b60 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d02a      	beq.n	8009b60 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009b0e:	b672      	cpsid	i
}
 8009b10:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	2301      	movs	r3, #1
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	4814      	ldr	r0, [pc, #80]	; (8009b6c <DbgTraceWrite+0xa4>)
 8009b1c:	f000 f944 	bl	8009da8 <CircularQueue_Add>
 8009b20:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d015      	beq.n	8009b54 <DbgTraceWrite+0x8c>
 8009b28:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <DbgTraceWrite+0xa8>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d010      	beq.n	8009b54 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009b32:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <DbgTraceWrite+0xa8>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f383 8810 	msr	PRIMASK, r3
}
 8009b42:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	4a0a      	ldr	r2, [pc, #40]	; (8009b74 <DbgTraceWrite+0xac>)
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	69f8      	ldr	r0, [r7, #28]
 8009b4e:	f7f7 f900 	bl	8000d52 <DbgOutputTraces>
 8009b52:	e005      	b.n	8009b60 <DbgTraceWrite+0x98>
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f383 8810 	msr	PRIMASK, r3
}
 8009b5e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3728      	adds	r7, #40	; 0x28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000664 	.word	0x20000664
 8009b70:	2000000d 	.word	0x2000000d
 8009b74:	08009a0d 	.word	0x08009a0d

08009b78 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <OTP_Read+0x48>)
 8009b84:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b86:	e002      	b.n	8009b8e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3b08      	subs	r3, #8
 8009b8c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d003      	beq.n	8009ba2 <OTP_Read+0x2a>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <OTP_Read+0x4c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d1f2      	bne.n	8009b88 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3307      	adds	r3, #7
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	79fa      	ldrb	r2, [r7, #7]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d001      	beq.n	8009bb2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	1fff73f8 	.word	0x1fff73f8
 8009bc4:	1fff7000 	.word	0x1fff7000

08009bc8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	605a      	str	r2, [r3, #4]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8009bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bfa:	b672      	cpsid	i
}
 8009bfc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d102      	bne.n	8009c0e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
 8009c0c:	e001      	b.n	8009c12 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f383 8810 	msr	PRIMASK, r3
}
 8009c1c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c36:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c40:	b672      	cpsid	i
}
 8009c42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	605a      	str	r2, [r3, #4]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009c6c:	bf00      	nop
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c88:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c8c:	b672      	cpsid	i
}
 8009c8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f383 8810 	msr	PRIMASK, r3
}
 8009cb6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8009cd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009cd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cd6:	b672      	cpsid	i
}
 8009cd8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6852      	ldr	r2, [r2, #4]
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f383 8810 	msr	PRIMASK, r3
}
 8009cf8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009cfa:	bf00      	nop
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b086      	sub	sp, #24
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d10:	f3ef 8310 	mrs	r3, PRIMASK
 8009d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d1a:	b672      	cpsid	i
}
 8009d1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff ffca 	bl	8009cc4 <LST_remove_node>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f383 8810 	msr	PRIMASK, r3
}
 8009d3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d3c:	bf00      	nop
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	887a      	ldrh	r2, [r7, #2]
 8009d7a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	7e3a      	ldrb	r2, [r7, #24]
 8009d80:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009d82:	7e3b      	ldrb	r3, [r7, #24]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d006      	beq.n	8009d9a <CircularQueue_Init+0x56>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	891b      	ldrh	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009d94:	f04f 33ff 	mov.w	r3, #4294967295
 8009d98:	e000      	b.n	8009d9c <CircularQueue_Init+0x58>
  }
  return 0;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08e      	sub	sp, #56	; 0x38
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	4613      	mov	r3, r2
 8009db6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009db8:	2300      	movs	r3, #0
 8009dba:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dc8:	2300      	movs	r3, #0
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009dcc:	2300      	movs	r3, #0
 8009dce:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	891b      	ldrh	r3, [r3, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <CircularQueue_Add+0x38>
 8009ddc:	2302      	movs	r3, #2
 8009dde:	e000      	b.n	8009de2 <CircularQueue_Add+0x3a>
 8009de0:	2300      	movs	r3, #0
 8009de2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d02a      	beq.n	8009e42 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	891b      	ldrh	r3, [r3, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d123      	bne.n	8009e3c <CircularQueue_Add+0x94>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	1c58      	adds	r0, r3, #1
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4298      	cmp	r0, r3
 8009e12:	d306      	bcc.n	8009e22 <CircularQueue_Add+0x7a>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6918      	ldr	r0, [r3, #16]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	1ac3      	subs	r3, r0, r3
 8009e1e:	3301      	adds	r3, #1
 8009e20:	e002      	b.n	8009e28 <CircularQueue_Add+0x80>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	3301      	adds	r3, #1
 8009e28:	440b      	add	r3, r1
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3302      	adds	r3, #2
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	e001      	b.n	8009e40 <CircularQueue_Add+0x98>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	891b      	ldrh	r3, [r3, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	891b      	ldrh	r3, [r3, #8]
 8009e4e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d307      	bcc.n	8009e6c <CircularQueue_Add+0xc4>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6919      	ldr	r1, [r3, #16]
 8009e64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e66:	440b      	add	r3, r1
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	e000      	b.n	8009e6e <CircularQueue_Add+0xc6>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009e70:	88fa      	ldrh	r2, [r7, #6]
 8009e72:	7ffb      	ldrb	r3, [r7, #31]
 8009e74:	4413      	add	r3, r2
 8009e76:	461a      	mov	r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d80b      	bhi.n	8009e9c <CircularQueue_Add+0xf4>
 8009e84:	88fa      	ldrh	r2, [r7, #6]
 8009e86:	7ffb      	ldrb	r3, [r7, #31]
 8009e88:	4413      	add	r3, r2
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e92:	fb01 f202 	mul.w	r2, r1, r2
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	e000      	b.n	8009e9e <CircularQueue_Add+0xf6>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009ea0:	7dfa      	ldrb	r2, [r7, #23]
 8009ea2:	7ffb      	ldrb	r3, [r7, #31]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bf8c      	ite	hi
 8009ea8:	2301      	movhi	r3, #1
 8009eaa:	2300      	movls	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009eb0:	7fbb      	ldrb	r3, [r7, #30]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d008      	beq.n	8009ec8 <CircularQueue_Add+0x120>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	7f1b      	ldrb	r3, [r3, #28]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <CircularQueue_Add+0x120>
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	e000      	b.n	8009eca <CircularQueue_Add+0x122>
 8009ec8:	8bbb      	ldrh	r3, [r7, #28]
 8009eca:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009ecc:	7fbb      	ldrb	r3, [r7, #30]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d008      	beq.n	8009ee4 <CircularQueue_Add+0x13c>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	7f1b      	ldrb	r3, [r3, #28]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <CircularQueue_Add+0x13c>
 8009ede:	7ffb      	ldrb	r3, [r7, #31]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	e000      	b.n	8009ee6 <CircularQueue_Add+0x13e>
 8009ee4:	8bbb      	ldrh	r3, [r7, #28]
 8009ee6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 817e 	beq.w	800a1ec <CircularQueue_Add+0x444>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	695a      	ldr	r2, [r3, #20]
 8009ef4:	88f9      	ldrh	r1, [r7, #6]
 8009ef6:	7ffb      	ldrb	r3, [r7, #31]
 8009ef8:	440b      	add	r3, r1
 8009efa:	4619      	mov	r1, r3
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	441a      	add	r2, r3
 8009f04:	8bbb      	ldrh	r3, [r7, #28]
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f200 816d 	bhi.w	800a1ec <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009f12:	2300      	movs	r3, #0
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f16:	e14a      	b.n	800a1ae <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f1e:	441a      	add	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d307      	bcc.n	8009f38 <CircularQueue_Add+0x190>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	691a      	ldr	r2, [r3, #16]
 8009f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f2e:	441a      	add	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	e003      	b.n	8009f40 <CircularQueue_Add+0x198>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f3e:	4413      	add	r3, r2
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	891b      	ldrh	r3, [r3, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d130      	bne.n	8009fb4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	1c59      	adds	r1, r3, #1
 8009f5a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f5c:	4413      	add	r3, r2
 8009f5e:	88fa      	ldrh	r2, [r7, #6]
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d304      	bcc.n	8009f78 <CircularQueue_Add+0x1d0>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	e000      	b.n	8009f7a <CircularQueue_Add+0x1d2>
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009f7c:	88fb      	ldrh	r3, [r7, #6]
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	b298      	uxth	r0, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	1c59      	adds	r1, r3, #1
 8009f8a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f8c:	4413      	add	r3, r2
 8009f8e:	b2c2      	uxtb	r2, r0
 8009f90:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d304      	bcc.n	8009fa6 <CircularQueue_Add+0x1fe>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	e000      	b.n	8009fa8 <CircularQueue_Add+0x200>
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	1c9a      	adds	r2, r3, #2
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6859      	ldr	r1, [r3, #4]
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	1acb      	subs	r3, r1, r3
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	bf28      	it	cs
 8009fc2:	4613      	movcs	r3, r2
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d007      	beq.n	8009fde <CircularQueue_Add+0x236>
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d225      	bcs.n	800a022 <CircularQueue_Add+0x27a>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	7f1b      	ldrb	r3, [r3, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d121      	bne.n	800a022 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	18d0      	adds	r0, r2, r3
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fea:	fb02 f303 	mul.w	r3, r2, r3
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f002 fa6d 	bl	800c4d4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a006:	2300      	movs	r3, #0
 800a008:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a00e:	88fa      	ldrh	r2, [r7, #6]
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a016:	7ffb      	ldrb	r3, [r7, #31]
 800a018:	b29a      	uxth	r2, r3
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	4413      	add	r3, r2
 800a01e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a020:	e0a4      	b.n	800a16c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80a1 	beq.w	800a16c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7f1b      	ldrb	r3, [r3, #28]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03a      	beq.n	800a0ac <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	891b      	ldrh	r3, [r3, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10d      	bne.n	800a05a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	3b02      	subs	r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	22ff      	movs	r2, #255	; 0xff
 800a04a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	3b01      	subs	r3, #1
 800a054:	4413      	add	r3, r2
 800a056:	22ff      	movs	r2, #255	; 0xff
 800a058:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	441a      	add	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a06e:	2300      	movs	r3, #0
 800a070:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	891b      	ldrh	r3, [r3, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d16f      	bne.n	800a15a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	1c59      	adds	r1, r3, #1
 800a082:	6339      	str	r1, [r7, #48]	; 0x30
 800a084:	4413      	add	r3, r2
 800a086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	0a18      	lsrs	r0, r3, #8
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	1c59      	adds	r1, r3, #1
 800a098:	6339      	str	r1, [r7, #48]	; 0x30
 800a09a:	4413      	add	r3, r2
 800a09c:	b2c2      	uxtb	r2, r0
 800a09e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	1c9a      	adds	r2, r3, #2
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	615a      	str	r2, [r3, #20]
 800a0aa:	e056      	b.n	800a15a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	7f1b      	ldrb	r3, [r3, #28]
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d050      	beq.n	800a15a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	891b      	ldrh	r3, [r3, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d14a      	bne.n	800a156 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	3b02      	subs	r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0cc:	b2d2      	uxtb	r2, r2
 800a0ce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	0a19      	lsrs	r1, r3, #8
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	b2ca      	uxtb	r2, r1
 800a0e0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e8:	18d0      	adds	r0, r2, r3
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f002 f9eb 	bl	800c4d4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a10e:	88fa      	ldrh	r2, [r7, #6]
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a120:	2300      	movs	r3, #0
 800a122:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	1c59      	adds	r1, r3, #1
 800a12c:	6339      	str	r1, [r7, #48]	; 0x30
 800a12e:	4413      	add	r3, r2
 800a130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	0a18      	lsrs	r0, r3, #8
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	1c59      	adds	r1, r3, #1
 800a142:	6339      	str	r1, [r7, #48]	; 0x30
 800a144:	4413      	add	r3, r2
 800a146:	b2c2      	uxtb	r2, r0
 800a148:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	1c9a      	adds	r2, r3, #2
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	615a      	str	r2, [r3, #20]
 800a154:	e001      	b.n	800a15a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	e049      	b.n	800a1ee <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	b29b      	uxth	r3, r3
 800a162:	4413      	add	r3, r2
 800a164:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d015      	beq.n	800a19e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	18d0      	adds	r0, r2, r3
 800a17a:	88fb      	ldrh	r3, [r7, #6]
 800a17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a17e:	fb03 f202 	mul.w	r2, r3, r2
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	4413      	add	r3, r2
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a18c:	4619      	mov	r1, r3
 800a18e:	f002 f9a1 	bl	800c4d4 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	695a      	ldr	r2, [r3, #20]
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	441a      	add	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	f4ff aeb0 	bcc.w	8009f18 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6919      	ldr	r1, [r3, #16]
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
 800a1c2:	4419      	add	r1, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	d307      	bcc.n	800a1dc <CircularQueue_Add+0x434>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6919      	ldr	r1, [r3, #16]
 800a1d0:	7ffb      	ldrb	r3, [r7, #31]
 800a1d2:	4419      	add	r1, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	1acb      	subs	r3, r1, r3
 800a1da:	e003      	b.n	800a1e4 <CircularQueue_Add+0x43c>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6919      	ldr	r1, [r3, #16]
 800a1e0:	7ffb      	ldrb	r3, [r7, #31]
 800a1e2:	440b      	add	r3, r1
 800a1e4:	4413      	add	r3, r2
 800a1e6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	e000      	b.n	800a1ee <CircularQueue_Add+0x446>
    return NULL;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3738      	adds	r7, #56	; 0x38
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	891b      	ldrh	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <CircularQueue_Remove+0x1e>
 800a210:	2302      	movs	r3, #2
 800a212:	e000      	b.n	800a216 <CircularQueue_Remove+0x20>
 800a214:	2300      	movs	r3, #0
 800a216:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 80cc 	beq.w	800a3be <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	891b      	ldrh	r3, [r3, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d121      	bne.n	800a272 <CircularQueue_Remove+0x7c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6819      	ldr	r1, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	1c58      	adds	r0, r3, #1
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	4298      	cmp	r0, r3
 800a24c:	d306      	bcc.n	800a25c <CircularQueue_Remove+0x66>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68d8      	ldr	r0, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	1ac3      	subs	r3, r0, r3
 800a258:	3301      	adds	r3, #1
 800a25a:	e002      	b.n	800a262 <CircularQueue_Remove+0x6c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	3301      	adds	r3, #1
 800a262:	440b      	add	r3, r1
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	b29b      	uxth	r3, r3
 800a270:	e001      	b.n	800a276 <CircularQueue_Remove+0x80>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7f1b      	ldrb	r3, [r3, #28]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d057      	beq.n	800a334 <CircularQueue_Remove+0x13e>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7f1b      	ldrb	r3, [r3, #28]
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d151      	bne.n	800a334 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a290:	897b      	ldrh	r3, [r7, #10]
 800a292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a296:	4293      	cmp	r3, r2
 800a298:	d103      	bne.n	800a2a2 <CircularQueue_Remove+0xac>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	891b      	ldrh	r3, [r3, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d012      	beq.n	800a2c8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d942      	bls.n	800a334 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d03e      	beq.n	800a334 <CircularQueue_Remove+0x13e>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	8912      	ldrh	r2, [r2, #8]
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d235      	bcs.n	800a334 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68d9      	ldr	r1, [r3, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	1acb      	subs	r3, r1, r3
 800a2d6:	441a      	add	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	891b      	ldrh	r3, [r3, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d121      	bne.n	800a32e <CircularQueue_Remove+0x138>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6819      	ldr	r1, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	1c58      	adds	r0, r3, #1
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4298      	cmp	r0, r3
 800a308:	d306      	bcc.n	800a318 <CircularQueue_Remove+0x122>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68d8      	ldr	r0, [r3, #12]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	1ac3      	subs	r3, r0, r3
 800a314:	3301      	adds	r3, #1
 800a316:	e002      	b.n	800a31e <CircularQueue_Remove+0x128>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	440b      	add	r3, r1
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	b29b      	uxth	r3, r3
 800a328:	4413      	add	r3, r2
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	e001      	b.n	800a332 <CircularQueue_Remove+0x13c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	891b      	ldrh	r3, [r3, #8]
 800a332:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68d9      	ldr	r1, [r3, #12]
 800a33c:	7a7b      	ldrb	r3, [r7, #9]
 800a33e:	4419      	add	r1, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4299      	cmp	r1, r3
 800a346:	d307      	bcc.n	800a358 <CircularQueue_Remove+0x162>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68d9      	ldr	r1, [r3, #12]
 800a34c:	7a7b      	ldrb	r3, [r7, #9]
 800a34e:	4419      	add	r1, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	1acb      	subs	r3, r1, r3
 800a356:	e003      	b.n	800a360 <CircularQueue_Remove+0x16a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68d9      	ldr	r1, [r3, #12]
 800a35c:	7a7b      	ldrb	r3, [r7, #9]
 800a35e:	440b      	add	r3, r1
 800a360:	4413      	add	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	8979      	ldrh	r1, [r7, #10]
 800a36a:	7a7a      	ldrb	r2, [r7, #9]
 800a36c:	440a      	add	r2, r1
 800a36e:	1a9a      	subs	r2, r3, r2
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01b      	beq.n	800a3b4 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	897b      	ldrh	r3, [r7, #10]
 800a382:	441a      	add	r2, r3
 800a384:	7a7b      	ldrb	r3, [r7, #9]
 800a386:	441a      	add	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d309      	bcc.n	800a3a4 <CircularQueue_Remove+0x1ae>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	897b      	ldrh	r3, [r7, #10]
 800a396:	441a      	add	r2, r3
 800a398:	7a7b      	ldrb	r3, [r7, #9]
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	e005      	b.n	800a3b0 <CircularQueue_Remove+0x1ba>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	897b      	ldrh	r3, [r7, #10]
 800a3aa:	441a      	add	r2, r3
 800a3ac:	7a7b      	ldrb	r3, [r7, #9]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	1e5a      	subs	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	897a      	ldrh	r2, [r7, #10]
 800a3c8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	891b      	ldrh	r3, [r3, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <CircularQueue_Sense+0x1e>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e000      	b.n	800a3f8 <CircularQueue_Sense+0x20>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 8090 	beq.w	800a52c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	891b      	ldrh	r3, [r3, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d121      	bne.n	800a45e <CircularQueue_Sense+0x86>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	4413      	add	r3, r2
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b29a      	uxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	1c58      	adds	r0, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	4298      	cmp	r0, r3
 800a438:	d306      	bcc.n	800a448 <CircularQueue_Sense+0x70>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68d8      	ldr	r0, [r3, #12]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	1ac3      	subs	r3, r0, r3
 800a444:	3301      	adds	r3, #1
 800a446:	e002      	b.n	800a44e <CircularQueue_Sense+0x76>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	440b      	add	r3, r1
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	b29b      	uxth	r3, r3
 800a458:	4413      	add	r3, r2
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	e001      	b.n	800a462 <CircularQueue_Sense+0x8a>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	891b      	ldrh	r3, [r3, #8]
 800a462:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	7f1b      	ldrb	r3, [r3, #28]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d048      	beq.n	800a502 <CircularQueue_Sense+0x12a>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	7f1b      	ldrb	r3, [r3, #28]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d142      	bne.n	800a502 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a47c:	8a7b      	ldrh	r3, [r7, #18]
 800a47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a482:	4293      	cmp	r3, r2
 800a484:	d103      	bne.n	800a48e <CircularQueue_Sense+0xb6>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	891b      	ldrh	r3, [r3, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d012      	beq.n	800a4b4 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a496:	429a      	cmp	r2, r3
 800a498:	d933      	bls.n	800a502 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	891b      	ldrh	r3, [r3, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d02f      	beq.n	800a502 <CircularQueue_Sense+0x12a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	8912      	ldrh	r2, [r2, #8]
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d226      	bcs.n	800a502 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	891b      	ldrh	r3, [r3, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11d      	bne.n	800a4fc <CircularQueue_Sense+0x124>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6819      	ldr	r1, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	1c58      	adds	r0, r3, #1
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	4298      	cmp	r0, r3
 800a4da:	d305      	bcc.n	800a4e8 <CircularQueue_Sense+0x110>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	1ac3      	subs	r3, r0, r3
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	e001      	b.n	800a4ec <CircularQueue_Sense+0x114>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	440b      	add	r3, r1
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	021b      	lsls	r3, r3, #8
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	e001      	b.n	800a500 <CircularQueue_Sense+0x128>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	891b      	ldrh	r3, [r3, #8]
 800a500:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	7af9      	ldrb	r1, [r7, #11]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4419      	add	r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	4299      	cmp	r1, r3
 800a512:	d306      	bcc.n	800a522 <CircularQueue_Sense+0x14a>
 800a514:	7af9      	ldrb	r1, [r7, #11]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4419      	add	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	1acb      	subs	r3, r1, r3
 800a520:	e002      	b.n	800a528 <CircularQueue_Sense+0x150>
 800a522:	7af9      	ldrb	r1, [r7, #11]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	440b      	add	r3, r1
 800a528:	4413      	add	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	8a7a      	ldrh	r2, [r7, #18]
 800a536:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a538:	697b      	ldr	r3, [r7, #20]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a54c:	4b03      	ldr	r3, [pc, #12]	; (800a55c <LL_FLASH_GetUDN+0x14>)
 800a54e:	681b      	ldr	r3, [r3, #0]
}
 800a550:	4618      	mov	r0, r3
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	1fff7580 	.word	0x1fff7580

0800a560 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a560:	b480      	push	{r7}
 800a562:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a564:	4b03      	ldr	r3, [pc, #12]	; (800a574 <LL_FLASH_GetDeviceID+0x14>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	b2db      	uxtb	r3, r3
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	1fff7584 	.word	0x1fff7584

0800a578 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a578:	b480      	push	{r7}
 800a57a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a57c:	4b03      	ldr	r3, [pc, #12]	; (800a58c <LL_FLASH_GetSTCompanyID+0x14>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	0a1b      	lsrs	r3, r3, #8
}
 800a582:	4618      	mov	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	1fff7584 	.word	0x1fff7584

0800a590 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a590:	b5b0      	push	{r4, r5, r7, lr}
 800a592:	b090      	sub	sp, #64	; 0x40
 800a594:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a596:	2392      	movs	r3, #146	; 0x92
 800a598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a59c:	4b45      	ldr	r3, [pc, #276]	; (800a6b4 <APP_BLE_Init+0x124>)
 800a59e:	1d3c      	adds	r4, r7, #4
 800a5a0:	461d      	mov	r5, r3
 800a5a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a5b2:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a5b6:	f000 fb37 	bl	800ac28 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a5ba:	2101      	movs	r1, #1
 800a5bc:	2002      	movs	r0, #2
 800a5be:	f001 fcf1 	bl	800bfa4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a5c2:	4a3d      	ldr	r2, [pc, #244]	; (800a6b8 <APP_BLE_Init+0x128>)
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	2002      	movs	r0, #2
 800a5c8:	f001 fe18 	bl	800c1fc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a5cc:	1d3b      	adds	r3, r7, #4
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe fbf0 	bl	8008db4 <SHCI_C2_BLE_Init>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800a5da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d012      	beq.n	800a608 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a5e2:	4836      	ldr	r0, [pc, #216]	; (800a6bc <APP_BLE_Init+0x12c>)
 800a5e4:	f7ff f9ea 	bl	80099bc <DbgTraceGetFileName>
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	f44f 73a3 	mov.w	r3, #326	; 0x146
 800a5ee:	4a34      	ldr	r2, [pc, #208]	; (800a6c0 <APP_BLE_Init+0x130>)
 800a5f0:	4834      	ldr	r0, [pc, #208]	; (800a6c4 <APP_BLE_Init+0x134>)
 800a5f2:	f001 ff85 	bl	800c500 <iprintf>
 800a5f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4832      	ldr	r0, [pc, #200]	; (800a6c8 <APP_BLE_Init+0x138>)
 800a5fe:	f001 ff7f 	bl	800c500 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a602:	f7f8 f955 	bl	80028b0 <Error_Handler>
 800a606:	e00c      	b.n	800a622 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a608:	482c      	ldr	r0, [pc, #176]	; (800a6bc <APP_BLE_Init+0x12c>)
 800a60a:	f7ff f9d7 	bl	80099bc <DbgTraceGetFileName>
 800a60e:	4601      	mov	r1, r0
 800a610:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800a614:	4a2a      	ldr	r2, [pc, #168]	; (800a6c0 <APP_BLE_Init+0x130>)
 800a616:	482b      	ldr	r0, [pc, #172]	; (800a6c4 <APP_BLE_Init+0x134>)
 800a618:	f001 ff72 	bl	800c500 <iprintf>
 800a61c:	482b      	ldr	r0, [pc, #172]	; (800a6cc <APP_BLE_Init+0x13c>)
 800a61e:	f001 ff6f 	bl	800c500 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a622:	f000 fb17 	bl	800ac54 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a626:	f7fe fb1f 	bl	8008c68 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a62a:	4b29      	ldr	r3, [pc, #164]	; (800a6d0 <APP_BLE_Init+0x140>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a632:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <APP_BLE_Init+0x140>)
 800a634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a638:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a63a:	4a26      	ldr	r2, [pc, #152]	; (800a6d4 <APP_BLE_Init+0x144>)
 800a63c:	2100      	movs	r1, #0
 800a63e:	2001      	movs	r0, #1
 800a640:	f001 fddc 	bl	800c1fc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a644:	2006      	movs	r0, #6
 800a646:	f7fe f982 	bl	800894e <aci_hal_set_radio_activity_mask>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800a650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a654:	2b00      	cmp	r3, #0
 800a656:	d010      	beq.n	800a67a <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a658:	4818      	ldr	r0, [pc, #96]	; (800a6bc <APP_BLE_Init+0x12c>)
 800a65a:	f7ff f9af 	bl	80099bc <DbgTraceGetFileName>
 800a65e:	4601      	mov	r1, r0
 800a660:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800a664:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <APP_BLE_Init+0x130>)
 800a666:	4817      	ldr	r0, [pc, #92]	; (800a6c4 <APP_BLE_Init+0x134>)
 800a668:	f001 ff4a 	bl	800c500 <iprintf>
 800a66c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a670:	4619      	mov	r1, r3
 800a672:	4819      	ldr	r0, [pc, #100]	; (800a6d8 <APP_BLE_Init+0x148>)
 800a674:	f001 ff44 	bl	800c500 <iprintf>
 800a678:	e00c      	b.n	800a694 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a67a:	4810      	ldr	r0, [pc, #64]	; (800a6bc <APP_BLE_Init+0x12c>)
 800a67c:	f7ff f99e 	bl	80099bc <DbgTraceGetFileName>
 800a680:	4601      	mov	r1, r0
 800a682:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800a686:	4a0e      	ldr	r2, [pc, #56]	; (800a6c0 <APP_BLE_Init+0x130>)
 800a688:	480e      	ldr	r0, [pc, #56]	; (800a6c4 <APP_BLE_Init+0x134>)
 800a68a:	f001 ff39 	bl	800c500 <iprintf>
 800a68e:	4813      	ldr	r0, [pc, #76]	; (800a6dc <APP_BLE_Init+0x14c>)
 800a690:	f001 ff36 	bl	800c500 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a694:	f000 ff7c 	bl	800b590 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a698:	4b0d      	ldr	r3, [pc, #52]	; (800a6d0 <APP_BLE_Init+0x140>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <APP_BLE_Init+0x140>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	f000 fd69 	bl	800b17c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a6aa:	bf00      	nop
}
 800a6ac:	3740      	adds	r7, #64	; 0x40
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800dabc 	.word	0x0800dabc
 800a6b8:	08008fd1 	.word	0x08008fd1
 800a6bc:	0800d9b0 	.word	0x0800d9b0
 800a6c0:	0800ec0c 	.word	0x0800ec0c
 800a6c4:	0800d9cc 	.word	0x0800d9cc
 800a6c8:	0800d9e0 	.word	0x0800d9e0
 800a6cc:	0800da18 	.word	0x0800da18
 800a6d0:	20000184 	.word	0x20000184
 800a6d4:	0800b301 	.word	0x0800b301
 800a6d8:	0800da40 	.word	0x0800da40
 800a6dc:	0800da84 	.word	0x0800da84

0800a6e0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a6e0:	b5b0      	push	{r4, r5, r7, lr}
 800a6e2:	b08e      	sub	sp, #56	; 0x38
 800a6e4:	af04      	add	r7, sp, #16
 800a6e6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a6e8:	2392      	movs	r3, #146	; 0x92
 800a6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2bff      	cmp	r3, #255	; 0xff
 800a6fa:	f000 811d 	beq.w	800a938 <SVCCTL_App_Notification+0x258>
 800a6fe:	2bff      	cmp	r3, #255	; 0xff
 800a700:	f300 8269 	bgt.w	800abd6 <SVCCTL_App_Notification+0x4f6>
 800a704:	2b05      	cmp	r3, #5
 800a706:	d002      	beq.n	800a70e <SVCCTL_App_Notification+0x2e>
 800a708:	2b3e      	cmp	r3, #62	; 0x3e
 800a70a:	d042      	beq.n	800a792 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a70c:	e263      	b.n	800abd6 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	3302      	adds	r3, #2
 800a712:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	4bb1      	ldr	r3, [pc, #708]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a71e:	8adb      	ldrh	r3, [r3, #22]
 800a720:	429a      	cmp	r2, r3
 800a722:	d128      	bne.n	800a776 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a724:	4baf      	ldr	r3, [pc, #700]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a726:	2200      	movs	r2, #0
 800a728:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a72a:	4bae      	ldr	r3, [pc, #696]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800a732:	48ad      	ldr	r0, [pc, #692]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a734:	f7ff f942 	bl	80099bc <DbgTraceGetFileName>
 800a738:	4601      	mov	r1, r0
 800a73a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800a73e:	4aab      	ldr	r2, [pc, #684]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a740:	48ab      	ldr	r0, [pc, #684]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a742:	f001 fedd 	bl	800c500 <iprintf>
 800a746:	48ab      	ldr	r0, [pc, #684]	; (800a9f4 <SVCCTL_App_Notification+0x314>)
 800a748:	f001 ff76 	bl	800c638 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800a74c:	48a6      	ldr	r0, [pc, #664]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a74e:	f7ff f935 	bl	80099bc <DbgTraceGetFileName>
 800a752:	4601      	mov	r1, r0
 800a754:	f240 13b9 	movw	r3, #441	; 0x1b9
 800a758:	4aa4      	ldr	r2, [pc, #656]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a75a:	48a5      	ldr	r0, [pc, #660]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a75c:	f001 fed0 	bl	800c500 <iprintf>
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a766:	b29b      	uxth	r3, r3
 800a768:	4619      	mov	r1, r3
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	78db      	ldrb	r3, [r3, #3]
 800a76e:	461a      	mov	r2, r3
 800a770:	48a1      	ldr	r0, [pc, #644]	; (800a9f8 <SVCCTL_App_Notification+0x318>)
 800a772:	f001 fec5 	bl	800c500 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800a776:	2001      	movs	r0, #1
 800a778:	f000 fd00 	bl	800b17c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a77c:	4b9f      	ldr	r3, [pc, #636]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a77e:	2201      	movs	r2, #1
 800a780:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a782:	4b98      	ldr	r3, [pc, #608]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a784:	8ada      	ldrh	r2, [r3, #22]
 800a786:	4b9d      	ldr	r3, [pc, #628]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a788:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800a78a:	489c      	ldr	r0, [pc, #624]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a78c:	f000 feec 	bl	800b568 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a790:	e224      	b.n	800abdc <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	3302      	adds	r3, #2
 800a796:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d042      	beq.n	800a826 <SVCCTL_App_Notification+0x146>
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	f040 80c7 	bne.w	800a934 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800a7ac:	488e      	ldr	r0, [pc, #568]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a7ae:	f7ff f905 	bl	80099bc <DbgTraceGetFileName>
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a7b8:	4a8c      	ldr	r2, [pc, #560]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a7ba:	488d      	ldr	r0, [pc, #564]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a7bc:	f001 fea0 	bl	800c500 <iprintf>
 800a7c0:	488f      	ldr	r0, [pc, #572]	; (800aa00 <SVCCTL_App_Notification+0x320>)
 800a7c2:	f001 ff39 	bl	800c638 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a7c6:	4888      	ldr	r0, [pc, #544]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a7c8:	f7ff f8f8 	bl	80099bc <DbgTraceGetFileName>
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	f240 13e1 	movw	r3, #481	; 0x1e1
 800a7d2:	4a86      	ldr	r2, [pc, #536]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a7d4:	4886      	ldr	r0, [pc, #536]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a7d6:	f001 fe93 	bl	800c500 <iprintf>
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f5 ffa0 	bl	8000728 <__aeabi_i2d>
 800a7e8:	f04f 0200 	mov.w	r2, #0
 800a7ec:	4b85      	ldr	r3, [pc, #532]	; (800aa04 <SVCCTL_App_Notification+0x324>)
 800a7ee:	f7f5 fd1f 	bl	8000230 <__aeabi_dmul>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a800:	b29b      	uxth	r3, r3
 800a802:	461c      	mov	r4, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	461a      	mov	r2, r3
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	9400      	str	r4, [sp, #0]
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	487a      	ldr	r0, [pc, #488]	; (800aa08 <SVCCTL_App_Notification+0x328>)
 800a820:	f001 fe6e 	bl	800c500 <iprintf>
          break;
 800a824:	e087      	b.n	800a936 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800a82c:	486e      	ldr	r0, [pc, #440]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a82e:	f7ff f8c5 	bl	80099bc <DbgTraceGetFileName>
 800a832:	4601      	mov	r1, r0
 800a834:	f240 13f3 	movw	r3, #499	; 0x1f3
 800a838:	4a6c      	ldr	r2, [pc, #432]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a83a:	486d      	ldr	r0, [pc, #436]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a83c:	f001 fe60 	bl	800c500 <iprintf>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a846:	b29b      	uxth	r3, r3
 800a848:	4619      	mov	r1, r3
 800a84a:	4870      	ldr	r0, [pc, #448]	; (800aa0c <SVCCTL_App_Notification+0x32c>)
 800a84c:	f001 fe58 	bl	800c500 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800a850:	4865      	ldr	r0, [pc, #404]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a852:	f7ff f8b3 	bl	80099bc <DbgTraceGetFileName>
 800a856:	4601      	mov	r1, r0
 800a858:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a85c:	4a63      	ldr	r2, [pc, #396]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a85e:	4864      	ldr	r0, [pc, #400]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a860:	f001 fe4e 	bl	800c500 <iprintf>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	7a9b      	ldrb	r3, [r3, #10]
 800a868:	4618      	mov	r0, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	7a5b      	ldrb	r3, [r3, #9]
 800a86e:	461c      	mov	r4, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	7a1b      	ldrb	r3, [r3, #8]
 800a874:	461d      	mov	r5, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	79db      	ldrb	r3, [r3, #7]
 800a87a:	461a      	mov	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	799b      	ldrb	r3, [r3, #6]
 800a880:	4619      	mov	r1, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	795b      	ldrb	r3, [r3, #5]
 800a886:	9302      	str	r3, [sp, #8]
 800a888:	9101      	str	r1, [sp, #4]
 800a88a:	9200      	str	r2, [sp, #0]
 800a88c:	462b      	mov	r3, r5
 800a88e:	4622      	mov	r2, r4
 800a890:	4601      	mov	r1, r0
 800a892:	485f      	ldr	r0, [pc, #380]	; (800aa10 <SVCCTL_App_Notification+0x330>)
 800a894:	f001 fe34 	bl	800c500 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800a898:	4853      	ldr	r0, [pc, #332]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a89a:	f7ff f88f 	bl	80099bc <DbgTraceGetFileName>
 800a89e:	4601      	mov	r1, r0
 800a8a0:	f240 13fb 	movw	r3, #507	; 0x1fb
 800a8a4:	4a51      	ldr	r2, [pc, #324]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a8a6:	4852      	ldr	r0, [pc, #328]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a8a8:	f001 fe2a 	bl	800c500 <iprintf>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f5 ff37 	bl	8000728 <__aeabi_i2d>
 800a8ba:	f04f 0200 	mov.w	r2, #0
 800a8be:	4b51      	ldr	r3, [pc, #324]	; (800aa04 <SVCCTL_App_Notification+0x324>)
 800a8c0:	f7f5 fcb6 	bl	8000230 <__aeabi_dmul>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	461c      	mov	r4, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	9400      	str	r4, [sp, #0]
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4845      	ldr	r0, [pc, #276]	; (800aa08 <SVCCTL_App_Notification+0x328>)
 800a8f2:	f001 fe05 	bl	800c500 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a8f6:	4b3b      	ldr	r3, [pc, #236]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a8f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d104      	bne.n	800a90a <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a900:	4b38      	ldr	r3, [pc, #224]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a902:	2206      	movs	r2, #6
 800a904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a908:	e003      	b.n	800a912 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a90a:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a90c:	2205      	movs	r2, #5
 800a90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a918:	b29a      	uxth	r2, r3
 800a91a:	4b32      	ldr	r3, [pc, #200]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a91c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800a91e:	4b37      	ldr	r3, [pc, #220]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a924:	4b2f      	ldr	r3, [pc, #188]	; (800a9e4 <SVCCTL_App_Notification+0x304>)
 800a926:	8ada      	ldrh	r2, [r3, #22]
 800a928:	4b34      	ldr	r3, [pc, #208]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a92a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800a92c:	4833      	ldr	r0, [pc, #204]	; (800a9fc <SVCCTL_App_Notification+0x31c>)
 800a92e:	f000 fe1b 	bl	800b568 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a932:	e000      	b.n	800a936 <SVCCTL_App_Notification+0x256>
          break;
 800a934:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a936:	e151      	b.n	800abdc <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	3302      	adds	r3, #2
 800a93c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a948:	f000 8141 	beq.w	800abce <SVCCTL_App_Notification+0x4ee>
 800a94c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a950:	f300 8143 	bgt.w	800abda <SVCCTL_App_Notification+0x4fa>
 800a954:	2b04      	cmp	r3, #4
 800a956:	f000 813c 	beq.w	800abd2 <SVCCTL_App_Notification+0x4f2>
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	f2c0 813d 	blt.w	800abda <SVCCTL_App_Notification+0x4fa>
 800a960:	f240 420a 	movw	r2, #1034	; 0x40a
 800a964:	4293      	cmp	r3, r2
 800a966:	f300 8138 	bgt.w	800abda <SVCCTL_App_Notification+0x4fa>
 800a96a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a96e:	f340 8134 	ble.w	800abda <SVCCTL_App_Notification+0x4fa>
 800a972:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800a976:	2b09      	cmp	r3, #9
 800a978:	f200 812f 	bhi.w	800abda <SVCCTL_App_Notification+0x4fa>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <SVCCTL_App_Notification+0x2a4>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800ab49 	.word	0x0800ab49
 800a988:	0800aa1d 	.word	0x0800aa1d
 800a98c:	0800abdb 	.word	0x0800abdb
 800a990:	0800abdb 	.word	0x0800abdb
 800a994:	0800abdb 	.word	0x0800abdb
 800a998:	0800abdb 	.word	0x0800abdb
 800a99c:	0800a9ad 	.word	0x0800a9ad
 800a9a0:	0800abdb 	.word	0x0800abdb
 800a9a4:	0800aa8f 	.word	0x0800aa8f
 800a9a8:	0800a9c9 	.word	0x0800a9c9
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800a9ac:	480e      	ldr	r0, [pc, #56]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a9ae:	f7ff f805 	bl	80099bc <DbgTraceGetFileName>
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	f240 233d 	movw	r3, #573	; 0x23d
 800a9b8:	4a0c      	ldr	r2, [pc, #48]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a9ba:	480d      	ldr	r0, [pc, #52]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a9bc:	f001 fda0 	bl	800c500 <iprintf>
 800a9c0:	4814      	ldr	r0, [pc, #80]	; (800aa14 <SVCCTL_App_Notification+0x334>)
 800a9c2:	f001 fd9d 	bl	800c500 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800a9c6:	e105      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800a9c8:	4807      	ldr	r0, [pc, #28]	; (800a9e8 <SVCCTL_App_Notification+0x308>)
 800a9ca:	f7fe fff7 	bl	80099bc <DbgTraceGetFileName>
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	f240 234d 	movw	r3, #589	; 0x24d
 800a9d4:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <SVCCTL_App_Notification+0x30c>)
 800a9d6:	4806      	ldr	r0, [pc, #24]	; (800a9f0 <SVCCTL_App_Notification+0x310>)
 800a9d8:	f001 fd92 	bl	800c500 <iprintf>
 800a9dc:	480e      	ldr	r0, [pc, #56]	; (800aa18 <SVCCTL_App_Notification+0x338>)
 800a9de:	f001 fe2b 	bl	800c638 <puts>
          break;
 800a9e2:	e0f7      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
 800a9e4:	20000184 	.word	0x20000184
 800a9e8:	0800d9b0 	.word	0x0800d9b0
 800a9ec:	0800ec1c 	.word	0x0800ec1c
 800a9f0:	0800d9cc 	.word	0x0800d9cc
 800a9f4:	0800daf4 	.word	0x0800daf4
 800a9f8:	0800db20 	.word	0x0800db20
 800a9fc:	20001770 	.word	0x20001770
 800aa00:	0800db5c 	.word	0x0800db5c
 800aa04:	3ff40000 	.word	0x3ff40000
 800aa08:	0800db90 	.word	0x0800db90
 800aa0c:	0800dbfc 	.word	0x0800dbfc
 800aa10:	0800dc44 	.word	0x0800dc44
 800aa14:	0800dc94 	.word	0x0800dc94
 800aa18:	0800dcbc 	.word	0x0800dcbc
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800aa1c:	4872      	ldr	r0, [pc, #456]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aa1e:	f7fe ffcd 	bl	80099bc <DbgTraceGetFileName>
 800aa22:	4601      	mov	r1, r0
 800aa24:	f44f 7315 	mov.w	r3, #596	; 0x254
 800aa28:	4a70      	ldr	r2, [pc, #448]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aa2a:	4871      	ldr	r0, [pc, #452]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aa2c:	f001 fd68 	bl	800c500 <iprintf>
 800aa30:	4870      	ldr	r0, [pc, #448]	; (800abf4 <SVCCTL_App_Notification+0x514>)
 800aa32:	f001 fe01 	bl	800c638 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800aa36:	4b70      	ldr	r3, [pc, #448]	; (800abf8 <SVCCTL_App_Notification+0x518>)
 800aa38:	8adb      	ldrh	r3, [r3, #22]
 800aa3a:	4970      	ldr	r1, [pc, #448]	; (800abfc <SVCCTL_App_Notification+0x51c>)
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd f9dd 	bl	8007dfc <aci_gap_pass_key_resp>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d010      	beq.n	800aa72 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800aa50:	4865      	ldr	r0, [pc, #404]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aa52:	f7fe ffb3 	bl	80099bc <DbgTraceGetFileName>
 800aa56:	4601      	mov	r1, r0
 800aa58:	f240 2359 	movw	r3, #601	; 0x259
 800aa5c:	4a63      	ldr	r2, [pc, #396]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aa5e:	4864      	ldr	r0, [pc, #400]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aa60:	f001 fd4e 	bl	800c500 <iprintf>
 800aa64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4865      	ldr	r0, [pc, #404]	; (800ac00 <SVCCTL_App_Notification+0x520>)
 800aa6c:	f001 fd48 	bl	800c500 <iprintf>
          break;
 800aa70:	e0b0      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800aa72:	485d      	ldr	r0, [pc, #372]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aa74:	f7fe ffa2 	bl	80099bc <DbgTraceGetFileName>
 800aa78:	4601      	mov	r1, r0
 800aa7a:	f240 235d 	movw	r3, #605	; 0x25d
 800aa7e:	4a5b      	ldr	r2, [pc, #364]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aa80:	485b      	ldr	r0, [pc, #364]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aa82:	f001 fd3d 	bl	800c500 <iprintf>
 800aa86:	485f      	ldr	r0, [pc, #380]	; (800ac04 <SVCCTL_App_Notification+0x524>)
 800aa88:	f001 fdd6 	bl	800c638 <puts>
          break;
 800aa8c:	e0a2      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800aa8e:	4856      	ldr	r0, [pc, #344]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aa90:	f7fe ff94 	bl	80099bc <DbgTraceGetFileName>
 800aa94:	4601      	mov	r1, r0
 800aa96:	f240 2365 	movw	r3, #613	; 0x265
 800aa9a:	4a54      	ldr	r2, [pc, #336]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aa9c:	4854      	ldr	r0, [pc, #336]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aa9e:	f001 fd2f 	bl	800c500 <iprintf>
 800aaa2:	4859      	ldr	r0, [pc, #356]	; (800ac08 <SVCCTL_App_Notification+0x528>)
 800aaa4:	f001 fdc8 	bl	800c638 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800aaa8:	484f      	ldr	r0, [pc, #316]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aaaa:	f7fe ff87 	bl	80099bc <DbgTraceGetFileName>
 800aaae:	4601      	mov	r1, r0
 800aab0:	f240 2366 	movw	r3, #614	; 0x266
 800aab4:	4a4d      	ldr	r2, [pc, #308]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aab6:	484e      	ldr	r0, [pc, #312]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aab8:	f001 fd22 	bl	800c500 <iprintf>
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	3302      	adds	r3, #2
 800aac0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aac4:	4619      	mov	r1, r3
 800aac6:	4851      	ldr	r0, [pc, #324]	; (800ac0c <SVCCTL_App_Notification+0x52c>)
 800aac8:	f001 fd1a 	bl	800c500 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800aacc:	4846      	ldr	r0, [pc, #280]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800aace:	f7fe ff75 	bl	80099bc <DbgTraceGetFileName>
 800aad2:	4601      	mov	r1, r0
 800aad4:	f44f 731a 	mov.w	r3, #616	; 0x268
 800aad8:	4a44      	ldr	r2, [pc, #272]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aada:	4845      	ldr	r0, [pc, #276]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aadc:	f001 fd10 	bl	800c500 <iprintf>
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	3302      	adds	r3, #2
 800aae4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aae8:	4619      	mov	r1, r3
 800aaea:	4849      	ldr	r0, [pc, #292]	; (800ac10 <SVCCTL_App_Notification+0x530>)
 800aaec:	f001 fd08 	bl	800c500 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800aaf0:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <SVCCTL_App_Notification+0x518>)
 800aaf2:	8adb      	ldrh	r3, [r3, #22]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fd fb2a 	bl	8008150 <aci_gap_numeric_comparison_value_confirm_yesno>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800ab02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d010      	beq.n	800ab2c <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800ab0a:	4837      	ldr	r0, [pc, #220]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800ab0c:	f7fe ff56 	bl	80099bc <DbgTraceGetFileName>
 800ab10:	4601      	mov	r1, r0
 800ab12:	f240 236d 	movw	r3, #621	; 0x26d
 800ab16:	4a35      	ldr	r2, [pc, #212]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800ab18:	4835      	ldr	r0, [pc, #212]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800ab1a:	f001 fcf1 	bl	800c500 <iprintf>
 800ab1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab22:	4619      	mov	r1, r3
 800ab24:	483b      	ldr	r0, [pc, #236]	; (800ac14 <SVCCTL_App_Notification+0x534>)
 800ab26:	f001 fceb 	bl	800c500 <iprintf>
          break;
 800ab2a:	e053      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ab2c:	482e      	ldr	r0, [pc, #184]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800ab2e:	f7fe ff45 	bl	80099bc <DbgTraceGetFileName>
 800ab32:	4601      	mov	r1, r0
 800ab34:	f240 2371 	movw	r3, #625	; 0x271
 800ab38:	4a2c      	ldr	r2, [pc, #176]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800ab3a:	482d      	ldr	r0, [pc, #180]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800ab3c:	f001 fce0 	bl	800c500 <iprintf>
 800ab40:	4835      	ldr	r0, [pc, #212]	; (800ac18 <SVCCTL_App_Notification+0x538>)
 800ab42:	f001 fd79 	bl	800c638 <puts>
          break;
 800ab46:	e045      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800ab4e:	4826      	ldr	r0, [pc, #152]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800ab50:	f7fe ff34 	bl	80099bc <DbgTraceGetFileName>
 800ab54:	4601      	mov	r1, r0
 800ab56:	f240 237b 	movw	r3, #635	; 0x27b
 800ab5a:	4a24      	ldr	r2, [pc, #144]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800ab5c:	4824      	ldr	r0, [pc, #144]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800ab5e:	f001 fccf 	bl	800c500 <iprintf>
 800ab62:	482e      	ldr	r0, [pc, #184]	; (800ac1c <SVCCTL_App_Notification+0x53c>)
 800ab64:	f001 fd68 	bl	800c638 <puts>
          if (p_pairing_complete->Status != 0)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	789b      	ldrb	r3, [r3, #2]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d013      	beq.n	800ab98 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800ab70:	481d      	ldr	r0, [pc, #116]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800ab72:	f7fe ff23 	bl	80099bc <DbgTraceGetFileName>
 800ab76:	4601      	mov	r1, r0
 800ab78:	f240 237e 	movw	r3, #638	; 0x27e
 800ab7c:	4a1b      	ldr	r2, [pc, #108]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800ab7e:	481c      	ldr	r0, [pc, #112]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800ab80:	f001 fcbe 	bl	800c500 <iprintf>
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	78db      	ldrb	r3, [r3, #3]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4823      	ldr	r0, [pc, #140]	; (800ac20 <SVCCTL_App_Notification+0x540>)
 800ab92:	f001 fcb5 	bl	800c500 <iprintf>
 800ab96:	e00c      	b.n	800abb2 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800ab98:	4813      	ldr	r0, [pc, #76]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800ab9a:	f7fe ff0f 	bl	80099bc <DbgTraceGetFileName>
 800ab9e:	4601      	mov	r1, r0
 800aba0:	f240 2382 	movw	r3, #642	; 0x282
 800aba4:	4a11      	ldr	r2, [pc, #68]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800aba6:	4812      	ldr	r0, [pc, #72]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800aba8:	f001 fcaa 	bl	800c500 <iprintf>
 800abac:	481d      	ldr	r0, [pc, #116]	; (800ac24 <SVCCTL_App_Notification+0x544>)
 800abae:	f001 fd43 	bl	800c638 <puts>
          APP_DBG_MSG("\n");
 800abb2:	480d      	ldr	r0, [pc, #52]	; (800abe8 <SVCCTL_App_Notification+0x508>)
 800abb4:	f7fe ff02 	bl	80099bc <DbgTraceGetFileName>
 800abb8:	4601      	mov	r1, r0
 800abba:	f44f 7321 	mov.w	r3, #644	; 0x284
 800abbe:	4a0b      	ldr	r2, [pc, #44]	; (800abec <SVCCTL_App_Notification+0x50c>)
 800abc0:	480b      	ldr	r0, [pc, #44]	; (800abf0 <SVCCTL_App_Notification+0x510>)
 800abc2:	f001 fc9d 	bl	800c500 <iprintf>
 800abc6:	200a      	movs	r0, #10
 800abc8:	f001 fcb2 	bl	800c530 <putchar>
          break;
 800abcc:	e002      	b.n	800abd4 <SVCCTL_App_Notification+0x4f4>
          break;
 800abce:	bf00      	nop
 800abd0:	e003      	b.n	800abda <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800abd2:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abd4:	e001      	b.n	800abda <SVCCTL_App_Notification+0x4fa>
      break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800abda:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800abdc:	2301      	movs	r3, #1
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3728      	adds	r7, #40	; 0x28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bdb0      	pop	{r4, r5, r7, pc}
 800abe6:	bf00      	nop
 800abe8:	0800d9b0 	.word	0x0800d9b0
 800abec:	0800ec1c 	.word	0x0800ec1c
 800abf0:	0800d9cc 	.word	0x0800d9cc
 800abf4:	0800dcec 	.word	0x0800dcec
 800abf8:	20000184 	.word	0x20000184
 800abfc:	0001b207 	.word	0x0001b207
 800ac00:	0800dd14 	.word	0x0800dd14
 800ac04:	0800dd48 	.word	0x0800dd48
 800ac08:	0800dd70 	.word	0x0800dd70
 800ac0c:	0800dda4 	.word	0x0800dda4
 800ac10:	0800ddc0 	.word	0x0800ddc0
 800ac14:	0800ddd8 	.word	0x0800ddd8
 800ac18:	0800de28 	.word	0x0800de28
 800ac1c:	0800de70 	.word	0x0800de70
 800ac20:	0800de9c 	.word	0x0800de9c
 800ac24:	0800ded8 	.word	0x0800ded8

0800ac28 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <Ble_Tl_Init+0x20>)
 800ac30:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <Ble_Tl_Init+0x24>)
 800ac34:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ac36:	463b      	mov	r3, r7
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4805      	ldr	r0, [pc, #20]	; (800ac50 <Ble_Tl_Init+0x28>)
 800ac3c:	f7fe f9ac 	bl	8008f98 <hci_init>

  return;
 800ac40:	bf00      	nop
}
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200300d8 	.word	0x200300d8
 800ac4c:	0800b429 	.word	0x0800b429
 800ac50:	0800b3f1 	.word	0x0800b3f1

0800ac54 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac56:	b08d      	sub	sp, #52	; 0x34
 800ac58:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac5e:	2392      	movs	r3, #146	; 0x92
 800ac60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800ac62:	48a3      	ldr	r0, [pc, #652]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ac64:	f7fe feaa 	bl	80099bc <DbgTraceGetFileName>
 800ac68:	4601      	mov	r1, r0
 800ac6a:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 800ac6e:	4aa1      	ldr	r2, [pc, #644]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ac70:	48a1      	ldr	r0, [pc, #644]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ac72:	f001 fc45 	bl	800c500 <iprintf>
 800ac76:	48a1      	ldr	r0, [pc, #644]	; (800aefc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800ac78:	f001 fcde 	bl	800c638 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ac7c:	f7fd febb 	bl	80089f6 <hci_reset>
 800ac80:	4603      	mov	r3, r0
 800ac82:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00f      	beq.n	800acaa <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800ac8a:	4899      	ldr	r0, [pc, #612]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ac8c:	f7fe fe96 	bl	80099bc <DbgTraceGetFileName>
 800ac90:	4601      	mov	r1, r0
 800ac92:	f240 23cd 	movw	r3, #717	; 0x2cd
 800ac96:	4a97      	ldr	r2, [pc, #604]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ac98:	4897      	ldr	r0, [pc, #604]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ac9a:	f001 fc31 	bl	800c500 <iprintf>
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	4619      	mov	r1, r3
 800aca2:	4897      	ldr	r0, [pc, #604]	; (800af00 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800aca4:	f001 fc2c 	bl	800c500 <iprintf>
 800aca8:	e00c      	b.n	800acc4 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800acaa:	4891      	ldr	r0, [pc, #580]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800acac:	f7fe fe86 	bl	80099bc <DbgTraceGetFileName>
 800acb0:	4601      	mov	r1, r0
 800acb2:	f240 23d1 	movw	r3, #721	; 0x2d1
 800acb6:	4a8f      	ldr	r2, [pc, #572]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800acb8:	488f      	ldr	r0, [pc, #572]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800acba:	f001 fc21 	bl	800c500 <iprintf>
 800acbe:	4891      	ldr	r0, [pc, #580]	; (800af04 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800acc0:	f001 fcba 	bl	800c638 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800acc4:	f000 fad8 	bl	800b278 <BleGetBdAddress>
 800acc8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	2106      	movs	r1, #6
 800acce:	2000      	movs	r0, #0
 800acd0:	f7fd fd51 	bl	8008776 <aci_hal_write_config_data>
 800acd4:	4603      	mov	r3, r0
 800acd6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00f      	beq.n	800acfe <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800acde:	4884      	ldr	r0, [pc, #528]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ace0:	f7fe fe6c 	bl	80099bc <DbgTraceGetFileName>
 800ace4:	4601      	mov	r1, r0
 800ace6:	f240 23db 	movw	r3, #731	; 0x2db
 800acea:	4a82      	ldr	r2, [pc, #520]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800acec:	4882      	ldr	r0, [pc, #520]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800acee:	f001 fc07 	bl	800c500 <iprintf>
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	4619      	mov	r1, r3
 800acf6:	4884      	ldr	r0, [pc, #528]	; (800af08 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800acf8:	f001 fc02 	bl	800c500 <iprintf>
 800acfc:	e035      	b.n	800ad6a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800acfe:	487c      	ldr	r0, [pc, #496]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ad00:	f7fe fe5c 	bl	80099bc <DbgTraceGetFileName>
 800ad04:	4601      	mov	r1, r0
 800ad06:	f240 23df 	movw	r3, #735	; 0x2df
 800ad0a:	4a7a      	ldr	r2, [pc, #488]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ad0c:	487a      	ldr	r0, [pc, #488]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ad0e:	f001 fbf7 	bl	800c500 <iprintf>
 800ad12:	487e      	ldr	r0, [pc, #504]	; (800af0c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800ad14:	f001 fc90 	bl	800c638 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800ad18:	4875      	ldr	r0, [pc, #468]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ad1a:	f7fe fe4f 	bl	80099bc <DbgTraceGetFileName>
 800ad1e:	4601      	mov	r1, r0
 800ad20:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800ad24:	4a73      	ldr	r2, [pc, #460]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ad26:	4874      	ldr	r0, [pc, #464]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ad28:	f001 fbea 	bl	800c500 <iprintf>
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	3305      	adds	r3, #5
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	4618      	mov	r0, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	3304      	adds	r3, #4
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	461c      	mov	r4, r3
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	3303      	adds	r3, #3
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	461d      	mov	r5, r3
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	3302      	adds	r3, #2
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	4619      	mov	r1, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	9101      	str	r1, [sp, #4]
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	462b      	mov	r3, r5
 800ad60:	4622      	mov	r2, r4
 800ad62:	4601      	mov	r1, r0
 800ad64:	486a      	ldr	r0, [pc, #424]	; (800af10 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ad66:	f001 fbcb 	bl	800c500 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ad6a:	4a6a      	ldr	r2, [pc, #424]	; (800af14 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800ad6c:	2110      	movs	r1, #16
 800ad6e:	2018      	movs	r0, #24
 800ad70:	f7fd fd01 	bl	8008776 <aci_hal_write_config_data>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00f      	beq.n	800ad9e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800ad7e:	485c      	ldr	r0, [pc, #368]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ad80:	f7fe fe1c 	bl	80099bc <DbgTraceGetFileName>
 800ad84:	4601      	mov	r1, r0
 800ad86:	f240 3327 	movw	r3, #807	; 0x327
 800ad8a:	4a5a      	ldr	r2, [pc, #360]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ad8c:	485a      	ldr	r0, [pc, #360]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ad8e:	f001 fbb7 	bl	800c500 <iprintf>
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	4619      	mov	r1, r3
 800ad96:	4860      	ldr	r0, [pc, #384]	; (800af18 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800ad98:	f001 fbb2 	bl	800c500 <iprintf>
 800ad9c:	e00c      	b.n	800adb8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800ad9e:	4854      	ldr	r0, [pc, #336]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ada0:	f7fe fe0c 	bl	80099bc <DbgTraceGetFileName>
 800ada4:	4601      	mov	r1, r0
 800ada6:	f240 332b 	movw	r3, #811	; 0x32b
 800adaa:	4a52      	ldr	r2, [pc, #328]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800adac:	4852      	ldr	r0, [pc, #328]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800adae:	f001 fba7 	bl	800c500 <iprintf>
 800adb2:	485a      	ldr	r0, [pc, #360]	; (800af1c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800adb4:	f001 fc40 	bl	800c638 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800adb8:	4a59      	ldr	r2, [pc, #356]	; (800af20 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800adba:	2110      	movs	r1, #16
 800adbc:	2008      	movs	r0, #8
 800adbe:	f7fd fcda 	bl	8008776 <aci_hal_write_config_data>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00f      	beq.n	800adec <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800adcc:	4848      	ldr	r0, [pc, #288]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800adce:	f7fe fdf5 	bl	80099bc <DbgTraceGetFileName>
 800add2:	4601      	mov	r1, r0
 800add4:	f44f 734d 	mov.w	r3, #820	; 0x334
 800add8:	4a46      	ldr	r2, [pc, #280]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800adda:	4847      	ldr	r0, [pc, #284]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800addc:	f001 fb90 	bl	800c500 <iprintf>
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	4619      	mov	r1, r3
 800ade4:	484f      	ldr	r0, [pc, #316]	; (800af24 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800ade6:	f001 fb8b 	bl	800c500 <iprintf>
 800adea:	e00c      	b.n	800ae06 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800adec:	4840      	ldr	r0, [pc, #256]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800adee:	f7fe fde5 	bl	80099bc <DbgTraceGetFileName>
 800adf2:	4601      	mov	r1, r0
 800adf4:	f44f 734e 	mov.w	r3, #824	; 0x338
 800adf8:	4a3e      	ldr	r2, [pc, #248]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800adfa:	483f      	ldr	r0, [pc, #252]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800adfc:	f001 fb80 	bl	800c500 <iprintf>
 800ae00:	4849      	ldr	r0, [pc, #292]	; (800af28 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800ae02:	f001 fc19 	bl	800c638 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ae06:	2118      	movs	r1, #24
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7fd fd39 	bl	8008880 <aci_hal_set_tx_power_level>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00f      	beq.n	800ae38 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ae18:	4835      	ldr	r0, [pc, #212]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae1a:	f7fe fdcf 	bl	80099bc <DbgTraceGetFileName>
 800ae1e:	4601      	mov	r1, r0
 800ae20:	f240 3341 	movw	r3, #833	; 0x341
 800ae24:	4a33      	ldr	r2, [pc, #204]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae26:	4834      	ldr	r0, [pc, #208]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae28:	f001 fb6a 	bl	800c500 <iprintf>
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	483e      	ldr	r0, [pc, #248]	; (800af2c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ae32:	f001 fb65 	bl	800c500 <iprintf>
 800ae36:	e00c      	b.n	800ae52 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800ae38:	482d      	ldr	r0, [pc, #180]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae3a:	f7fe fdbf 	bl	80099bc <DbgTraceGetFileName>
 800ae3e:	4601      	mov	r1, r0
 800ae40:	f240 3345 	movw	r3, #837	; 0x345
 800ae44:	4a2b      	ldr	r2, [pc, #172]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae46:	482c      	ldr	r0, [pc, #176]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae48:	f001 fb5a 	bl	800c500 <iprintf>
 800ae4c:	4838      	ldr	r0, [pc, #224]	; (800af30 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ae4e:	f001 fbf3 	bl	800c638 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ae52:	f7fd f9e4 	bl	800821e <aci_gatt_init>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00f      	beq.n	800ae80 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800ae60:	4823      	ldr	r0, [pc, #140]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae62:	f7fe fdab 	bl	80099bc <DbgTraceGetFileName>
 800ae66:	4601      	mov	r1, r0
 800ae68:	f240 334e 	movw	r3, #846	; 0x34e
 800ae6c:	4a21      	ldr	r2, [pc, #132]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae6e:	4822      	ldr	r0, [pc, #136]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae70:	f001 fb46 	bl	800c500 <iprintf>
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	4619      	mov	r1, r3
 800ae78:	482e      	ldr	r0, [pc, #184]	; (800af34 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ae7a:	f001 fb41 	bl	800c500 <iprintf>
 800ae7e:	e00c      	b.n	800ae9a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800ae80:	481b      	ldr	r0, [pc, #108]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae82:	f7fe fd9b 	bl	80099bc <DbgTraceGetFileName>
 800ae86:	4601      	mov	r1, r0
 800ae88:	f240 3352 	movw	r3, #850	; 0x352
 800ae8c:	4a19      	ldr	r2, [pc, #100]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae8e:	481a      	ldr	r0, [pc, #104]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae90:	f001 fb36 	bl	800c500 <iprintf>
 800ae94:	4828      	ldr	r0, [pc, #160]	; (800af38 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800ae96:	f001 fbcf 	bl	800c638 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	f043 0301 	orr.w	r3, r3, #1
 800aea4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d069      	beq.n	800af80 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800aeac:	4b23      	ldr	r3, [pc, #140]	; (800af3c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800aeae:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800aeb0:	1dba      	adds	r2, r7, #6
 800aeb2:	7bf8      	ldrb	r0, [r7, #15]
 800aeb4:	1cbb      	adds	r3, r7, #2
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	1d3b      	adds	r3, r7, #4
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	2205      	movs	r2, #5
 800aec0:	2100      	movs	r1, #0
 800aec2:	f7fd f802 	bl	8007eca <aci_gap_init>
 800aec6:	4603      	mov	r3, r0
 800aec8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d039      	beq.n	800af44 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800aed0:	4807      	ldr	r0, [pc, #28]	; (800aef0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aed2:	f7fe fd73 	bl	80099bc <DbgTraceGetFileName>
 800aed6:	4601      	mov	r1, r0
 800aed8:	f240 3372 	movw	r3, #882	; 0x372
 800aedc:	4a05      	ldr	r2, [pc, #20]	; (800aef4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aede:	4806      	ldr	r0, [pc, #24]	; (800aef8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aee0:	f001 fb0e 	bl	800c500 <iprintf>
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	4619      	mov	r1, r3
 800aee8:	4815      	ldr	r0, [pc, #84]	; (800af40 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800aeea:	f001 fb09 	bl	800c500 <iprintf>
 800aeee:	e036      	b.n	800af5e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800aef0:	0800d9b0 	.word	0x0800d9b0
 800aef4:	0800ec34 	.word	0x0800ec34
 800aef8:	0800d9cc 	.word	0x0800d9cc
 800aefc:	0800def0 	.word	0x0800def0
 800af00:	0800df1c 	.word	0x0800df1c
 800af04:	0800df4c 	.word	0x0800df4c
 800af08:	0800df6c 	.word	0x0800df6c
 800af0c:	0800dfc8 	.word	0x0800dfc8
 800af10:	0800e014 	.word	0x0800e014
 800af14:	0800ebec 	.word	0x0800ebec
 800af18:	0800e050 	.word	0x0800e050
 800af1c:	0800e0a8 	.word	0x0800e0a8
 800af20:	0800ebfc 	.word	0x0800ebfc
 800af24:	0800e0f0 	.word	0x0800e0f0
 800af28:	0800e148 	.word	0x0800e148
 800af2c:	0800e190 	.word	0x0800e190
 800af30:	0800e1d0 	.word	0x0800e1d0
 800af34:	0800e200 	.word	0x0800e200
 800af38:	0800e234 	.word	0x0800e234
 800af3c:	0800e258 	.word	0x0800e258
 800af40:	0800e260 	.word	0x0800e260
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800af44:	487e      	ldr	r0, [pc, #504]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800af46:	f7fe fd39 	bl	80099bc <DbgTraceGetFileName>
 800af4a:	4601      	mov	r1, r0
 800af4c:	f240 3376 	movw	r3, #886	; 0x376
 800af50:	4a7c      	ldr	r2, [pc, #496]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800af52:	487d      	ldr	r0, [pc, #500]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800af54:	f001 fad4 	bl	800c500 <iprintf>
 800af58:	487c      	ldr	r0, [pc, #496]	; (800b14c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800af5a:	f001 fb6d 	bl	800c638 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800af5e:	88fc      	ldrh	r4, [r7, #6]
 800af60:	88bd      	ldrh	r5, [r7, #4]
 800af62:	68b8      	ldr	r0, [r7, #8]
 800af64:	f7f5 f90c 	bl	8000180 <strlen>
 800af68:	4603      	mov	r3, r0
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	4613      	mov	r3, r2
 800af72:	2200      	movs	r2, #0
 800af74:	4629      	mov	r1, r5
 800af76:	4620      	mov	r0, r4
 800af78:	f7fd fb54 	bl	8008624 <aci_gatt_update_char_value>
 800af7c:	4603      	mov	r3, r0
 800af7e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800af80:	88f8      	ldrh	r0, [r7, #6]
 800af82:	8879      	ldrh	r1, [r7, #2]
 800af84:	463b      	mov	r3, r7
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2302      	movs	r3, #2
 800af8a:	2200      	movs	r2, #0
 800af8c:	f7fd fb4a 	bl	8008624 <aci_gatt_update_char_value>
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800af94:	2202      	movs	r2, #2
 800af96:	2102      	movs	r1, #2
 800af98:	2000      	movs	r0, #0
 800af9a:	f7fd fd50 	bl	8008a3e <hci_le_set_default_phy>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00f      	beq.n	800afc8 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800afa8:	4865      	ldr	r0, [pc, #404]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800afaa:	f7fe fd07 	bl	80099bc <DbgTraceGetFileName>
 800afae:	4601      	mov	r1, r0
 800afb0:	f44f 7366 	mov.w	r3, #920	; 0x398
 800afb4:	4a63      	ldr	r2, [pc, #396]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800afb6:	4864      	ldr	r0, [pc, #400]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800afb8:	f001 faa2 	bl	800c500 <iprintf>
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	4619      	mov	r1, r3
 800afc0:	4863      	ldr	r0, [pc, #396]	; (800b150 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800afc2:	f001 fa9d 	bl	800c500 <iprintf>
 800afc6:	e00c      	b.n	800afe2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800afc8:	485d      	ldr	r0, [pc, #372]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800afca:	f7fe fcf7 	bl	80099bc <DbgTraceGetFileName>
 800afce:	4601      	mov	r1, r0
 800afd0:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800afd4:	4a5b      	ldr	r2, [pc, #364]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800afd6:	485c      	ldr	r0, [pc, #368]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800afd8:	f001 fa92 	bl	800c500 <iprintf>
 800afdc:	485d      	ldr	r0, [pc, #372]	; (800b154 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800afde:	f001 fb2b 	bl	800c638 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800afe2:	4b5d      	ldr	r3, [pc, #372]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800afe8:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4618      	mov	r0, r3
 800afee:	f7fc fded 	bl	8007bcc <aci_gap_set_io_capability>
 800aff2:	4603      	mov	r3, r0
 800aff4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00f      	beq.n	800b01c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800affc:	4850      	ldr	r0, [pc, #320]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800affe:	f7fe fcdd 	bl	80099bc <DbgTraceGetFileName>
 800b002:	4601      	mov	r1, r0
 800b004:	f240 33a6 	movw	r3, #934	; 0x3a6
 800b008:	4a4e      	ldr	r2, [pc, #312]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b00a:	484f      	ldr	r0, [pc, #316]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b00c:	f001 fa78 	bl	800c500 <iprintf>
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	4619      	mov	r1, r3
 800b014:	4851      	ldr	r0, [pc, #324]	; (800b15c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800b016:	f001 fa73 	bl	800c500 <iprintf>
 800b01a:	e00c      	b.n	800b036 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b01c:	4848      	ldr	r0, [pc, #288]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b01e:	f7fe fccd 	bl	80099bc <DbgTraceGetFileName>
 800b022:	4601      	mov	r1, r0
 800b024:	f240 33aa 	movw	r3, #938	; 0x3aa
 800b028:	4a46      	ldr	r2, [pc, #280]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b02a:	4847      	ldr	r0, [pc, #284]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b02c:	f001 fa68 	bl	800c500 <iprintf>
 800b030:	484b      	ldr	r0, [pc, #300]	; (800b160 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800b032:	f001 fb01 	bl	800c638 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b036:	4b48      	ldr	r3, [pc, #288]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b038:	2201      	movs	r2, #1
 800b03a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b03c:	4b46      	ldr	r3, [pc, #280]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b03e:	2208      	movs	r2, #8
 800b040:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b042:	4b45      	ldr	r3, [pc, #276]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b044:	2210      	movs	r2, #16
 800b046:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b048:	4b43      	ldr	r3, [pc, #268]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b04e:	4b42      	ldr	r3, [pc, #264]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b050:	4a44      	ldr	r2, [pc, #272]	; (800b164 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800b052:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b054:	4b40      	ldr	r3, [pc, #256]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b056:	2200      	movs	r2, #0
 800b058:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b05a:	4b3f      	ldr	r3, [pc, #252]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b05c:	789c      	ldrb	r4, [r3, #2]
 800b05e:	4b3e      	ldr	r3, [pc, #248]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b060:	785d      	ldrb	r5, [r3, #1]
 800b062:	4b3d      	ldr	r3, [pc, #244]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b064:	791b      	ldrb	r3, [r3, #4]
 800b066:	4a3c      	ldr	r2, [pc, #240]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b068:	7952      	ldrb	r2, [r2, #5]
 800b06a:	493b      	ldr	r1, [pc, #236]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b06c:	78c9      	ldrb	r1, [r1, #3]
 800b06e:	483a      	ldr	r0, [pc, #232]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b070:	6880      	ldr	r0, [r0, #8]
 800b072:	2600      	movs	r6, #0
 800b074:	9604      	str	r6, [sp, #16]
 800b076:	9003      	str	r0, [sp, #12]
 800b078:	9102      	str	r1, [sp, #8]
 800b07a:	9201      	str	r2, [sp, #4]
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	2300      	movs	r3, #0
 800b080:	2201      	movs	r2, #1
 800b082:	4629      	mov	r1, r5
 800b084:	4620      	mov	r0, r4
 800b086:	f7fc fdf5 	bl	8007c74 <aci_gap_set_authentication_requirement>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00f      	beq.n	800b0b4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b094:	482a      	ldr	r0, [pc, #168]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b096:	f7fe fc91 	bl	80099bc <DbgTraceGetFileName>
 800b09a:	4601      	mov	r1, r0
 800b09c:	f240 33c5 	movw	r3, #965	; 0x3c5
 800b0a0:	4a28      	ldr	r2, [pc, #160]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b0a2:	4829      	ldr	r0, [pc, #164]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b0a4:	f001 fa2c 	bl	800c500 <iprintf>
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	482e      	ldr	r0, [pc, #184]	; (800b168 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800b0ae:	f001 fa27 	bl	800c500 <iprintf>
 800b0b2:	e00c      	b.n	800b0ce <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b0b4:	4822      	ldr	r0, [pc, #136]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b0b6:	f7fe fc81 	bl	80099bc <DbgTraceGetFileName>
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	f240 33c9 	movw	r3, #969	; 0x3c9
 800b0c0:	4a20      	ldr	r2, [pc, #128]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b0c2:	4821      	ldr	r0, [pc, #132]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b0c4:	f001 fa1c 	bl	800c500 <iprintf>
 800b0c8:	4828      	ldr	r0, [pc, #160]	; (800b16c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800b0ca:	f001 fab5 	bl	800c638 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b0ce:	4b22      	ldr	r3, [pc, #136]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b0d0:	789b      	ldrb	r3, [r3, #2]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d023      	beq.n	800b11e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800b0d6:	f7fd f817 	bl	8008108 <aci_gap_configure_whitelist>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00f      	beq.n	800b104 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b0e4:	4816      	ldr	r0, [pc, #88]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b0e6:	f7fe fc69 	bl	80099bc <DbgTraceGetFileName>
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b0f0:	4a14      	ldr	r2, [pc, #80]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b0f2:	4815      	ldr	r0, [pc, #84]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b0f4:	f001 fa04 	bl	800c500 <iprintf>
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	481c      	ldr	r0, [pc, #112]	; (800b170 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800b0fe:	f001 f9ff 	bl	800c500 <iprintf>
 800b102:	e00c      	b.n	800b11e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b104:	480e      	ldr	r0, [pc, #56]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b106:	f7fe fc59 	bl	80099bc <DbgTraceGetFileName>
 800b10a:	4601      	mov	r1, r0
 800b10c:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800b110:	4a0c      	ldr	r2, [pc, #48]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b112:	480d      	ldr	r0, [pc, #52]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b114:	f001 f9f4 	bl	800c500 <iprintf>
 800b118:	4816      	ldr	r0, [pc, #88]	; (800b174 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800b11a:	f001 fa8d 	bl	800c638 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b11e:	4808      	ldr	r0, [pc, #32]	; (800b140 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b120:	f7fe fc4c 	bl	80099bc <DbgTraceGetFileName>
 800b124:	4601      	mov	r1, r0
 800b126:	f240 33db 	movw	r3, #987	; 0x3db
 800b12a:	4a06      	ldr	r2, [pc, #24]	; (800b144 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b12c:	4806      	ldr	r0, [pc, #24]	; (800b148 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b12e:	f001 f9e7 	bl	800c500 <iprintf>
 800b132:	4811      	ldr	r0, [pc, #68]	; (800b178 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800b134:	f001 f9e4 	bl	800c500 <iprintf>
}
 800b138:	bf00      	nop
 800b13a:	371c      	adds	r7, #28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b140:	0800d9b0 	.word	0x0800d9b0
 800b144:	0800ec34 	.word	0x0800ec34
 800b148:	0800d9cc 	.word	0x0800d9cc
 800b14c:	0800e290 	.word	0x0800e290
 800b150:	0800e2b0 	.word	0x0800e2b0
 800b154:	0800e2ec 	.word	0x0800e2ec
 800b158:	20000184 	.word	0x20000184
 800b15c:	0800e318 	.word	0x0800e318
 800b160:	0800e358 	.word	0x0800e358
 800b164:	0001b207 	.word	0x0001b207
 800b168:	0800e388 	.word	0x0800e388
 800b16c:	0800e3d4 	.word	0x0800e3d4
 800b170:	0800e410 	.word	0x0800e410
 800b174:	0800e450 	.word	0x0800e450
 800b178:	0800e480 	.word	0x0800e480

0800b17c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	; 0x30
 800b180:	af08      	add	r7, sp, #32
 800b182:	4603      	mov	r3, r0
 800b184:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b186:	2392      	movs	r3, #146	; 0x92
 800b188:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b18a:	4a32      	ldr	r2, [pc, #200]	; (800b254 <Adv_Request+0xd8>)
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b192:	2300      	movs	r3, #0
 800b194:	9306      	str	r3, [sp, #24]
 800b196:	2300      	movs	r3, #0
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	2300      	movs	r3, #0
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9303      	str	r3, [sp, #12]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9302      	str	r3, [sp, #8]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	22a0      	movs	r2, #160	; 0xa0
 800b1b2:	2180      	movs	r1, #128	; 0x80
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f7fc fc0f 	bl	80079d8 <aci_gap_set_discoverable>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00f      	beq.n	800b1e4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b1c4:	4824      	ldr	r0, [pc, #144]	; (800b258 <Adv_Request+0xdc>)
 800b1c6:	f7fe fbf9 	bl	80099bc <DbgTraceGetFileName>
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	f240 33f1 	movw	r3, #1009	; 0x3f1
 800b1d0:	4a22      	ldr	r2, [pc, #136]	; (800b25c <Adv_Request+0xe0>)
 800b1d2:	4823      	ldr	r0, [pc, #140]	; (800b260 <Adv_Request+0xe4>)
 800b1d4:	f001 f994 	bl	800c500 <iprintf>
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4821      	ldr	r0, [pc, #132]	; (800b264 <Adv_Request+0xe8>)
 800b1de:	f001 f98f 	bl	800c500 <iprintf>
 800b1e2:	e00c      	b.n	800b1fe <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b1e4:	481c      	ldr	r0, [pc, #112]	; (800b258 <Adv_Request+0xdc>)
 800b1e6:	f7fe fbe9 	bl	80099bc <DbgTraceGetFileName>
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	; (800b25c <Adv_Request+0xe0>)
 800b1f2:	481b      	ldr	r0, [pc, #108]	; (800b260 <Adv_Request+0xe4>)
 800b1f4:	f001 f984 	bl	800c500 <iprintf>
 800b1f8:	481b      	ldr	r0, [pc, #108]	; (800b268 <Adv_Request+0xec>)
 800b1fa:	f001 fa1d 	bl	800c638 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b1fe:	491b      	ldr	r1, [pc, #108]	; (800b26c <Adv_Request+0xf0>)
 800b200:	2013      	movs	r0, #19
 800b202:	f7fc ff0f 	bl	8008024 <aci_gap_update_adv_data>
 800b206:	4603      	mov	r3, r0
 800b208:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00f      	beq.n	800b230 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b210:	4811      	ldr	r0, [pc, #68]	; (800b258 <Adv_Request+0xdc>)
 800b212:	f7fe fbd3 	bl	80099bc <DbgTraceGetFileName>
 800b216:	4601      	mov	r1, r0
 800b218:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800b21c:	4a0f      	ldr	r2, [pc, #60]	; (800b25c <Adv_Request+0xe0>)
 800b21e:	4810      	ldr	r0, [pc, #64]	; (800b260 <Adv_Request+0xe4>)
 800b220:	f001 f96e 	bl	800c500 <iprintf>
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	4619      	mov	r1, r3
 800b228:	4811      	ldr	r0, [pc, #68]	; (800b270 <Adv_Request+0xf4>)
 800b22a:	f001 f969 	bl	800c500 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b22e:	e00d      	b.n	800b24c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b230:	4809      	ldr	r0, [pc, #36]	; (800b258 <Adv_Request+0xdc>)
 800b232:	f7fe fbc3 	bl	80099bc <DbgTraceGetFileName>
 800b236:	4601      	mov	r1, r0
 800b238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b23c:	4a07      	ldr	r2, [pc, #28]	; (800b25c <Adv_Request+0xe0>)
 800b23e:	4808      	ldr	r0, [pc, #32]	; (800b260 <Adv_Request+0xe4>)
 800b240:	f001 f95e 	bl	800c500 <iprintf>
 800b244:	480b      	ldr	r0, [pc, #44]	; (800b274 <Adv_Request+0xf8>)
 800b246:	f001 f95b 	bl	800c500 <iprintf>
  return;
 800b24a:	bf00      	nop
}
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000184 	.word	0x20000184
 800b258:	0800d9b0 	.word	0x0800d9b0
 800b25c:	0800ec4c 	.word	0x0800ec4c
 800b260:	0800d9cc 	.word	0x0800d9cc
 800b264:	0800e4ac 	.word	0x0800e4ac
 800b268:	0800e4e4 	.word	0x0800e4e4
 800b26c:	20000010 	.word	0x20000010
 800b270:	0800e50c 	.word	0x0800e50c
 800b274:	0800e540 	.word	0x0800e540

0800b278 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b27e:	f7ff f963 	bl	800a548 <LL_FLASH_GetUDN>
 800b282:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28a:	d023      	beq.n	800b2d4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b28c:	f7ff f974 	bl	800a578 <LL_FLASH_GetSTCompanyID>
 800b290:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b292:	f7ff f965 	bl	800a560 <LL_FLASH_GetDeviceID>
 800b296:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	4b16      	ldr	r3, [pc, #88]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b29e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	0a1b      	lsrs	r3, r3, #8
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2a8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2b0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	4b10      	ldr	r3, [pc, #64]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2b8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	0a1b      	lsrs	r3, r3, #8
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2c2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	0c1b      	lsrs	r3, r3, #16
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2cc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <BleGetBdAddress+0x80>)
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	e00b      	b.n	800b2ec <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f7fe fc4f 	bl	8009b78 <OTP_Read>
 800b2da:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e001      	b.n	800b2ec <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <BleGetBdAddress+0x84>)
 800b2ea:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b2ec:	697b      	ldr	r3, [r7, #20]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20001768 	.word	0x20001768
 800b2fc:	0800ebe4 	.word	0x0800ebe4

0800b300 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b306:	4b1f      	ldr	r3, [pc, #124]	; (800b384 <Adv_Cancel+0x84>)
 800b308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b30c:	2b05      	cmp	r3, #5
 800b30e:	d035      	beq.n	800b37c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b310:	2392      	movs	r3, #146	; 0x92
 800b312:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b314:	f7fc fb3c 	bl	8007990 <aci_gap_set_non_discoverable>
 800b318:	4603      	mov	r3, r0
 800b31a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b31c:	4b19      	ldr	r3, [pc, #100]	; (800b384 <Adv_Cancel+0x84>)
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b324:	79fb      	ldrb	r3, [r7, #7]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00d      	beq.n	800b346 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b32a:	4817      	ldr	r0, [pc, #92]	; (800b388 <Adv_Cancel+0x88>)
 800b32c:	f7fe fb46 	bl	80099bc <DbgTraceGetFileName>
 800b330:	4601      	mov	r1, r0
 800b332:	f240 434e 	movw	r3, #1102	; 0x44e
 800b336:	4a15      	ldr	r2, [pc, #84]	; (800b38c <Adv_Cancel+0x8c>)
 800b338:	4815      	ldr	r0, [pc, #84]	; (800b390 <Adv_Cancel+0x90>)
 800b33a:	f001 f8e1 	bl	800c500 <iprintf>
 800b33e:	4815      	ldr	r0, [pc, #84]	; (800b394 <Adv_Cancel+0x94>)
 800b340:	f001 f8de 	bl	800c500 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b344:	e01a      	b.n	800b37c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800b346:	4810      	ldr	r0, [pc, #64]	; (800b388 <Adv_Cancel+0x88>)
 800b348:	f7fe fb38 	bl	80099bc <DbgTraceGetFileName>
 800b34c:	4601      	mov	r1, r0
 800b34e:	f240 4352 	movw	r3, #1106	; 0x452
 800b352:	4a0e      	ldr	r2, [pc, #56]	; (800b38c <Adv_Cancel+0x8c>)
 800b354:	480e      	ldr	r0, [pc, #56]	; (800b390 <Adv_Cancel+0x90>)
 800b356:	f001 f8d3 	bl	800c500 <iprintf>
 800b35a:	480f      	ldr	r0, [pc, #60]	; (800b398 <Adv_Cancel+0x98>)
 800b35c:	f001 f8d0 	bl	800c500 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b360:	4809      	ldr	r0, [pc, #36]	; (800b388 <Adv_Cancel+0x88>)
 800b362:	f7fe fb2b 	bl	80099bc <DbgTraceGetFileName>
 800b366:	4601      	mov	r1, r0
 800b368:	f240 4353 	movw	r3, #1107	; 0x453
 800b36c:	4a07      	ldr	r2, [pc, #28]	; (800b38c <Adv_Cancel+0x8c>)
 800b36e:	4808      	ldr	r0, [pc, #32]	; (800b390 <Adv_Cancel+0x90>)
 800b370:	f001 f8c6 	bl	800c500 <iprintf>
 800b374:	4809      	ldr	r0, [pc, #36]	; (800b39c <Adv_Cancel+0x9c>)
 800b376:	f001 f8c3 	bl	800c500 <iprintf>
  return;
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
}
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000184 	.word	0x20000184
 800b388:	0800d9b0 	.word	0x0800d9b0
 800b38c:	0800ec58 	.word	0x0800ec58
 800b390:	0800d9cc 	.word	0x0800d9cc
 800b394:	0800e568 	.word	0x0800e568
 800b398:	0800e58c 	.word	0x0800e58c
 800b39c:	0800e594 	.word	0x0800e594

0800b3a0 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800b3a4:	f000 f956 	bl	800b654 <P2PS_APP_SW1_Button_Action>
}
 800b3a8:	bf00      	nop
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2002      	movs	r0, #2
 800b3b8:	f000 ff42 	bl	800c240 <UTIL_SEQ_SetTask>

  return;
 800b3bc:	bf00      	nop
}
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b3cc:	2001      	movs	r0, #1
 800b3ce:	f000 ffa3 	bl	800c318 <UTIL_SEQ_SetEvt>

  return;
 800b3d2:	bf00      	nop
}
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	f000 ffb8 	bl	800c358 <UTIL_SEQ_WaitEvt>

  return;
 800b3e8:	bf00      	nop
}
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	3308      	adds	r3, #8
 800b402:	4618      	mov	r0, r3
 800b404:	f7fd fc82 	bl	8008d0c <SVCCTL_UserEvtRx>
 800b408:	4603      	mov	r3, r0
 800b40a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2201      	movs	r2, #1
 800b416:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b418:	e003      	b.n	800b422 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
  return;
 800b420:	bf00      	nop
}
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <BLE_StatusNot+0x16>
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d006      	beq.n	800b44a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b43c:	e00b      	b.n	800b456 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b43e:	2307      	movs	r3, #7
 800b440:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 ff28 	bl	800c298 <UTIL_SEQ_PauseTask>
      break;
 800b448:	e005      	b.n	800b456 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b44a:	2307      	movs	r3, #7
 800b44c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 ff42 	bl	800c2d8 <UTIL_SEQ_ResumeTask>
      break;
 800b454:	bf00      	nop
  }

  return;
 800b456:	bf00      	nop
}
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d861      	bhi.n	800b534 <Custom_STM_App_Notification+0xd4>
 800b470:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <Custom_STM_App_Notification+0x18>)
 800b472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b476:	bf00      	nop
 800b478:	0800b535 	.word	0x0800b535
 800b47c:	0800b489 	.word	0x0800b489
 800b480:	0800b4f5 	.word	0x0800b4f5
 800b484:	0800b515 	.word	0x0800b515
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 800b488:	482e      	ldr	r0, [pc, #184]	; (800b544 <Custom_STM_App_Notification+0xe4>)
 800b48a:	f7fe fa97 	bl	80099bc <DbgTraceGetFileName>
 800b48e:	4601      	mov	r1, r0
 800b490:	236d      	movs	r3, #109	; 0x6d
 800b492:	4a2d      	ldr	r2, [pc, #180]	; (800b548 <Custom_STM_App_Notification+0xe8>)
 800b494:	482d      	ldr	r0, [pc, #180]	; (800b54c <Custom_STM_App_Notification+0xec>)
 800b496:	f001 f833 	bl	800c500 <iprintf>
 800b49a:	482d      	ldr	r0, [pc, #180]	; (800b550 <Custom_STM_App_Notification+0xf0>)
 800b49c:	f001 f8cc 	bl	800c638 <puts>
    	APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800b4a0:	4828      	ldr	r0, [pc, #160]	; (800b544 <Custom_STM_App_Notification+0xe4>)
 800b4a2:	f7fe fa8b 	bl	80099bc <DbgTraceGetFileName>
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	236e      	movs	r3, #110	; 0x6e
 800b4aa:	4a27      	ldr	r2, [pc, #156]	; (800b548 <Custom_STM_App_Notification+0xe8>)
 800b4ac:	4827      	ldr	r0, [pc, #156]	; (800b54c <Custom_STM_App_Notification+0xec>)
 800b4ae:	f001 f827 	bl	800c500 <iprintf>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	4823      	ldr	r0, [pc, #140]	; (800b554 <Custom_STM_App_Notification+0xf4>)
 800b4c6:	f001 f81b 	bl	800c500 <iprintf>
    	 if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d103      	bne.n	800b4de <Custom_STM_App_Notification+0x7e>
    	      {
    	        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800b4d6:	2120      	movs	r1, #32
 800b4d8:	481f      	ldr	r0, [pc, #124]	; (800b558 <Custom_STM_App_Notification+0xf8>)
 800b4da:	f7f8 fc57 	bl	8003d8c <HAL_GPIO_TogglePin>
    	      }
    	      if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d126      	bne.n	800b538 <Custom_STM_App_Notification+0xd8>
    	      {
    	    	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800b4ea:	2120      	movs	r1, #32
 800b4ec:	481a      	ldr	r0, [pc, #104]	; (800b558 <Custom_STM_App_Notification+0xf8>)
 800b4ee:	f7f8 fc4d 	bl	8003d8c <HAL_GPIO_TogglePin>
    	      }
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800b4f2:	e021      	b.n	800b538 <Custom_STM_App_Notification+0xd8>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 800b4f4:	4813      	ldr	r0, [pc, #76]	; (800b544 <Custom_STM_App_Notification+0xe4>)
 800b4f6:	f7fe fa61 	bl	80099bc <DbgTraceGetFileName>
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	237c      	movs	r3, #124	; 0x7c
 800b4fe:	4a12      	ldr	r2, [pc, #72]	; (800b548 <Custom_STM_App_Notification+0xe8>)
 800b500:	4812      	ldr	r0, [pc, #72]	; (800b54c <Custom_STM_App_Notification+0xec>)
 800b502:	f000 fffd 	bl	800c500 <iprintf>
 800b506:	4815      	ldr	r0, [pc, #84]	; (800b55c <Custom_STM_App_Notification+0xfc>)
 800b508:	f001 f896 	bl	800c638 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 1;
 800b50c:	4b14      	ldr	r3, [pc, #80]	; (800b560 <Custom_STM_App_Notification+0x100>)
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800b512:	e012      	b.n	800b53a <Custom_STM_App_Notification+0xda>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 800b514:	480b      	ldr	r0, [pc, #44]	; (800b544 <Custom_STM_App_Notification+0xe4>)
 800b516:	f7fe fa51 	bl	80099bc <DbgTraceGetFileName>
 800b51a:	4601      	mov	r1, r0
 800b51c:	2384      	movs	r3, #132	; 0x84
 800b51e:	4a0a      	ldr	r2, [pc, #40]	; (800b548 <Custom_STM_App_Notification+0xe8>)
 800b520:	480a      	ldr	r0, [pc, #40]	; (800b54c <Custom_STM_App_Notification+0xec>)
 800b522:	f000 ffed 	bl	800c500 <iprintf>
 800b526:	480f      	ldr	r0, [pc, #60]	; (800b564 <Custom_STM_App_Notification+0x104>)
 800b528:	f001 f886 	bl	800c638 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 0;
 800b52c:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <Custom_STM_App_Notification+0x100>)
 800b52e:	2200      	movs	r2, #0
 800b530:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800b532:	e002      	b.n	800b53a <Custom_STM_App_Notification+0xda>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b534:	bf00      	nop
 800b536:	e000      	b.n	800b53a <Custom_STM_App_Notification+0xda>
      break;
 800b538:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b53a:	bf00      	nop
}
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	0800e5b0 	.word	0x0800e5b0
 800b548:	0800ec64 	.word	0x0800ec64
 800b54c:	0800e5d0 	.word	0x0800e5d0
 800b550:	0800e5e4 	.word	0x0800e5e4
 800b554:	0800e610 	.word	0x0800e610
 800b558:	48000400 	.word	0x48000400
 800b55c:	0800e630 	.word	0x0800e630
 800b560:	20000208 	.word	0x20000208
 800b564:	0800e660 	.word	0x0800e660

0800b568 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <Custom_APP_Notification+0x16>
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d002      	beq.n	800b582 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b57c:	e002      	b.n	800b584 <Custom_APP_Notification+0x1c>
      break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <Custom_APP_Notification+0x1c>
      break;
 800b582:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b584:	bf00      	nop
}
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 800b594:	4a06      	ldr	r2, [pc, #24]	; (800b5b0 <Custom_APP_Init+0x20>)
 800b596:	2100      	movs	r1, #0
 800b598:	2004      	movs	r0, #4
 800b59a:	f000 fe2f 	bl	800c1fc <UTIL_SEQ_RegTask>

	  Custom_App_Context.Switch_c_Notification_Status = 0;
 800b59e:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <Custom_APP_Init+0x24>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.SW1_Status = 0;
 800b5a4:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <Custom_APP_Init+0x24>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b5aa:	bf00      	nop
}
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	0800b5b9 	.word	0x0800b5b9
 800b5b4:	20000208 	.word	0x20000208

0800b5b8 <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 800b5b8:	b5b0      	push	{r4, r5, r7, lr}
 800b5ba:	b08a      	sub	sp, #40	; 0x28
 800b5bc:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN Switch_c_NS_1*/

  uint8_t test[32]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};
 800b5c4:	4b1c      	ldr	r3, [pc, #112]	; (800b638 <Custom_Switch_c_Send_Notification+0x80>)
 800b5c6:	1d3c      	adds	r4, r7, #4
 800b5c8:	461d      	mov	r5, r3
 800b5ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b5d2:	6020      	str	r0, [r4, #0]
 800b5d4:	3404      	adds	r4, #4
 800b5d6:	8021      	strh	r1, [r4, #0]
 800b5d8:	3402      	adds	r4, #2
 800b5da:	0c0b      	lsrs	r3, r1, #16
 800b5dc:	7023      	strb	r3, [r4, #0]
 800b5de:	f107 031b 	add.w	r3, r7, #27
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	721a      	strb	r2, [r3, #8]

	  if(Custom_App_Context.Switch_c_Notification_Status)
 800b5ea:	4b14      	ldr	r3, [pc, #80]	; (800b63c <Custom_Switch_c_Send_Notification+0x84>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d007      	beq.n	800b602 <Custom_Switch_c_Send_Notification+0x4a>
		{
		  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)test, 32);
 800b5f2:	1d3b      	adds	r3, r7, #4
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800b5fc:	f000 f832 	bl	800b664 <P2PS_NOTIFY_INT8>
 800b600:	e00c      	b.n	800b61c <Custom_Switch_c_Send_Notification+0x64>
		  */
		}

	 else
	 {
	   APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800b602:	480f      	ldr	r0, [pc, #60]	; (800b640 <Custom_Switch_c_Send_Notification+0x88>)
 800b604:	f7fe f9da 	bl	80099bc <DbgTraceGetFileName>
 800b608:	4601      	mov	r1, r0
 800b60a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800b60e:	4a0d      	ldr	r2, [pc, #52]	; (800b644 <Custom_Switch_c_Send_Notification+0x8c>)
 800b610:	480d      	ldr	r0, [pc, #52]	; (800b648 <Custom_Switch_c_Send_Notification+0x90>)
 800b612:	f000 ff75 	bl	800c500 <iprintf>
 800b616:	480d      	ldr	r0, [pc, #52]	; (800b64c <Custom_Switch_c_Send_Notification+0x94>)
 800b618:	f001 f80e 	bl	800c638 <puts>
	 }
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 800b61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <Custom_Switch_c_Send_Notification+0x76>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800b624:	490a      	ldr	r1, [pc, #40]	; (800b650 <Custom_Switch_c_Send_Notification+0x98>)
 800b626:	2001      	movs	r0, #1
 800b628:	f000 f9d6 	bl	800b9d8 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
}
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bdb0      	pop	{r4, r5, r7, pc}
 800b636:	bf00      	nop
 800b638:	0800e6d8 	.word	0x0800e6d8
 800b63c:	20000208 	.word	0x20000208
 800b640:	0800e5b0 	.word	0x0800e5b0
 800b644:	0800ec80 	.word	0x0800ec80
 800b648:	0800e5d0 	.word	0x0800e5d0
 800b64c:	0800e690 	.word	0x0800e690
 800b650:	20001774 	.word	0x20001774

0800b654 <P2PS_APP_SW1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void)
  {
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b658:	2100      	movs	r1, #0
 800b65a:	2004      	movs	r0, #4
 800b65c:	f000 fdf0 	bl	800c240 <UTIL_SEQ_SetTask>

    return;
 800b660:	bf00      	nop
  }
 800b662:	bd80      	pop	{r7, pc}

0800b664 <P2PS_NOTIFY_INT8>:
#define COPY_MY_LED_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x41,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)
#define COPY_MY_SWITCH_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x42,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)

/* USER CODE BEGIN PF */
tBleStatus P2PS_NOTIFY_INT8(uint16_t UUID, uint8_t *pPayload, uint8_t size)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af02      	add	r7, sp, #8
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	80fb      	strh	r3, [r7, #6]
 800b670:	4613      	mov	r3, r2
 800b672:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b674:	2392      	movs	r3, #146	; 0x92
 800b676:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b67e:	4293      	cmp	r3, r2
 800b680:	d10d      	bne.n	800b69e <P2PS_NOTIFY_INT8+0x3a>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <P2PS_NOTIFY_INT8+0x48>)
 800b684:	8818      	ldrh	r0, [r3, #0]
 800b686:	4b09      	ldr	r3, [pc, #36]	; (800b6ac <P2PS_NOTIFY_INT8+0x48>)
 800b688:	8899      	ldrh	r1, [r3, #4]
 800b68a:	797a      	ldrb	r2, [r7, #5]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	4613      	mov	r3, r2
 800b692:	2200      	movs	r2, #0
 800b694:	f7fc ffc6 	bl	8008624 <aci_gatt_update_char_value>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
    		 	 	 	 	 CustomContext.CustomSwitch_CHdle,
                              0, /* charValOffset */
                             size, /* charValueLen */
                             (uint8_t *)  pPayload);

      break;
 800b69c:	e000      	b.n	800b6a0 <P2PS_NOTIFY_INT8+0x3c>

    default:
      break;
 800b69e:	bf00      	nop
  }

  return result;
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000168 	.word	0x20000168

0800b6b0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2bff      	cmp	r3, #255	; 0xff
 800b6ca:	d15e      	bne.n	800b78a <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	3302      	adds	r3, #2
 800b6d0:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	f640 4214 	movw	r2, #3092	; 0xc14
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d04e      	beq.n	800b77e <Custom_STM_Event_Handler+0xce>
 800b6e0:	f640 4214 	movw	r2, #3092	; 0xc14
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	dc4c      	bgt.n	800b782 <Custom_STM_Event_Handler+0xd2>
 800b6e8:	f640 4201 	movw	r2, #3073	; 0xc01
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <Custom_STM_Event_Handler+0x48>
 800b6f0:	f640 4213 	movw	r2, #3091	; 0xc13
 800b6f4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b6f6:	e047      	b.n	800b788 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	3302      	adds	r3, #2
 800b6fc:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	885b      	ldrh	r3, [r3, #2]
 800b702:	b29b      	uxth	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <Custom_STM_Event_Handler+0xe8>)
 800b708:	889b      	ldrh	r3, [r3, #4]
 800b70a:	3302      	adds	r3, #2
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d119      	bne.n	800b744 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	7a1b      	ldrb	r3, [r3, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <Custom_STM_Event_Handler+0x74>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d008      	beq.n	800b734 <Custom_STM_Event_Handler+0x84>
              break;
 800b722:	e02b      	b.n	800b77c <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800b724:	2303      	movs	r3, #3
 800b726:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b728:	f107 0308 	add.w	r3, r7, #8
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fe97 	bl	800b460 <Custom_STM_App_Notification>
                break;
 800b732:	e023      	b.n	800b77c <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800b734:	2302      	movs	r3, #2
 800b736:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fe8f 	bl	800b460 <Custom_STM_App_Notification>
                break;
 800b742:	e01b      	b.n	800b77c <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	885b      	ldrh	r3, [r3, #2]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	461a      	mov	r2, r3
 800b74c:	4b12      	ldr	r3, [pc, #72]	; (800b798 <Custom_STM_Event_Handler+0xe8>)
 800b74e:	885b      	ldrh	r3, [r3, #2]
 800b750:	3301      	adds	r3, #1
 800b752:	429a      	cmp	r2, r3
 800b754:	d117      	bne.n	800b786 <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b756:	2301      	movs	r3, #1
 800b758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 800b75c:	2301      	movs	r3, #1
 800b75e:	723b      	strb	r3, [r7, #8]
                        Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	88db      	ldrh	r3, [r3, #6]
 800b764:	b29b      	uxth	r3, r3
 800b766:	b2db      	uxtb	r3, r3
 800b768:	743b      	strb	r3, [r7, #16]
                        Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	3308      	adds	r3, #8
 800b76e:	60fb      	str	r3, [r7, #12]
                        Custom_STM_App_Notification(&Notification);
 800b770:	f107 0308 	add.w	r3, r7, #8
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fe73 	bl	800b460 <Custom_STM_App_Notification>
          break;
 800b77a:	e004      	b.n	800b786 <Custom_STM_Event_Handler+0xd6>
 800b77c:	e003      	b.n	800b786 <Custom_STM_Event_Handler+0xd6>
          break;
 800b77e:	bf00      	nop
 800b780:	e004      	b.n	800b78c <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b782:	bf00      	nop
 800b784:	e002      	b.n	800b78c <Custom_STM_Event_Handler+0xdc>
          break;
 800b786:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b788:	e000      	b.n	800b78c <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b78a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800b790:	4618      	mov	r0, r3
 800b792:	3728      	adds	r7, #40	; 0x28
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20000168 	.word	0x20000168

0800b79c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08c      	sub	sp, #48	; 0x30
 800b7a0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b7a2:	2392      	movs	r3, #146	; 0x92
 800b7a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b7a6:	487e      	ldr	r0, [pc, #504]	; (800b9a0 <SVCCTL_InitCustomSvc+0x204>)
 800b7a8:	f7fd fa96 	bl	8008cd8 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Switch_char +
   *                                1 for My_Switch_char configuration descriptor +
   *                              = 6
   */

  COPY_MYP2PS_UUID(uuid.Char_UUID_128);
 800b7ac:	238f      	movs	r3, #143	; 0x8f
 800b7ae:	713b      	strb	r3, [r7, #4]
 800b7b0:	23e5      	movs	r3, #229	; 0xe5
 800b7b2:	717b      	strb	r3, [r7, #5]
 800b7b4:	23b3      	movs	r3, #179	; 0xb3
 800b7b6:	71bb      	strb	r3, [r7, #6]
 800b7b8:	23d5      	movs	r3, #213	; 0xd5
 800b7ba:	71fb      	strb	r3, [r7, #7]
 800b7bc:	232e      	movs	r3, #46	; 0x2e
 800b7be:	723b      	strb	r3, [r7, #8]
 800b7c0:	237f      	movs	r3, #127	; 0x7f
 800b7c2:	727b      	strb	r3, [r7, #9]
 800b7c4:	234a      	movs	r3, #74	; 0x4a
 800b7c6:	72bb      	strb	r3, [r7, #10]
 800b7c8:	2398      	movs	r3, #152	; 0x98
 800b7ca:	72fb      	strb	r3, [r7, #11]
 800b7cc:	232a      	movs	r3, #42	; 0x2a
 800b7ce:	733b      	strb	r3, [r7, #12]
 800b7d0:	2348      	movs	r3, #72	; 0x48
 800b7d2:	737b      	strb	r3, [r7, #13]
 800b7d4:	237a      	movs	r3, #122	; 0x7a
 800b7d6:	73bb      	strb	r3, [r7, #14]
 800b7d8:	23cc      	movs	r3, #204	; 0xcc
 800b7da:	73fb      	strb	r3, [r7, #15]
 800b7dc:	2340      	movs	r3, #64	; 0x40
 800b7de:	743b      	strb	r3, [r7, #16]
 800b7e0:	23fe      	movs	r3, #254	; 0xfe
 800b7e2:	747b      	strb	r3, [r7, #17]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	74bb      	strb	r3, [r7, #18]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b7ec:	1d39      	adds	r1, r7, #4
 800b7ee:	4b6d      	ldr	r3, [pc, #436]	; (800b9a4 <SVCCTL_InitCustomSvc+0x208>)
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	2306      	movs	r3, #6
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	2002      	movs	r0, #2
 800b7f8:	f7fc fd36 	bl	8008268 <aci_gatt_add_service>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomMyp2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00f      	beq.n	800b826 <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MyP2PS, error code: 0x%x \n\r", ret);
 800b806:	4868      	ldr	r0, [pc, #416]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b808:	f7fe f8d8 	bl	80099bc <DbgTraceGetFileName>
 800b80c:	4601      	mov	r1, r0
 800b80e:	f240 133b 	movw	r3, #315	; 0x13b
 800b812:	4a66      	ldr	r2, [pc, #408]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b814:	4866      	ldr	r0, [pc, #408]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b816:	f000 fe73 	bl	800c500 <iprintf>
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	4619      	mov	r1, r3
 800b81e:	4865      	ldr	r0, [pc, #404]	; (800b9b4 <SVCCTL_InitCustomSvc+0x218>)
 800b820:	f000 fe6e 	bl	800c500 <iprintf>
 800b824:	e00c      	b.n	800b840 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MyP2PS \n\r");
 800b826:	4860      	ldr	r0, [pc, #384]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b828:	f7fe f8c8 	bl	80099bc <DbgTraceGetFileName>
 800b82c:	4601      	mov	r1, r0
 800b82e:	f240 133f 	movw	r3, #319	; 0x13f
 800b832:	4a5e      	ldr	r2, [pc, #376]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b834:	485e      	ldr	r0, [pc, #376]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b836:	f000 fe63 	bl	800c500 <iprintf>
 800b83a:	485f      	ldr	r0, [pc, #380]	; (800b9b8 <SVCCTL_InitCustomSvc+0x21c>)
 800b83c:	f000 fe60 	bl	800c500 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800b840:	2319      	movs	r3, #25
 800b842:	713b      	strb	r3, [r7, #4]
 800b844:	23ed      	movs	r3, #237	; 0xed
 800b846:	717b      	strb	r3, [r7, #5]
 800b848:	2382      	movs	r3, #130	; 0x82
 800b84a:	71bb      	strb	r3, [r7, #6]
 800b84c:	23ae      	movs	r3, #174	; 0xae
 800b84e:	71fb      	strb	r3, [r7, #7]
 800b850:	23ed      	movs	r3, #237	; 0xed
 800b852:	723b      	strb	r3, [r7, #8]
 800b854:	2321      	movs	r3, #33	; 0x21
 800b856:	727b      	strb	r3, [r7, #9]
 800b858:	234c      	movs	r3, #76	; 0x4c
 800b85a:	72bb      	strb	r3, [r7, #10]
 800b85c:	239d      	movs	r3, #157	; 0x9d
 800b85e:	72fb      	strb	r3, [r7, #11]
 800b860:	2341      	movs	r3, #65	; 0x41
 800b862:	733b      	strb	r3, [r7, #12]
 800b864:	2345      	movs	r3, #69	; 0x45
 800b866:	737b      	strb	r3, [r7, #13]
 800b868:	2322      	movs	r3, #34	; 0x22
 800b86a:	73bb      	strb	r3, [r7, #14]
 800b86c:	238e      	movs	r3, #142	; 0x8e
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	2341      	movs	r3, #65	; 0x41
 800b872:	743b      	strb	r3, [r7, #16]
 800b874:	23fe      	movs	r3, #254	; 0xfe
 800b876:	747b      	strb	r3, [r7, #17]
 800b878:	2300      	movs	r3, #0
 800b87a:	74bb      	strb	r3, [r7, #18]
 800b87c:	2300      	movs	r3, #0
 800b87e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800b880:	4b48      	ldr	r3, [pc, #288]	; (800b9a4 <SVCCTL_InitCustomSvc+0x208>)
 800b882:	8818      	ldrh	r0, [r3, #0]
 800b884:	4b4d      	ldr	r3, [pc, #308]	; (800b9bc <SVCCTL_InitCustomSvc+0x220>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	1d3a      	adds	r2, r7, #4
 800b88c:	494c      	ldr	r1, [pc, #304]	; (800b9c0 <SVCCTL_InitCustomSvc+0x224>)
 800b88e:	9105      	str	r1, [sp, #20]
 800b890:	2101      	movs	r1, #1
 800b892:	9104      	str	r1, [sp, #16]
 800b894:	2110      	movs	r1, #16
 800b896:	9103      	str	r1, [sp, #12]
 800b898:	2101      	movs	r1, #1
 800b89a:	9102      	str	r1, [sp, #8]
 800b89c:	2100      	movs	r1, #0
 800b89e:	9101      	str	r1, [sp, #4]
 800b8a0:	2106      	movs	r1, #6
 800b8a2:	9100      	str	r1, [sp, #0]
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	f7fc fdb5 	bl	8008414 <aci_gatt_add_char>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00f      	beq.n	800b8d4 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800b8b4:	483c      	ldr	r0, [pc, #240]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b8b6:	f7fe f881 	bl	80099bc <DbgTraceGetFileName>
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	f240 1351 	movw	r3, #337	; 0x151
 800b8c0:	4a3a      	ldr	r2, [pc, #232]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b8c2:	483b      	ldr	r0, [pc, #236]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b8c4:	f000 fe1c 	bl	800c500 <iprintf>
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	483d      	ldr	r0, [pc, #244]	; (800b9c4 <SVCCTL_InitCustomSvc+0x228>)
 800b8ce:	f000 fe17 	bl	800c500 <iprintf>
 800b8d2:	e00c      	b.n	800b8ee <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800b8d4:	4834      	ldr	r0, [pc, #208]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b8d6:	f7fe f871 	bl	80099bc <DbgTraceGetFileName>
 800b8da:	4601      	mov	r1, r0
 800b8dc:	f240 1355 	movw	r3, #341	; 0x155
 800b8e0:	4a32      	ldr	r2, [pc, #200]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b8e2:	4833      	ldr	r0, [pc, #204]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b8e4:	f000 fe0c 	bl	800c500 <iprintf>
 800b8e8:	4837      	ldr	r0, [pc, #220]	; (800b9c8 <SVCCTL_InitCustomSvc+0x22c>)
 800b8ea:	f000 fe09 	bl	800c500 <iprintf>
  }
  /**
   *  My_Switch_char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800b8ee:	2319      	movs	r3, #25
 800b8f0:	713b      	strb	r3, [r7, #4]
 800b8f2:	23ed      	movs	r3, #237	; 0xed
 800b8f4:	717b      	strb	r3, [r7, #5]
 800b8f6:	2382      	movs	r3, #130	; 0x82
 800b8f8:	71bb      	strb	r3, [r7, #6]
 800b8fa:	23ae      	movs	r3, #174	; 0xae
 800b8fc:	71fb      	strb	r3, [r7, #7]
 800b8fe:	23ed      	movs	r3, #237	; 0xed
 800b900:	723b      	strb	r3, [r7, #8]
 800b902:	2321      	movs	r3, #33	; 0x21
 800b904:	727b      	strb	r3, [r7, #9]
 800b906:	234c      	movs	r3, #76	; 0x4c
 800b908:	72bb      	strb	r3, [r7, #10]
 800b90a:	239d      	movs	r3, #157	; 0x9d
 800b90c:	72fb      	strb	r3, [r7, #11]
 800b90e:	2341      	movs	r3, #65	; 0x41
 800b910:	733b      	strb	r3, [r7, #12]
 800b912:	2345      	movs	r3, #69	; 0x45
 800b914:	737b      	strb	r3, [r7, #13]
 800b916:	2322      	movs	r3, #34	; 0x22
 800b918:	73bb      	strb	r3, [r7, #14]
 800b91a:	238e      	movs	r3, #142	; 0x8e
 800b91c:	73fb      	strb	r3, [r7, #15]
 800b91e:	2342      	movs	r3, #66	; 0x42
 800b920:	743b      	strb	r3, [r7, #16]
 800b922:	23fe      	movs	r3, #254	; 0xfe
 800b924:	747b      	strb	r3, [r7, #17]
 800b926:	2300      	movs	r3, #0
 800b928:	74bb      	strb	r3, [r7, #18]
 800b92a:	2300      	movs	r3, #0
 800b92c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <SVCCTL_InitCustomSvc+0x208>)
 800b930:	8818      	ldrh	r0, [r3, #0]
 800b932:	1d3a      	adds	r2, r7, #4
 800b934:	4b25      	ldr	r3, [pc, #148]	; (800b9cc <SVCCTL_InitCustomSvc+0x230>)
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	2301      	movs	r3, #1
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	2310      	movs	r3, #16
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	2301      	movs	r3, #1
 800b942:	9302      	str	r3, [sp, #8]
 800b944:	2300      	movs	r3, #0
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	2310      	movs	r3, #16
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	2320      	movs	r3, #32
 800b94e:	2102      	movs	r1, #2
 800b950:	f7fc fd60 	bl	8008414 <aci_gatt_add_char>
 800b954:	4603      	mov	r3, r0
 800b956:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00f      	beq.n	800b97e <SVCCTL_InitCustomSvc+0x1e2>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800b95e:	4812      	ldr	r0, [pc, #72]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b960:	f7fe f82c 	bl	80099bc <DbgTraceGetFileName>
 800b964:	4601      	mov	r1, r0
 800b966:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800b96a:	4a10      	ldr	r2, [pc, #64]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b96c:	4810      	ldr	r0, [pc, #64]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b96e:	f000 fdc7 	bl	800c500 <iprintf>
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	4619      	mov	r1, r3
 800b976:	4816      	ldr	r0, [pc, #88]	; (800b9d0 <SVCCTL_InitCustomSvc+0x234>)
 800b978:	f000 fdc2 	bl	800c500 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b97c:	e00d      	b.n	800b99a <SVCCTL_InitCustomSvc+0x1fe>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800b97e:	480a      	ldr	r0, [pc, #40]	; (800b9a8 <SVCCTL_InitCustomSvc+0x20c>)
 800b980:	f7fe f81c 	bl	80099bc <DbgTraceGetFileName>
 800b984:	4601      	mov	r1, r0
 800b986:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800b98a:	4a08      	ldr	r2, [pc, #32]	; (800b9ac <SVCCTL_InitCustomSvc+0x210>)
 800b98c:	4808      	ldr	r0, [pc, #32]	; (800b9b0 <SVCCTL_InitCustomSvc+0x214>)
 800b98e:	f000 fdb7 	bl	800c500 <iprintf>
 800b992:	4810      	ldr	r0, [pc, #64]	; (800b9d4 <SVCCTL_InitCustomSvc+0x238>)
 800b994:	f000 fdb4 	bl	800c500 <iprintf>
  return;
 800b998:	bf00      	nop
}
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	0800b6b1 	.word	0x0800b6b1
 800b9a4:	20000168 	.word	0x20000168
 800b9a8:	0800e6f8 	.word	0x0800e6f8
 800b9ac:	0800eca4 	.word	0x0800eca4
 800b9b0:	0800e718 	.word	0x0800e718
 800b9b4:	0800e72c 	.word	0x0800e72c
 800b9b8:	0800e774 	.word	0x0800e774
 800b9bc:	20000023 	.word	0x20000023
 800b9c0:	2000016a 	.word	0x2000016a
 800b9c4:	0800e7a8 	.word	0x0800e7a8
 800b9c8:	0800e7ec 	.word	0x0800e7ec
 800b9cc:	2000016c 	.word	0x2000016c
 800b9d0:	0800e820 	.word	0x0800e820
 800b9d4:	0800e868 	.word	0x0800e868

0800b9d8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af02      	add	r7, sp, #8
 800b9de:	4603      	mov	r3, r0
 800b9e0:	6039      	str	r1, [r7, #0]
 800b9e2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b9e4:	2392      	movs	r3, #146	; 0x92
 800b9e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b9e8:	79fb      	ldrb	r3, [r7, #7]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d002      	beq.n	800b9f4 <Custom_STM_App_Update_Char+0x1c>
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d02f      	beq.n	800ba52 <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800b9f2:	e05d      	b.n	800bab0 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800b9f4:	4b31      	ldr	r3, [pc, #196]	; (800babc <Custom_STM_App_Update_Char+0xe4>)
 800b9f6:	8818      	ldrh	r0, [r3, #0]
 800b9f8:	4b30      	ldr	r3, [pc, #192]	; (800babc <Custom_STM_App_Update_Char+0xe4>)
 800b9fa:	8859      	ldrh	r1, [r3, #2]
 800b9fc:	4b30      	ldr	r3, [pc, #192]	; (800bac0 <Custom_STM_App_Update_Char+0xe8>)
 800b9fe:	781a      	ldrb	r2, [r3, #0]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4613      	mov	r3, r2
 800ba06:	2200      	movs	r2, #0
 800ba08:	f7fc fe0c 	bl	8008624 <aci_gatt_update_char_value>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00f      	beq.n	800ba36 <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800ba16:	482b      	ldr	r0, [pc, #172]	; (800bac4 <Custom_STM_App_Update_Char+0xec>)
 800ba18:	f7fd ffd0 	bl	80099bc <DbgTraceGetFileName>
 800ba1c:	4601      	mov	r1, r0
 800ba1e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800ba22:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <Custom_STM_App_Update_Char+0xf0>)
 800ba24:	4829      	ldr	r0, [pc, #164]	; (800bacc <Custom_STM_App_Update_Char+0xf4>)
 800ba26:	f000 fd6b 	bl	800c500 <iprintf>
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4828      	ldr	r0, [pc, #160]	; (800bad0 <Custom_STM_App_Update_Char+0xf8>)
 800ba30:	f000 fd66 	bl	800c500 <iprintf>
      break;
 800ba34:	e03c      	b.n	800bab0 <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 800ba36:	4823      	ldr	r0, [pc, #140]	; (800bac4 <Custom_STM_App_Update_Char+0xec>)
 800ba38:	f7fd ffc0 	bl	80099bc <DbgTraceGetFileName>
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ba42:	4a21      	ldr	r2, [pc, #132]	; (800bac8 <Custom_STM_App_Update_Char+0xf0>)
 800ba44:	4821      	ldr	r0, [pc, #132]	; (800bacc <Custom_STM_App_Update_Char+0xf4>)
 800ba46:	f000 fd5b 	bl	800c500 <iprintf>
 800ba4a:	4822      	ldr	r0, [pc, #136]	; (800bad4 <Custom_STM_App_Update_Char+0xfc>)
 800ba4c:	f000 fd58 	bl	800c500 <iprintf>
      break;
 800ba50:	e02e      	b.n	800bab0 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800ba52:	4b1a      	ldr	r3, [pc, #104]	; (800babc <Custom_STM_App_Update_Char+0xe4>)
 800ba54:	8818      	ldrh	r0, [r3, #0]
 800ba56:	4b19      	ldr	r3, [pc, #100]	; (800babc <Custom_STM_App_Update_Char+0xe4>)
 800ba58:	8899      	ldrh	r1, [r3, #4]
 800ba5a:	4b1f      	ldr	r3, [pc, #124]	; (800bad8 <Custom_STM_App_Update_Char+0x100>)
 800ba5c:	781a      	ldrb	r2, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	4613      	mov	r3, r2
 800ba64:	2200      	movs	r2, #0
 800ba66:	f7fc fddd 	bl	8008624 <aci_gatt_update_char_value>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00f      	beq.n	800ba94 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800ba74:	4813      	ldr	r0, [pc, #76]	; (800bac4 <Custom_STM_App_Update_Char+0xec>)
 800ba76:	f7fd ffa1 	bl	80099bc <DbgTraceGetFileName>
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	f240 139f 	movw	r3, #415	; 0x19f
 800ba80:	4a11      	ldr	r2, [pc, #68]	; (800bac8 <Custom_STM_App_Update_Char+0xf0>)
 800ba82:	4812      	ldr	r0, [pc, #72]	; (800bacc <Custom_STM_App_Update_Char+0xf4>)
 800ba84:	f000 fd3c 	bl	800c500 <iprintf>
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4813      	ldr	r0, [pc, #76]	; (800badc <Custom_STM_App_Update_Char+0x104>)
 800ba8e:	f000 fd37 	bl	800c500 <iprintf>
      break;
 800ba92:	e00c      	b.n	800baae <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800ba94:	480b      	ldr	r0, [pc, #44]	; (800bac4 <Custom_STM_App_Update_Char+0xec>)
 800ba96:	f7fd ff91 	bl	80099bc <DbgTraceGetFileName>
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	f240 13a3 	movw	r3, #419	; 0x1a3
 800baa0:	4a09      	ldr	r2, [pc, #36]	; (800bac8 <Custom_STM_App_Update_Char+0xf0>)
 800baa2:	480a      	ldr	r0, [pc, #40]	; (800bacc <Custom_STM_App_Update_Char+0xf4>)
 800baa4:	f000 fd2c 	bl	800c500 <iprintf>
 800baa8:	480d      	ldr	r0, [pc, #52]	; (800bae0 <Custom_STM_App_Update_Char+0x108>)
 800baaa:	f000 fd29 	bl	800c500 <iprintf>
      break;
 800baae:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20000168 	.word	0x20000168
 800bac0:	20000023 	.word	0x20000023
 800bac4:	0800e6f8 	.word	0x0800e6f8
 800bac8:	0800ecbc 	.word	0x0800ecbc
 800bacc:	0800e718 	.word	0x0800e718
 800bad0:	0800e8a0 	.word	0x0800e8a0
 800bad4:	0800e8e8 	.word	0x0800e8e8
 800bad8:	20000024 	.word	0x20000024
 800badc:	0800e920 	.word	0x0800e920
 800bae0:	0800e96c 	.word	0x0800e96c

0800bae4 <LL_PWR_EnableBootC2>:
{
 800bae4:	b480      	push	{r7}
 800bae6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <LL_PWR_EnableBootC2+0x1c>)
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	4a04      	ldr	r2, [pc, #16]	; (800bb00 <LL_PWR_EnableBootC2+0x1c>)
 800baee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baf2:	60d3      	str	r3, [r2, #12]
}
 800baf4:	bf00      	nop
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	58000400 	.word	0x58000400

0800bb04 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bb0c:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bb0e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bb12:	4905      	ldr	r1, [pc, #20]	; (800bb28 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	58000800 	.word	0x58000800

0800bb2c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bb36:	6a1a      	ldr	r2, [r3, #32]
 800bb38:	4904      	ldr	r1, [pc, #16]	; (800bb4c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	620b      	str	r3, [r1, #32]
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	58000800 	.word	0x58000800

0800bb50 <LL_AHB3_GRP1_EnableClock>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bb58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bb68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4013      	ands	r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bb74:	68fb      	ldr	r3, [r7, #12]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800bb8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb8e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bb92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800bb9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bba2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bbac:	68fb      	ldr	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <LL_C1_IPCC_EnableIT_TXF>:
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <LL_C1_IPCC_EnableIT_RXO>:
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f043 0201 	orr.w	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	bf00      	nop
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <LL_C1_IPCC_EnableTransmitChannel>:
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	401a      	ands	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	605a      	str	r2, [r3, #4]
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	041b      	lsls	r3, r3, #16
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	43db      	mvns	r3, r3
 800bc56:	401a      	ands	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	605a      	str	r2, [r3, #4]
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	609a      	str	r2, [r3, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	041a      	lsls	r2, r3, #16
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	609a      	str	r2, [r3, #8]
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68da      	ldr	r2, [r3, #12]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d101      	bne.n	800bcbe <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69da      	ldr	r2, [r3, #28]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	4013      	ands	r3, r2
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d101      	bne.n	800bce8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e000      	b.n	800bcea <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
	...

0800bcf8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bcfc:	2102      	movs	r1, #2
 800bcfe:	4819      	ldr	r0, [pc, #100]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd00:	f7ff ffe4 	bl	800bccc <LL_C2_IPCC_IsActiveFlag_CHx>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d009      	beq.n	800bd1e <HW_IPCC_Rx_Handler+0x26>
 800bd0a:	4b16      	ldr	r3, [pc, #88]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	43db      	mvns	r3, r3
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800bd18:	f000 f8da 	bl	800bed0 <HW_IPCC_SYS_EvtHandler>
 800bd1c:	e01f      	b.n	800bd5e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bd1e:	2101      	movs	r1, #1
 800bd20:	4810      	ldr	r0, [pc, #64]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd22:	f7ff ffd3 	bl	800bccc <LL_C2_IPCC_IsActiveFlag_CHx>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d008      	beq.n	800bd3e <HW_IPCC_Rx_Handler+0x46>
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f003 0301 	and.w	r3, r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800bd38:	f000 f88e 	bl	800be58 <HW_IPCC_BLE_EvtHandler>
 800bd3c:	e00f      	b.n	800bd5e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bd3e:	2108      	movs	r1, #8
 800bd40:	4808      	ldr	r0, [pc, #32]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd42:	f7ff ffc3 	bl	800bccc <LL_C2_IPCC_IsActiveFlag_CHx>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <HW_IPCC_Rx_Handler+0x68>
 800bd4c:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <HW_IPCC_Rx_Handler+0x6c>)
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	43db      	mvns	r3, r3
 800bd52:	f003 0308 	and.w	r3, r3, #8
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bd5a:	f000 f905 	bl	800bf68 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
}
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	58000c00 	.word	0x58000c00

0800bd68 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	481a      	ldr	r0, [pc, #104]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bd70:	f7ff ff97 	bl	800bca2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <HW_IPCC_Tx_Handler+0x26>
 800bd7a:	4b17      	ldr	r3, [pc, #92]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	43db      	mvns	r3, r3
 800bd80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bd88:	f000 f896 	bl	800beb8 <HW_IPCC_SYS_CmdEvtHandler>
 800bd8c:	e020      	b.n	800bdd0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bd8e:	2108      	movs	r1, #8
 800bd90:	4811      	ldr	r0, [pc, #68]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bd92:	f7ff ff86 	bl	800bca2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <HW_IPCC_Tx_Handler+0x48>
 800bd9c:	4b0e      	ldr	r3, [pc, #56]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	43db      	mvns	r3, r3
 800bda2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bdaa:	f000 f8bf 	bl	800bf2c <HW_IPCC_MM_FreeBufHandler>
 800bdae:	e00f      	b.n	800bdd0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bdb0:	2120      	movs	r1, #32
 800bdb2:	4809      	ldr	r0, [pc, #36]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bdb4:	f7ff ff75 	bl	800bca2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d109      	bne.n	800bdd2 <HW_IPCC_Tx_Handler+0x6a>
 800bdbe:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <HW_IPCC_Tx_Handler+0x70>)
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	43db      	mvns	r3, r3
 800bdc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bdcc:	f000 f850 	bl	800be70 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
}
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	58000c00 	.word	0x58000c00

0800bddc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bde0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bde4:	f7ff fecd 	bl	800bb82 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bde8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bdec:	f7ff fe9e 	bl	800bb2c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bdf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bdf4:	f7ff fe86 	bl	800bb04 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bdf8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bdfa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bdfc:	f7ff fe72 	bl	800bae4 <LL_PWR_EnableBootC2>

  return;
 800be00:	bf00      	nop
}
 800be02:	bd80      	pop	{r7, pc}

0800be04 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800be08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800be0c:	f7ff fea0 	bl	800bb50 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800be10:	4806      	ldr	r0, [pc, #24]	; (800be2c <HW_IPCC_Init+0x28>)
 800be12:	f7ff fee2 	bl	800bbda <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800be16:	4805      	ldr	r0, [pc, #20]	; (800be2c <HW_IPCC_Init+0x28>)
 800be18:	f7ff fecf 	bl	800bbba <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800be1c:	202c      	movs	r0, #44	; 0x2c
 800be1e:	f7f7 fab6 	bl	800338e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800be22:	202d      	movs	r0, #45	; 0x2d
 800be24:	f7f7 fab3 	bl	800338e <HAL_NVIC_EnableIRQ>

  return;
 800be28:	bf00      	nop
}
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	58000c00 	.word	0x58000c00

0800be30 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800be34:	2101      	movs	r1, #1
 800be36:	4802      	ldr	r0, [pc, #8]	; (800be40 <HW_IPCC_BLE_Init+0x10>)
 800be38:	f7ff ff04 	bl	800bc44 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800be3c:	bf00      	nop
}
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	58000c00 	.word	0x58000c00

0800be44 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800be48:	2101      	movs	r1, #1
 800be4a:	4802      	ldr	r0, [pc, #8]	; (800be54 <HW_IPCC_BLE_SendCmd+0x10>)
 800be4c:	f7ff ff1a 	bl	800bc84 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800be50:	bf00      	nop
}
 800be52:	bd80      	pop	{r7, pc}
 800be54:	58000c00 	.word	0x58000c00

0800be58 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800be5c:	f7fd fbf6 	bl	800964c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800be60:	2101      	movs	r1, #1
 800be62:	4802      	ldr	r0, [pc, #8]	; (800be6c <HW_IPCC_BLE_EvtHandler+0x14>)
 800be64:	f7ff ff00 	bl	800bc68 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800be68:	bf00      	nop
}
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	58000c00 	.word	0x58000c00

0800be70 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800be74:	2120      	movs	r1, #32
 800be76:	4803      	ldr	r0, [pc, #12]	; (800be84 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800be78:	f7ff fed2 	bl	800bc20 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800be7c:	f7fd fc16 	bl	80096ac <HW_IPCC_BLE_AclDataAckNot>

  return;
 800be80:	bf00      	nop
}
 800be82:	bd80      	pop	{r7, pc}
 800be84:	58000c00 	.word	0x58000c00

0800be88 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800be8c:	2102      	movs	r1, #2
 800be8e:	4802      	ldr	r0, [pc, #8]	; (800be98 <HW_IPCC_SYS_Init+0x10>)
 800be90:	f7ff fed8 	bl	800bc44 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800be94:	bf00      	nop
}
 800be96:	bd80      	pop	{r7, pc}
 800be98:	58000c00 	.word	0x58000c00

0800be9c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bea0:	2102      	movs	r1, #2
 800bea2:	4804      	ldr	r0, [pc, #16]	; (800beb4 <HW_IPCC_SYS_SendCmd+0x18>)
 800bea4:	f7ff feee 	bl	800bc84 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bea8:	2102      	movs	r1, #2
 800beaa:	4802      	ldr	r0, [pc, #8]	; (800beb4 <HW_IPCC_SYS_SendCmd+0x18>)
 800beac:	f7ff fea5 	bl	800bbfa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800beb0:	bf00      	nop
}
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	58000c00 	.word	0x58000c00

0800beb8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bebc:	2102      	movs	r1, #2
 800bebe:	4803      	ldr	r0, [pc, #12]	; (800becc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bec0:	f7ff feae 	bl	800bc20 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bec4:	f7fd fc42 	bl	800974c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bec8:	bf00      	nop
}
 800beca:	bd80      	pop	{r7, pc}
 800becc:	58000c00 	.word	0x58000c00

0800bed0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bed4:	f7fd fc50 	bl	8009778 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bed8:	2102      	movs	r1, #2
 800beda:	4802      	ldr	r0, [pc, #8]	; (800bee4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bedc:	f7ff fec4 	bl	800bc68 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bee0:	bf00      	nop
}
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	58000c00 	.word	0x58000c00

0800bee8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bef0:	2108      	movs	r1, #8
 800bef2:	480c      	ldr	r0, [pc, #48]	; (800bf24 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bef4:	f7ff fed5 	bl	800bca2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d007      	beq.n	800bf0e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800befe:	4a0a      	ldr	r2, [pc, #40]	; (800bf28 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bf04:	2108      	movs	r1, #8
 800bf06:	4807      	ldr	r0, [pc, #28]	; (800bf24 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bf08:	f7ff fe77 	bl	800bbfa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bf0c:	e006      	b.n	800bf1c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bf12:	2108      	movs	r1, #8
 800bf14:	4803      	ldr	r0, [pc, #12]	; (800bf24 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bf16:	f7ff feb5 	bl	800bc84 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bf1a:	bf00      	nop
}
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	58000c00 	.word	0x58000c00
 800bf28:	2000186c 	.word	0x2000186c

0800bf2c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bf30:	2108      	movs	r1, #8
 800bf32:	4806      	ldr	r0, [pc, #24]	; (800bf4c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bf34:	f7ff fe74 	bl	800bc20 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bf3e:	2108      	movs	r1, #8
 800bf40:	4802      	ldr	r0, [pc, #8]	; (800bf4c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bf42:	f7ff fe9f 	bl	800bc84 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bf46:	bf00      	nop
}
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	58000c00 	.word	0x58000c00
 800bf50:	2000186c 	.word	0x2000186c

0800bf54 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bf58:	2108      	movs	r1, #8
 800bf5a:	4802      	ldr	r0, [pc, #8]	; (800bf64 <HW_IPCC_TRACES_Init+0x10>)
 800bf5c:	f7ff fe72 	bl	800bc44 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bf60:	bf00      	nop
}
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	58000c00 	.word	0x58000c00

0800bf68 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800bf6c:	f7fd fcac 	bl	80098c8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bf70:	2108      	movs	r1, #8
 800bf72:	4802      	ldr	r0, [pc, #8]	; (800bf7c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800bf74:	f7ff fe78 	bl	800bc68 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bf78:	bf00      	nop
}
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	58000c00 	.word	0x58000c00

0800bf80 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <UTIL_LPM_Init+0x1c>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf8a:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <UTIL_LPM_Init+0x20>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bf90:	bf00      	nop
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	20001870 	.word	0x20001870
 800bfa0:	20001874 	.word	0x20001874

0800bfa4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb4:	613b      	str	r3, [r7, #16]
  return(result);
 800bfb6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bfb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfba:	b672      	cpsid	i
}
 800bfbc:	bf00      	nop
  
  switch(state)
 800bfbe:	78fb      	ldrb	r3, [r7, #3]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d008      	beq.n	800bfd6 <UTIL_LPM_SetOffMode+0x32>
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d10e      	bne.n	800bfe6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <UTIL_LPM_SetOffMode+0x5c>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	4a0b      	ldr	r2, [pc, #44]	; (800c000 <UTIL_LPM_SetOffMode+0x5c>)
 800bfd2:	6013      	str	r3, [r2, #0]
      break;
 800bfd4:	e008      	b.n	800bfe8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	43da      	mvns	r2, r3
 800bfda:	4b09      	ldr	r3, [pc, #36]	; (800c000 <UTIL_LPM_SetOffMode+0x5c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4013      	ands	r3, r2
 800bfe0:	4a07      	ldr	r2, [pc, #28]	; (800c000 <UTIL_LPM_SetOffMode+0x5c>)
 800bfe2:	6013      	str	r3, [r2, #0]
      break;
 800bfe4:	e000      	b.n	800bfe8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bfe6:	bf00      	nop
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f383 8810 	msr	PRIMASK, r3
}
 800bff2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bff4:	bf00      	nop
 800bff6:	371c      	adds	r7, #28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	20001874 	.word	0x20001874

0800c004 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b090      	sub	sp, #64	; 0x40
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c00c:	4b73      	ldr	r3, [pc, #460]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c012:	4b72      	ldr	r3, [pc, #456]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4013      	ands	r3, r2
 800c01a:	4a70      	ldr	r2, [pc, #448]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c01c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c01e:	4b70      	ldr	r3, [pc, #448]	; (800c1e0 <UTIL_SEQ_Run+0x1dc>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c024:	4b6f      	ldr	r3, [pc, #444]	; (800c1e4 <UTIL_SEQ_Run+0x1e0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c02a:	4b6f      	ldr	r3, [pc, #444]	; (800c1e8 <UTIL_SEQ_Run+0x1e4>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c030:	4b6e      	ldr	r3, [pc, #440]	; (800c1ec <UTIL_SEQ_Run+0x1e8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c036:	e08d      	b.n	800c154 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c038:	2300      	movs	r3, #0
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c03c:	e002      	b.n	800c044 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c040:	3301      	adds	r3, #1
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c044:	4a6a      	ldr	r2, [pc, #424]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	401a      	ands	r2, r3
 800c050:	4b62      	ldr	r3, [pc, #392]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4013      	ands	r3, r2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0f1      	beq.n	800c03e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c05a:	4a65      	ldr	r2, [pc, #404]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	401a      	ands	r2, r3
 800c066:	4b5d      	ldr	r3, [pc, #372]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4013      	ands	r3, r2
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c06e:	4a60      	ldr	r2, [pc, #384]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	4413      	add	r3, r2
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d106      	bne.n	800c08e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c080:	4a5b      	ldr	r2, [pc, #364]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	4413      	add	r3, r2
 800c088:	f04f 32ff 	mov.w	r2, #4294967295
 800c08c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c08e:	4a58      	ldr	r2, [pc, #352]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	4413      	add	r3, r2
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	4013      	ands	r3, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 f9b3 	bl	800c408 <SEQ_BitPosition>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	4b53      	ldr	r3, [pc, #332]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c0a8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c0aa:	4a51      	ldr	r2, [pc, #324]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	4413      	add	r3, r2
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	4b4f      	ldr	r3, [pc, #316]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c0be:	43db      	mvns	r3, r3
 800c0c0:	401a      	ands	r2, r3
 800c0c2:	494b      	ldr	r1, [pc, #300]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c0d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800c0d2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0d6:	b672      	cpsid	i
}
 800c0d8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c0da:	4b46      	ldr	r3, [pc, #280]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e4:	43da      	mvns	r2, r3
 800c0e6:	4b3e      	ldr	r3, [pc, #248]	; (800c1e0 <UTIL_SEQ_Run+0x1dc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	4a3c      	ldr	r2, [pc, #240]	; (800c1e0 <UTIL_SEQ_Run+0x1dc>)
 800c0ee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f4:	e013      	b.n	800c11e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	4a3d      	ldr	r2, [pc, #244]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c0fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c100:	4b3c      	ldr	r3, [pc, #240]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2201      	movs	r2, #1
 800c106:	fa02 f303 	lsl.w	r3, r2, r3
 800c10a:	43da      	mvns	r2, r3
 800c10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10e:	3b01      	subs	r3, #1
 800c110:	400a      	ands	r2, r1
 800c112:	4937      	ldr	r1, [pc, #220]	; (800c1f0 <UTIL_SEQ_Run+0x1ec>)
 800c114:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11a:	3b01      	subs	r3, #1
 800c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e8      	bne.n	800c0f6 <UTIL_SEQ_Run+0xf2>
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	f383 8810 	msr	PRIMASK, r3
}
 800c12e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c130:	4b30      	ldr	r3, [pc, #192]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a30      	ldr	r2, [pc, #192]	; (800c1f8 <UTIL_SEQ_Run+0x1f4>)
 800c136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c13c:	4b28      	ldr	r3, [pc, #160]	; (800c1e0 <UTIL_SEQ_Run+0x1dc>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c142:	4b28      	ldr	r3, [pc, #160]	; (800c1e4 <UTIL_SEQ_Run+0x1e0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c148:	4b27      	ldr	r3, [pc, #156]	; (800c1e8 <UTIL_SEQ_Run+0x1e4>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c14e:	4b27      	ldr	r3, [pc, #156]	; (800c1ec <UTIL_SEQ_Run+0x1e8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	401a      	ands	r2, r3
 800c15a:	4b20      	ldr	r3, [pc, #128]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4013      	ands	r3, r2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d005      	beq.n	800c170 <UTIL_SEQ_Run+0x16c>
 800c164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	4013      	ands	r3, r2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f43f af64 	beq.w	800c038 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c170:	4b20      	ldr	r3, [pc, #128]	; (800c1f4 <UTIL_SEQ_Run+0x1f0>)
 800c172:	f04f 32ff 	mov.w	r2, #4294967295
 800c176:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c178:	f000 f938 	bl	800c3ec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c17c:	f3ef 8310 	mrs	r3, PRIMASK
 800c180:	613b      	str	r3, [r7, #16]
  return(result);
 800c182:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c186:	b672      	cpsid	i
}
 800c188:	bf00      	nop
  local_taskset = TaskSet;
 800c18a:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <UTIL_SEQ_Run+0x1dc>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c190:	4b14      	ldr	r3, [pc, #80]	; (800c1e4 <UTIL_SEQ_Run+0x1e0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <UTIL_SEQ_Run+0x1e4>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	401a      	ands	r2, r3
 800c1a2:	4b0e      	ldr	r3, [pc, #56]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c1ac:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <UTIL_SEQ_Run+0x1e8>)
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c1b8:	f7f5 f9fc 	bl	80015b4 <UTIL_SEQ_Idle>
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f383 8810 	msr	PRIMASK, r3
}
 800c1c6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c1c8:	f000 f917 	bl	800c3fa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c1cc:	4a03      	ldr	r2, [pc, #12]	; (800c1dc <UTIL_SEQ_Run+0x1d8>)
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	6013      	str	r3, [r2, #0]

  return;
 800c1d2:	bf00      	nop
}
 800c1d4:	3740      	adds	r7, #64	; 0x40
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	2000002c 	.word	0x2000002c
 800c1e0:	20001878 	.word	0x20001878
 800c1e4:	2000187c 	.word	0x2000187c
 800c1e8:	20000028 	.word	0x20000028
 800c1ec:	20001880 	.word	0x20001880
 800c1f0:	20001908 	.word	0x20001908
 800c1f4:	20001884 	.word	0x20001884
 800c1f8:	20001888 	.word	0x20001888

0800c1fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c208:	f3ef 8310 	mrs	r3, PRIMASK
 800c20c:	617b      	str	r3, [r7, #20]
  return(result);
 800c20e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c212:	b672      	cpsid	i
}
 800c214:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 f8f6 	bl	800c408 <SEQ_BitPosition>
 800c21c:	4603      	mov	r3, r0
 800c21e:	4619      	mov	r1, r3
 800c220:	4a06      	ldr	r2, [pc, #24]	; (800c23c <UTIL_SEQ_RegTask+0x40>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	f383 8810 	msr	PRIMASK, r3
}
 800c232:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c234:	bf00      	nop
}
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20001888 	.word	0x20001888

0800c240 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c24a:	f3ef 8310 	mrs	r3, PRIMASK
 800c24e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c250:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c254:	b672      	cpsid	i
}
 800c256:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c258:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <UTIL_SEQ_SetTask+0x50>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4313      	orrs	r3, r2
 800c260:	4a0b      	ldr	r2, [pc, #44]	; (800c290 <UTIL_SEQ_SetTask+0x50>)
 800c262:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c264:	4a0b      	ldr	r2, [pc, #44]	; (800c294 <UTIL_SEQ_SetTask+0x54>)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	431a      	orrs	r2, r3
 800c270:	4908      	ldr	r1, [pc, #32]	; (800c294 <UTIL_SEQ_SetTask+0x54>)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f383 8810 	msr	PRIMASK, r3
}
 800c282:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c284:	bf00      	nop
}
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	20001878 	.word	0x20001878
 800c294:	20001908 	.word	0x20001908

0800c298 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c2a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2aa:	b672      	cpsid	i
}
 800c2ac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	43da      	mvns	r2, r3
 800c2b2:	4b08      	ldr	r3, [pc, #32]	; (800c2d4 <UTIL_SEQ_PauseTask+0x3c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	4a06      	ldr	r2, [pc, #24]	; (800c2d4 <UTIL_SEQ_PauseTask+0x3c>)
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f383 8810 	msr	PRIMASK, r3
}
 800c2c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c2c8:	bf00      	nop
}
 800c2ca:	371c      	adds	r7, #28
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	20000028 	.word	0x20000028

0800c2d8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c2e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2ea:	b672      	cpsid	i
}
 800c2ec:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <UTIL_SEQ_ResumeTask+0x3c>)
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	4a07      	ldr	r2, [pc, #28]	; (800c314 <UTIL_SEQ_ResumeTask+0x3c>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f383 8810 	msr	PRIMASK, r3
}
 800c304:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c306:	bf00      	nop
}
 800c308:	371c      	adds	r7, #28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20000028 	.word	0x20000028

0800c318 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c318:	b480      	push	{r7}
 800c31a:	b087      	sub	sp, #28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c320:	f3ef 8310 	mrs	r3, PRIMASK
 800c324:	60fb      	str	r3, [r7, #12]
  return(result);
 800c326:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c32a:	b672      	cpsid	i
}
 800c32c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c32e:	4b09      	ldr	r3, [pc, #36]	; (800c354 <UTIL_SEQ_SetEvt+0x3c>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4313      	orrs	r3, r2
 800c336:	4a07      	ldr	r2, [pc, #28]	; (800c354 <UTIL_SEQ_SetEvt+0x3c>)
 800c338:	6013      	str	r3, [r2, #0]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	f383 8810 	msr	PRIMASK, r3
}
 800c344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c346:	bf00      	nop
}
 800c348:	371c      	adds	r7, #28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	2000187c 	.word	0x2000187c

0800c358 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c360:	4b1f      	ldr	r3, [pc, #124]	; (800c3e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c366:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36e:	d102      	bne.n	800c376 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c370:	2300      	movs	r3, #0
 800c372:	61fb      	str	r3, [r7, #28]
 800c374:	e005      	b.n	800c382 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c376:	4b1a      	ldr	r3, [pc, #104]	; (800c3e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2201      	movs	r2, #1
 800c37c:	fa02 f303 	lsl.w	r3, r2, r3
 800c380:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c382:	4b18      	ldr	r3, [pc, #96]	; (800c3e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c388:	4a16      	ldr	r2, [pc, #88]	; (800c3e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c38e:	e003      	b.n	800c398 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c390:	6879      	ldr	r1, [r7, #4]
 800c392:	69f8      	ldr	r0, [r7, #28]
 800c394:	f7f5 f915 	bl	80015c2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c398:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4013      	ands	r3, r2
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d0f5      	beq.n	800c390 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c3a4:	4a0e      	ldr	r2, [pc, #56]	; (800c3e0 <UTIL_SEQ_WaitEvt+0x88>)
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3b0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3b4:	b672      	cpsid	i
}
 800c3b6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	43da      	mvns	r2, r3
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	4a09      	ldr	r2, [pc, #36]	; (800c3e8 <UTIL_SEQ_WaitEvt+0x90>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f383 8810 	msr	PRIMASK, r3
}
 800c3d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c3d2:	4a04      	ldr	r2, [pc, #16]	; (800c3e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	6013      	str	r3, [r2, #0]
  return;
 800c3d8:	bf00      	nop
}
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20001884 	.word	0x20001884
 800c3e4:	20001880 	.word	0x20001880
 800c3e8:	2000187c 	.word	0x2000187c

0800c3ec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c3f0:	bf00      	nop
}
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c3fe:	bf00      	nop
}
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	041b      	lsls	r3, r3, #16
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d104      	bne.n	800c42c <SEQ_BitPosition+0x24>
 800c422:	2310      	movs	r3, #16
 800c424:	73fb      	strb	r3, [r7, #15]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	041b      	lsls	r3, r3, #16
 800c42a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d105      	bne.n	800c442 <SEQ_BitPosition+0x3a>
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	3308      	adds	r3, #8
 800c43a:	73fb      	strb	r3, [r7, #15]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	021b      	lsls	r3, r3, #8
 800c440:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d105      	bne.n	800c458 <SEQ_BitPosition+0x50>
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	3304      	adds	r3, #4
 800c450:	73fb      	strb	r3, [r7, #15]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	011b      	lsls	r3, r3, #4
 800c456:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	0f1b      	lsrs	r3, r3, #28
 800c45c:	4a07      	ldr	r2, [pc, #28]	; (800c47c <SEQ_BitPosition+0x74>)
 800c45e:	5cd2      	ldrb	r2, [r2, r3]
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	4413      	add	r3, r2
 800c464:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	f1c3 031f 	rsb	r3, r3, #31
 800c46c:	b2db      	uxtb	r3, r3
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	0800ecd8 	.word	0x0800ecd8

0800c480 <__errno>:
 800c480:	4b01      	ldr	r3, [pc, #4]	; (800c488 <__errno+0x8>)
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	20000030 	.word	0x20000030

0800c48c <__libc_init_array>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	4d0d      	ldr	r5, [pc, #52]	; (800c4c4 <__libc_init_array+0x38>)
 800c490:	4c0d      	ldr	r4, [pc, #52]	; (800c4c8 <__libc_init_array+0x3c>)
 800c492:	1b64      	subs	r4, r4, r5
 800c494:	10a4      	asrs	r4, r4, #2
 800c496:	2600      	movs	r6, #0
 800c498:	42a6      	cmp	r6, r4
 800c49a:	d109      	bne.n	800c4b0 <__libc_init_array+0x24>
 800c49c:	4d0b      	ldr	r5, [pc, #44]	; (800c4cc <__libc_init_array+0x40>)
 800c49e:	4c0c      	ldr	r4, [pc, #48]	; (800c4d0 <__libc_init_array+0x44>)
 800c4a0:	f001 f8b0 	bl	800d604 <_init>
 800c4a4:	1b64      	subs	r4, r4, r5
 800c4a6:	10a4      	asrs	r4, r4, #2
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	42a6      	cmp	r6, r4
 800c4ac:	d105      	bne.n	800c4ba <__libc_init_array+0x2e>
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b4:	4798      	blx	r3
 800c4b6:	3601      	adds	r6, #1
 800c4b8:	e7ee      	b.n	800c498 <__libc_init_array+0xc>
 800c4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4be:	4798      	blx	r3
 800c4c0:	3601      	adds	r6, #1
 800c4c2:	e7f2      	b.n	800c4aa <__libc_init_array+0x1e>
 800c4c4:	0800ed88 	.word	0x0800ed88
 800c4c8:	0800ed88 	.word	0x0800ed88
 800c4cc:	0800ed88 	.word	0x0800ed88
 800c4d0:	0800ed8c 	.word	0x0800ed8c

0800c4d4 <memcpy>:
 800c4d4:	440a      	add	r2, r1
 800c4d6:	4291      	cmp	r1, r2
 800c4d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4dc:	d100      	bne.n	800c4e0 <memcpy+0xc>
 800c4de:	4770      	bx	lr
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4ea:	4291      	cmp	r1, r2
 800c4ec:	d1f9      	bne.n	800c4e2 <memcpy+0xe>
 800c4ee:	bd10      	pop	{r4, pc}

0800c4f0 <memset>:
 800c4f0:	4402      	add	r2, r0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d100      	bne.n	800c4fa <memset+0xa>
 800c4f8:	4770      	bx	lr
 800c4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c4fe:	e7f9      	b.n	800c4f4 <memset+0x4>

0800c500 <iprintf>:
 800c500:	b40f      	push	{r0, r1, r2, r3}
 800c502:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <iprintf+0x2c>)
 800c504:	b513      	push	{r0, r1, r4, lr}
 800c506:	681c      	ldr	r4, [r3, #0]
 800c508:	b124      	cbz	r4, 800c514 <iprintf+0x14>
 800c50a:	69a3      	ldr	r3, [r4, #24]
 800c50c:	b913      	cbnz	r3, 800c514 <iprintf+0x14>
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 fa88 	bl	800ca24 <__sinit>
 800c514:	ab05      	add	r3, sp, #20
 800c516:	9a04      	ldr	r2, [sp, #16]
 800c518:	68a1      	ldr	r1, [r4, #8]
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fc91 	bl	800ce44 <_vfiprintf_r>
 800c522:	b002      	add	sp, #8
 800c524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c528:	b004      	add	sp, #16
 800c52a:	4770      	bx	lr
 800c52c:	20000030 	.word	0x20000030

0800c530 <putchar>:
 800c530:	4b09      	ldr	r3, [pc, #36]	; (800c558 <putchar+0x28>)
 800c532:	b513      	push	{r0, r1, r4, lr}
 800c534:	681c      	ldr	r4, [r3, #0]
 800c536:	4601      	mov	r1, r0
 800c538:	b134      	cbz	r4, 800c548 <putchar+0x18>
 800c53a:	69a3      	ldr	r3, [r4, #24]
 800c53c:	b923      	cbnz	r3, 800c548 <putchar+0x18>
 800c53e:	9001      	str	r0, [sp, #4]
 800c540:	4620      	mov	r0, r4
 800c542:	f000 fa6f 	bl	800ca24 <__sinit>
 800c546:	9901      	ldr	r1, [sp, #4]
 800c548:	68a2      	ldr	r2, [r4, #8]
 800c54a:	4620      	mov	r0, r4
 800c54c:	b002      	add	sp, #8
 800c54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c552:	f000 bf3b 	b.w	800d3cc <_putc_r>
 800c556:	bf00      	nop
 800c558:	20000030 	.word	0x20000030

0800c55c <_puts_r>:
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	460e      	mov	r6, r1
 800c560:	4605      	mov	r5, r0
 800c562:	b118      	cbz	r0, 800c56c <_puts_r+0x10>
 800c564:	6983      	ldr	r3, [r0, #24]
 800c566:	b90b      	cbnz	r3, 800c56c <_puts_r+0x10>
 800c568:	f000 fa5c 	bl	800ca24 <__sinit>
 800c56c:	69ab      	ldr	r3, [r5, #24]
 800c56e:	68ac      	ldr	r4, [r5, #8]
 800c570:	b913      	cbnz	r3, 800c578 <_puts_r+0x1c>
 800c572:	4628      	mov	r0, r5
 800c574:	f000 fa56 	bl	800ca24 <__sinit>
 800c578:	4b2c      	ldr	r3, [pc, #176]	; (800c62c <_puts_r+0xd0>)
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d120      	bne.n	800c5c0 <_puts_r+0x64>
 800c57e:	686c      	ldr	r4, [r5, #4]
 800c580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c582:	07db      	lsls	r3, r3, #31
 800c584:	d405      	bmi.n	800c592 <_puts_r+0x36>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	0598      	lsls	r0, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_puts_r+0x36>
 800c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58e:	f000 fae7 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	0719      	lsls	r1, r3, #28
 800c596:	d51d      	bpl.n	800c5d4 <_puts_r+0x78>
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	b1db      	cbz	r3, 800c5d4 <_puts_r+0x78>
 800c59c:	3e01      	subs	r6, #1
 800c59e:	68a3      	ldr	r3, [r4, #8]
 800c5a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	60a3      	str	r3, [r4, #8]
 800c5a8:	bb39      	cbnz	r1, 800c5fa <_puts_r+0x9e>
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	da38      	bge.n	800c620 <_puts_r+0xc4>
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	210a      	movs	r1, #10
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 f85c 	bl	800c670 <__swbuf_r>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d011      	beq.n	800c5e0 <_puts_r+0x84>
 800c5bc:	250a      	movs	r5, #10
 800c5be:	e011      	b.n	800c5e4 <_puts_r+0x88>
 800c5c0:	4b1b      	ldr	r3, [pc, #108]	; (800c630 <_puts_r+0xd4>)
 800c5c2:	429c      	cmp	r4, r3
 800c5c4:	d101      	bne.n	800c5ca <_puts_r+0x6e>
 800c5c6:	68ac      	ldr	r4, [r5, #8]
 800c5c8:	e7da      	b.n	800c580 <_puts_r+0x24>
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	; (800c634 <_puts_r+0xd8>)
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	bf08      	it	eq
 800c5d0:	68ec      	ldreq	r4, [r5, #12]
 800c5d2:	e7d5      	b.n	800c580 <_puts_r+0x24>
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	f000 f89c 	bl	800c714 <__swsetup_r>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d0dd      	beq.n	800c59c <_puts_r+0x40>
 800c5e0:	f04f 35ff 	mov.w	r5, #4294967295
 800c5e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5e6:	07da      	lsls	r2, r3, #31
 800c5e8:	d405      	bmi.n	800c5f6 <_puts_r+0x9a>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	059b      	lsls	r3, r3, #22
 800c5ee:	d402      	bmi.n	800c5f6 <_puts_r+0x9a>
 800c5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5f2:	f000 fab6 	bl	800cb62 <__retarget_lock_release_recursive>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	da04      	bge.n	800c608 <_puts_r+0xac>
 800c5fe:	69a2      	ldr	r2, [r4, #24]
 800c600:	429a      	cmp	r2, r3
 800c602:	dc06      	bgt.n	800c612 <_puts_r+0xb6>
 800c604:	290a      	cmp	r1, #10
 800c606:	d004      	beq.n	800c612 <_puts_r+0xb6>
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	6022      	str	r2, [r4, #0]
 800c60e:	7019      	strb	r1, [r3, #0]
 800c610:	e7c5      	b.n	800c59e <_puts_r+0x42>
 800c612:	4622      	mov	r2, r4
 800c614:	4628      	mov	r0, r5
 800c616:	f000 f82b 	bl	800c670 <__swbuf_r>
 800c61a:	3001      	adds	r0, #1
 800c61c:	d1bf      	bne.n	800c59e <_puts_r+0x42>
 800c61e:	e7df      	b.n	800c5e0 <_puts_r+0x84>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	250a      	movs	r5, #10
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	6022      	str	r2, [r4, #0]
 800c628:	701d      	strb	r5, [r3, #0]
 800c62a:	e7db      	b.n	800c5e4 <_puts_r+0x88>
 800c62c:	0800ed0c 	.word	0x0800ed0c
 800c630:	0800ed2c 	.word	0x0800ed2c
 800c634:	0800ecec 	.word	0x0800ecec

0800c638 <puts>:
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <puts+0xc>)
 800c63a:	4601      	mov	r1, r0
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	f7ff bf8d 	b.w	800c55c <_puts_r>
 800c642:	bf00      	nop
 800c644:	20000030 	.word	0x20000030

0800c648 <strrchr>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4603      	mov	r3, r0
 800c64c:	460c      	mov	r4, r1
 800c64e:	b969      	cbnz	r1, 800c66c <strrchr+0x24>
 800c650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c654:	f000 bf55 	b.w	800d502 <strchr>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	4605      	mov	r5, r0
 800c65c:	4621      	mov	r1, r4
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 ff4f 	bl	800d502 <strchr>
 800c664:	2800      	cmp	r0, #0
 800c666:	d1f7      	bne.n	800c658 <strrchr+0x10>
 800c668:	4628      	mov	r0, r5
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	2500      	movs	r5, #0
 800c66e:	e7f5      	b.n	800c65c <strrchr+0x14>

0800c670 <__swbuf_r>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	460e      	mov	r6, r1
 800c674:	4614      	mov	r4, r2
 800c676:	4605      	mov	r5, r0
 800c678:	b118      	cbz	r0, 800c682 <__swbuf_r+0x12>
 800c67a:	6983      	ldr	r3, [r0, #24]
 800c67c:	b90b      	cbnz	r3, 800c682 <__swbuf_r+0x12>
 800c67e:	f000 f9d1 	bl	800ca24 <__sinit>
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <__swbuf_r+0x98>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d12b      	bne.n	800c6e0 <__swbuf_r+0x70>
 800c688:	686c      	ldr	r4, [r5, #4]
 800c68a:	69a3      	ldr	r3, [r4, #24]
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	071a      	lsls	r2, r3, #28
 800c692:	d52f      	bpl.n	800c6f4 <__swbuf_r+0x84>
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	b36b      	cbz	r3, 800c6f4 <__swbuf_r+0x84>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1ac0      	subs	r0, r0, r3
 800c69e:	6963      	ldr	r3, [r4, #20]
 800c6a0:	b2f6      	uxtb	r6, r6
 800c6a2:	4283      	cmp	r3, r0
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	dc04      	bgt.n	800c6b2 <__swbuf_r+0x42>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f000 f926 	bl	800c8fc <_fflush_r>
 800c6b0:	bb30      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	701e      	strb	r6, [r3, #0]
 800c6c0:	6963      	ldr	r3, [r4, #20]
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	4283      	cmp	r3, r0
 800c6c6:	d004      	beq.n	800c6d2 <__swbuf_r+0x62>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	07db      	lsls	r3, r3, #31
 800c6cc:	d506      	bpl.n	800c6dc <__swbuf_r+0x6c>
 800c6ce:	2e0a      	cmp	r6, #10
 800c6d0:	d104      	bne.n	800c6dc <__swbuf_r+0x6c>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f000 f911 	bl	800c8fc <_fflush_r>
 800c6da:	b988      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e0:	4b0a      	ldr	r3, [pc, #40]	; (800c70c <__swbuf_r+0x9c>)
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d101      	bne.n	800c6ea <__swbuf_r+0x7a>
 800c6e6:	68ac      	ldr	r4, [r5, #8]
 800c6e8:	e7cf      	b.n	800c68a <__swbuf_r+0x1a>
 800c6ea:	4b09      	ldr	r3, [pc, #36]	; (800c710 <__swbuf_r+0xa0>)
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	68ec      	ldreq	r4, [r5, #12]
 800c6f2:	e7ca      	b.n	800c68a <__swbuf_r+0x1a>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 f80c 	bl	800c714 <__swsetup_r>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0cb      	beq.n	800c698 <__swbuf_r+0x28>
 800c700:	f04f 37ff 	mov.w	r7, #4294967295
 800c704:	e7ea      	b.n	800c6dc <__swbuf_r+0x6c>
 800c706:	bf00      	nop
 800c708:	0800ed0c 	.word	0x0800ed0c
 800c70c:	0800ed2c 	.word	0x0800ed2c
 800c710:	0800ecec 	.word	0x0800ecec

0800c714 <__swsetup_r>:
 800c714:	4b32      	ldr	r3, [pc, #200]	; (800c7e0 <__swsetup_r+0xcc>)
 800c716:	b570      	push	{r4, r5, r6, lr}
 800c718:	681d      	ldr	r5, [r3, #0]
 800c71a:	4606      	mov	r6, r0
 800c71c:	460c      	mov	r4, r1
 800c71e:	b125      	cbz	r5, 800c72a <__swsetup_r+0x16>
 800c720:	69ab      	ldr	r3, [r5, #24]
 800c722:	b913      	cbnz	r3, 800c72a <__swsetup_r+0x16>
 800c724:	4628      	mov	r0, r5
 800c726:	f000 f97d 	bl	800ca24 <__sinit>
 800c72a:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <__swsetup_r+0xd0>)
 800c72c:	429c      	cmp	r4, r3
 800c72e:	d10f      	bne.n	800c750 <__swsetup_r+0x3c>
 800c730:	686c      	ldr	r4, [r5, #4]
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c738:	0719      	lsls	r1, r3, #28
 800c73a:	d42c      	bmi.n	800c796 <__swsetup_r+0x82>
 800c73c:	06dd      	lsls	r5, r3, #27
 800c73e:	d411      	bmi.n	800c764 <__swsetup_r+0x50>
 800c740:	2309      	movs	r3, #9
 800c742:	6033      	str	r3, [r6, #0]
 800c744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	f04f 30ff 	mov.w	r0, #4294967295
 800c74e:	e03e      	b.n	800c7ce <__swsetup_r+0xba>
 800c750:	4b25      	ldr	r3, [pc, #148]	; (800c7e8 <__swsetup_r+0xd4>)
 800c752:	429c      	cmp	r4, r3
 800c754:	d101      	bne.n	800c75a <__swsetup_r+0x46>
 800c756:	68ac      	ldr	r4, [r5, #8]
 800c758:	e7eb      	b.n	800c732 <__swsetup_r+0x1e>
 800c75a:	4b24      	ldr	r3, [pc, #144]	; (800c7ec <__swsetup_r+0xd8>)
 800c75c:	429c      	cmp	r4, r3
 800c75e:	bf08      	it	eq
 800c760:	68ec      	ldreq	r4, [r5, #12]
 800c762:	e7e6      	b.n	800c732 <__swsetup_r+0x1e>
 800c764:	0758      	lsls	r0, r3, #29
 800c766:	d512      	bpl.n	800c78e <__swsetup_r+0x7a>
 800c768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c76a:	b141      	cbz	r1, 800c77e <__swsetup_r+0x6a>
 800c76c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c770:	4299      	cmp	r1, r3
 800c772:	d002      	beq.n	800c77a <__swsetup_r+0x66>
 800c774:	4630      	mov	r0, r6
 800c776:	f000 fa5b 	bl	800cc30 <_free_r>
 800c77a:	2300      	movs	r3, #0
 800c77c:	6363      	str	r3, [r4, #52]	; 0x34
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	2300      	movs	r3, #0
 800c788:	6063      	str	r3, [r4, #4]
 800c78a:	6923      	ldr	r3, [r4, #16]
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	f043 0308 	orr.w	r3, r3, #8
 800c794:	81a3      	strh	r3, [r4, #12]
 800c796:	6923      	ldr	r3, [r4, #16]
 800c798:	b94b      	cbnz	r3, 800c7ae <__swsetup_r+0x9a>
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7a4:	d003      	beq.n	800c7ae <__swsetup_r+0x9a>
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f000 fa01 	bl	800cbb0 <__smakebuf_r>
 800c7ae:	89a0      	ldrh	r0, [r4, #12]
 800c7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b4:	f010 0301 	ands.w	r3, r0, #1
 800c7b8:	d00a      	beq.n	800c7d0 <__swsetup_r+0xbc>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60a3      	str	r3, [r4, #8]
 800c7be:	6963      	ldr	r3, [r4, #20]
 800c7c0:	425b      	negs	r3, r3
 800c7c2:	61a3      	str	r3, [r4, #24]
 800c7c4:	6923      	ldr	r3, [r4, #16]
 800c7c6:	b943      	cbnz	r3, 800c7da <__swsetup_r+0xc6>
 800c7c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7cc:	d1ba      	bne.n	800c744 <__swsetup_r+0x30>
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	0781      	lsls	r1, r0, #30
 800c7d2:	bf58      	it	pl
 800c7d4:	6963      	ldrpl	r3, [r4, #20]
 800c7d6:	60a3      	str	r3, [r4, #8]
 800c7d8:	e7f4      	b.n	800c7c4 <__swsetup_r+0xb0>
 800c7da:	2000      	movs	r0, #0
 800c7dc:	e7f7      	b.n	800c7ce <__swsetup_r+0xba>
 800c7de:	bf00      	nop
 800c7e0:	20000030 	.word	0x20000030
 800c7e4:	0800ed0c 	.word	0x0800ed0c
 800c7e8:	0800ed2c 	.word	0x0800ed2c
 800c7ec:	0800ecec 	.word	0x0800ecec

0800c7f0 <__sflush_r>:
 800c7f0:	898a      	ldrh	r2, [r1, #12]
 800c7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	0710      	lsls	r0, r2, #28
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	d458      	bmi.n	800c8b0 <__sflush_r+0xc0>
 800c7fe:	684b      	ldr	r3, [r1, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	dc05      	bgt.n	800c810 <__sflush_r+0x20>
 800c804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	dc02      	bgt.n	800c810 <__sflush_r+0x20>
 800c80a:	2000      	movs	r0, #0
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c812:	2e00      	cmp	r6, #0
 800c814:	d0f9      	beq.n	800c80a <__sflush_r+0x1a>
 800c816:	2300      	movs	r3, #0
 800c818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c81c:	682f      	ldr	r7, [r5, #0]
 800c81e:	602b      	str	r3, [r5, #0]
 800c820:	d032      	beq.n	800c888 <__sflush_r+0x98>
 800c822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	075a      	lsls	r2, r3, #29
 800c828:	d505      	bpl.n	800c836 <__sflush_r+0x46>
 800c82a:	6863      	ldr	r3, [r4, #4]
 800c82c:	1ac0      	subs	r0, r0, r3
 800c82e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c830:	b10b      	cbz	r3, 800c836 <__sflush_r+0x46>
 800c832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c834:	1ac0      	subs	r0, r0, r3
 800c836:	2300      	movs	r3, #0
 800c838:	4602      	mov	r2, r0
 800c83a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c83c:	6a21      	ldr	r1, [r4, #32]
 800c83e:	4628      	mov	r0, r5
 800c840:	47b0      	blx	r6
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	d106      	bne.n	800c856 <__sflush_r+0x66>
 800c848:	6829      	ldr	r1, [r5, #0]
 800c84a:	291d      	cmp	r1, #29
 800c84c:	d82c      	bhi.n	800c8a8 <__sflush_r+0xb8>
 800c84e:	4a2a      	ldr	r2, [pc, #168]	; (800c8f8 <__sflush_r+0x108>)
 800c850:	40ca      	lsrs	r2, r1
 800c852:	07d6      	lsls	r6, r2, #31
 800c854:	d528      	bpl.n	800c8a8 <__sflush_r+0xb8>
 800c856:	2200      	movs	r2, #0
 800c858:	6062      	str	r2, [r4, #4]
 800c85a:	04d9      	lsls	r1, r3, #19
 800c85c:	6922      	ldr	r2, [r4, #16]
 800c85e:	6022      	str	r2, [r4, #0]
 800c860:	d504      	bpl.n	800c86c <__sflush_r+0x7c>
 800c862:	1c42      	adds	r2, r0, #1
 800c864:	d101      	bne.n	800c86a <__sflush_r+0x7a>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b903      	cbnz	r3, 800c86c <__sflush_r+0x7c>
 800c86a:	6560      	str	r0, [r4, #84]	; 0x54
 800c86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c86e:	602f      	str	r7, [r5, #0]
 800c870:	2900      	cmp	r1, #0
 800c872:	d0ca      	beq.n	800c80a <__sflush_r+0x1a>
 800c874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c878:	4299      	cmp	r1, r3
 800c87a:	d002      	beq.n	800c882 <__sflush_r+0x92>
 800c87c:	4628      	mov	r0, r5
 800c87e:	f000 f9d7 	bl	800cc30 <_free_r>
 800c882:	2000      	movs	r0, #0
 800c884:	6360      	str	r0, [r4, #52]	; 0x34
 800c886:	e7c1      	b.n	800c80c <__sflush_r+0x1c>
 800c888:	6a21      	ldr	r1, [r4, #32]
 800c88a:	2301      	movs	r3, #1
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b0      	blx	r6
 800c890:	1c41      	adds	r1, r0, #1
 800c892:	d1c7      	bne.n	800c824 <__sflush_r+0x34>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0c4      	beq.n	800c824 <__sflush_r+0x34>
 800c89a:	2b1d      	cmp	r3, #29
 800c89c:	d001      	beq.n	800c8a2 <__sflush_r+0xb2>
 800c89e:	2b16      	cmp	r3, #22
 800c8a0:	d101      	bne.n	800c8a6 <__sflush_r+0xb6>
 800c8a2:	602f      	str	r7, [r5, #0]
 800c8a4:	e7b1      	b.n	800c80a <__sflush_r+0x1a>
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	e7ad      	b.n	800c80c <__sflush_r+0x1c>
 800c8b0:	690f      	ldr	r7, [r1, #16]
 800c8b2:	2f00      	cmp	r7, #0
 800c8b4:	d0a9      	beq.n	800c80a <__sflush_r+0x1a>
 800c8b6:	0793      	lsls	r3, r2, #30
 800c8b8:	680e      	ldr	r6, [r1, #0]
 800c8ba:	bf08      	it	eq
 800c8bc:	694b      	ldreq	r3, [r1, #20]
 800c8be:	600f      	str	r7, [r1, #0]
 800c8c0:	bf18      	it	ne
 800c8c2:	2300      	movne	r3, #0
 800c8c4:	eba6 0807 	sub.w	r8, r6, r7
 800c8c8:	608b      	str	r3, [r1, #8]
 800c8ca:	f1b8 0f00 	cmp.w	r8, #0
 800c8ce:	dd9c      	ble.n	800c80a <__sflush_r+0x1a>
 800c8d0:	6a21      	ldr	r1, [r4, #32]
 800c8d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8d4:	4643      	mov	r3, r8
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b0      	blx	r6
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	dc06      	bgt.n	800c8ee <__sflush_r+0xfe>
 800c8e0:	89a3      	ldrh	r3, [r4, #12]
 800c8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ec:	e78e      	b.n	800c80c <__sflush_r+0x1c>
 800c8ee:	4407      	add	r7, r0
 800c8f0:	eba8 0800 	sub.w	r8, r8, r0
 800c8f4:	e7e9      	b.n	800c8ca <__sflush_r+0xda>
 800c8f6:	bf00      	nop
 800c8f8:	20400001 	.word	0x20400001

0800c8fc <_fflush_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	690b      	ldr	r3, [r1, #16]
 800c900:	4605      	mov	r5, r0
 800c902:	460c      	mov	r4, r1
 800c904:	b913      	cbnz	r3, 800c90c <_fflush_r+0x10>
 800c906:	2500      	movs	r5, #0
 800c908:	4628      	mov	r0, r5
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	b118      	cbz	r0, 800c916 <_fflush_r+0x1a>
 800c90e:	6983      	ldr	r3, [r0, #24]
 800c910:	b90b      	cbnz	r3, 800c916 <_fflush_r+0x1a>
 800c912:	f000 f887 	bl	800ca24 <__sinit>
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <_fflush_r+0x6c>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	d11b      	bne.n	800c954 <_fflush_r+0x58>
 800c91c:	686c      	ldr	r4, [r5, #4]
 800c91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0ef      	beq.n	800c906 <_fflush_r+0xa>
 800c926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c928:	07d0      	lsls	r0, r2, #31
 800c92a:	d404      	bmi.n	800c936 <_fflush_r+0x3a>
 800c92c:	0599      	lsls	r1, r3, #22
 800c92e:	d402      	bmi.n	800c936 <_fflush_r+0x3a>
 800c930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c932:	f000 f915 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800c936:	4628      	mov	r0, r5
 800c938:	4621      	mov	r1, r4
 800c93a:	f7ff ff59 	bl	800c7f0 <__sflush_r>
 800c93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c940:	07da      	lsls	r2, r3, #31
 800c942:	4605      	mov	r5, r0
 800c944:	d4e0      	bmi.n	800c908 <_fflush_r+0xc>
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	059b      	lsls	r3, r3, #22
 800c94a:	d4dd      	bmi.n	800c908 <_fflush_r+0xc>
 800c94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c94e:	f000 f908 	bl	800cb62 <__retarget_lock_release_recursive>
 800c952:	e7d9      	b.n	800c908 <_fflush_r+0xc>
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <_fflush_r+0x70>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d101      	bne.n	800c95e <_fflush_r+0x62>
 800c95a:	68ac      	ldr	r4, [r5, #8]
 800c95c:	e7df      	b.n	800c91e <_fflush_r+0x22>
 800c95e:	4b04      	ldr	r3, [pc, #16]	; (800c970 <_fflush_r+0x74>)
 800c960:	429c      	cmp	r4, r3
 800c962:	bf08      	it	eq
 800c964:	68ec      	ldreq	r4, [r5, #12]
 800c966:	e7da      	b.n	800c91e <_fflush_r+0x22>
 800c968:	0800ed0c 	.word	0x0800ed0c
 800c96c:	0800ed2c 	.word	0x0800ed2c
 800c970:	0800ecec 	.word	0x0800ecec

0800c974 <std>:
 800c974:	2300      	movs	r3, #0
 800c976:	b510      	push	{r4, lr}
 800c978:	4604      	mov	r4, r0
 800c97a:	e9c0 3300 	strd	r3, r3, [r0]
 800c97e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c982:	6083      	str	r3, [r0, #8]
 800c984:	8181      	strh	r1, [r0, #12]
 800c986:	6643      	str	r3, [r0, #100]	; 0x64
 800c988:	81c2      	strh	r2, [r0, #14]
 800c98a:	6183      	str	r3, [r0, #24]
 800c98c:	4619      	mov	r1, r3
 800c98e:	2208      	movs	r2, #8
 800c990:	305c      	adds	r0, #92	; 0x5c
 800c992:	f7ff fdad 	bl	800c4f0 <memset>
 800c996:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <std+0x38>)
 800c998:	6263      	str	r3, [r4, #36]	; 0x24
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <std+0x3c>)
 800c99c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <std+0x40>)
 800c9a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <std+0x44>)
 800c9a4:	6224      	str	r4, [r4, #32]
 800c9a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c9a8:	bd10      	pop	{r4, pc}
 800c9aa:	bf00      	nop
 800c9ac:	0800d47d 	.word	0x0800d47d
 800c9b0:	0800d49f 	.word	0x0800d49f
 800c9b4:	0800d4d7 	.word	0x0800d4d7
 800c9b8:	0800d4fb 	.word	0x0800d4fb

0800c9bc <_cleanup_r>:
 800c9bc:	4901      	ldr	r1, [pc, #4]	; (800c9c4 <_cleanup_r+0x8>)
 800c9be:	f000 b8af 	b.w	800cb20 <_fwalk_reent>
 800c9c2:	bf00      	nop
 800c9c4:	0800c8fd 	.word	0x0800c8fd

0800c9c8 <__sfmoreglue>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	2268      	movs	r2, #104	; 0x68
 800c9cc:	1e4d      	subs	r5, r1, #1
 800c9ce:	4355      	muls	r5, r2
 800c9d0:	460e      	mov	r6, r1
 800c9d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9d6:	f000 f997 	bl	800cd08 <_malloc_r>
 800c9da:	4604      	mov	r4, r0
 800c9dc:	b140      	cbz	r0, 800c9f0 <__sfmoreglue+0x28>
 800c9de:	2100      	movs	r1, #0
 800c9e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c9e4:	300c      	adds	r0, #12
 800c9e6:	60a0      	str	r0, [r4, #8]
 800c9e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9ec:	f7ff fd80 	bl	800c4f0 <memset>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}

0800c9f4 <__sfp_lock_acquire>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sfp_lock_acquire+0x8>)
 800c9f6:	f000 b8b3 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20001919 	.word	0x20001919

0800ca00 <__sfp_lock_release>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__sfp_lock_release+0x8>)
 800ca02:	f000 b8ae 	b.w	800cb62 <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	20001919 	.word	0x20001919

0800ca0c <__sinit_lock_acquire>:
 800ca0c:	4801      	ldr	r0, [pc, #4]	; (800ca14 <__sinit_lock_acquire+0x8>)
 800ca0e:	f000 b8a7 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800ca12:	bf00      	nop
 800ca14:	2000191a 	.word	0x2000191a

0800ca18 <__sinit_lock_release>:
 800ca18:	4801      	ldr	r0, [pc, #4]	; (800ca20 <__sinit_lock_release+0x8>)
 800ca1a:	f000 b8a2 	b.w	800cb62 <__retarget_lock_release_recursive>
 800ca1e:	bf00      	nop
 800ca20:	2000191a 	.word	0x2000191a

0800ca24 <__sinit>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	4604      	mov	r4, r0
 800ca28:	f7ff fff0 	bl	800ca0c <__sinit_lock_acquire>
 800ca2c:	69a3      	ldr	r3, [r4, #24]
 800ca2e:	b11b      	cbz	r3, 800ca38 <__sinit+0x14>
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f7ff bff0 	b.w	800ca18 <__sinit_lock_release>
 800ca38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <__sinit+0x68>)
 800ca40:	4a13      	ldr	r2, [pc, #76]	; (800ca90 <__sinit+0x6c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	bf04      	itt	eq
 800ca4a:	2301      	moveq	r3, #1
 800ca4c:	61a3      	streq	r3, [r4, #24]
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f820 	bl	800ca94 <__sfp>
 800ca54:	6060      	str	r0, [r4, #4]
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 f81c 	bl	800ca94 <__sfp>
 800ca5c:	60a0      	str	r0, [r4, #8]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 f818 	bl	800ca94 <__sfp>
 800ca64:	2200      	movs	r2, #0
 800ca66:	60e0      	str	r0, [r4, #12]
 800ca68:	2104      	movs	r1, #4
 800ca6a:	6860      	ldr	r0, [r4, #4]
 800ca6c:	f7ff ff82 	bl	800c974 <std>
 800ca70:	68a0      	ldr	r0, [r4, #8]
 800ca72:	2201      	movs	r2, #1
 800ca74:	2109      	movs	r1, #9
 800ca76:	f7ff ff7d 	bl	800c974 <std>
 800ca7a:	68e0      	ldr	r0, [r4, #12]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	2112      	movs	r1, #18
 800ca80:	f7ff ff78 	bl	800c974 <std>
 800ca84:	2301      	movs	r3, #1
 800ca86:	61a3      	str	r3, [r4, #24]
 800ca88:	e7d2      	b.n	800ca30 <__sinit+0xc>
 800ca8a:	bf00      	nop
 800ca8c:	0800ece8 	.word	0x0800ece8
 800ca90:	0800c9bd 	.word	0x0800c9bd

0800ca94 <__sfp>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	4607      	mov	r7, r0
 800ca98:	f7ff ffac 	bl	800c9f4 <__sfp_lock_acquire>
 800ca9c:	4b1e      	ldr	r3, [pc, #120]	; (800cb18 <__sfp+0x84>)
 800ca9e:	681e      	ldr	r6, [r3, #0]
 800caa0:	69b3      	ldr	r3, [r6, #24]
 800caa2:	b913      	cbnz	r3, 800caaa <__sfp+0x16>
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7ff ffbd 	bl	800ca24 <__sinit>
 800caaa:	3648      	adds	r6, #72	; 0x48
 800caac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	d503      	bpl.n	800cabc <__sfp+0x28>
 800cab4:	6833      	ldr	r3, [r6, #0]
 800cab6:	b30b      	cbz	r3, 800cafc <__sfp+0x68>
 800cab8:	6836      	ldr	r6, [r6, #0]
 800caba:	e7f7      	b.n	800caac <__sfp+0x18>
 800cabc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cac0:	b9d5      	cbnz	r5, 800caf8 <__sfp+0x64>
 800cac2:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <__sfp+0x88>)
 800cac4:	60e3      	str	r3, [r4, #12]
 800cac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caca:	6665      	str	r5, [r4, #100]	; 0x64
 800cacc:	f000 f847 	bl	800cb5e <__retarget_lock_init_recursive>
 800cad0:	f7ff ff96 	bl	800ca00 <__sfp_lock_release>
 800cad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cadc:	6025      	str	r5, [r4, #0]
 800cade:	61a5      	str	r5, [r4, #24]
 800cae0:	2208      	movs	r2, #8
 800cae2:	4629      	mov	r1, r5
 800cae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cae8:	f7ff fd02 	bl	800c4f0 <memset>
 800caec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800caf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800caf4:	4620      	mov	r0, r4
 800caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf8:	3468      	adds	r4, #104	; 0x68
 800cafa:	e7d9      	b.n	800cab0 <__sfp+0x1c>
 800cafc:	2104      	movs	r1, #4
 800cafe:	4638      	mov	r0, r7
 800cb00:	f7ff ff62 	bl	800c9c8 <__sfmoreglue>
 800cb04:	4604      	mov	r4, r0
 800cb06:	6030      	str	r0, [r6, #0]
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1d5      	bne.n	800cab8 <__sfp+0x24>
 800cb0c:	f7ff ff78 	bl	800ca00 <__sfp_lock_release>
 800cb10:	230c      	movs	r3, #12
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	e7ee      	b.n	800caf4 <__sfp+0x60>
 800cb16:	bf00      	nop
 800cb18:	0800ece8 	.word	0x0800ece8
 800cb1c:	ffff0001 	.word	0xffff0001

0800cb20 <_fwalk_reent>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4606      	mov	r6, r0
 800cb26:	4688      	mov	r8, r1
 800cb28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb2c:	2700      	movs	r7, #0
 800cb2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb32:	f1b9 0901 	subs.w	r9, r9, #1
 800cb36:	d505      	bpl.n	800cb44 <_fwalk_reent+0x24>
 800cb38:	6824      	ldr	r4, [r4, #0]
 800cb3a:	2c00      	cmp	r4, #0
 800cb3c:	d1f7      	bne.n	800cb2e <_fwalk_reent+0xe>
 800cb3e:	4638      	mov	r0, r7
 800cb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb44:	89ab      	ldrh	r3, [r5, #12]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d907      	bls.n	800cb5a <_fwalk_reent+0x3a>
 800cb4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	d003      	beq.n	800cb5a <_fwalk_reent+0x3a>
 800cb52:	4629      	mov	r1, r5
 800cb54:	4630      	mov	r0, r6
 800cb56:	47c0      	blx	r8
 800cb58:	4307      	orrs	r7, r0
 800cb5a:	3568      	adds	r5, #104	; 0x68
 800cb5c:	e7e9      	b.n	800cb32 <_fwalk_reent+0x12>

0800cb5e <__retarget_lock_init_recursive>:
 800cb5e:	4770      	bx	lr

0800cb60 <__retarget_lock_acquire_recursive>:
 800cb60:	4770      	bx	lr

0800cb62 <__retarget_lock_release_recursive>:
 800cb62:	4770      	bx	lr

0800cb64 <__swhatbuf_r>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	460e      	mov	r6, r1
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	b096      	sub	sp, #88	; 0x58
 800cb70:	4614      	mov	r4, r2
 800cb72:	461d      	mov	r5, r3
 800cb74:	da08      	bge.n	800cb88 <__swhatbuf_r+0x24>
 800cb76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	602a      	str	r2, [r5, #0]
 800cb7e:	061a      	lsls	r2, r3, #24
 800cb80:	d410      	bmi.n	800cba4 <__swhatbuf_r+0x40>
 800cb82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb86:	e00e      	b.n	800cba6 <__swhatbuf_r+0x42>
 800cb88:	466a      	mov	r2, sp
 800cb8a:	f000 fce9 	bl	800d560 <_fstat_r>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	dbf1      	blt.n	800cb76 <__swhatbuf_r+0x12>
 800cb92:	9a01      	ldr	r2, [sp, #4]
 800cb94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb9c:	425a      	negs	r2, r3
 800cb9e:	415a      	adcs	r2, r3
 800cba0:	602a      	str	r2, [r5, #0]
 800cba2:	e7ee      	b.n	800cb82 <__swhatbuf_r+0x1e>
 800cba4:	2340      	movs	r3, #64	; 0x40
 800cba6:	2000      	movs	r0, #0
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	b016      	add	sp, #88	; 0x58
 800cbac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbb0 <__smakebuf_r>:
 800cbb0:	898b      	ldrh	r3, [r1, #12]
 800cbb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbb4:	079d      	lsls	r5, r3, #30
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460c      	mov	r4, r1
 800cbba:	d507      	bpl.n	800cbcc <__smakebuf_r+0x1c>
 800cbbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	6123      	str	r3, [r4, #16]
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	6163      	str	r3, [r4, #20]
 800cbc8:	b002      	add	sp, #8
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	ab01      	add	r3, sp, #4
 800cbce:	466a      	mov	r2, sp
 800cbd0:	f7ff ffc8 	bl	800cb64 <__swhatbuf_r>
 800cbd4:	9900      	ldr	r1, [sp, #0]
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 f895 	bl	800cd08 <_malloc_r>
 800cbde:	b948      	cbnz	r0, 800cbf4 <__smakebuf_r+0x44>
 800cbe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe4:	059a      	lsls	r2, r3, #22
 800cbe6:	d4ef      	bmi.n	800cbc8 <__smakebuf_r+0x18>
 800cbe8:	f023 0303 	bic.w	r3, r3, #3
 800cbec:	f043 0302 	orr.w	r3, r3, #2
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	e7e3      	b.n	800cbbc <__smakebuf_r+0xc>
 800cbf4:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <__smakebuf_r+0x7c>)
 800cbf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	6020      	str	r0, [r4, #0]
 800cbfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc00:	81a3      	strh	r3, [r4, #12]
 800cc02:	9b00      	ldr	r3, [sp, #0]
 800cc04:	6163      	str	r3, [r4, #20]
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	6120      	str	r0, [r4, #16]
 800cc0a:	b15b      	cbz	r3, 800cc24 <__smakebuf_r+0x74>
 800cc0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc10:	4630      	mov	r0, r6
 800cc12:	f000 fcb7 	bl	800d584 <_isatty_r>
 800cc16:	b128      	cbz	r0, 800cc24 <__smakebuf_r+0x74>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	f023 0303 	bic.w	r3, r3, #3
 800cc1e:	f043 0301 	orr.w	r3, r3, #1
 800cc22:	81a3      	strh	r3, [r4, #12]
 800cc24:	89a0      	ldrh	r0, [r4, #12]
 800cc26:	4305      	orrs	r5, r0
 800cc28:	81a5      	strh	r5, [r4, #12]
 800cc2a:	e7cd      	b.n	800cbc8 <__smakebuf_r+0x18>
 800cc2c:	0800c9bd 	.word	0x0800c9bd

0800cc30 <_free_r>:
 800cc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc32:	2900      	cmp	r1, #0
 800cc34:	d044      	beq.n	800ccc0 <_free_r+0x90>
 800cc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc3a:	9001      	str	r0, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc42:	bfb8      	it	lt
 800cc44:	18e4      	addlt	r4, r4, r3
 800cc46:	f000 fcbf 	bl	800d5c8 <__malloc_lock>
 800cc4a:	4a1e      	ldr	r2, [pc, #120]	; (800ccc4 <_free_r+0x94>)
 800cc4c:	9801      	ldr	r0, [sp, #4]
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	b933      	cbnz	r3, 800cc60 <_free_r+0x30>
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	6014      	str	r4, [r2, #0]
 800cc56:	b003      	add	sp, #12
 800cc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc5c:	f000 bcba 	b.w	800d5d4 <__malloc_unlock>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d908      	bls.n	800cc76 <_free_r+0x46>
 800cc64:	6825      	ldr	r5, [r4, #0]
 800cc66:	1961      	adds	r1, r4, r5
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf01      	itttt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	1949      	addeq	r1, r1, r5
 800cc72:	6021      	streq	r1, [r4, #0]
 800cc74:	e7ed      	b.n	800cc52 <_free_r+0x22>
 800cc76:	461a      	mov	r2, r3
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	b10b      	cbz	r3, 800cc80 <_free_r+0x50>
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	d9fa      	bls.n	800cc76 <_free_r+0x46>
 800cc80:	6811      	ldr	r1, [r2, #0]
 800cc82:	1855      	adds	r5, r2, r1
 800cc84:	42a5      	cmp	r5, r4
 800cc86:	d10b      	bne.n	800cca0 <_free_r+0x70>
 800cc88:	6824      	ldr	r4, [r4, #0]
 800cc8a:	4421      	add	r1, r4
 800cc8c:	1854      	adds	r4, r2, r1
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	6011      	str	r1, [r2, #0]
 800cc92:	d1e0      	bne.n	800cc56 <_free_r+0x26>
 800cc94:	681c      	ldr	r4, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	6053      	str	r3, [r2, #4]
 800cc9a:	4421      	add	r1, r4
 800cc9c:	6011      	str	r1, [r2, #0]
 800cc9e:	e7da      	b.n	800cc56 <_free_r+0x26>
 800cca0:	d902      	bls.n	800cca8 <_free_r+0x78>
 800cca2:	230c      	movs	r3, #12
 800cca4:	6003      	str	r3, [r0, #0]
 800cca6:	e7d6      	b.n	800cc56 <_free_r+0x26>
 800cca8:	6825      	ldr	r5, [r4, #0]
 800ccaa:	1961      	adds	r1, r4, r5
 800ccac:	428b      	cmp	r3, r1
 800ccae:	bf04      	itt	eq
 800ccb0:	6819      	ldreq	r1, [r3, #0]
 800ccb2:	685b      	ldreq	r3, [r3, #4]
 800ccb4:	6063      	str	r3, [r4, #4]
 800ccb6:	bf04      	itt	eq
 800ccb8:	1949      	addeq	r1, r1, r5
 800ccba:	6021      	streq	r1, [r4, #0]
 800ccbc:	6054      	str	r4, [r2, #4]
 800ccbe:	e7ca      	b.n	800cc56 <_free_r+0x26>
 800ccc0:	b003      	add	sp, #12
 800ccc2:	bd30      	pop	{r4, r5, pc}
 800ccc4:	2000191c 	.word	0x2000191c

0800ccc8 <sbrk_aligned>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	4e0e      	ldr	r6, [pc, #56]	; (800cd04 <sbrk_aligned+0x3c>)
 800cccc:	460c      	mov	r4, r1
 800ccce:	6831      	ldr	r1, [r6, #0]
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	b911      	cbnz	r1, 800ccda <sbrk_aligned+0x12>
 800ccd4:	f000 fbc2 	bl	800d45c <_sbrk_r>
 800ccd8:	6030      	str	r0, [r6, #0]
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f000 fbbd 	bl	800d45c <_sbrk_r>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	d00a      	beq.n	800ccfc <sbrk_aligned+0x34>
 800cce6:	1cc4      	adds	r4, r0, #3
 800cce8:	f024 0403 	bic.w	r4, r4, #3
 800ccec:	42a0      	cmp	r0, r4
 800ccee:	d007      	beq.n	800cd00 <sbrk_aligned+0x38>
 800ccf0:	1a21      	subs	r1, r4, r0
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 fbb2 	bl	800d45c <_sbrk_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d101      	bne.n	800cd00 <sbrk_aligned+0x38>
 800ccfc:	f04f 34ff 	mov.w	r4, #4294967295
 800cd00:	4620      	mov	r0, r4
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	20001920 	.word	0x20001920

0800cd08 <_malloc_r>:
 800cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0c:	1ccd      	adds	r5, r1, #3
 800cd0e:	f025 0503 	bic.w	r5, r5, #3
 800cd12:	3508      	adds	r5, #8
 800cd14:	2d0c      	cmp	r5, #12
 800cd16:	bf38      	it	cc
 800cd18:	250c      	movcc	r5, #12
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	db01      	blt.n	800cd24 <_malloc_r+0x1c>
 800cd20:	42a9      	cmp	r1, r5
 800cd22:	d905      	bls.n	800cd30 <_malloc_r+0x28>
 800cd24:	230c      	movs	r3, #12
 800cd26:	603b      	str	r3, [r7, #0]
 800cd28:	2600      	movs	r6, #0
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd30:	4e2e      	ldr	r6, [pc, #184]	; (800cdec <_malloc_r+0xe4>)
 800cd32:	f000 fc49 	bl	800d5c8 <__malloc_lock>
 800cd36:	6833      	ldr	r3, [r6, #0]
 800cd38:	461c      	mov	r4, r3
 800cd3a:	bb34      	cbnz	r4, 800cd8a <_malloc_r+0x82>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ffc2 	bl	800ccc8 <sbrk_aligned>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	4604      	mov	r4, r0
 800cd48:	d14d      	bne.n	800cde6 <_malloc_r+0xde>
 800cd4a:	6834      	ldr	r4, [r6, #0]
 800cd4c:	4626      	mov	r6, r4
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	d140      	bne.n	800cdd4 <_malloc_r+0xcc>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	4631      	mov	r1, r6
 800cd56:	4638      	mov	r0, r7
 800cd58:	eb04 0803 	add.w	r8, r4, r3
 800cd5c:	f000 fb7e 	bl	800d45c <_sbrk_r>
 800cd60:	4580      	cmp	r8, r0
 800cd62:	d13a      	bne.n	800cdda <_malloc_r+0xd2>
 800cd64:	6821      	ldr	r1, [r4, #0]
 800cd66:	3503      	adds	r5, #3
 800cd68:	1a6d      	subs	r5, r5, r1
 800cd6a:	f025 0503 	bic.w	r5, r5, #3
 800cd6e:	3508      	adds	r5, #8
 800cd70:	2d0c      	cmp	r5, #12
 800cd72:	bf38      	it	cc
 800cd74:	250c      	movcc	r5, #12
 800cd76:	4629      	mov	r1, r5
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7ff ffa5 	bl	800ccc8 <sbrk_aligned>
 800cd7e:	3001      	adds	r0, #1
 800cd80:	d02b      	beq.n	800cdda <_malloc_r+0xd2>
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	442b      	add	r3, r5
 800cd86:	6023      	str	r3, [r4, #0]
 800cd88:	e00e      	b.n	800cda8 <_malloc_r+0xa0>
 800cd8a:	6822      	ldr	r2, [r4, #0]
 800cd8c:	1b52      	subs	r2, r2, r5
 800cd8e:	d41e      	bmi.n	800cdce <_malloc_r+0xc6>
 800cd90:	2a0b      	cmp	r2, #11
 800cd92:	d916      	bls.n	800cdc2 <_malloc_r+0xba>
 800cd94:	1961      	adds	r1, r4, r5
 800cd96:	42a3      	cmp	r3, r4
 800cd98:	6025      	str	r5, [r4, #0]
 800cd9a:	bf18      	it	ne
 800cd9c:	6059      	strne	r1, [r3, #4]
 800cd9e:	6863      	ldr	r3, [r4, #4]
 800cda0:	bf08      	it	eq
 800cda2:	6031      	streq	r1, [r6, #0]
 800cda4:	5162      	str	r2, [r4, r5]
 800cda6:	604b      	str	r3, [r1, #4]
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f104 060b 	add.w	r6, r4, #11
 800cdae:	f000 fc11 	bl	800d5d4 <__malloc_unlock>
 800cdb2:	f026 0607 	bic.w	r6, r6, #7
 800cdb6:	1d23      	adds	r3, r4, #4
 800cdb8:	1af2      	subs	r2, r6, r3
 800cdba:	d0b6      	beq.n	800cd2a <_malloc_r+0x22>
 800cdbc:	1b9b      	subs	r3, r3, r6
 800cdbe:	50a3      	str	r3, [r4, r2]
 800cdc0:	e7b3      	b.n	800cd2a <_malloc_r+0x22>
 800cdc2:	6862      	ldr	r2, [r4, #4]
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	bf0c      	ite	eq
 800cdc8:	6032      	streq	r2, [r6, #0]
 800cdca:	605a      	strne	r2, [r3, #4]
 800cdcc:	e7ec      	b.n	800cda8 <_malloc_r+0xa0>
 800cdce:	4623      	mov	r3, r4
 800cdd0:	6864      	ldr	r4, [r4, #4]
 800cdd2:	e7b2      	b.n	800cd3a <_malloc_r+0x32>
 800cdd4:	4634      	mov	r4, r6
 800cdd6:	6876      	ldr	r6, [r6, #4]
 800cdd8:	e7b9      	b.n	800cd4e <_malloc_r+0x46>
 800cdda:	230c      	movs	r3, #12
 800cddc:	603b      	str	r3, [r7, #0]
 800cdde:	4638      	mov	r0, r7
 800cde0:	f000 fbf8 	bl	800d5d4 <__malloc_unlock>
 800cde4:	e7a1      	b.n	800cd2a <_malloc_r+0x22>
 800cde6:	6025      	str	r5, [r4, #0]
 800cde8:	e7de      	b.n	800cda8 <_malloc_r+0xa0>
 800cdea:	bf00      	nop
 800cdec:	2000191c 	.word	0x2000191c

0800cdf0 <__sfputc_r>:
 800cdf0:	6893      	ldr	r3, [r2, #8]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	b410      	push	{r4}
 800cdf8:	6093      	str	r3, [r2, #8]
 800cdfa:	da08      	bge.n	800ce0e <__sfputc_r+0x1e>
 800cdfc:	6994      	ldr	r4, [r2, #24]
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	db01      	blt.n	800ce06 <__sfputc_r+0x16>
 800ce02:	290a      	cmp	r1, #10
 800ce04:	d103      	bne.n	800ce0e <__sfputc_r+0x1e>
 800ce06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce0a:	f7ff bc31 	b.w	800c670 <__swbuf_r>
 800ce0e:	6813      	ldr	r3, [r2, #0]
 800ce10:	1c58      	adds	r0, r3, #1
 800ce12:	6010      	str	r0, [r2, #0]
 800ce14:	7019      	strb	r1, [r3, #0]
 800ce16:	4608      	mov	r0, r1
 800ce18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <__sfputs_r>:
 800ce1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce20:	4606      	mov	r6, r0
 800ce22:	460f      	mov	r7, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	18d5      	adds	r5, r2, r3
 800ce28:	42ac      	cmp	r4, r5
 800ce2a:	d101      	bne.n	800ce30 <__sfputs_r+0x12>
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e007      	b.n	800ce40 <__sfputs_r+0x22>
 800ce30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce34:	463a      	mov	r2, r7
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7ff ffda 	bl	800cdf0 <__sfputc_r>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d1f3      	bne.n	800ce28 <__sfputs_r+0xa>
 800ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce44 <_vfiprintf_r>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	460d      	mov	r5, r1
 800ce4a:	b09d      	sub	sp, #116	; 0x74
 800ce4c:	4614      	mov	r4, r2
 800ce4e:	4698      	mov	r8, r3
 800ce50:	4606      	mov	r6, r0
 800ce52:	b118      	cbz	r0, 800ce5c <_vfiprintf_r+0x18>
 800ce54:	6983      	ldr	r3, [r0, #24]
 800ce56:	b90b      	cbnz	r3, 800ce5c <_vfiprintf_r+0x18>
 800ce58:	f7ff fde4 	bl	800ca24 <__sinit>
 800ce5c:	4b89      	ldr	r3, [pc, #548]	; (800d084 <_vfiprintf_r+0x240>)
 800ce5e:	429d      	cmp	r5, r3
 800ce60:	d11b      	bne.n	800ce9a <_vfiprintf_r+0x56>
 800ce62:	6875      	ldr	r5, [r6, #4]
 800ce64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce66:	07d9      	lsls	r1, r3, #31
 800ce68:	d405      	bmi.n	800ce76 <_vfiprintf_r+0x32>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	059a      	lsls	r2, r3, #22
 800ce6e:	d402      	bmi.n	800ce76 <_vfiprintf_r+0x32>
 800ce70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce72:	f7ff fe75 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800ce76:	89ab      	ldrh	r3, [r5, #12]
 800ce78:	071b      	lsls	r3, r3, #28
 800ce7a:	d501      	bpl.n	800ce80 <_vfiprintf_r+0x3c>
 800ce7c:	692b      	ldr	r3, [r5, #16]
 800ce7e:	b9eb      	cbnz	r3, 800cebc <_vfiprintf_r+0x78>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7ff fc46 	bl	800c714 <__swsetup_r>
 800ce88:	b1c0      	cbz	r0, 800cebc <_vfiprintf_r+0x78>
 800ce8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce8c:	07dc      	lsls	r4, r3, #31
 800ce8e:	d50e      	bpl.n	800ceae <_vfiprintf_r+0x6a>
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	b01d      	add	sp, #116	; 0x74
 800ce96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9a:	4b7b      	ldr	r3, [pc, #492]	; (800d088 <_vfiprintf_r+0x244>)
 800ce9c:	429d      	cmp	r5, r3
 800ce9e:	d101      	bne.n	800cea4 <_vfiprintf_r+0x60>
 800cea0:	68b5      	ldr	r5, [r6, #8]
 800cea2:	e7df      	b.n	800ce64 <_vfiprintf_r+0x20>
 800cea4:	4b79      	ldr	r3, [pc, #484]	; (800d08c <_vfiprintf_r+0x248>)
 800cea6:	429d      	cmp	r5, r3
 800cea8:	bf08      	it	eq
 800ceaa:	68f5      	ldreq	r5, [r6, #12]
 800ceac:	e7da      	b.n	800ce64 <_vfiprintf_r+0x20>
 800ceae:	89ab      	ldrh	r3, [r5, #12]
 800ceb0:	0598      	lsls	r0, r3, #22
 800ceb2:	d4ed      	bmi.n	800ce90 <_vfiprintf_r+0x4c>
 800ceb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceb6:	f7ff fe54 	bl	800cb62 <__retarget_lock_release_recursive>
 800ceba:	e7e9      	b.n	800ce90 <_vfiprintf_r+0x4c>
 800cebc:	2300      	movs	r3, #0
 800cebe:	9309      	str	r3, [sp, #36]	; 0x24
 800cec0:	2320      	movs	r3, #32
 800cec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cec6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceca:	2330      	movs	r3, #48	; 0x30
 800cecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d090 <_vfiprintf_r+0x24c>
 800ced0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ced4:	f04f 0901 	mov.w	r9, #1
 800ced8:	4623      	mov	r3, r4
 800ceda:	469a      	mov	sl, r3
 800cedc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee0:	b10a      	cbz	r2, 800cee6 <_vfiprintf_r+0xa2>
 800cee2:	2a25      	cmp	r2, #37	; 0x25
 800cee4:	d1f9      	bne.n	800ceda <_vfiprintf_r+0x96>
 800cee6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceea:	d00b      	beq.n	800cf04 <_vfiprintf_r+0xc0>
 800ceec:	465b      	mov	r3, fp
 800ceee:	4622      	mov	r2, r4
 800cef0:	4629      	mov	r1, r5
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ff93 	bl	800ce1e <__sfputs_r>
 800cef8:	3001      	adds	r0, #1
 800cefa:	f000 80aa 	beq.w	800d052 <_vfiprintf_r+0x20e>
 800cefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf00:	445a      	add	r2, fp
 800cf02:	9209      	str	r2, [sp, #36]	; 0x24
 800cf04:	f89a 3000 	ldrb.w	r3, [sl]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 80a2 	beq.w	800d052 <_vfiprintf_r+0x20e>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f04f 32ff 	mov.w	r2, #4294967295
 800cf14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf18:	f10a 0a01 	add.w	sl, sl, #1
 800cf1c:	9304      	str	r3, [sp, #16]
 800cf1e:	9307      	str	r3, [sp, #28]
 800cf20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf24:	931a      	str	r3, [sp, #104]	; 0x68
 800cf26:	4654      	mov	r4, sl
 800cf28:	2205      	movs	r2, #5
 800cf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2e:	4858      	ldr	r0, [pc, #352]	; (800d090 <_vfiprintf_r+0x24c>)
 800cf30:	f7f3 f92e 	bl	8000190 <memchr>
 800cf34:	9a04      	ldr	r2, [sp, #16]
 800cf36:	b9d8      	cbnz	r0, 800cf70 <_vfiprintf_r+0x12c>
 800cf38:	06d1      	lsls	r1, r2, #27
 800cf3a:	bf44      	itt	mi
 800cf3c:	2320      	movmi	r3, #32
 800cf3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf42:	0713      	lsls	r3, r2, #28
 800cf44:	bf44      	itt	mi
 800cf46:	232b      	movmi	r3, #43	; 0x2b
 800cf48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf50:	2b2a      	cmp	r3, #42	; 0x2a
 800cf52:	d015      	beq.n	800cf80 <_vfiprintf_r+0x13c>
 800cf54:	9a07      	ldr	r2, [sp, #28]
 800cf56:	4654      	mov	r4, sl
 800cf58:	2000      	movs	r0, #0
 800cf5a:	f04f 0c0a 	mov.w	ip, #10
 800cf5e:	4621      	mov	r1, r4
 800cf60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf64:	3b30      	subs	r3, #48	; 0x30
 800cf66:	2b09      	cmp	r3, #9
 800cf68:	d94e      	bls.n	800d008 <_vfiprintf_r+0x1c4>
 800cf6a:	b1b0      	cbz	r0, 800cf9a <_vfiprintf_r+0x156>
 800cf6c:	9207      	str	r2, [sp, #28]
 800cf6e:	e014      	b.n	800cf9a <_vfiprintf_r+0x156>
 800cf70:	eba0 0308 	sub.w	r3, r0, r8
 800cf74:	fa09 f303 	lsl.w	r3, r9, r3
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	46a2      	mov	sl, r4
 800cf7e:	e7d2      	b.n	800cf26 <_vfiprintf_r+0xe2>
 800cf80:	9b03      	ldr	r3, [sp, #12]
 800cf82:	1d19      	adds	r1, r3, #4
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	9103      	str	r1, [sp, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bfbb      	ittet	lt
 800cf8c:	425b      	neglt	r3, r3
 800cf8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf92:	9307      	strge	r3, [sp, #28]
 800cf94:	9307      	strlt	r3, [sp, #28]
 800cf96:	bfb8      	it	lt
 800cf98:	9204      	strlt	r2, [sp, #16]
 800cf9a:	7823      	ldrb	r3, [r4, #0]
 800cf9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf9e:	d10c      	bne.n	800cfba <_vfiprintf_r+0x176>
 800cfa0:	7863      	ldrb	r3, [r4, #1]
 800cfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa4:	d135      	bne.n	800d012 <_vfiprintf_r+0x1ce>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	1d1a      	adds	r2, r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	9203      	str	r2, [sp, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfb8      	it	lt
 800cfb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfb6:	3402      	adds	r4, #2
 800cfb8:	9305      	str	r3, [sp, #20]
 800cfba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0a0 <_vfiprintf_r+0x25c>
 800cfbe:	7821      	ldrb	r1, [r4, #0]
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	f7f3 f8e4 	bl	8000190 <memchr>
 800cfc8:	b140      	cbz	r0, 800cfdc <_vfiprintf_r+0x198>
 800cfca:	2340      	movs	r3, #64	; 0x40
 800cfcc:	eba0 000a 	sub.w	r0, r0, sl
 800cfd0:	fa03 f000 	lsl.w	r0, r3, r0
 800cfd4:	9b04      	ldr	r3, [sp, #16]
 800cfd6:	4303      	orrs	r3, r0
 800cfd8:	3401      	adds	r4, #1
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe0:	482c      	ldr	r0, [pc, #176]	; (800d094 <_vfiprintf_r+0x250>)
 800cfe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfe6:	2206      	movs	r2, #6
 800cfe8:	f7f3 f8d2 	bl	8000190 <memchr>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d03f      	beq.n	800d070 <_vfiprintf_r+0x22c>
 800cff0:	4b29      	ldr	r3, [pc, #164]	; (800d098 <_vfiprintf_r+0x254>)
 800cff2:	bb1b      	cbnz	r3, 800d03c <_vfiprintf_r+0x1f8>
 800cff4:	9b03      	ldr	r3, [sp, #12]
 800cff6:	3307      	adds	r3, #7
 800cff8:	f023 0307 	bic.w	r3, r3, #7
 800cffc:	3308      	adds	r3, #8
 800cffe:	9303      	str	r3, [sp, #12]
 800d000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d002:	443b      	add	r3, r7
 800d004:	9309      	str	r3, [sp, #36]	; 0x24
 800d006:	e767      	b.n	800ced8 <_vfiprintf_r+0x94>
 800d008:	fb0c 3202 	mla	r2, ip, r2, r3
 800d00c:	460c      	mov	r4, r1
 800d00e:	2001      	movs	r0, #1
 800d010:	e7a5      	b.n	800cf5e <_vfiprintf_r+0x11a>
 800d012:	2300      	movs	r3, #0
 800d014:	3401      	adds	r4, #1
 800d016:	9305      	str	r3, [sp, #20]
 800d018:	4619      	mov	r1, r3
 800d01a:	f04f 0c0a 	mov.w	ip, #10
 800d01e:	4620      	mov	r0, r4
 800d020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d024:	3a30      	subs	r2, #48	; 0x30
 800d026:	2a09      	cmp	r2, #9
 800d028:	d903      	bls.n	800d032 <_vfiprintf_r+0x1ee>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d0c5      	beq.n	800cfba <_vfiprintf_r+0x176>
 800d02e:	9105      	str	r1, [sp, #20]
 800d030:	e7c3      	b.n	800cfba <_vfiprintf_r+0x176>
 800d032:	fb0c 2101 	mla	r1, ip, r1, r2
 800d036:	4604      	mov	r4, r0
 800d038:	2301      	movs	r3, #1
 800d03a:	e7f0      	b.n	800d01e <_vfiprintf_r+0x1da>
 800d03c:	ab03      	add	r3, sp, #12
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	462a      	mov	r2, r5
 800d042:	4b16      	ldr	r3, [pc, #88]	; (800d09c <_vfiprintf_r+0x258>)
 800d044:	a904      	add	r1, sp, #16
 800d046:	4630      	mov	r0, r6
 800d048:	f3af 8000 	nop.w
 800d04c:	4607      	mov	r7, r0
 800d04e:	1c78      	adds	r0, r7, #1
 800d050:	d1d6      	bne.n	800d000 <_vfiprintf_r+0x1bc>
 800d052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d054:	07d9      	lsls	r1, r3, #31
 800d056:	d405      	bmi.n	800d064 <_vfiprintf_r+0x220>
 800d058:	89ab      	ldrh	r3, [r5, #12]
 800d05a:	059a      	lsls	r2, r3, #22
 800d05c:	d402      	bmi.n	800d064 <_vfiprintf_r+0x220>
 800d05e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d060:	f7ff fd7f 	bl	800cb62 <__retarget_lock_release_recursive>
 800d064:	89ab      	ldrh	r3, [r5, #12]
 800d066:	065b      	lsls	r3, r3, #25
 800d068:	f53f af12 	bmi.w	800ce90 <_vfiprintf_r+0x4c>
 800d06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06e:	e711      	b.n	800ce94 <_vfiprintf_r+0x50>
 800d070:	ab03      	add	r3, sp, #12
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	462a      	mov	r2, r5
 800d076:	4b09      	ldr	r3, [pc, #36]	; (800d09c <_vfiprintf_r+0x258>)
 800d078:	a904      	add	r1, sp, #16
 800d07a:	4630      	mov	r0, r6
 800d07c:	f000 f880 	bl	800d180 <_printf_i>
 800d080:	e7e4      	b.n	800d04c <_vfiprintf_r+0x208>
 800d082:	bf00      	nop
 800d084:	0800ed0c 	.word	0x0800ed0c
 800d088:	0800ed2c 	.word	0x0800ed2c
 800d08c:	0800ecec 	.word	0x0800ecec
 800d090:	0800ed4c 	.word	0x0800ed4c
 800d094:	0800ed56 	.word	0x0800ed56
 800d098:	00000000 	.word	0x00000000
 800d09c:	0800ce1f 	.word	0x0800ce1f
 800d0a0:	0800ed52 	.word	0x0800ed52

0800d0a4 <_printf_common>:
 800d0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a8:	4616      	mov	r6, r2
 800d0aa:	4699      	mov	r9, r3
 800d0ac:	688a      	ldr	r2, [r1, #8]
 800d0ae:	690b      	ldr	r3, [r1, #16]
 800d0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	bfb8      	it	lt
 800d0b8:	4613      	movlt	r3, r2
 800d0ba:	6033      	str	r3, [r6, #0]
 800d0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	b10a      	cbz	r2, 800d0ca <_printf_common+0x26>
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	6033      	str	r3, [r6, #0]
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	0699      	lsls	r1, r3, #26
 800d0ce:	bf42      	ittt	mi
 800d0d0:	6833      	ldrmi	r3, [r6, #0]
 800d0d2:	3302      	addmi	r3, #2
 800d0d4:	6033      	strmi	r3, [r6, #0]
 800d0d6:	6825      	ldr	r5, [r4, #0]
 800d0d8:	f015 0506 	ands.w	r5, r5, #6
 800d0dc:	d106      	bne.n	800d0ec <_printf_common+0x48>
 800d0de:	f104 0a19 	add.w	sl, r4, #25
 800d0e2:	68e3      	ldr	r3, [r4, #12]
 800d0e4:	6832      	ldr	r2, [r6, #0]
 800d0e6:	1a9b      	subs	r3, r3, r2
 800d0e8:	42ab      	cmp	r3, r5
 800d0ea:	dc26      	bgt.n	800d13a <_printf_common+0x96>
 800d0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0f0:	1e13      	subs	r3, r2, #0
 800d0f2:	6822      	ldr	r2, [r4, #0]
 800d0f4:	bf18      	it	ne
 800d0f6:	2301      	movne	r3, #1
 800d0f8:	0692      	lsls	r2, r2, #26
 800d0fa:	d42b      	bmi.n	800d154 <_printf_common+0xb0>
 800d0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d100:	4649      	mov	r1, r9
 800d102:	4638      	mov	r0, r7
 800d104:	47c0      	blx	r8
 800d106:	3001      	adds	r0, #1
 800d108:	d01e      	beq.n	800d148 <_printf_common+0xa4>
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	68e5      	ldr	r5, [r4, #12]
 800d10e:	6832      	ldr	r2, [r6, #0]
 800d110:	f003 0306 	and.w	r3, r3, #6
 800d114:	2b04      	cmp	r3, #4
 800d116:	bf08      	it	eq
 800d118:	1aad      	subeq	r5, r5, r2
 800d11a:	68a3      	ldr	r3, [r4, #8]
 800d11c:	6922      	ldr	r2, [r4, #16]
 800d11e:	bf0c      	ite	eq
 800d120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d124:	2500      	movne	r5, #0
 800d126:	4293      	cmp	r3, r2
 800d128:	bfc4      	itt	gt
 800d12a:	1a9b      	subgt	r3, r3, r2
 800d12c:	18ed      	addgt	r5, r5, r3
 800d12e:	2600      	movs	r6, #0
 800d130:	341a      	adds	r4, #26
 800d132:	42b5      	cmp	r5, r6
 800d134:	d11a      	bne.n	800d16c <_printf_common+0xc8>
 800d136:	2000      	movs	r0, #0
 800d138:	e008      	b.n	800d14c <_printf_common+0xa8>
 800d13a:	2301      	movs	r3, #1
 800d13c:	4652      	mov	r2, sl
 800d13e:	4649      	mov	r1, r9
 800d140:	4638      	mov	r0, r7
 800d142:	47c0      	blx	r8
 800d144:	3001      	adds	r0, #1
 800d146:	d103      	bne.n	800d150 <_printf_common+0xac>
 800d148:	f04f 30ff 	mov.w	r0, #4294967295
 800d14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d150:	3501      	adds	r5, #1
 800d152:	e7c6      	b.n	800d0e2 <_printf_common+0x3e>
 800d154:	18e1      	adds	r1, r4, r3
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	2030      	movs	r0, #48	; 0x30
 800d15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d15e:	4422      	add	r2, r4
 800d160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d168:	3302      	adds	r3, #2
 800d16a:	e7c7      	b.n	800d0fc <_printf_common+0x58>
 800d16c:	2301      	movs	r3, #1
 800d16e:	4622      	mov	r2, r4
 800d170:	4649      	mov	r1, r9
 800d172:	4638      	mov	r0, r7
 800d174:	47c0      	blx	r8
 800d176:	3001      	adds	r0, #1
 800d178:	d0e6      	beq.n	800d148 <_printf_common+0xa4>
 800d17a:	3601      	adds	r6, #1
 800d17c:	e7d9      	b.n	800d132 <_printf_common+0x8e>
	...

0800d180 <_printf_i>:
 800d180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d184:	7e0f      	ldrb	r7, [r1, #24]
 800d186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d188:	2f78      	cmp	r7, #120	; 0x78
 800d18a:	4691      	mov	r9, r2
 800d18c:	4680      	mov	r8, r0
 800d18e:	460c      	mov	r4, r1
 800d190:	469a      	mov	sl, r3
 800d192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d196:	d807      	bhi.n	800d1a8 <_printf_i+0x28>
 800d198:	2f62      	cmp	r7, #98	; 0x62
 800d19a:	d80a      	bhi.n	800d1b2 <_printf_i+0x32>
 800d19c:	2f00      	cmp	r7, #0
 800d19e:	f000 80d8 	beq.w	800d352 <_printf_i+0x1d2>
 800d1a2:	2f58      	cmp	r7, #88	; 0x58
 800d1a4:	f000 80a3 	beq.w	800d2ee <_printf_i+0x16e>
 800d1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1b0:	e03a      	b.n	800d228 <_printf_i+0xa8>
 800d1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1b6:	2b15      	cmp	r3, #21
 800d1b8:	d8f6      	bhi.n	800d1a8 <_printf_i+0x28>
 800d1ba:	a101      	add	r1, pc, #4	; (adr r1, 800d1c0 <_printf_i+0x40>)
 800d1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1c0:	0800d219 	.word	0x0800d219
 800d1c4:	0800d22d 	.word	0x0800d22d
 800d1c8:	0800d1a9 	.word	0x0800d1a9
 800d1cc:	0800d1a9 	.word	0x0800d1a9
 800d1d0:	0800d1a9 	.word	0x0800d1a9
 800d1d4:	0800d1a9 	.word	0x0800d1a9
 800d1d8:	0800d22d 	.word	0x0800d22d
 800d1dc:	0800d1a9 	.word	0x0800d1a9
 800d1e0:	0800d1a9 	.word	0x0800d1a9
 800d1e4:	0800d1a9 	.word	0x0800d1a9
 800d1e8:	0800d1a9 	.word	0x0800d1a9
 800d1ec:	0800d339 	.word	0x0800d339
 800d1f0:	0800d25d 	.word	0x0800d25d
 800d1f4:	0800d31b 	.word	0x0800d31b
 800d1f8:	0800d1a9 	.word	0x0800d1a9
 800d1fc:	0800d1a9 	.word	0x0800d1a9
 800d200:	0800d35b 	.word	0x0800d35b
 800d204:	0800d1a9 	.word	0x0800d1a9
 800d208:	0800d25d 	.word	0x0800d25d
 800d20c:	0800d1a9 	.word	0x0800d1a9
 800d210:	0800d1a9 	.word	0x0800d1a9
 800d214:	0800d323 	.word	0x0800d323
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	602a      	str	r2, [r5, #0]
 800d220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d228:	2301      	movs	r3, #1
 800d22a:	e0a3      	b.n	800d374 <_printf_i+0x1f4>
 800d22c:	6820      	ldr	r0, [r4, #0]
 800d22e:	6829      	ldr	r1, [r5, #0]
 800d230:	0606      	lsls	r6, r0, #24
 800d232:	f101 0304 	add.w	r3, r1, #4
 800d236:	d50a      	bpl.n	800d24e <_printf_i+0xce>
 800d238:	680e      	ldr	r6, [r1, #0]
 800d23a:	602b      	str	r3, [r5, #0]
 800d23c:	2e00      	cmp	r6, #0
 800d23e:	da03      	bge.n	800d248 <_printf_i+0xc8>
 800d240:	232d      	movs	r3, #45	; 0x2d
 800d242:	4276      	negs	r6, r6
 800d244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d248:	485e      	ldr	r0, [pc, #376]	; (800d3c4 <_printf_i+0x244>)
 800d24a:	230a      	movs	r3, #10
 800d24c:	e019      	b.n	800d282 <_printf_i+0x102>
 800d24e:	680e      	ldr	r6, [r1, #0]
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d256:	bf18      	it	ne
 800d258:	b236      	sxthne	r6, r6
 800d25a:	e7ef      	b.n	800d23c <_printf_i+0xbc>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	6820      	ldr	r0, [r4, #0]
 800d260:	1d19      	adds	r1, r3, #4
 800d262:	6029      	str	r1, [r5, #0]
 800d264:	0601      	lsls	r1, r0, #24
 800d266:	d501      	bpl.n	800d26c <_printf_i+0xec>
 800d268:	681e      	ldr	r6, [r3, #0]
 800d26a:	e002      	b.n	800d272 <_printf_i+0xf2>
 800d26c:	0646      	lsls	r6, r0, #25
 800d26e:	d5fb      	bpl.n	800d268 <_printf_i+0xe8>
 800d270:	881e      	ldrh	r6, [r3, #0]
 800d272:	4854      	ldr	r0, [pc, #336]	; (800d3c4 <_printf_i+0x244>)
 800d274:	2f6f      	cmp	r7, #111	; 0x6f
 800d276:	bf0c      	ite	eq
 800d278:	2308      	moveq	r3, #8
 800d27a:	230a      	movne	r3, #10
 800d27c:	2100      	movs	r1, #0
 800d27e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d282:	6865      	ldr	r5, [r4, #4]
 800d284:	60a5      	str	r5, [r4, #8]
 800d286:	2d00      	cmp	r5, #0
 800d288:	bfa2      	ittt	ge
 800d28a:	6821      	ldrge	r1, [r4, #0]
 800d28c:	f021 0104 	bicge.w	r1, r1, #4
 800d290:	6021      	strge	r1, [r4, #0]
 800d292:	b90e      	cbnz	r6, 800d298 <_printf_i+0x118>
 800d294:	2d00      	cmp	r5, #0
 800d296:	d04d      	beq.n	800d334 <_printf_i+0x1b4>
 800d298:	4615      	mov	r5, r2
 800d29a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d29e:	fb03 6711 	mls	r7, r3, r1, r6
 800d2a2:	5dc7      	ldrb	r7, [r0, r7]
 800d2a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2a8:	4637      	mov	r7, r6
 800d2aa:	42bb      	cmp	r3, r7
 800d2ac:	460e      	mov	r6, r1
 800d2ae:	d9f4      	bls.n	800d29a <_printf_i+0x11a>
 800d2b0:	2b08      	cmp	r3, #8
 800d2b2:	d10b      	bne.n	800d2cc <_printf_i+0x14c>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	07de      	lsls	r6, r3, #31
 800d2b8:	d508      	bpl.n	800d2cc <_printf_i+0x14c>
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	6861      	ldr	r1, [r4, #4]
 800d2be:	4299      	cmp	r1, r3
 800d2c0:	bfde      	ittt	le
 800d2c2:	2330      	movle	r3, #48	; 0x30
 800d2c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2cc:	1b52      	subs	r2, r2, r5
 800d2ce:	6122      	str	r2, [r4, #16]
 800d2d0:	f8cd a000 	str.w	sl, [sp]
 800d2d4:	464b      	mov	r3, r9
 800d2d6:	aa03      	add	r2, sp, #12
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f7ff fee2 	bl	800d0a4 <_printf_common>
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d14c      	bne.n	800d37e <_printf_i+0x1fe>
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e8:	b004      	add	sp, #16
 800d2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ee:	4835      	ldr	r0, [pc, #212]	; (800d3c4 <_printf_i+0x244>)
 800d2f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d2f4:	6829      	ldr	r1, [r5, #0]
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2fc:	6029      	str	r1, [r5, #0]
 800d2fe:	061d      	lsls	r5, r3, #24
 800d300:	d514      	bpl.n	800d32c <_printf_i+0x1ac>
 800d302:	07df      	lsls	r7, r3, #31
 800d304:	bf44      	itt	mi
 800d306:	f043 0320 	orrmi.w	r3, r3, #32
 800d30a:	6023      	strmi	r3, [r4, #0]
 800d30c:	b91e      	cbnz	r6, 800d316 <_printf_i+0x196>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	f023 0320 	bic.w	r3, r3, #32
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	2310      	movs	r3, #16
 800d318:	e7b0      	b.n	800d27c <_printf_i+0xfc>
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	f043 0320 	orr.w	r3, r3, #32
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	2378      	movs	r3, #120	; 0x78
 800d324:	4828      	ldr	r0, [pc, #160]	; (800d3c8 <_printf_i+0x248>)
 800d326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d32a:	e7e3      	b.n	800d2f4 <_printf_i+0x174>
 800d32c:	0659      	lsls	r1, r3, #25
 800d32e:	bf48      	it	mi
 800d330:	b2b6      	uxthmi	r6, r6
 800d332:	e7e6      	b.n	800d302 <_printf_i+0x182>
 800d334:	4615      	mov	r5, r2
 800d336:	e7bb      	b.n	800d2b0 <_printf_i+0x130>
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	6826      	ldr	r6, [r4, #0]
 800d33c:	6961      	ldr	r1, [r4, #20]
 800d33e:	1d18      	adds	r0, r3, #4
 800d340:	6028      	str	r0, [r5, #0]
 800d342:	0635      	lsls	r5, r6, #24
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	d501      	bpl.n	800d34c <_printf_i+0x1cc>
 800d348:	6019      	str	r1, [r3, #0]
 800d34a:	e002      	b.n	800d352 <_printf_i+0x1d2>
 800d34c:	0670      	lsls	r0, r6, #25
 800d34e:	d5fb      	bpl.n	800d348 <_printf_i+0x1c8>
 800d350:	8019      	strh	r1, [r3, #0]
 800d352:	2300      	movs	r3, #0
 800d354:	6123      	str	r3, [r4, #16]
 800d356:	4615      	mov	r5, r2
 800d358:	e7ba      	b.n	800d2d0 <_printf_i+0x150>
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	1d1a      	adds	r2, r3, #4
 800d35e:	602a      	str	r2, [r5, #0]
 800d360:	681d      	ldr	r5, [r3, #0]
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	2100      	movs	r1, #0
 800d366:	4628      	mov	r0, r5
 800d368:	f7f2 ff12 	bl	8000190 <memchr>
 800d36c:	b108      	cbz	r0, 800d372 <_printf_i+0x1f2>
 800d36e:	1b40      	subs	r0, r0, r5
 800d370:	6060      	str	r0, [r4, #4]
 800d372:	6863      	ldr	r3, [r4, #4]
 800d374:	6123      	str	r3, [r4, #16]
 800d376:	2300      	movs	r3, #0
 800d378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d37c:	e7a8      	b.n	800d2d0 <_printf_i+0x150>
 800d37e:	6923      	ldr	r3, [r4, #16]
 800d380:	462a      	mov	r2, r5
 800d382:	4649      	mov	r1, r9
 800d384:	4640      	mov	r0, r8
 800d386:	47d0      	blx	sl
 800d388:	3001      	adds	r0, #1
 800d38a:	d0ab      	beq.n	800d2e4 <_printf_i+0x164>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	079b      	lsls	r3, r3, #30
 800d390:	d413      	bmi.n	800d3ba <_printf_i+0x23a>
 800d392:	68e0      	ldr	r0, [r4, #12]
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	4298      	cmp	r0, r3
 800d398:	bfb8      	it	lt
 800d39a:	4618      	movlt	r0, r3
 800d39c:	e7a4      	b.n	800d2e8 <_printf_i+0x168>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	4632      	mov	r2, r6
 800d3a2:	4649      	mov	r1, r9
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	47d0      	blx	sl
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	d09b      	beq.n	800d2e4 <_printf_i+0x164>
 800d3ac:	3501      	adds	r5, #1
 800d3ae:	68e3      	ldr	r3, [r4, #12]
 800d3b0:	9903      	ldr	r1, [sp, #12]
 800d3b2:	1a5b      	subs	r3, r3, r1
 800d3b4:	42ab      	cmp	r3, r5
 800d3b6:	dcf2      	bgt.n	800d39e <_printf_i+0x21e>
 800d3b8:	e7eb      	b.n	800d392 <_printf_i+0x212>
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	f104 0619 	add.w	r6, r4, #25
 800d3c0:	e7f5      	b.n	800d3ae <_printf_i+0x22e>
 800d3c2:	bf00      	nop
 800d3c4:	0800ed5d 	.word	0x0800ed5d
 800d3c8:	0800ed6e 	.word	0x0800ed6e

0800d3cc <_putc_r>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	460d      	mov	r5, r1
 800d3d0:	4614      	mov	r4, r2
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	b118      	cbz	r0, 800d3de <_putc_r+0x12>
 800d3d6:	6983      	ldr	r3, [r0, #24]
 800d3d8:	b90b      	cbnz	r3, 800d3de <_putc_r+0x12>
 800d3da:	f7ff fb23 	bl	800ca24 <__sinit>
 800d3de:	4b1c      	ldr	r3, [pc, #112]	; (800d450 <_putc_r+0x84>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	d124      	bne.n	800d42e <_putc_r+0x62>
 800d3e4:	6874      	ldr	r4, [r6, #4]
 800d3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3e8:	07d8      	lsls	r0, r3, #31
 800d3ea:	d405      	bmi.n	800d3f8 <_putc_r+0x2c>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	0599      	lsls	r1, r3, #22
 800d3f0:	d402      	bmi.n	800d3f8 <_putc_r+0x2c>
 800d3f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3f4:	f7ff fbb4 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800d3f8:	68a3      	ldr	r3, [r4, #8]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	60a3      	str	r3, [r4, #8]
 800d400:	da05      	bge.n	800d40e <_putc_r+0x42>
 800d402:	69a2      	ldr	r2, [r4, #24]
 800d404:	4293      	cmp	r3, r2
 800d406:	db1c      	blt.n	800d442 <_putc_r+0x76>
 800d408:	b2eb      	uxtb	r3, r5
 800d40a:	2b0a      	cmp	r3, #10
 800d40c:	d019      	beq.n	800d442 <_putc_r+0x76>
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	6022      	str	r2, [r4, #0]
 800d414:	701d      	strb	r5, [r3, #0]
 800d416:	b2ed      	uxtb	r5, r5
 800d418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d41a:	07da      	lsls	r2, r3, #31
 800d41c:	d405      	bmi.n	800d42a <_putc_r+0x5e>
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	059b      	lsls	r3, r3, #22
 800d422:	d402      	bmi.n	800d42a <_putc_r+0x5e>
 800d424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d426:	f7ff fb9c 	bl	800cb62 <__retarget_lock_release_recursive>
 800d42a:	4628      	mov	r0, r5
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	4b09      	ldr	r3, [pc, #36]	; (800d454 <_putc_r+0x88>)
 800d430:	429c      	cmp	r4, r3
 800d432:	d101      	bne.n	800d438 <_putc_r+0x6c>
 800d434:	68b4      	ldr	r4, [r6, #8]
 800d436:	e7d6      	b.n	800d3e6 <_putc_r+0x1a>
 800d438:	4b07      	ldr	r3, [pc, #28]	; (800d458 <_putc_r+0x8c>)
 800d43a:	429c      	cmp	r4, r3
 800d43c:	bf08      	it	eq
 800d43e:	68f4      	ldreq	r4, [r6, #12]
 800d440:	e7d1      	b.n	800d3e6 <_putc_r+0x1a>
 800d442:	4629      	mov	r1, r5
 800d444:	4622      	mov	r2, r4
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff f912 	bl	800c670 <__swbuf_r>
 800d44c:	4605      	mov	r5, r0
 800d44e:	e7e3      	b.n	800d418 <_putc_r+0x4c>
 800d450:	0800ed0c 	.word	0x0800ed0c
 800d454:	0800ed2c 	.word	0x0800ed2c
 800d458:	0800ecec 	.word	0x0800ecec

0800d45c <_sbrk_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d06      	ldr	r5, [pc, #24]	; (800d478 <_sbrk_r+0x1c>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	f7f5 fcca 	bl	8002e00 <_sbrk>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_sbrk_r+0x1a>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_sbrk_r+0x1a>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20001924 	.word	0x20001924

0800d47c <__sread>:
 800d47c:	b510      	push	{r4, lr}
 800d47e:	460c      	mov	r4, r1
 800d480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d484:	f000 f8ac 	bl	800d5e0 <_read_r>
 800d488:	2800      	cmp	r0, #0
 800d48a:	bfab      	itete	ge
 800d48c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d48e:	89a3      	ldrhlt	r3, [r4, #12]
 800d490:	181b      	addge	r3, r3, r0
 800d492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d496:	bfac      	ite	ge
 800d498:	6563      	strge	r3, [r4, #84]	; 0x54
 800d49a:	81a3      	strhlt	r3, [r4, #12]
 800d49c:	bd10      	pop	{r4, pc}

0800d49e <__swrite>:
 800d49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	898b      	ldrh	r3, [r1, #12]
 800d4a6:	05db      	lsls	r3, r3, #23
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	4616      	mov	r6, r2
 800d4ae:	d505      	bpl.n	800d4bc <__swrite+0x1e>
 800d4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f000 f874 	bl	800d5a4 <_lseek_r>
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4c6:	81a3      	strh	r3, [r4, #12]
 800d4c8:	4632      	mov	r2, r6
 800d4ca:	463b      	mov	r3, r7
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d2:	f000 b823 	b.w	800d51c <_write_r>

0800d4d6 <__sseek>:
 800d4d6:	b510      	push	{r4, lr}
 800d4d8:	460c      	mov	r4, r1
 800d4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4de:	f000 f861 	bl	800d5a4 <_lseek_r>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	bf15      	itete	ne
 800d4e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4f2:	81a3      	strheq	r3, [r4, #12]
 800d4f4:	bf18      	it	ne
 800d4f6:	81a3      	strhne	r3, [r4, #12]
 800d4f8:	bd10      	pop	{r4, pc}

0800d4fa <__sclose>:
 800d4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fe:	f000 b81f 	b.w	800d540 <_close_r>

0800d502 <strchr>:
 800d502:	b2c9      	uxtb	r1, r1
 800d504:	4603      	mov	r3, r0
 800d506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d50a:	b11a      	cbz	r2, 800d514 <strchr+0x12>
 800d50c:	428a      	cmp	r2, r1
 800d50e:	d1f9      	bne.n	800d504 <strchr+0x2>
 800d510:	4618      	mov	r0, r3
 800d512:	4770      	bx	lr
 800d514:	2900      	cmp	r1, #0
 800d516:	bf18      	it	ne
 800d518:	2300      	movne	r3, #0
 800d51a:	e7f9      	b.n	800d510 <strchr+0xe>

0800d51c <_write_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d07      	ldr	r5, [pc, #28]	; (800d53c <_write_r+0x20>)
 800d520:	4604      	mov	r4, r0
 800d522:	4608      	mov	r0, r1
 800d524:	4611      	mov	r1, r2
 800d526:	2200      	movs	r2, #0
 800d528:	602a      	str	r2, [r5, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	f7fc fabc 	bl	8009aa8 <_write>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_write_r+0x1e>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_write_r+0x1e>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	20001924 	.word	0x20001924

0800d540 <_close_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d06      	ldr	r5, [pc, #24]	; (800d55c <_close_r+0x1c>)
 800d544:	2300      	movs	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	602b      	str	r3, [r5, #0]
 800d54c:	f7f5 fc23 	bl	8002d96 <_close>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_close_r+0x1a>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_close_r+0x1a>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	20001924 	.word	0x20001924

0800d560 <_fstat_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	; (800d580 <_fstat_r+0x20>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	4611      	mov	r1, r2
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	f7f5 fc1e 	bl	8002dae <_fstat>
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	d102      	bne.n	800d57c <_fstat_r+0x1c>
 800d576:	682b      	ldr	r3, [r5, #0]
 800d578:	b103      	cbz	r3, 800d57c <_fstat_r+0x1c>
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	20001924 	.word	0x20001924

0800d584 <_isatty_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d06      	ldr	r5, [pc, #24]	; (800d5a0 <_isatty_r+0x1c>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f5 fc1d 	bl	8002dce <_isatty>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_isatty_r+0x1a>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_isatty_r+0x1a>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20001924 	.word	0x20001924

0800d5a4 <_lseek_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d07      	ldr	r5, [pc, #28]	; (800d5c4 <_lseek_r+0x20>)
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	602a      	str	r2, [r5, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7f5 fc16 	bl	8002de4 <_lseek>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_lseek_r+0x1e>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_lseek_r+0x1e>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20001924 	.word	0x20001924

0800d5c8 <__malloc_lock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__malloc_lock+0x8>)
 800d5ca:	f7ff bac9 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20001918 	.word	0x20001918

0800d5d4 <__malloc_unlock>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__malloc_unlock+0x8>)
 800d5d6:	f7ff bac4 	b.w	800cb62 <__retarget_lock_release_recursive>
 800d5da:	bf00      	nop
 800d5dc:	20001918 	.word	0x20001918

0800d5e0 <_read_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d07      	ldr	r5, [pc, #28]	; (800d600 <_read_r+0x20>)
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	4608      	mov	r0, r1
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	602a      	str	r2, [r5, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f7f5 fbb4 	bl	8002d5c <_read>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_read_r+0x1e>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_read_r+0x1e>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20001924 	.word	0x20001924

0800d604 <_init>:
 800d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d606:	bf00      	nop
 800d608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60a:	bc08      	pop	{r3}
 800d60c:	469e      	mov	lr, r3
 800d60e:	4770      	bx	lr

0800d610 <_fini>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr
