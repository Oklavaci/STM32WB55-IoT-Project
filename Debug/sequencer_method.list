
sequencer_method.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc88  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017dc  0800ddc8  0800ddc8  0001ddc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f5a4  0800f5a4  0001f5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f5ac  0800f5ac  0001f5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f5b0  0800f5b0  0001f5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  0800f5b4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800f644  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000130  0800f6dd  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000170  0800f71b  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 0000008a  20000184  0800f72c  00020184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001834  20000210  0800f7b6  00020210  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001a44  0800f7b6  00021a44  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .debug_info   0003c0d8  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000073c0  00000000  00000000  0005c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000033c8  00000000  00000000  000636d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000030b8  00000000  00000000  00066aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003061e  00000000  00000000  00069b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0003b317  00000000  00000000  0009a176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00109f8b  00000000  00000000  000d548d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001df418  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e488  00000000  00000000  001df468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ddb0 	.word	0x0800ddb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800ddb0 	.word	0x0800ddb0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b96:	f002 fb37 	bl	8003208 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b9a:	f002 fb3b 	bl	8003214 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	f7ff ffad 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ba6:	f009 fa77 	bl	800a098 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000baa:	f000 f821 	bl	8000bf0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bae:	f000 f8c3 	bl	8000d38 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <APPD_EnableCPU2+0x34>)
 8000bc0:	1d3c      	adds	r4, r7, #4
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bd6:	f009 f973 	bl	8009ec0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 fc0e 	bl	80093fe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800ddc8 	.word	0x0800ddc8

08000bf0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
 8000c14:	e038      	b.n	8000c88 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01b      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x7a>
 8000c32:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d823      	bhi.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
 8000c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3c:	d003      	beq.n	8000c46 <APPD_SetCPU2GpioConfig+0x56>
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d009      	beq.n	8000c58 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c44:	e01c      	b.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	889a      	ldrh	r2, [r3, #4]
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	83bb      	strh	r3, [r7, #28]
          break;
 8000c56:	e014      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	889a      	ldrh	r2, [r3, #4]
 8000c62:	8b7b      	ldrh	r3, [r7, #26]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	837b      	strh	r3, [r7, #26]
          break;
 8000c68:	e00b      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	889a      	ldrh	r2, [r3, #4]
 8000c74:	8b3b      	ldrh	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	833b      	strh	r3, [r7, #24]
          break;
 8000c7a:	e002      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000c80:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	3301      	adds	r3, #1
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b25      	cmp	r3, #37	; 0x25
 8000c8c:	d9c3      	bls.n	8000c16 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff3f 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff55 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f002 ff7e 	bl	8003bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f003 f8e7 	bl	8003e98 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff ff27 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff ff3d 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000ce6:	f002 ff67 	bl	8003bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000cf2:	f003 f8d1 	bl	8003e98 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cfc:	8b3b      	ldrh	r3, [r7, #24]
 8000cfe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff11 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff ff27 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d12:	f002 ff51 	bl	8003bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d1e:	f003 f8bb 	bl	8003e98 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
}
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800f17c 	.word	0x0800f17c
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d4a:	f001 fcef 	bl	800272c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 faba 	bl	80022e0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_EXTI_EnableIT_32_63>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000daa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000800 	.word	0x58000800

08000dc8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cafecafe 	.word	0xcafecafe

08000e04 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_AHB3_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	b29b      	uxth	r3, r3
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e0042000 	.word	0xe0042000

08000f0c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	041b      	lsls	r3, r3, #16
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	041b      	lsls	r3, r3, #16
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22ca      	movs	r2, #202	; 0xca
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2253      	movs	r2, #83	; 0x53
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 0207 	bic.w	r2, r3, #7
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <MX_APPE_Config+0x18>)
 8001036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800103c:	f000 f826 	bl	800108c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001040:	f000 f866 	bl	8001110 <Config_HSE>

  return;
 8001044:	bf00      	nop
}
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58004000 	.word	0x58004000

0800104c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001050:	f000 f872 	bl	8001138 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001054:	f000 f88a 	bl	800116c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <MX_APPE_Init+0x20>)
 800105a:	2000      	movs	r0, #0
 800105c:	f000 ff38 	bl	8001ed0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001060:	f7ff fd97 	bl	8000b92 <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001064:	f000 f890 	bl	8001188 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200002cc 	.word	0x200002cc

08001070 <Init_Smps>:

void Init_Smps(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001074:	bf00      	nop
}
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <Init_Exti>:

void Init_Exti(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001082:	2050      	movs	r0, #80	; 0x50
 8001084:	f7ff fe8c 	bl	8000da0 <LL_EXTI_EnableIT_32_63>

  return;
 8001088:	bf00      	nop
}
 800108a:	bd80      	pop	{r7, pc}

0800108c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001090:	f000 f804 	bl	800109c <Reset_BackupDomain>

  Reset_IPCC();
 8001094:	f000 f81a 	bl	80010cc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001098:	bf00      	nop
}
 800109a:	bd80      	pop	{r7, pc}

0800109c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010a0:	f7ff fee6 	bl	8000e70 <LL_RCC_IsActiveFlag_PINRST>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00d      	beq.n	80010c6 <Reset_BackupDomain+0x2a>
 80010aa:	f7ff fef4 	bl	8000e96 <LL_RCC_IsActiveFlag_SFTRST>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010b4:	f003 fa20 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010b8:	f003 fa1e 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010bc:	f7ff feb6 	bl	8000e2c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010c0:	f7ff fec5 	bl	8000e4e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
}
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80010d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010d4:	f7ff fef2 	bl	8000ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010d8:	213f      	movs	r1, #63	; 0x3f
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <Reset_IPCC+0x40>)
 80010dc:	f7ff ff5c 	bl	8000f98 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010e0:	213f      	movs	r1, #63	; 0x3f
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <Reset_IPCC+0x40>)
 80010e4:	f7ff ff66 	bl	8000fb4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010e8:	213f      	movs	r1, #63	; 0x3f
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <Reset_IPCC+0x40>)
 80010ec:	f7ff ff0e 	bl	8000f0c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010f0:	213f      	movs	r1, #63	; 0x3f
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <Reset_IPCC+0x40>)
 80010f4:	f7ff ff2d 	bl	8000f52 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80010f8:	213f      	movs	r1, #63	; 0x3f
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <Reset_IPCC+0x40>)
 80010fc:	f7ff ff18 	bl	8000f30 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001100:	213f      	movs	r1, #63	; 0x3f
 8001102:	4802      	ldr	r0, [pc, #8]	; (800110c <Reset_IPCC+0x40>)
 8001104:	f7ff ff37 	bl	8000f76 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001108:	bf00      	nop
}
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58000c00 	.word	0x58000c00

08001110 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f009 f83c 	bl	800a194 <OTP_Read>
 800111c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe4d 	bl	8000dc8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800112e:	bf00      	nop
 8001130:	bf00      	nop
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <System_Init>:

static void System_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  Init_Smps();
 800113c:	f7ff ff98 	bl	8001070 <Init_Smps>

  Init_Exti();
 8001140:	f7ff ff9d 	bl	800107e <Init_Exti>

  Init_Rtc();
 8001144:	f000 f802 	bl	800114c <Init_Rtc>

  return;
 8001148:	bf00      	nop
}
 800114a:	bd80      	pop	{r7, pc}

0800114c <Init_Rtc>:

static void Init_Rtc(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <Init_Rtc+0x1c>)
 8001152:	f7ff ff4a 	bl	8000fea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001156:	2100      	movs	r1, #0
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <Init_Rtc+0x1c>)
 800115a:	f7ff ff56 	bl	800100a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800115e:	4802      	ldr	r0, [pc, #8]	; (8001168 <Init_Rtc+0x1c>)
 8001160:	f7ff ff36 	bl	8000fd0 <LL_RTC_EnableWriteProtection>

  return;
 8001164:	bf00      	nop
}
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800

0800116c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001174:	f7ff fe46 	bl	8000e04 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001178:	f00b fad8 	bl	800c72c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff fdf9 	bl	8000d74 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001182:	bf00      	nop
}
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800118e:	f008 fce1 	bl	8009b54 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <appe_Tl_Init+0x50>)
 8001194:	2100      	movs	r1, #0
 8001196:	2020      	movs	r0, #32
 8001198:	f00b fc06 	bl	800c9a8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <appe_Tl_Init+0x54>)
 800119e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <appe_Tl_Init+0x58>)
 80011a2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <appe_Tl_Init+0x5c>)
 80011aa:	f008 fb99 	bl	80098e0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <appe_Tl_Init+0x60>)
 80011b0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <appe_Tl_Init+0x64>)
 80011b4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <appe_Tl_Init+0x68>)
 80011b8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011ba:	f240 533c 	movw	r3, #1340	; 0x53c
 80011be:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 fe07 	bl	8009dd8 <TL_MM_Init>

  TL_Enable();
 80011ca:	f008 fcbd 	bl	8009b48 <TL_Enable>

  return;
 80011ce:	bf00      	nop
}
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08009919 	.word	0x08009919
 80011dc:	20030734 	.word	0x20030734
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	2003094c 	.word	0x2003094c
 80011ec:	20030840 	.word	0x20030840
 80011f0:	200301f8 	.word	0x200301f8

080011f4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011fe:	bf00      	nop
}
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	330b      	adds	r3, #11
 800121a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001226:	2b07      	cmp	r3, #7
 8001228:	f200 80d0 	bhi.w	80013cc <APPE_SysUserEvtRx+0x1c0>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <APPE_SysUserEvtRx+0x28>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001255 	.word	0x08001255
 8001238:	080012e7 	.word	0x080012e7
 800123c:	08001309 	.word	0x08001309
 8001240:	080013cd 	.word	0x080013cd
 8001244:	0800134d 	.word	0x0800134d
 8001248:	08001371 	.word	0x08001371
 800124c:	0800138d 	.word	0x0800138d
 8001250:	080013b1 	.word	0x080013b1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f008 f8fd 	bl	8009458 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800125e:	485e      	ldr	r0, [pc, #376]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001260:	f008 feba 	bl	8009fd8 <DbgTraceGetFileName>
 8001264:	4601      	mov	r1, r0
 8001266:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 800126a:	4a5c      	ldr	r2, [pc, #368]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800126c:	485c      	ldr	r0, [pc, #368]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800126e:	f00b fd1d 	bl	800ccac <iprintf>
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	4619      	mov	r1, r3
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	461a      	mov	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	4859      	ldr	r0, [pc, #356]	; (80013e4 <APPE_SysUserEvtRx+0x1d8>)
 800127e:	f00b fd15 	bl	800ccac <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001282:	4855      	ldr	r0, [pc, #340]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001284:	f008 fea8 	bl	8009fd8 <DbgTraceGetFileName>
 8001288:	4601      	mov	r1, r0
 800128a:	f240 135b 	movw	r3, #347	; 0x15b
 800128e:	4a53      	ldr	r2, [pc, #332]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001290:	4853      	ldr	r0, [pc, #332]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001292:	f00b fd0b 	bl	800ccac <iprintf>
 8001296:	7c3b      	ldrb	r3, [r7, #16]
 8001298:	4619      	mov	r1, r3
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <APPE_SysUserEvtRx+0x1dc>)
 800129c:	f00b fd06 	bl	800ccac <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012a0:	484d      	ldr	r0, [pc, #308]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012a2:	f008 fe99 	bl	8009fd8 <DbgTraceGetFileName>
 80012a6:	4601      	mov	r1, r0
 80012a8:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012ae:	484c      	ldr	r0, [pc, #304]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012b0:	f00b fcfc 	bl	800ccac <iprintf>
 80012b4:	7dbb      	ldrb	r3, [r7, #22]
 80012b6:	4619      	mov	r1, r3
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	461a      	mov	r2, r3
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <APPE_SysUserEvtRx+0x1e0>)
 80012c0:	f00b fcf4 	bl	800ccac <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012c4:	4844      	ldr	r0, [pc, #272]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012c6:	f008 fe87 	bl	8009fd8 <DbgTraceGetFileName>
 80012ca:	4601      	mov	r1, r0
 80012cc:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80012d0:	4a42      	ldr	r2, [pc, #264]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012d2:	4843      	ldr	r0, [pc, #268]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012d4:	f00b fcea 	bl	800ccac <iprintf>
 80012d8:	4845      	ldr	r0, [pc, #276]	; (80013f0 <APPE_SysUserEvtRx+0x1e4>)
 80012da:	f00b fce7 	bl	800ccac <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8e0 	bl	80014a4 <APPE_SysEvtReadyProcessing>
    break;
 80012e4:	e073      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80012e8:	f008 fe76 	bl	8009fd8 <DbgTraceGetFileName>
 80012ec:	4601      	mov	r1, r0
 80012ee:	f240 1363 	movw	r3, #355	; 0x163
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80012f6:	f00b fcd9 	bl	800ccac <iprintf>
 80012fa:	483e      	ldr	r0, [pc, #248]	; (80013f4 <APPE_SysUserEvtRx+0x1e8>)
 80012fc:	f00b fcd6 	bl	800ccac <iprintf>
    APPE_SysEvtError(pPayload);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f885 	bl	8001410 <APPE_SysEvtError>
    break;
 8001306:	e062      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001308:	4833      	ldr	r0, [pc, #204]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f008 fe65 	bl	8009fd8 <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001314:	4a31      	ldr	r2, [pc, #196]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4832      	ldr	r0, [pc, #200]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00b fcc8 	bl	800ccac <iprintf>
 800131c:	4836      	ldr	r0, [pc, #216]	; (80013f8 <APPE_SysUserEvtRx+0x1ec>)
 800131e:	f00b fd61 	bl	800cde4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001324:	f008 fe58 	bl	8009fd8 <DbgTraceGetFileName>
 8001328:	4601      	mov	r1, r0
 800132a:	f240 1369 	movw	r3, #361	; 0x169
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001332:	f00b fcbb 	bl	800ccac <iprintf>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3302      	adds	r3, #2
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3302      	adds	r3, #2
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	482d      	ldr	r0, [pc, #180]	; (80013fc <APPE_SysUserEvtRx+0x1f0>)
 8001346:	f00b fcb1 	bl	800ccac <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800134a:	e040      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800134c:	4822      	ldr	r0, [pc, #136]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f008 fe43 	bl	8009fd8 <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f240 136f 	movw	r3, #367	; 0x16f
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4821      	ldr	r0, [pc, #132]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00b fca6 	bl	800ccac <iprintf>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3302      	adds	r3, #2
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	; (8001400 <APPE_SysUserEvtRx+0x1f4>)
 800136a:	f00b fc9f 	bl	800ccac <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800136e:	e02e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 8001372:	f008 fe31 	bl	8009fd8 <DbgTraceGetFileName>
 8001376:	4601      	mov	r1, r0
 8001378:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 8001380:	f00b fc94 	bl	800ccac <iprintf>
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <APPE_SysUserEvtRx+0x1f8>)
 8001386:	f00b fc91 	bl	800ccac <iprintf>
    break;
 800138a:	e020      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 800138e:	f008 fe23 	bl	8009fd8 <DbgTraceGetFileName>
 8001392:	4601      	mov	r1, r0
 8001394:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 800139c:	f00b fc86 	bl	800ccac <iprintf>
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <APPE_SysUserEvtRx+0x1fc>)
 80013aa:	f00b fc7f 	bl	800ccac <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013ae:	e00e      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <APPE_SysUserEvtRx+0x1cc>)
 80013b2:	f008 fe11 	bl	8009fd8 <DbgTraceGetFileName>
 80013b6:	4601      	mov	r1, r0
 80013b8:	f240 137d 	movw	r3, #381	; 0x17d
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <APPE_SysUserEvtRx+0x1d0>)
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <APPE_SysUserEvtRx+0x1d4>)
 80013c0:	f00b fc74 	bl	800ccac <iprintf>
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <APPE_SysUserEvtRx+0x200>)
 80013c6:	f00b fc71 	bl	800ccac <iprintf>
    break;
 80013ca:	e000      	b.n	80013ce <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013cc:	bf00      	nop
  }

  return;
 80013ce:	bf00      	nop
}
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800dde4 	.word	0x0800dde4
 80013dc:	0800f2ac 	.word	0x0800f2ac
 80013e0:	0800ddfc 	.word	0x0800ddfc
 80013e4:	0800de10 	.word	0x0800de10
 80013e8:	0800de34 	.word	0x0800de34
 80013ec:	0800de50 	.word	0x0800de50
 80013f0:	0800de68 	.word	0x0800de68
 80013f4:	0800de88 	.word	0x0800de88
 80013f8:	0800deac 	.word	0x0800deac
 80013fc:	0800defc 	.word	0x0800defc
 8001400:	0800df24 	.word	0x0800df24
 8001404:	0800df60 	.word	0x0800df60
 8001408:	0800df84 	.word	0x0800df84
 800140c:	0800dfc0 	.word	0x0800dfc0

08001410 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	330b      	adds	r3, #11
 800141e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3302      	adds	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001426:	4819      	ldr	r0, [pc, #100]	; (800148c <APPE_SysEvtError+0x7c>)
 8001428:	f008 fdd6 	bl	8009fd8 <DbgTraceGetFileName>
 800142c:	4601      	mov	r1, r0
 800142e:	f240 1395 	movw	r3, #405	; 0x195
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <APPE_SysEvtError+0x80>)
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <APPE_SysEvtError+0x84>)
 8001436:	f00b fc39 	bl	800ccac <iprintf>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <APPE_SysEvtError+0x88>)
 8001442:	f00b fc33 	bl	800ccac <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10d      	bne.n	800146a <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800144e:	480f      	ldr	r0, [pc, #60]	; (800148c <APPE_SysEvtError+0x7c>)
 8001450:	f008 fdc2 	bl	8009fd8 <DbgTraceGetFileName>
 8001454:	4601      	mov	r1, r0
 8001456:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <APPE_SysEvtError+0x80>)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <APPE_SysEvtError+0x84>)
 800145e:	f00b fc25 	bl	800ccac <iprintf>
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <APPE_SysEvtError+0x8c>)
 8001464:	f00b fcbe 	bl	800cde4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001468:	e00d      	b.n	8001486 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <APPE_SysEvtError+0x7c>)
 800146c:	f008 fdb4 	bl	8009fd8 <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <APPE_SysEvtError+0x80>)
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <APPE_SysEvtError+0x84>)
 800147a:	f00b fc17 	bl	800ccac <iprintf>
 800147e:	4808      	ldr	r0, [pc, #32]	; (80014a0 <APPE_SysEvtError+0x90>)
 8001480:	f00b fcb0 	bl	800cde4 <puts>
  return;
 8001484:	bf00      	nop
}
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800dde4 	.word	0x0800dde4
 8001490:	0800f2c0 	.word	0x0800f2c0
 8001494:	0800ddfc 	.word	0x0800ddfc
 8001498:	0800dfe4 	.word	0x0800dfe4
 800149c:	0800e014 	.word	0x0800e014
 80014a0:	0800e050 	.word	0x0800e050

080014a4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	330b      	adds	r3, #11
 80014c4:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	3302      	adds	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d132      	bne.n	800153a <APPE_SysEvtReadyProcessing+0x96>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014d4:	482c      	ldr	r0, [pc, #176]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 80014d6:	f008 fd7f 	bl	8009fd8 <DbgTraceGetFileName>
 80014da:	4601      	mov	r1, r0
 80014dc:	f240 13b3 	movw	r3, #435	; 0x1b3
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 80014e4:	f00b fbe2 	bl	800ccac <iprintf>
 80014e8:	482a      	ldr	r0, [pc, #168]	; (8001594 <APPE_SysEvtReadyProcessing+0xf0>)
 80014ea:	f00b fc7b 	bl	800cde4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014ee:	f7ff fb63 	bl	8000bb8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014f2:	230d      	movs	r3, #13
 80014f4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014f6:	237f      	movs	r3, #127	; 0x7f
 80014f8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014fa:	f7ff fcf9 	bl	8000ef0 <LL_DBGMCU_GetRevisionID>
 80014fe:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001502:	f008 fd69 	bl	8009fd8 <DbgTraceGetFileName>
 8001506:	4601      	mov	r1, r0
 8001508:	f240 13cb 	movw	r3, #459	; 0x1cb
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 800150e:	4820      	ldr	r0, [pc, #128]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001510:	f00b fbcc 	bl	800ccac <iprintf>
 8001514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <APPE_SysEvtReadyProcessing+0xf4>)
 8001518:	f00b fbc8 	bl	800ccac <iprintf>

    config_param.RevisionID = RevisionID;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	b29b      	uxth	r3, r3
 8001520:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4618      	mov	r0, r3
 8001528:	f007 ff80 	bl	800942c <SHCI_C2_Config>

    APP_BLE_Init();
 800152c:	f009 fb3e 	bl	800abac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001530:	2100      	movs	r1, #0
 8001532:	2001      	movs	r0, #1
 8001534:	f00b f90c 	bl	800c750 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001538:	e022      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d110      	bne.n	8001564 <APPE_SysEvtReadyProcessing+0xc0>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001544:	f008 fd48 	bl	8009fd8 <DbgTraceGetFileName>
 8001548:	4601      	mov	r1, r0
 800154a:	f240 13d9 	movw	r3, #473	; 0x1d9
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001552:	f00b fbab 	bl	800ccac <iprintf>
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <APPE_SysEvtReadyProcessing+0xf8>)
 8001558:	f00b fba8 	bl	800ccac <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  return;
 8001562:	e00d      	b.n	8001580 <APPE_SysEvtReadyProcessing+0xdc>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <APPE_SysEvtReadyProcessing+0xe4>)
 8001566:	f008 fd37 	bl	8009fd8 <DbgTraceGetFileName>
 800156a:	4601      	mov	r1, r0
 800156c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <APPE_SysEvtReadyProcessing+0xe8>)
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <APPE_SysEvtReadyProcessing+0xec>)
 8001574:	f00b fb9a 	bl	800ccac <iprintf>
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <APPE_SysEvtReadyProcessing+0xfc>)
 800157a:	f00b fb97 	bl	800ccac <iprintf>
  return;
 800157e:	bf00      	nop
}
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800dde4 	.word	0x0800dde4
 800158c:	0800f2d4 	.word	0x0800f2d4
 8001590:	0800ddfc 	.word	0x0800ddfc
 8001594:	0800e088 	.word	0x0800e088
 8001598:	0800e0a4 	.word	0x0800e0a4
 800159c:	0800e0c8 	.word	0x0800e0c8
 80015a0:	0800e0fc 	.word	0x0800e0fc

080015a4 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f00b f900 	bl	800c7b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015b8:	bf00      	nop
}
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f00b f8ee 	bl	800c7b0 <UTIL_SEQ_Run>

  return;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2020      	movs	r0, #32
 80015e8:	f00b fa00 	bl	800c9ec <UTIL_SEQ_SetTask>
  return;
 80015ec:	bf00      	nop
}
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f00b fa61 	bl	800cac4 <UTIL_SEQ_SetEvt>
  return;
 8001602:	bf00      	nop
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001612:	2002      	movs	r0, #2
 8001614:	f00b fa76 	bl	800cb04 <UTIL_SEQ_WaitEvt>
  return;
 8001618:	bf00      	nop
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d006      	beq.n	800163e <HAL_GPIO_EXTI_Callback+0x1e>
 8001630:	2b10      	cmp	r3, #16
 8001632:	dc0d      	bgt.n	8001650 <HAL_GPIO_EXTI_Callback+0x30>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d005      	beq.n	8001644 <HAL_GPIO_EXTI_Callback+0x24>
 8001638:	2b02      	cmp	r3, #2
 800163a:	d006      	beq.n	800164a <HAL_GPIO_EXTI_Callback+0x2a>
    case SW3_User_Pin:
    	 P2PS_APP_SW3_Button_Action();
	  break;

    default:
      break;
 800163c:	e008      	b.n	8001650 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 800163e:	f00a f9bd 	bl	800b9bc <APP_BLE_Key_Button1_Action>
      break;
 8001642:	e006      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x32>
	  APP_BLE_Key_Button2_Action();
 8001644:	f00a f9c0 	bl	800b9c8 <APP_BLE_Key_Button2_Action>
	  break;
 8001648:	e003      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x32>
    	 P2PS_APP_SW3_Button_Action();
 800164a:	f00a fbc1 	bl	800bdd0 <P2PS_APP_SW3_Button_Action>
	  break;
 800164e:	e000      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001650:	bf00      	nop
  }
  return;
 8001652:	bf00      	nop
}
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_TIM_PeriodElapsedCallback>:
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
	  APP_BLE_Key_Tim_Action();
 800166c:	f00a f9b2 	bl	800b9d4 <APP_BLE_Key_Tim_Action>
  }
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200002f0 	.word	0x200002f0

0800167c <LL_EXTI_EnableIT_0_31>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001686:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800168a:	4905      	ldr	r1, [pc, #20]	; (80016a0 <LL_EXTI_EnableIT_0_31+0x24>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4313      	orrs	r3, r2
 8001690:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	58000800 	.word	0x58000800

080016a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4904      	ldr	r1, [pc, #16]	; (80016c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]

}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58000800 	.word	0x58000800

080016c8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <ReadRtcSsrValue+0x3c>)
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <ReadRtcSsrValue+0x3c>)
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	b29b      	uxth	r3, r3
 80016dc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80016de:	e005      	b.n	80016ec <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <ReadRtcSsrValue+0x3c>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1f5      	bne.n	80016e0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80016f4:	683b      	ldr	r3, [r7, #0]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40002800 	.word	0x40002800

08001708 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001718:	79ba      	ldrb	r2, [r7, #6]
 800171a:	491d      	ldr	r1, [pc, #116]	; (8001790 <LinkTimerAfter+0x88>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3315      	adds	r3, #21
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b06      	cmp	r3, #6
 8001730:	d009      	beq.n	8001746 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	4916      	ldr	r1, [pc, #88]	; (8001790 <LinkTimerAfter+0x88>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	3314      	adds	r3, #20
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	4911      	ldr	r1, [pc, #68]	; (8001790 <LinkTimerAfter+0x88>)
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3315      	adds	r3, #21
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <LinkTimerAfter+0x88>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3314      	adds	r3, #20
 800176a:	79ba      	ldrb	r2, [r7, #6]
 800176c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800176e:	79ba      	ldrb	r2, [r7, #6]
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <LinkTimerAfter+0x88>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3315      	adds	r3, #21
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	701a      	strb	r2, [r3, #0]

  return;
 8001782:	bf00      	nop
}
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000094 	.word	0x20000094

08001794 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	460a      	mov	r2, r1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <LinkTimerBefore+0xb8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d032      	beq.n	8001816 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80017b0:	79ba      	ldrb	r2, [r7, #6]
 80017b2:	4927      	ldr	r1, [pc, #156]	; (8001850 <LinkTimerBefore+0xbc>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3314      	adds	r3, #20
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80017c4:	7bfa      	ldrb	r2, [r7, #15]
 80017c6:	4922      	ldr	r1, [pc, #136]	; (8001850 <LinkTimerBefore+0xbc>)
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3315      	adds	r3, #21
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	491d      	ldr	r1, [pc, #116]	; (8001850 <LinkTimerBefore+0xbc>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3315      	adds	r3, #21
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	4918      	ldr	r1, [pc, #96]	; (8001850 <LinkTimerBefore+0xbc>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	3314      	adds	r3, #20
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	4913      	ldr	r1, [pc, #76]	; (8001850 <LinkTimerBefore+0xbc>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3314      	adds	r3, #20
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001814:	e014      	b.n	8001840 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <LinkTimerBefore+0xbc>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3315      	adds	r3, #21
 8001826:	79ba      	ldrb	r2, [r7, #6]
 8001828:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	4908      	ldr	r1, [pc, #32]	; (8001850 <LinkTimerBefore+0xbc>)
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3314      	adds	r3, #20
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	701a      	strb	r2, [r3, #0]
  return;
 800183e:	bf00      	nop
}
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000124 	.word	0x20000124
 8001850:	20000094 	.word	0x20000094

08001854 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800185e:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <linkTimer+0x144>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b06      	cmp	r3, #6
 8001866:	d118      	bne.n	800189a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <linkTimer+0x144>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <linkTimer+0x148>)
 8001870:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001872:	4a49      	ldr	r2, [pc, #292]	; (8001998 <linkTimer+0x144>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	4949      	ldr	r1, [pc, #292]	; (80019a0 <linkTimer+0x14c>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3315      	adds	r3, #21
 8001888:	2206      	movs	r2, #6
 800188a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <linkTimer+0x150>)
 800188e:	f04f 32ff 	mov.w	r2, #4294967295
 8001892:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	81fb      	strh	r3, [r7, #14]
 8001898:	e078      	b.n	800198c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800189a:	f000 f909 	bl	8001ab0 <ReturnTimeElapsed>
 800189e:	4603      	mov	r3, r0
 80018a0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	493e      	ldr	r1, [pc, #248]	; (80019a0 <linkTimer+0x14c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3308      	adds	r3, #8
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	4419      	add	r1, r3
 80018ba:	4839      	ldr	r0, [pc, #228]	; (80019a0 <linkTimer+0x14c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4403      	add	r3, r0
 80018c6:	3308      	adds	r3, #8
 80018c8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80018ca:	79fa      	ldrb	r2, [r7, #7]
 80018cc:	4934      	ldr	r1, [pc, #208]	; (80019a0 <linkTimer+0x14c>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3308      	adds	r3, #8
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <linkTimer+0x144>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4619      	mov	r1, r3
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <linkTimer+0x14c>)
 80018e8:	460b      	mov	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	440b      	add	r3, r1
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	3308      	adds	r3, #8
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d337      	bcc.n	800196c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <linkTimer+0x144>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001902:	7b7a      	ldrb	r2, [r7, #13]
 8001904:	4926      	ldr	r1, [pc, #152]	; (80019a0 <linkTimer+0x14c>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3315      	adds	r3, #21
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001916:	e013      	b.n	8001940 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001918:	7b7a      	ldrb	r2, [r7, #13]
 800191a:	4921      	ldr	r1, [pc, #132]	; (80019a0 <linkTimer+0x14c>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	3315      	adds	r3, #21
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800192c:	7b7a      	ldrb	r2, [r7, #13]
 800192e:	491c      	ldr	r1, [pc, #112]	; (80019a0 <linkTimer+0x14c>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3315      	adds	r3, #21
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001940:	7b3b      	ldrb	r3, [r7, #12]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d00b      	beq.n	800195e <linkTimer+0x10a>
 8001946:	7b3a      	ldrb	r2, [r7, #12]
 8001948:	4915      	ldr	r1, [pc, #84]	; (80019a0 <linkTimer+0x14c>)
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	440b      	add	r3, r1
 8001954:	3308      	adds	r3, #8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d2dc      	bcs.n	8001918 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800195e:	7b7a      	ldrb	r2, [r7, #13]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fecf 	bl	8001708 <LinkTimerAfter>
 800196a:	e00f      	b.n	800198c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <linkTimer+0x144>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff0c 	bl	8001794 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <linkTimer+0x144>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <linkTimer+0x148>)
 8001984:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <linkTimer+0x144>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800198c:	89fb      	ldrh	r3, [r7, #14]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000124 	.word	0x20000124
 800199c:	20000125 	.word	0x20000125
 80019a0:	20000094 	.word	0x20000094
 80019a4:	20000128 	.word	0x20000128

080019a8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <UnlinkTimer+0xf8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	79fa      	ldrb	r2, [r7, #7]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d111      	bne.n	80019e8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <UnlinkTimer+0xf8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <UnlinkTimer+0xfc>)
 80019cc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <UnlinkTimer+0x100>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3315      	adds	r3, #21
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <UnlinkTimer+0xf8>)
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e03e      	b.n	8001a66 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	492f      	ldr	r1, [pc, #188]	; (8001aa8 <UnlinkTimer+0x100>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3314      	adds	r3, #20
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3315      	adds	r3, #21
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001a10:	79f9      	ldrb	r1, [r7, #7]
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	4824      	ldr	r0, [pc, #144]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4403      	add	r3, r0
 8001a20:	3315      	adds	r3, #21
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2d8      	uxtb	r0, r3
 8001a26:	4920      	ldr	r1, [pc, #128]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3315      	adds	r3, #21
 8001a34:	4602      	mov	r2, r0
 8001a36:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d013      	beq.n	8001a66 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001a3e:	79f9      	ldrb	r1, [r7, #7]
 8001a40:	7bba      	ldrb	r2, [r7, #14]
 8001a42:	4819      	ldr	r0, [pc, #100]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3314      	adds	r3, #20
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2d8      	uxtb	r0, r3
 8001a54:	4914      	ldr	r1, [pc, #80]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3314      	adds	r3, #20
 8001a62:	4602      	mov	r2, r0
 8001a64:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	490f      	ldr	r1, [pc, #60]	; (8001aa8 <UnlinkTimer+0x100>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	330c      	adds	r3, #12
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <UnlinkTimer+0xf8>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d107      	bne.n	8001a94 <UnlinkTimer+0xec>
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d104      	bne.n	8001a94 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <UnlinkTimer+0x104>)
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	601a      	str	r2, [r3, #0]
  }

  return;
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
}
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20000124 	.word	0x20000124
 8001aa4:	20000125 	.word	0x20000125
 8001aa8:	20000094 	.word	0x20000094
 8001aac:	20000128 	.word	0x20000128

08001ab0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <ReturnTimeElapsed+0x70>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abe:	d026      	beq.n	8001b0e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ac0:	f7ff fe02 	bl	80016c8 <ReadRtcSsrValue>
 8001ac4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <ReturnTimeElapsed+0x70>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d805      	bhi.n	8001adc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <ReturnTimeElapsed+0x70>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e00a      	b.n	8001af2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <ReturnTimeElapsed+0x74>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <ReturnTimeElapsed+0x70>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <ReturnTimeElapsed+0x78>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <ReturnTimeElapsed+0x7c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	40d3      	lsrs	r3, r2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e001      	b.n	8001b12 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	b29b      	uxth	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000128 	.word	0x20000128
 8001b24:	20000232 	.word	0x20000232
 8001b28:	20000231 	.word	0x20000231
 8001b2c:	20000230 	.word	0x20000230

08001b30 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001b40:	f7ff fdc2 	bl	80016c8 <ReadRtcSsrValue>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <RestartWakeupCounter+0xa8>)
 8001b48:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f001 fce5 	bl	800351a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001b50:	e03e      	b.n	8001bd0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d803      	bhi.n	8001b60 <RestartWakeupCounter+0x30>
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <RestartWakeupCounter+0xac>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d002      	beq.n	8001b66 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b66:	bf00      	nop
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <RestartWakeupCounter+0xb0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f7      	beq.n	8001b68 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <RestartWakeupCounter+0xb0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <RestartWakeupCounter+0xb0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <RestartWakeupCounter+0xb4>)
 8001b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b94:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b96:	2003      	movs	r0, #3
 8001b98:	f001 fccd 	bl	8003536 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <RestartWakeupCounter+0xb8>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	88fa      	ldrh	r2, [r7, #6]
 8001ba6:	4910      	ldr	r1, [pc, #64]	; (8001be8 <RestartWakeupCounter+0xb8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001bac:	f7ff fd8c 	bl	80016c8 <ReadRtcSsrValue>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <RestartWakeupCounter+0xa8>)
 8001bb4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RestartWakeupCounter+0xb0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <RestartWakeupCounter+0xb0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bc8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001bca:	f3af 8000 	nop.w
  return ;
 8001bce:	bf00      	nop
}
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000128 	.word	0x20000128
 8001bdc:	20000230 	.word	0x20000230
 8001be0:	2000022c 	.word	0x2000022c
 8001be4:	58000800 	.word	0x58000800
 8001be8:	40002800 	.word	0x40002800

08001bec <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <RescheduleTimerList+0x124>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d108      	bne.n	8001c12 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001c00:	bf00      	nop
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <RescheduleTimerList+0x128>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f7      	bne.n	8001c02 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <RescheduleTimerList+0x128>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <RescheduleTimerList+0x128>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c24:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <RescheduleTimerList+0x12c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	493b      	ldr	r1, [pc, #236]	; (8001d1c <RescheduleTimerList+0x130>)
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001c40:	f7ff ff36 	bl	8001ab0 <ReturnTimeElapsed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d205      	bcs.n	8001c5c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <RescheduleTimerList+0x134>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e04d      	b.n	8001cf8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <RescheduleTimerList+0x138>)
 8001c60:	8812      	ldrh	r2, [r2, #0]
 8001c62:	b292      	uxth	r2, r2
 8001c64:	4413      	add	r3, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d906      	bls.n	8001c7c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <RescheduleTimerList+0x138>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <RescheduleTimerList+0x134>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e03d      	b.n	8001cf8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <RescheduleTimerList+0x134>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c8c:	e034      	b.n	8001cf8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	4922      	ldr	r1, [pc, #136]	; (8001d1c <RescheduleTimerList+0x130>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3308      	adds	r3, #8
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d20a      	bcs.n	8001cbc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	491c      	ldr	r1, [pc, #112]	; (8001d1c <RescheduleTimerList+0x130>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e013      	b.n	8001ce4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	4917      	ldr	r1, [pc, #92]	; (8001d1c <RescheduleTimerList+0x130>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3308      	adds	r3, #8
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	1ac9      	subs	r1, r1, r3
 8001cd4:	4811      	ldr	r0, [pc, #68]	; (8001d1c <RescheduleTimerList+0x130>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4403      	add	r3, r0
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <RescheduleTimerList+0x130>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3315      	adds	r3, #21
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d1c7      	bne.n	8001c8e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001cfe:	89bb      	ldrh	r3, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff15 	bl	8001b30 <RestartWakeupCounter>

  return ;
 8001d06:	bf00      	nop
}
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40002800 	.word	0x40002800
 8001d14:	2000022c 	.word	0x2000022c
 8001d18:	20000124 	.word	0x20000124
 8001d1c:	20000094 	.word	0x20000094
 8001d20:	2000012c 	.word	0x2000012c
 8001d24:	20000234 	.word	0x20000234

08001d28 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d32:	617b      	str	r3, [r7, #20]
  return(result);
 8001d34:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001d3c:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	22ca      	movs	r2, #202	; 0xca
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
 8001d46:	4b5d      	ldr	r3, [pc, #372]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2253      	movs	r2, #83	; 0x53
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001d6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d70:	4954      	ldr	r1, [pc, #336]	; (8001ec4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d172      	bne.n	8001e6c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001d86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d8a:	494e      	ldr	r1, [pc, #312]	; (8001ec4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001d9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d9e:	4949      	ldr	r1, [pc, #292]	; (8001ec4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3310      	adds	r3, #16
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001db0:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d050      	beq.n	8001e5c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001dba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001dbe:	4941      	ldr	r1, [pc, #260]	; (8001ec4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	330d      	adds	r3, #13
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d126      	bne.n	8001e22 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fde4 	bl	80019a8 <UnlinkTimer>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f383 8810 	msr	PRIMASK, r3
}
 8001dea:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001dec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001df0:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f9d4 	bl	80021b4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	22ca      	movs	r2, #202	; 0xca
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2253      	movs	r2, #83	; 0x53
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e20:	e014      	b.n	8001e4c <HW_TS_RTC_Wakeup_Handler+0x124>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f383 8810 	msr	PRIMASK, r3
}
 8001e2c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f932 	bl	800209c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	22ca      	movs	r2, #202	; 0xca
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2253      	movs	r2, #83	; 0x53
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	4619      	mov	r1, r3
 8001e54:	69b8      	ldr	r0, [r7, #24]
 8001e56:	f000 fa35 	bl	80022c4 <HW_TS_RTC_Int_AppNot>
 8001e5a:	e025      	b.n	8001ea8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001e5c:	f7ff fec6 	bl	8001bec <RescheduleTimerList>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	e01d      	b.n	8001ea8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001e6c:	bf00      	nop
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f7      	beq.n	8001e6e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e92:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001e96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f383 8810 	msr	PRIMASK, r3
}
 8001ea6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	22ff      	movs	r2, #255	; 0xff
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001eb2:	bf00      	nop
}
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000022c 	.word	0x2000022c
 8001ec0:	20000124 	.word	0x20000124
 8001ec4:	20000094 	.word	0x20000094
 8001ec8:	2000012c 	.word	0x2000012c
 8001ecc:	58000800 	.word	0x58000800

08001ed0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001edc:	4a64      	ldr	r2, [pc, #400]	; (8002070 <HW_TS_Init+0x1a0>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HW_TS_Init+0x1a0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	22ca      	movs	r2, #202	; 0xca
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
 8001eec:	4b60      	ldr	r3, [pc, #384]	; (8002070 <HW_TS_Init+0x1a0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2253      	movs	r2, #83	; 0x53
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HW_TS_Init+0x1a4>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a5e      	ldr	r2, [pc, #376]	; (8002074 <HW_TS_Init+0x1a4>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HW_TS_Init+0x1a4>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f1c3 0304 	rsb	r3, r3, #4
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HW_TS_Init+0x1a8>)
 8001f16:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HW_TS_Init+0x1a4>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f20:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001f24:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	fa92 f2a2 	rbit	r2, r2
 8001f2c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d101      	bne.n	8001f3c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001f38:	2220      	movs	r2, #32
 8001f3a:	e003      	b.n	8001f44 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	40d3      	lsrs	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HW_TS_Init+0x1ac>)
 8001f4e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001f50:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HW_TS_Init+0x1a4>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HW_TS_Init+0x1b0>)
 8001f62:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <HW_TS_Init+0x1b0>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	4a44      	ldr	r2, [pc, #272]	; (800207c <HW_TS_Init+0x1ac>)
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f76:	4a40      	ldr	r2, [pc, #256]	; (8002078 <HW_TS_Init+0x1a8>)
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	40d3      	lsrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d904      	bls.n	8001f92 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001f88:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <HW_TS_Init+0x1b4>)
 8001f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	e003      	b.n	8001f9a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <HW_TS_Init+0x1b4>)
 8001f98:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001f9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f9e:	f7ff fb81 	bl	80016a4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001fa2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fa6:	f7ff fb69 	bl	800167c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d143      	bne.n	8002038 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001fb0:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HW_TS_Init+0x1b8>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <HW_TS_Init+0x1bc>)
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	77fb      	strb	r3, [r7, #31]
 8001fc2:	e00c      	b.n	8001fde <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001fc4:	7ffa      	ldrb	r2, [r7, #31]
 8001fc6:	4932      	ldr	r1, [pc, #200]	; (8002090 <HW_TS_Init+0x1c0>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	77fb      	strb	r3, [r7, #31]
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d9ef      	bls.n	8001fc4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HW_TS_Init+0x1c4>)
 8001fe6:	2206      	movs	r2, #6
 8001fe8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HW_TS_Init+0x1a0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HW_TS_Init+0x1a0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HW_TS_Init+0x1a0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HW_TS_Init+0x1a0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002012:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HW_TS_Init+0x1c8>)
 8002016:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800201a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800201c:	2003      	movs	r0, #3
 800201e:	f001 fa8a 	bl	8003536 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HW_TS_Init+0x1a0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HW_TS_Init+0x1a0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	e00a      	b.n	800204e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HW_TS_Init+0x1a0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002048:	2003      	movs	r0, #3
 800204a:	f001 fa66 	bl	800351a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HW_TS_Init+0x1a0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002058:	2200      	movs	r2, #0
 800205a:	2103      	movs	r1, #3
 800205c:	2003      	movs	r0, #3
 800205e:	f001 fa1a 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002062:	2003      	movs	r0, #3
 8002064:	f001 fa31 	bl	80034ca <HAL_NVIC_EnableIRQ>

  return;
 8002068:	bf00      	nop
}
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000022c 	.word	0x2000022c
 8002074:	40002800 	.word	0x40002800
 8002078:	20000230 	.word	0x20000230
 800207c:	20000231 	.word	0x20000231
 8002080:	20000232 	.word	0x20000232
 8002084:	20000234 	.word	0x20000234
 8002088:	2000012c 	.word	0x2000012c
 800208c:	20000128 	.word	0x20000128
 8002090:	20000094 	.word	0x20000094
 8002094:	20000124 	.word	0x20000124
 8002098:	58000800 	.word	0x58000800

0800209c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a6:	f3ef 8310 	mrs	r3, PRIMASK
 80020aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80020ac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80020b4:	2003      	movs	r0, #3
 80020b6:	f001 fa16 	bl	80034e6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HW_TS_Stop+0x100>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	22ca      	movs	r2, #202	; 0xca
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HW_TS_Stop+0x100>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2253      	movs	r2, #83	; 0x53
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	4933      	ldr	r1, [pc, #204]	; (80021a0 <HW_TS_Stop+0x104>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	330c      	adds	r3, #12
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d148      	bne.n	8002178 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fc5c 	bl	80019a8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HW_TS_Stop+0x108>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d135      	bne.n	8002168 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HW_TS_Stop+0x10c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002108:	d108      	bne.n	800211c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800210a:	bf00      	nop
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HW_TS_Stop+0x100>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f7      	bne.n	800210c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HW_TS_Stop+0x100>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HW_TS_Stop+0x100>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002130:	bf00      	nop
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HW_TS_Stop+0x100>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f7      	beq.n	8002132 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <HW_TS_Stop+0x100>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HW_TS_Stop+0x100>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002156:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HW_TS_Stop+0x110>)
 800215a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800215e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002160:	2003      	movs	r0, #3
 8002162:	f001 f9e8 	bl	8003536 <HAL_NVIC_ClearPendingIRQ>
 8002166:	e007      	b.n	8002178 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HW_TS_Stop+0x114>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	7cfa      	ldrb	r2, [r7, #19]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002174:	f7ff fd3a 	bl	8001bec <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HW_TS_Stop+0x100>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002182:	2003      	movs	r0, #3
 8002184:	f001 f9a1 	bl	80034ca <HAL_NVIC_EnableIRQ>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002194:	bf00      	nop
}
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000022c 	.word	0x2000022c
 80021a0:	20000094 	.word	0x20000094
 80021a4:	20000124 	.word	0x20000124
 80021a8:	40002800 	.word	0x40002800
 80021ac:	58000800 	.word	0x58000800
 80021b0:	20000125 	.word	0x20000125

080021b4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021c0:	79fa      	ldrb	r2, [r7, #7]
 80021c2:	493c      	ldr	r1, [pc, #240]	; (80022b4 <HW_TS_Start+0x100>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	330c      	adds	r3, #12
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d103      	bne.n	80021e0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff5e 	bl	800209c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e0:	f3ef 8310 	mrs	r3, PRIMASK
 80021e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021e6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ea:	b672      	cpsid	i
}
 80021ec:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ee:	2003      	movs	r0, #3
 80021f0:	f001 f979 	bl	80034e6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HW_TS_Start+0x104>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ca      	movs	r2, #202	; 0xca
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HW_TS_Start+0x104>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2253      	movs	r2, #83	; 0x53
 8002206:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002208:	79fa      	ldrb	r2, [r7, #7]
 800220a:	492a      	ldr	r1, [pc, #168]	; (80022b4 <HW_TS_Start+0x100>)
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	330c      	adds	r3, #12
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	4925      	ldr	r1, [pc, #148]	; (80022b4 <HW_TS_Start+0x100>)
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3308      	adds	r3, #8
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002230:	79fa      	ldrb	r2, [r7, #7]
 8002232:	4920      	ldr	r1, [pc, #128]	; (80022b4 <HW_TS_Start+0x100>)
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	3304      	adds	r3, #4
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fb04 	bl	8001854 <linkTimer>
 800224c:	4603      	mov	r3, r0
 800224e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HW_TS_Start+0x108>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HW_TS_Start+0x10c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	7c7a      	ldrb	r2, [r7, #17]
 800225e:	429a      	cmp	r2, r3
 8002260:	d002      	beq.n	8002268 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8002262:	f7ff fcc3 	bl	8001bec <RescheduleTimerList>
 8002266:	e013      	b.n	8002290 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4912      	ldr	r1, [pc, #72]	; (80022b4 <HW_TS_Start+0x100>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3308      	adds	r3, #8
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	8a7b      	ldrh	r3, [r7, #18]
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	1ac9      	subs	r1, r1, r3
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HW_TS_Start+0x100>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4403      	add	r3, r0
 800228c:	3308      	adds	r3, #8
 800228e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HW_TS_Start+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800229a:	2003      	movs	r0, #3
 800229c:	f001 f915 	bl	80034ca <HAL_NVIC_EnableIRQ>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022ac:	bf00      	nop
}
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000094 	.word	0x20000094
 80022b8:	2000022c 	.word	0x2000022c
 80022bc:	20000124 	.word	0x20000124
 80022c0:	20000125 	.word	0x20000125

080022c4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	460b      	mov	r3, r1
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4798      	blx	r3

  return;
 80022d6:	bf00      	nop
}
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4603      	mov	r3, r0
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	4613      	mov	r3, r2
 80022f0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10e      	bne.n	800231e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HW_UART_Transmit_DMA+0x80>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HW_UART_Transmit_DMA+0x84>)
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HW_UART_Transmit_DMA+0x88>)
 800230a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800230c:	89bb      	ldrh	r3, [r7, #12]
 800230e:	461a      	mov	r2, r3
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	4814      	ldr	r0, [pc, #80]	; (8002364 <HW_UART_Transmit_DMA+0x84>)
 8002314:	f004 fbc4 	bl	8006aa0 <HAL_UART_Transmit_DMA>
 8002318:	4603      	mov	r3, r0
 800231a:	75fb      	strb	r3, [r7, #23]
            break;
 800231c:	e000      	b.n	8002320 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800231e:	bf00      	nop
    }

    switch (hal_status)
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d816      	bhi.n	8002354 <HW_UART_Transmit_DMA+0x74>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HW_UART_Transmit_DMA+0x4c>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	08002343 	.word	0x08002343
 8002334:	08002349 	.word	0x08002349
 8002338:	0800234f 	.word	0x0800234f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800233c:	2300      	movs	r3, #0
 800233e:	75bb      	strb	r3, [r7, #22]
            break;
 8002340:	e009      	b.n	8002356 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002342:	2301      	movs	r3, #1
 8002344:	75bb      	strb	r3, [r7, #22]
            break;
 8002346:	e006      	b.n	8002356 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002348:	2302      	movs	r3, #2
 800234a:	75bb      	strb	r3, [r7, #22]
            break;
 800234c:	e003      	b.n	8002356 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800234e:	2303      	movs	r3, #3
 8002350:	75bb      	strb	r3, [r7, #22]
            break;
 8002352:	e000      	b.n	8002356 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002354:	bf00      	nop
    }

    return hw_status;
 8002356:	7dbb      	ldrb	r3, [r7, #22]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000238 	.word	0x20000238
 8002364:	2000033c 	.word	0x2000033c
 8002368:	40013800 	.word	0x40013800

0800236c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_UART_TxCpltCallback+0x34>)
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_UART_TxCpltCallback+0x38>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_UART_TxCpltCallback+0x38>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4798      	blx	r3
            }
            break;
 800238e:	e001      	b.n	8002394 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002394:	bf00      	nop
    }

    return;
 8002396:	bf00      	nop
}
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013800 	.word	0x40013800
 80023a4:	20000238 	.word	0x20000238

080023a8 <LL_RCC_LSE_SetDriveCapability>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f023 0218 	bic.w	r2, r3, #24
 80023bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_AHB1_GRP1_EnableClock>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_AHB2_GRP1_EnableClock>:
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	; 0x38
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243e:	f000 fe5d 	bl	80030fc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002442:	f7fe fdf5 	bl	8001030 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002446:	f000 f81d 	bl	8002484 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800244a:	f000 f897 	bl	800257c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 800244e:	f000 f8f5 	bl	800263c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002452:	f000 f9f3 	bl	800283c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8002456:	f000 f9b7 	bl	80027c8 <MX_USB_PCD_Init>
  MX_I2C3_Init();
 800245a:	f000 f8af 	bl	80025bc <MX_I2C3_Init>
  MX_RF_Init();
 800245e:	f000 f901 	bl	8002664 <MX_RF_Init>
  MX_RTC_Init();
 8002462:	f000 f907 	bl	8002674 <MX_RTC_Init>
  MX_DMA_Init();
 8002466:	f000 f9d7 	bl	8002818 <MX_DMA_Init>
  MX_TIM16_Init();
 800246a:	f000 f937 	bl	80026dc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800246e:	4804      	ldr	r0, [pc, #16]	; (8002480 <main+0x48>)
 8002470:	f004 f88e 	bl	8006590 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002474:	f7fe fdea 	bl	800104c <MX_APPE_Init>


  while(1){

    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002478:	f7ff f894 	bl	80015a4 <MX_APPE_Process>
 800247c:	e7fc      	b.n	8002478 <main+0x40>
 800247e:	bf00      	nop
 8002480:	200002f0 	.word	0x200002f0

08002484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b09a      	sub	sp, #104	; 0x68
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	2248      	movs	r2, #72	; 0x48
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f00a fc02 	bl	800cc9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024aa:	f002 f825 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff ff7a 	bl	80023a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <SystemClock_Config+0xf4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <SystemClock_Config+0xf4>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <SystemClock_Config+0xf4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80024d0:	2327      	movs	r3, #39	; 0x27
 80024d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024da:	2301      	movs	r3, #1
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024e4:	2301      	movs	r3, #1
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80024ec:	2300      	movs	r3, #0
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024f0:	2360      	movs	r3, #96	; 0x60
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f4:	2302      	movs	r3, #2
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024f8:	2301      	movs	r3, #1
 80024fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002500:	2320      	movs	r3, #32
 8002502:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800250a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800250e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002514:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fb96 	bl	8004c4c <HAL_RCC_OscConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002526:	f000 fa2d 	bl	8002984 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800252a:	236f      	movs	r3, #111	; 0x6f
 800252c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800252e:	2302      	movs	r3, #2
 8002530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fef2 	bl	8005334 <HAL_RCC_ClockConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002556:	f000 fa15 	bl	8002984 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_8);
 800255a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800255e:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
 8002562:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002566:	f003 f825 	bl	80055b4 <HAL_RCC_MCOConfig>

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800256a:	f003 fcf7 	bl	8005f5c <HAL_RCCEx_EnableMSIPLLMode>
}
 800256e:	bf00      	nop
 8002570:	3768      	adds	r7, #104	; 0x68
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	58000400 	.word	0x58000400

0800257c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b094      	sub	sp, #80	; 0x50
 8002580:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002582:	463b      	mov	r3, r7
 8002584:	2250      	movs	r2, #80	; 0x50
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f00a fb87 	bl	800cc9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800258e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002592:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800259a:	2300      	movs	r3, #0
 800259c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800259e:	2310      	movs	r3, #16
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	463b      	mov	r3, r7
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fb63 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80025b0:	f000 f9e8 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80025b4:	bf00      	nop
 80025b6:	3750      	adds	r7, #80	; 0x50
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <MX_I2C3_Init+0x74>)
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <MX_I2C3_Init+0x78>)
 80025c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <MX_I2C3_Init+0x74>)
 80025c8:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <MX_I2C3_Init+0x7c>)
 80025ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <MX_I2C3_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <MX_I2C3_Init+0x74>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <MX_I2C3_Init+0x74>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <MX_I2C3_Init+0x74>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <MX_I2C3_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_I2C3_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <MX_I2C3_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <MX_I2C3_Init+0x74>)
 80025f8:	f001 fcbc 	bl	8003f74 <HAL_I2C_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002602:	f000 f9bf 	bl	8002984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002606:	2100      	movs	r1, #0
 8002608:	4809      	ldr	r0, [pc, #36]	; (8002630 <MX_I2C3_Init+0x74>)
 800260a:	f001 fd42 	bl	8004092 <HAL_I2CEx_ConfigAnalogFilter>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002614:	f000 f9b6 	bl	8002984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002618:	2100      	movs	r1, #0
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_I2C3_Init+0x74>)
 800261c:	f001 fd84 	bl	8004128 <HAL_I2CEx_ConfigDigitalFilter>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002626:	f000 f9ad 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000023c 	.word	0x2000023c
 8002634:	40005c00 	.word	0x40005c00
 8002638:	00707cbb 	.word	0x00707cbb

0800263c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_IPCC_Init+0x20>)
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <MX_IPCC_Init+0x24>)
 8002644:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_IPCC_Init+0x20>)
 8002648:	f001 fdba 	bl	80041c0 <HAL_IPCC_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002652:	f000 f997 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000290 	.word	0x20000290
 8002660:	58000c00 	.word	0x58000c00

08002664 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MX_RTC_Init+0x60>)
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <MX_RTC_Init+0x64>)
 800267c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <MX_RTC_Init+0x60>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <MX_RTC_Init+0x60>)
 8002686:	220f      	movs	r2, #15
 8002688:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MX_RTC_Init+0x60>)
 800268c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002690:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <MX_RTC_Init+0x60>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_RTC_Init+0x60>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <MX_RTC_Init+0x60>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MX_RTC_Init+0x60>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026aa:	480a      	ldr	r0, [pc, #40]	; (80026d4 <MX_RTC_Init+0x60>)
 80026ac:	f003 fd6d 	bl	800618a <HAL_RTC_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80026b6:	f000 f965 	bl	8002984 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_RTC_Init+0x60>)
 80026c0:	f003 fe52 	bl	8006368 <HAL_RTCEx_SetWakeUpTimer_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80026ca:	f000 f95b 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200002cc 	.word	0x200002cc
 80026d8:	40002800 	.word	0x40002800

080026dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <MX_TIM16_Init+0x48>)
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <MX_TIM16_Init+0x4c>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_TIM16_Init+0x48>)
 80026e8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80026ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <MX_TIM16_Init+0x48>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <MX_TIM16_Init+0x48>)
 80026f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_TIM16_Init+0x48>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <MX_TIM16_Init+0x48>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_TIM16_Init+0x48>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_TIM16_Init+0x48>)
 8002710:	f003 fee6 	bl	80064e0 <HAL_TIM_Base_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800271a:	f000 f933 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200002f0 	.word	0x200002f0
 8002728:	40014400 	.word	0x40014400

0800272c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002732:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <MX_USART1_UART_Init+0x98>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 800275e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002762:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 800276c:	2200      	movs	r2, #0
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002776:	4812      	ldr	r0, [pc, #72]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002778:	f004 f942 	bl	8006a00 <HAL_UART_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002782:	f000 f8ff 	bl	8002984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 800278a:	f005 fb08 	bl	8007d9e <HAL_UARTEx_SetTxFifoThreshold>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002794:	f000 f8f6 	bl	8002984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002798:	2100      	movs	r1, #0
 800279a:	4809      	ldr	r0, [pc, #36]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 800279c:	f005 fb3d 	bl	8007e1a <HAL_UARTEx_SetRxFifoThreshold>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80027a6:	f000 f8ed 	bl	8002984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 80027ac:	f005 fabe 	bl	8007d2c <HAL_UARTEx_DisableFifoMode>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80027b6:	f000 f8e5 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000033c 	.word	0x2000033c
 80027c4:	40013800 	.word	0x40013800

080027c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <MX_USB_PCD_Init+0x4c>)
 80027d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027d4:	2208      	movs	r2, #8
 80027d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027da:	2202      	movs	r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <MX_USB_PCD_Init+0x48>)
 80027fe:	f001 fd65 	bl	80042cc <HAL_PCD_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002808:	f000 f8bc 	bl	8002984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	2000042c 	.word	0x2000042c
 8002814:	40006800 	.word	0x40006800

08002818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800281c:	2004      	movs	r0, #4
 800281e:	f7ff fdd9 	bl	80023d4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff fdd6 	bl	80023d4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	210f      	movs	r1, #15
 800282c:	200b      	movs	r0, #11
 800282e:	f000 fe32 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002832:	200b      	movs	r0, #11
 8002834:	f000 fe49 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002850:	2004      	movs	r0, #4
 8002852:	f7ff fdd8 	bl	8002406 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2002      	movs	r0, #2
 8002858:	f7ff fdd5 	bl	8002406 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fdd2 	bl	8002406 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002862:	2008      	movs	r0, #8
 8002864:	f7ff fdcf 	bl	8002406 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
 800286a:	2123      	movs	r1, #35	; 0x23
 800286c:	4842      	ldr	r0, [pc, #264]	; (8002978 <MX_GPIO_Init+0x13c>)
 800286e:	f001 fb13 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : vsync_Pin hsync_Pin pxclk_Pin */
  GPIO_InitStruct.Pin = vsync_Pin|hsync_Pin|pxclk_Pin;
 8002872:	f44f 7344 	mov.w	r3, #784	; 0x310
 8002876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	4619      	mov	r1, r3
 8002884:	483c      	ldr	r0, [pc, #240]	; (8002978 <MX_GPIO_Init+0x13c>)
 8002886:	f001 f997 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800288a:	23ff      	movs	r3, #255	; 0xff
 800288c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f001 f98b 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c0:	f001 f97a 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 80028c4:	2310      	movs	r3, #16
 80028c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4829      	ldr	r0, [pc, #164]	; (800297c <MX_GPIO_Init+0x140>)
 80028d8:	f001 f96e 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 80028dc:	2303      	movs	r3, #3
 80028de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4821      	ldr	r0, [pc, #132]	; (8002978 <MX_GPIO_Init+0x13c>)
 80028f2:	f001 f961 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_User_Pin */
  GPIO_InitStruct.Pin = SW2_User_Pin;
 80028f6:	2301      	movs	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002900:	2301      	movs	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW2_User_GPIO_Port, &GPIO_InitStruct);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4619      	mov	r1, r3
 8002908:	481d      	ldr	r0, [pc, #116]	; (8002980 <MX_GPIO_Init+0x144>)
 800290a:	f001 f955 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_User_Pin */
  GPIO_InitStruct.Pin = SW3_User_Pin;
 800290e:	2302      	movs	r3, #2
 8002910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002912:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW3_User_GPIO_Port, &GPIO_InitStruct);
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4817      	ldr	r0, [pc, #92]	; (8002980 <MX_GPIO_Init+0x144>)
 8002922:	f001 f949 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Led_Pin */
  GPIO_InitStruct.Pin = Blue_Led_Pin;
 8002926:	2320      	movs	r3, #32
 8002928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002932:	2302      	movs	r3, #2
 8002934:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Blue_Led_GPIO_Port, &GPIO_InitStruct);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	480f      	ldr	r0, [pc, #60]	; (8002978 <MX_GPIO_Init+0x13c>)
 800293c:	f001 f93c 	bl	8003bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	2006      	movs	r0, #6
 8002946:	f000 fda6 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800294a:	2006      	movs	r0, #6
 800294c:	f000 fdbd 	bl	80034ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2007      	movs	r0, #7
 8002956:	f000 fd9e 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800295a:	2007      	movs	r0, #7
 800295c:	f000 fdb5 	bl	80034ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	200a      	movs	r0, #10
 8002966:	f000 fd96 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800296a:	200a      	movs	r0, #10
 800296c:	f000 fdad 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00

08002984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800298c:	e7fe      	b.n	800298c <Error_Handler+0x8>

0800298e <LL_RCC_EnableRTC>:
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_AHB2_GRP1_EnableClock>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_AHB3_GRP1_EnableClock>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4013      	ands	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_APB1_GRP1_EnableClock>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_APB2_GRP1_EnableClock>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a80:	f7ff ffaf 	bl	80029e2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	202e      	movs	r0, #46	; 0x2e
 8002a8a:	f000 fd04 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a8e:	202e      	movs	r0, #46	; 0x2e
 8002a90:	f000 fd1b 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b09c      	sub	sp, #112	; 0x70
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	2250      	movs	r2, #80	; 0x50
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00a f8ef 	bl	800cc9c <memset>
  if(hi2c->Instance==I2C3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_I2C_MspInit+0x84>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d125      	bne.n	8002b14 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002acc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 f8ca 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002ae2:	f7ff ff4f 	bl	8002984 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae6:	2004      	movs	r0, #4
 8002ae8:	f7ff ff62 	bl	80029b0 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aec:	2303      	movs	r3, #3
 8002aee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af0:	2312      	movs	r3, #18
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002afc:	2304      	movs	r3, #4
 8002afe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b04:	4619      	mov	r1, r3
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002b08:	f001 f856 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b10:	f7ff ff80 	bl	8002a14 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b14:	bf00      	nop
 8002b16:	3770      	adds	r7, #112	; 0x70
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40005c00 	.word	0x40005c00
 8002b20:	48000800 	.word	0x48000800

08002b24 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_IPCC_MspInit+0x44>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d113      	bne.n	8002b5e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b3a:	f7ff ff52 	bl	80029e2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	202c      	movs	r0, #44	; 0x2c
 8002b44:	f000 fca7 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	f000 fcbe 	bl	80034ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	202d      	movs	r0, #45	; 0x2d
 8002b54:	f000 fc9f 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b58:	202d      	movs	r0, #45	; 0x2d
 8002b5a:	f000 fcb6 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	58000c00 	.word	0x58000c00

08002b6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b096      	sub	sp, #88	; 0x58
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	2250      	movs	r2, #80	; 0x50
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00a f88d 	bl	800cc9c <memset>
  if(hrtc->Instance==RTC)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_RTC_MspInit+0x64>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d11d      	bne.n	8002bc8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f867 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002ba8:	f7ff feec 	bl	8002984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bac:	f7ff feef 	bl	800298e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bb4:	f7ff ff2e 	bl	8002a14 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2003      	movs	r0, #3
 8002bbe:	f000 fc6a 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002bc2:	2003      	movs	r0, #3
 8002bc4:	f000 fc81 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3758      	adds	r7, #88	; 0x58
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40002800 	.word	0x40002800

08002bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_TIM_Base_MspInit+0x34>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10b      	bne.n	8002bfe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002be6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bea:	f7ff ff2c 	bl	8002a46 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2019      	movs	r0, #25
 8002bf4:	f000 fc4f 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bf8:	2019      	movs	r0, #25
 8002bfa:	f000 fc66 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40014400 	.word	0x40014400

08002c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b09c      	sub	sp, #112	; 0x70
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2250      	movs	r2, #80	; 0x50
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00a f835 	bl	800cc9c <memset>
  if(huart->Instance==USART1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <HAL_UART_MspInit+0xe4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d155      	bne.n	8002ce8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 f811 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c54:	f7ff fe96 	bl	8002984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c58:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c5c:	f7ff fef3 	bl	8002a46 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	2002      	movs	r0, #2
 8002c62:	f7ff fea5 	bl	80029b0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c76:	2307      	movs	r3, #7
 8002c78:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	481c      	ldr	r0, [pc, #112]	; (8002cf4 <HAL_UART_MspInit+0xe8>)
 8002c82:	f000 ff99 	bl	8003bb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_UART_MspInit+0xf0>)
 8002c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002c8e:	220f      	movs	r2, #15
 8002c90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002c94:	2210      	movs	r2, #16
 8002c96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cbc:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cbe:	f000 fc49 	bl	8003554 <HAL_DMA_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002cc8:	f7ff fe5c 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cd0:	679a      	str	r2, [r3, #120]	; 0x78
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_UART_MspInit+0xec>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2024      	movs	r0, #36	; 0x24
 8002cde:	f000 fbda 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce2:	2024      	movs	r0, #36	; 0x24
 8002ce4:	f000 fbf1 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	3770      	adds	r7, #112	; 0x70
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	200003cc 	.word	0x200003cc
 8002cfc:	40020008 	.word	0x40020008

08002d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b09c      	sub	sp, #112	; 0x70
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	2250      	movs	r2, #80	; 0x50
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f009 ffbb 	bl	800cc9c <memset>
  if(hpcd->Instance==USB)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <HAL_PCD_MspInit+0xa8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d136      	bne.n	8002d9e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002d36:	2318      	movs	r3, #24
 8002d38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002d46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 ff87 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002d68:	f7ff fe0c 	bl	8002984 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7ff fe1f 	bl	80029b0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002d84:	230a      	movs	r3, #10
 8002d86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d92:	f000 ff11 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d96:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d9a:	f7ff fe3b 	bl	8002a14 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3770      	adds	r7, #112	; 0x70
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40006800 	.word	0x40006800

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler+0x4>

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df8:	f000 f9da 	bl	80031b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e04:	f7fe ff90 	bl	8001d28 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_User_Pin);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f001 f873 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_User_Pin);
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f001 f86c 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8002e2c:	2010      	movs	r0, #16
 8002e2e:	f001 f865 	bl	8003efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <DMA1_Channel1_IRQHandler+0x10>)
 8002e3e:	f000 fd6a 	bl	8003916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200003cc 	.word	0x200003cc

08002e4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e52:	f003 fbeb 	bl	800662c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200002f0 	.word	0x200002f0

08002e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <USART1_IRQHandler+0x10>)
 8002e66:	f003 fead 	bl	8006bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000033c 	.word	0x2000033c

08002e74 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002e78:	f009 fb14 	bl	800c4a4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002e84:	f009 fb46 	bl	800c514 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e90:	f001 f84c 	bl	8003f2c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eaa:	f3af 8000 	nop.w
 8002eae:	4601      	mov	r1, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf0      	blt.n	8002eaa <_read+0x12>
	}

return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efa:	605a      	str	r2, [r3, #4]
	return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_isatty>:

int _isatty(int file)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f009 fe5e 	bl	800cc2c <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20030000 	.word	0x20030000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	20000724 	.word	0x20000724
 8002fa4:	20001a48 	.word	0x20001a48

08002fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <SystemInit+0x98>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <SystemInit+0x98>)
 8002fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <SystemInit+0x9c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	f023 0305 	bic.w	r3, r3, #5
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <SystemInit+0xa0>)
 8003014:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <SystemInit+0xa0>)
 800301c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	faf6fefb 	.word	0xfaf6fefb
 8003048:	22041000 	.word	0x22041000

0800304c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800304c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800304e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003050:	3304      	adds	r3, #4

08003052 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003052:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003054:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003056:	d3f9      	bcc.n	800304c <CopyDataInit>
  bx lr
 8003058:	4770      	bx	lr

0800305a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800305a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800305c:	3004      	adds	r0, #4

0800305e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800305e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003060:	d3fb      	bcc.n	800305a <FillZerobss>
  bx lr
 8003062:	4770      	bx	lr

08003064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003066:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003068:	f7ff ff9e 	bl	8002fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800306c:	480b      	ldr	r0, [pc, #44]	; (800309c <LoopForever+0x8>)
 800306e:	490c      	ldr	r1, [pc, #48]	; (80030a0 <LoopForever+0xc>)
 8003070:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <LoopForever+0x10>)
 8003072:	2300      	movs	r3, #0
 8003074:	f7ff ffed 	bl	8003052 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <LoopForever+0x14>)
 800307a:	490c      	ldr	r1, [pc, #48]	; (80030ac <LoopForever+0x18>)
 800307c:	2300      	movs	r3, #0
 800307e:	f7ff ffee 	bl	800305e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003082:	480b      	ldr	r0, [pc, #44]	; (80030b0 <LoopForever+0x1c>)
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <LoopForever+0x20>)
 8003086:	2300      	movs	r3, #0
 8003088:	f7ff ffe9 	bl	800305e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800308c:	f009 fdd4 	bl	800cc38 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003090:	f7ff f9d2 	bl	8002438 <main>

08003094 <LoopForever>:

LoopForever:
  b LoopForever
 8003094:	e7fe      	b.n	8003094 <LoopForever>
 8003096:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003098:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800309c:	20000004 	.word	0x20000004
 80030a0:	20000094 	.word	0x20000094
 80030a4:	0800f5b4 	.word	0x0800f5b4
  INIT_BSS _sbss, _ebss
 80030a8:	20000210 	.word	0x20000210
 80030ac:	20001a44 	.word	0x20001a44
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80030b0:	200301e4 	.word	0x200301e4
 80030b4:	20030a67 	.word	0x20030a67

080030b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC1_IRQHandler>
	...

080030bc <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6053      	str	r3, [r2, #4]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e0042000 	.word	0xe0042000

080030dc <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80030e6:	f043 0302 	orr.w	r3, r3, #2
 80030ea:	6053      	str	r3, [r2, #4]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e0042000 	.word	0xe0042000

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_Init+0x3c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_Init+0x3c>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003112:	2003      	movs	r0, #3
 8003114:	f000 f9b4 	bl	8003480 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003118:	2000      	movs	r0, #0
 800311a:	f000 f80f 	bl	800313c <HAL_InitTick>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	e001      	b.n	800312e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800312a:	f7ff fca5 	bl	8002a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800312e:	79fb      	ldrb	r3, [r7, #7]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	58004000 	.word	0x58004000

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_InitTick+0x6c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d024      	beq.n	800319a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003150:	f002 faee 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_InitTick+0x6c>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003160:	fbb3 f3f1 	udiv	r3, r3, r1
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f9ca 	bl	8003502 <HAL_SYSTICK_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10f      	bne.n	8003194 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	d809      	bhi.n	800318e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317a:	2200      	movs	r2, #0
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	f04f 30ff 	mov.w	r0, #4294967295
 8003182:	f000 f988 	bl	8003496 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_InitTick+0x70>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	e007      	b.n	800319e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e004      	b.n	800319e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e001      	b.n	800319e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	20000008 	.word	0x20000008

080031b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_IncTick+0x20>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x24>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_IncTick+0x24>)
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	2000000c 	.word	0x2000000c
 80031d4:	20000728 	.word	0x20000728

080031d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return uwTick;
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_GetTick+0x14>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000728 	.word	0x20000728

080031f0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_GetTickPrio+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000008 	.word	0x20000008

08003208 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800320c:	f7ff ff56 	bl	80030bc <LL_DBGMCU_EnableDBGSleepMode>
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003218:	f7ff ff60 	bl	80030dc <LL_DBGMCU_EnableDBGStopMode>
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	; (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db12      	blt.n	80032f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	490a      	ldr	r1, [pc, #40]	; (8003304 <__NVIC_DisableIRQ+0x44>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	3320      	adds	r3, #32
 80032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032ec:	f3bf 8f4f 	dsb	sy
}
 80032f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032f2:	f3bf 8f6f 	isb	sy
}
 80032f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100

08003308 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0c      	blt.n	8003334 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <__NVIC_SetPendingIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	3340      	adds	r3, #64	; 0x40
 8003330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db0c      	blt.n	8003370 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4907      	ldr	r1, [pc, #28]	; (800337c <__NVIC_ClearPendingIRQ+0x38>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	3360      	adds	r3, #96	; 0x60
 800336c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100

08003380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0a      	blt.n	80033aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	490c      	ldr	r1, [pc, #48]	; (80033cc <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a8:	e00a      	b.n	80033c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	440b      	add	r3, r1
 80033be:	761a      	strb	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f1c3 0307 	rsb	r3, r3, #7
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf28      	it	cs
 80033f2:	2304      	movcs	r3, #4
 80033f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d902      	bls.n	8003404 <NVIC_EncodePriority+0x30>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b03      	subs	r3, #3
 8003402:	e000      	b.n	8003406 <NVIC_EncodePriority+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	f04f 32ff 	mov.w	r2, #4294967295
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341c:	f04f 31ff 	mov.w	r1, #4294967295
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43d9      	mvns	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	4313      	orrs	r3, r2
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800344c:	d301      	bcc.n	8003452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <SysTick_Config+0x40>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345a:	210f      	movs	r1, #15
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	f7ff ff8e 	bl	8003380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <SysTick_Config+0x40>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <SysTick_Config+0x40>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010

08003480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fec9 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff fee0 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff90 	bl	80033d4 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5f 	bl	8003380 <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fed3 	bl	8003284 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fee3 	bl	80032c0 <__NVIC_DisableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff96 	bl	800343c <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff feed 	bl	8003308 <__NVIC_SetPendingIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fefd 	bl	8003344 <__NVIC_ClearPendingIRQ>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08e      	b.n	8003684 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_DMA_Init+0x138>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d80f      	bhi.n	8003592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <HAL_DMA_Init+0x13c>)
 800357a:	4413      	add	r3, r2
 800357c:	4a45      	ldr	r2, [pc, #276]	; (8003694 <HAL_DMA_Init+0x140>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	; (8003698 <HAL_DMA_Init+0x144>)
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_DMA_Init+0x148>)
 800359a:	4413      	add	r3, r2
 800359c:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <HAL_DMA_Init+0x140>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_DMA_Init+0x14c>)
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa74 	bl	8003af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d102      	bne.n	8003618 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003624:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800362e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_DMA_Init+0x106>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d80c      	bhi.n	800365a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa93 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e008      	b.n	800366c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020407 	.word	0x40020407
 8003690:	bffdfff8 	.word	0xbffdfff8
 8003694:	cccccccd 	.word	0xcccccccd
 8003698:	40020000 	.word	0x40020000
 800369c:	bffdfbf8 	.word	0xbffdfbf8
 80036a0:	40020400 	.word	0x40020400

080036a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e066      	b.n	8003792 <HAL_DMA_Start_IT+0xee>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d155      	bne.n	8003784 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f9b9 	bl	8003a74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 020e 	orr.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003770:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e005      	b.n	8003790 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800378c:	2302      	movs	r3, #2
 800378e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e04f      	b.n	800384c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d008      	beq.n	80037ca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e040      	b.n	800384c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 020e 	bic.w	r2, r2, #14
 80037d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f003 021c 	and.w	r2, r3, #28
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003816:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003838:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d005      	beq.n	800387c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e047      	b.n	800390c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	f003 021c 	and.w	r2, r3, #28
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
    }
  }
  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f003 031c 	and.w	r3, r3, #28
 8003936:	2204      	movs	r2, #4
 8003938:	409a      	lsls	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d026      	beq.n	8003990 <HAL_DMA_IRQHandler+0x7a>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d021      	beq.n	8003990 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 021c 	and.w	r2, r3, #28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2104      	movs	r1, #4
 8003978:	fa01 f202 	lsl.w	r2, r1, r2
 800397c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	2b00      	cmp	r3, #0
 8003984:	d071      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800398e:	e06c      	b.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 031c 	and.w	r3, r3, #28
 8003998:	2202      	movs	r2, #2
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02e      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xec>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d029      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020a 	bic.w	r2, r2, #10
 80039ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	f003 021c 	and.w	r2, r3, #28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2102      	movs	r1, #2
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d038      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a00:	e033      	b.n	8003a6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f003 031c 	and.w	r3, r3, #28
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d025      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f003 021c 	and.w	r2, r3, #28
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
}
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 021c 	and.w	r2, r3, #28
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d108      	bne.n	8003ad4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ad2:	e007      	b.n	8003ae4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d80a      	bhi.n	8003b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b10:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6493      	str	r3, [r2, #72]	; 0x48
 8003b18:	e007      	b.n	8003b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3b08      	subs	r3, #8
 8003b32:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b40:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2201      	movs	r2, #1
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40020407 	.word	0x40020407
 8003b60:	4002081c 	.word	0x4002081c
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	40020880 	.word	0x40020880

08003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	461a      	mov	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	1000823f 	.word	0x1000823f
 8003bb4:	40020940 	.word	0x40020940

08003bb8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc6:	e14c      	b.n	8003e62 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 813e 	beq.w	8003e5c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d005      	beq.n	8003bf8 <HAL_GPIO_Init+0x40>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d130      	bne.n	8003c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2e:	2201      	movs	r2, #1
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0201 	and.w	r2, r3, #1
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d017      	beq.n	8003c96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d123      	bne.n	8003cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	08da      	lsrs	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3208      	adds	r2, #8
 8003caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	08da      	lsrs	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3208      	adds	r2, #8
 8003ce4:	6939      	ldr	r1, [r7, #16]
 8003ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0203 	and.w	r2, r3, #3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8098 	beq.w	8003e5c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_GPIO_Init+0x2c8>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	220f      	movs	r2, #15
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d56:	d019      	beq.n	8003d8c <HAL_GPIO_Init+0x1d4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <HAL_GPIO_Init+0x2cc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_GPIO_Init+0x1d0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a49      	ldr	r2, [pc, #292]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00d      	beq.n	8003d84 <HAL_GPIO_Init+0x1cc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	; (8003e8c <HAL_GPIO_Init+0x2d4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <HAL_GPIO_Init+0x1c8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <HAL_GPIO_Init+0x2d8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_GPIO_Init+0x1c4>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e008      	b.n	8003d8e <HAL_GPIO_Init+0x1d6>
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	e006      	b.n	8003d8e <HAL_GPIO_Init+0x1d6>
 8003d80:	2303      	movs	r3, #3
 8003d82:	e004      	b.n	8003d8e <HAL_GPIO_Init+0x1d6>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e002      	b.n	8003d8e <HAL_GPIO_Init+0x1d6>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_GPIO_Init+0x1d6>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	f002 0203 	and.w	r2, r2, #3
 8003d94:	0092      	lsls	r2, r2, #2
 8003d96:	4093      	lsls	r3, r2
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d9e:	4938      	ldr	r1, [pc, #224]	; (8003e80 <HAL_GPIO_Init+0x2c8>)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dd0:	4a30      	ldr	r2, [pc, #192]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4013      	ands	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dfa:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <HAL_GPIO_Init+0x2dc>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f aeab 	bne.w	8003bc8 <HAL_GPIO_Init+0x10>
  }
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40010000 	.word	0x40010000
 8003e84:	48000400 	.word	0x48000400
 8003e88:	48000800 	.word	0x48000800
 8003e8c:	48000c00 	.word	0x48000c00
 8003e90:	48001000 	.word	0x48001000
 8003e94:	58000800 	.word	0x58000800

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb4:	e002      	b.n	8003ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	041a      	lsls	r2, r3, #16
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43d9      	mvns	r1, r3
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	400b      	ands	r3, r1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f12:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fb80 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	58000800 	.word	0x58000800

08003f2c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_HSEM_IRQHandler+0x30>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_HSEM_IRQHandler+0x30>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	4906      	ldr	r1, [pc, #24]	; (8003f5c <HAL_HSEM_IRQHandler+0x30>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <HAL_HSEM_IRQHandler+0x30>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f807 	bl	8003f60 <HAL_HSEM_FreeCallback>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	58001500 	.word	0x58001500

08003f60 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e081      	b.n	800408a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fd7c 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	e006      	b.n	8003ffc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ffa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d104      	bne.n	800400e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d138      	bne.n	800411a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e032      	b.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	; 0x24
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d139      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004148:	2302      	movs	r3, #2
 800414a:	e033      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800417a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01e      	beq.n	8004210 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_IPCC_Init+0x60>)
 80041d4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fe fc9e 	bl	8002b24 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80041e8:	68b8      	ldr	r0, [r7, #8]
 80041ea:	f000 f85b 	bl	80042a4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f82c 	bl	8004258 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800420e:	e001      	b.n	8004214 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	58000c00 	.word	0x58000c00

08004224 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e00f      	b.n	8004286 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	4a0b      	ldr	r2, [pc, #44]	; (800429c <IPCC_SetDefaultCallbacks+0x44>)
 8004270:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3306      	adds	r3, #6
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <IPCC_SetDefaultCallbacks+0x48>)
 800427e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d9ec      	bls.n	8004266 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	08004225 	.word	0x08004225
 80042a0:	0800423f 	.word	0x0800423f

080042a4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80042b8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	223f      	movs	r2, #63	; 0x3f
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	b08b      	sub	sp, #44	; 0x2c
 80042d0:	af06      	add	r7, sp, #24
 80042d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0dd      	b.n	800449a <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fe fd04 	bl	8002d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2203      	movs	r2, #3
 80042fc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fe12 	bl	8007f34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e04d      	b.n	80043b2 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	3305      	adds	r3, #5
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	3304      	adds	r3, #4
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	b298      	uxth	r0, r3
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	440b      	add	r3, r1
 8004354:	333a      	adds	r3, #58	; 0x3a
 8004356:	4602      	mov	r2, r0
 8004358:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	3307      	adds	r3, #7
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	333c      	adds	r3, #60	; 0x3c
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	3340      	adds	r3, #64	; 0x40
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	3344      	adds	r3, #68	; 0x44
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3301      	adds	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3ac      	bcc.n	8004316 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e044      	b.n	800444c <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3b5      	bcc.n	80043c2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	687e      	ldr	r6, [r7, #4]
 800445e:	466d      	mov	r5, sp
 8004460:	f106 0410 	add.w	r4, r6, #16
 8004464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004468:	e894 0003 	ldmia.w	r4, {r0, r1}
 800446c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004470:	1d33      	adds	r3, r6, #4
 8004472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004474:	6838      	ldr	r0, [r7, #0]
 8004476:	f003 fd78 	bl	8007f6a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f805 	bl	80044a2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	6013      	str	r3, [r2, #0]
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	58000400 	.word	0x58000400

08004518 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_PWREx_GetVoltageRange+0x18>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	58000400 	.word	0x58000400

08004534 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004546:	d101      	bne.n	800454c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_RCC_HSE_Enable>:
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_RCC_HSE_Disable>:
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_RCC_HSE_IsReady>:
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a6:	d101      	bne.n	80045ac <LL_RCC_HSE_IsReady+0x18>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <LL_RCC_HSE_IsReady+0x1a>
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_RCC_HSI_Enable>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_RCC_HSI_Disable>:
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_RCC_HSI_IsReady>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d101      	bne.n	800460c <LL_RCC_HSI_IsReady+0x18>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <LL_RCC_HSI_IsReady+0x1a>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_RCC_HSI48_Enable>:
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_RCC_HSI48_Disable>:
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <LL_RCC_HSI48_IsReady>:
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d101      	bne.n	800469e <LL_RCC_HSI48_IsReady+0x18>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_RCC_HSI48_IsReady+0x1a>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_RCC_LSE_Enable>:
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_RCC_LSE_Disable>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <LL_RCC_LSE_EnableBypass>:
{
 80046ee:	b480      	push	{r7}
 80046f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_RCC_LSE_DisableBypass>:
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <LL_RCC_LSE_IsReady>:
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d101      	bne.n	800474a <LL_RCC_LSE_IsReady+0x18>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <LL_RCC_LSE_IsReady+0x1a>
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_RCC_LSI1_Enable>:
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_LSI1_Disable>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <LL_RCC_LSI1_IsReady>:
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800479e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d101      	bne.n	80047b2 <LL_RCC_LSI1_IsReady+0x18>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <LL_RCC_LSI1_IsReady+0x1a>
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_RCC_LSI2_Enable>:
{
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_LSI2_Disable>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_RCC_LSI2_IsReady>:
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d101      	bne.n	800481a <LL_RCC_LSI2_IsReady+0x18>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <LL_RCC_LSI2_IsReady+0x1a>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_RCC_LSI2_SetTrimming>:
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_MSI_Enable>:
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_RCC_MSI_Disable>:
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6013      	str	r3, [r2, #0]
}
 8004886:	bf00      	nop
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_RCC_MSI_IsReady>:
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d101      	bne.n	80048a6 <LL_RCC_MSI_IsReady+0x16>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <LL_RCC_MSI_IsReady+0x18>
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_RCC_MSI_SetRange>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_RCC_MSI_GetRange>:
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2bb0      	cmp	r3, #176	; 0xb0
 80048f0:	d901      	bls.n	80048f6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80048f2:	23b0      	movs	r3, #176	; 0xb0
 80048f4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80048f6:	687b      	ldr	r3, [r7, #4]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_SetSysClkSource>:
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 0203 	bic.w	r2, r3, #3
 8004940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_RCC_GetSysClkSource>:
{
 8004956:	b480      	push	{r7}
 8004958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 030c 	and.w	r3, r3, #12
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RCC_SetAHBPrescaler>:
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_SetAHB4Prescaler>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <LL_RCC_SetAPB1Prescaler>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_SetAPB2Prescaler>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_GetAHBPrescaler>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_GetAHB4Prescaler>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_GetAPB1Prescaler>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_GetAPB2Prescaler>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_RCC_ConfigMCO>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_RCC_PLL_Enable>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_RCC_PLL_Disable>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_PLL_IsReady>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b20:	d101      	bne.n	8004b26 <LL_RCC_PLL_IsReady+0x18>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_RCC_PLL_IsReady+0x1a>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <LL_RCC_PLL_GetN>:
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_PLL_GetR>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_RCC_PLL_GetDivider>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_RCC_PLL_GetMainSource>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba6:	d101      	bne.n	8004bac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bcc:	d101      	bne.n	8004bd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d101      	bne.n	8004bf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c16:	d101      	bne.n	8004c1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c3a:	d101      	bne.n	8004c40 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b08d      	sub	sp, #52	; 0x34
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e363      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 808d 	beq.w	8004d86 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6c:	f7ff fe73 	bl	8004956 <LL_RCC_GetSysClkSource>
 8004c70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c72:	f7ff ff83 	bl	8004b7c <LL_RCC_PLL_GetMainSource>
 8004c76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x3e>
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d147      	bne.n	8004d14 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d144      	bne.n	8004d14 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e347      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c9a:	f7ff fe1e 	bl	80048da <LL_RCC_MSI_GetRange>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d914      	bls.n	8004cce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd81 	bl	80057b0 <RCC_SetFlashLatencyFromMSIRange>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e336      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fdf8 	bl	80048b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fe1c 	bl	8004904 <LL_RCC_MSI_SetCalibTrimming>
 8004ccc:	e013      	b.n	8004cf6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fded 	bl	80048b2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fe11 	bl	8004904 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fd62 	bl	80057b0 <RCC_SetFlashLatencyFromMSIRange>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e317      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cf6:	f000 fd1b 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4aa4      	ldr	r2, [pc, #656]	; (8004f90 <HAL_RCC_OscConfig+0x344>)
 8004cfe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d00:	4ba4      	ldr	r3, [pc, #656]	; (8004f94 <HAL_RCC_OscConfig+0x348>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fa19 	bl	800313c <HAL_InitTick>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d039      	beq.n	8004d84 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e308      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01e      	beq.n	8004d5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d1c:	f7ff fd9a 	bl	8004854 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d20:	f7fe fa5a 	bl	80031d8 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d28:	f7fe fa56 	bl	80031d8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e2f5      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d3a:	f7ff fda9 	bl	8004890 <LL_RCC_MSI_IsReady>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f1      	beq.n	8004d28 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fdb2 	bl	80048b2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fdd6 	bl	8004904 <LL_RCC_MSI_SetCalibTrimming>
 8004d58:	e015      	b.n	8004d86 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d5a:	f7ff fd8a 	bl	8004872 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fa3b 	bl	80031d8 <HAL_GetTick>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d66:	f7fe fa37 	bl	80031d8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e2d6      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d78:	f7ff fd8a 	bl	8004890 <LL_RCC_MSI_IsReady>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f1      	bne.n	8004d66 <HAL_RCC_OscConfig+0x11a>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d84:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d047      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d92:	f7ff fde0 	bl	8004956 <LL_RCC_GetSysClkSource>
 8004d96:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d98:	f7ff fef0 	bl	8004b7c <LL_RCC_PLL_GetMainSource>
 8004d9c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_OscConfig+0x164>
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d108      	bne.n	8004dbc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d105      	bne.n	8004dbc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d134      	bne.n	8004e22 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e2b4      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d102      	bne.n	8004dcc <HAL_RCC_OscConfig+0x180>
 8004dc6:	f7ff fbc7 	bl	8004558 <LL_RCC_HSE_Enable>
 8004dca:	e001      	b.n	8004dd0 <HAL_RCC_OscConfig+0x184>
 8004dcc:	f7ff fbd3 	bl	8004576 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d012      	beq.n	8004dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f9fe 	bl	80031d8 <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fe f9fa 	bl	80031d8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e299      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004df2:	f7ff fbcf 	bl	8004594 <LL_RCC_HSE_IsReady>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f1      	beq.n	8004de0 <HAL_RCC_OscConfig+0x194>
 8004dfc:	e011      	b.n	8004e22 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fe f9eb 	bl	80031d8 <HAL_GetTick>
 8004e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e06:	f7fe f9e7 	bl	80031d8 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e286      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e18:	f7ff fbbc 	bl	8004594 <LL_RCC_HSE_IsReady>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f1      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	f7ff fd92 	bl	8004956 <LL_RCC_GetSysClkSource>
 8004e32:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e34:	f7ff fea2 	bl	8004b7c <LL_RCC_PLL_GetMainSource>
 8004e38:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_OscConfig+0x200>
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d10e      	bne.n	8004e64 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e266      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fbdb 	bl	8004618 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e62:	e031      	b.n	8004ec8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6c:	f7ff fba4 	bl	80045b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe f9b2 	bl	80031d8 <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e78:	f7fe f9ae 	bl	80031d8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e24d      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e8a:	f7ff fbb3 	bl	80045f4 <LL_RCC_HSI_IsReady>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f1      	beq.n	8004e78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fbbd 	bl	8004618 <LL_RCC_HSI_SetCalibTrimming>
 8004e9e:	e013      	b.n	8004ec8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ea0:	f7ff fb99 	bl	80045d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fe f998 	bl	80031d8 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fe f994 	bl	80031d8 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e233      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ebe:	f7ff fb99 	bl	80045f4 <LL_RCC_HSI_IsReady>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1f1      	bne.n	8004eac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80a3 	beq.w	8005028 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d076      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d046      	beq.n	8004f84 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004ef6:	f7ff fc50 	bl	800479a <LL_RCC_LSI1_IsReady>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d113      	bne.n	8004f28 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f00:	f7ff fc29 	bl	8004756 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f04:	f7fe f968 	bl	80031d8 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f0c:	f7fe f964 	bl	80031d8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e203      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f1e:	f7ff fc3c 	bl	800479a <LL_RCC_LSI1_IsReady>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f1      	beq.n	8004f0c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f28:	f7ff fc49 	bl	80047be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe f954 	bl	80031d8 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f34:	f7fe f950 	bl	80031d8 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1ef      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f46:	f7ff fc5c 	bl	8004802 <LL_RCC_LSI2_IsReady>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f1      	beq.n	8004f34 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fc66 	bl	8004826 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f5a:	f7ff fc0d 	bl	8004778 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fe f93b 	bl	80031d8 <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f66:	f7fe f937 	bl	80031d8 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e1d6      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f78:	f7ff fc0f 	bl	800479a <LL_RCC_LSI1_IsReady>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f1      	bne.n	8004f66 <HAL_RCC_OscConfig+0x31a>
 8004f82:	e051      	b.n	8005028 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f84:	f7ff fbe7 	bl	8004756 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe f926 	bl	80031d8 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f8e:	e00c      	b.n	8004faa <HAL_RCC_OscConfig+0x35e>
 8004f90:	20000004 	.word	0x20000004
 8004f94:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f98:	f7fe f91e 	bl	80031d8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e1bd      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004faa:	f7ff fbf6 	bl	800479a <LL_RCC_LSI1_IsReady>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f1      	beq.n	8004f98 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004fb4:	f7ff fc14 	bl	80047e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fba:	f7fe f90d 	bl	80031d8 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1ac      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fcc:	f7ff fc19 	bl	8004802 <LL_RCC_LSI2_IsReady>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f1      	bne.n	8004fba <HAL_RCC_OscConfig+0x36e>
 8004fd6:	e027      	b.n	8005028 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004fd8:	f7ff fc02 	bl	80047e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fe f8fc 	bl	80031d8 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fe4:	f7fe f8f8 	bl	80031d8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e197      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ff6:	f7ff fc04 	bl	8004802 <LL_RCC_LSI2_IsReady>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f1      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005000:	f7ff fbba 	bl	8004778 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fe f8e8 	bl	80031d8 <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800500c:	f7fe f8e4 	bl	80031d8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e183      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800501e:	f7ff fbbc 	bl	800479a <LL_RCC_LSI1_IsReady>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f1      	bne.n	800500c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05b      	beq.n	80050ec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	4ba7      	ldr	r3, [pc, #668]	; (80052d4 <HAL_RCC_OscConfig+0x688>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d114      	bne.n	800506a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005040:	f7ff fa5a 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005044:	f7fe f8c8 	bl	80031d8 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504c:	f7fe f8c4 	bl	80031d8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e163      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505e:	4b9d      	ldr	r3, [pc, #628]	; (80052d4 <HAL_RCC_OscConfig+0x688>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_RCC_OscConfig+0x42c>
 8005072:	f7ff fb1a 	bl	80046aa <LL_RCC_LSE_Enable>
 8005076:	e00c      	b.n	8005092 <HAL_RCC_OscConfig+0x446>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b05      	cmp	r3, #5
 800507e:	d104      	bne.n	800508a <HAL_RCC_OscConfig+0x43e>
 8005080:	f7ff fb35 	bl	80046ee <LL_RCC_LSE_EnableBypass>
 8005084:	f7ff fb11 	bl	80046aa <LL_RCC_LSE_Enable>
 8005088:	e003      	b.n	8005092 <HAL_RCC_OscConfig+0x446>
 800508a:	f7ff fb1f 	bl	80046cc <LL_RCC_LSE_Disable>
 800508e:	f7ff fb3f 	bl	8004710 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d014      	beq.n	80050c4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fe f89d 	bl	80031d8 <HAL_GetTick>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fe f899 	bl	80031d8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e136      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80050b8:	f7ff fb3b 	bl	8004732 <LL_RCC_LSE_IsReady>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ef      	beq.n	80050a2 <HAL_RCC_OscConfig+0x456>
 80050c2:	e013      	b.n	80050ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fe f888 	bl	80031d8 <HAL_GetTick>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fe f884 	bl	80031d8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e121      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80050e2:	f7ff fb26 	bl	8004732 <LL_RCC_LSE_IsReady>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ef      	bne.n	80050cc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02c      	beq.n	8005152 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d014      	beq.n	800512a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005100:	f7ff fa9f 	bl	8004642 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fe f868 	bl	80031d8 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800510c:	f7fe f864 	bl	80031d8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e103      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800511e:	f7ff fab2 	bl	8004686 <LL_RCC_HSI48_IsReady>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f1      	beq.n	800510c <HAL_RCC_OscConfig+0x4c0>
 8005128:	e013      	b.n	8005152 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800512a:	f7ff fa9b 	bl	8004664 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fe f853 	bl	80031d8 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fe f84f 	bl	80031d8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0ee      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005148:	f7ff fa9d 	bl	8004686 <LL_RCC_HSI48_IsReady>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f1      	bne.n	8005136 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80e4 	beq.w	8005324 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515c:	f7ff fbfb 	bl	8004956 <LL_RCC_GetSysClkSource>
 8005160:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	2b02      	cmp	r3, #2
 8005170:	f040 80b4 	bne.w	80052dc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0203 	and.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	429a      	cmp	r2, r3
 8005180:	d123      	bne.n	80051ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d11c      	bne.n	80051ca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d114      	bne.n	80051ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d10d      	bne.n	80051ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d05d      	beq.n	8005286 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d058      	beq.n	8005282 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0a1      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051e2:	f7ff fc85 	bl	8004af0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051e6:	f7fd fff7 	bl	80031d8 <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fd fff3 	bl	80031d8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e092      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ef      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCC_OscConfig+0x68c>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005226:	0212      	lsls	r2, r2, #8
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800522e:	4311      	orrs	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800523a:	430a      	orrs	r2, r1
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005240:	4313      	orrs	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005244:	f7ff fc45 	bl	8004ad2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005258:	f7fd ffbe 	bl	80031d8 <HAL_GetTick>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fd ffba 	bl	80031d8 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e059      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0ef      	beq.n	8005260 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005280:	e050      	b.n	8005324 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e04f      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d147      	bne.n	8005324 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005294:	f7ff fc1d 	bl	8004ad2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052a8:	f7fd ff96 	bl	80031d8 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd ff92 	bl	80031d8 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e031      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ef      	beq.n	80052b0 <HAL_RCC_OscConfig+0x664>
 80052d0:	e028      	b.n	8005324 <HAL_RCC_OscConfig+0x6d8>
 80052d2:	bf00      	nop
 80052d4:	58000400 	.word	0x58000400
 80052d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d01e      	beq.n	8005320 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	f7ff fc05 	bl	8004af0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e6:	f7fd ff77 	bl	80031d8 <HAL_GetTick>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ee:	f7fd ff73 	bl	80031d8 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e012      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ef      	bne.n	80052ee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_OscConfig+0x6e4>)
 800531a:	4013      	ands	r3, r2
 800531c:	60cb      	str	r3, [r1, #12]
 800531e:	e001      	b.n	8005324 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3734      	adds	r7, #52	; 0x34
 800532a:	46bd      	mov	sp, r7
 800532c:	bd90      	pop	{r4, r7, pc}
 800532e:	bf00      	nop
 8005330:	eefefffc 	.word	0xeefefffc

08005334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e12d      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b98      	ldr	r3, [pc, #608]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d91b      	bls.n	800538e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b95      	ldr	r3, [pc, #596]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	4993      	ldr	r1, [pc, #588]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fd ff37 	bl	80031d8 <HAL_GetTick>
 800536a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536c:	e008      	b.n	8005380 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800536e:	f7fd ff33 	bl	80031d8 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e111      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005380:	4b8a      	ldr	r3, [pc, #552]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d1ef      	bne.n	800536e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fae5 	bl	800496e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053a4:	f7fd ff18 	bl	80031d8 <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053ac:	f7fd ff14 	bl	80031d8 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0f2      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053be:	f7ff fbe9 	bl	8004b94 <LL_RCC_IsActiveFlag_HPRE>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f1      	beq.n	80053ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d016      	beq.n	8005402 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fadc 	bl	8004996 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053de:	f7fd fefb 	bl	80031d8 <HAL_GetTick>
 80053e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053e6:	f7fd fef7 	bl	80031d8 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0d5      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053f8:	f7ff fbde 	bl	8004bb8 <LL_RCC_IsActiveFlag_C2HPRE>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f1      	beq.n	80053e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fad5 	bl	80049c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005418:	f7fd fede 	bl	80031d8 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005420:	f7fd feda 	bl	80031d8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0b8      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005432:	f7ff fbd4 	bl	8004bde <LL_RCC_IsActiveFlag_SHDHPRE>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f1      	beq.n	8005420 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d016      	beq.n	8005476 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff facf 	bl	80049f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005452:	f7fd fec1 	bl	80031d8 <HAL_GetTick>
 8005456:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800545a:	f7fd febd 	bl	80031d8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e09b      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800546c:	f7ff fbca 	bl	8004c04 <LL_RCC_IsActiveFlag_PPRE1>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f1      	beq.n	800545a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d017      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fac5 	bl	8004a18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800548e:	f7fd fea3 	bl	80031d8 <HAL_GetTick>
 8005492:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005496:	f7fd fe9f 	bl	80031d8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e07d      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054a8:	f7ff fbbe 	bl	8004c28 <LL_RCC_IsActiveFlag_PPRE2>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f1      	beq.n	8005496 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d043      	beq.n	8005546 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d106      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054c6:	f7ff f865 	bl	8004594 <LL_RCC_HSE_IsReady>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11e      	bne.n	800550e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e067      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d106      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80054dc:	f7ff fb17 	bl	8004b0e <LL_RCC_PLL_IsReady>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d113      	bne.n	800550e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e05c      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80054f2:	f7ff f9cd 	bl	8004890 <LL_RCC_MSI_IsReady>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e051      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005500:	f7ff f878 	bl	80045f4 <LL_RCC_HSI_IsReady>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e04a      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fa0b 	bl	800492e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fd fe5e 	bl	80031d8 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fd fe5a 	bl	80031d8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e036      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	f7ff fa0e 	bl	8004956 <LL_RCC_GetSysClkSource>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	429a      	cmp	r2, r3
 8005544:	d1ec      	bne.n	8005520 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005546:	4b19      	ldr	r3, [pc, #100]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d21b      	bcs.n	800558c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 0207 	bic.w	r2, r3, #7
 800555c:	4913      	ldr	r1, [pc, #76]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005564:	f7fd fe38 	bl	80031d8 <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	e008      	b.n	800557e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800556c:	f7fd fe34 	bl	80031d8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e012      	b.n	80055a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_RCC_ClockConfig+0x278>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d1ef      	bne.n	800556c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800558c:	f000 f8d0 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005590:	4603      	mov	r3, r0
 8005592:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <HAL_RCC_ClockConfig+0x27c>)
 8005594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005596:	f7fd fe2b 	bl	80031f0 <HAL_GetTickPrio>
 800559a:	4603      	mov	r3, r0
 800559c:	4618      	mov	r0, r3
 800559e:	f7fd fdcd 	bl	800313c <HAL_InitTick>
 80055a2:	4603      	mov	r3, r0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	58004000 	.word	0x58004000
 80055b0:	20000004 	.word	0x20000004

080055b4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80055c0:	2302      	movs	r3, #2
 80055c2:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c4:	2303      	movs	r3, #3
 80055c6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80055e0:	029b      	lsls	r3, r3, #10
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index));
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f4:	2101      	movs	r1, #1
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005600:	4313      	orrs	r3, r2
 8005602:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	b29b      	uxth	r3, r3
 8005608:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	0d1b      	lsrs	r3, r3, #20
 800560e:	b2db      	uxtb	r3, r3
 8005610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8005612:	f107 0310 	add.w	r3, r7, #16
 8005616:	4619      	mov	r1, r3
 8005618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561a:	f7fe facd 	bl	8003bb8 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_RCC_MCOConfig+0x7a>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	68b8      	ldr	r0, [r7, #8]
 8005628:	f7ff fa3c 	bl	8004aa4 <LL_RCC_ConfigMCO>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {}
}
 800562c:	e010      	b.n	8005650 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO2_INDEX)
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005634:	d104      	bne.n	8005640 <HAL_RCC_MCOConfig+0x8c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	68b8      	ldr	r0, [r7, #8]
 800563a:	f7ff fa33 	bl	8004aa4 <LL_RCC_ConfigMCO>
}
 800563e:	e007      	b.n	8005650 <HAL_RCC_MCOConfig+0x9c>
  else if (mcoindex == RCC_MCO3_INDEX)
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d103      	bne.n	8005650 <HAL_RCC_MCOConfig+0x9c>
    LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	68b8      	ldr	r0, [r7, #8]
 800564c:	f7ff fa2a 	bl	8004aa4 <LL_RCC_ConfigMCO>
}
 8005650:	bf00      	nop
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	b590      	push	{r4, r7, lr}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800565e:	f7ff f97a 	bl	8004956 <LL_RCC_GetSysClkSource>
 8005662:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800566a:	f7ff f936 	bl	80048da <LL_RCC_MSI_GetRange>
 800566e:	4603      	mov	r3, r0
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e04b      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b04      	cmp	r3, #4
 8005684:	d102      	bne.n	800568c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005686:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e045      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b08      	cmp	r3, #8
 8005690:	d10a      	bne.n	80056a8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005692:	f7fe ff4f 	bl	8004534 <LL_RCC_HSE_IsEnabledDiv2>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <HAL_RCC_GetSysClockFreq+0xd0>)
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e03a      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <HAL_RCC_GetSysClockFreq+0xd4>)
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e037      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056a8:	f7ff fa68 	bl	8004b7c <LL_RCC_PLL_GetMainSource>
 80056ac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d003      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x64>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x6a>
 80056ba:	e00d      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80056bc:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056be:	60bb      	str	r3, [r7, #8]
        break;
 80056c0:	e015      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056c2:	f7fe ff37 	bl	8004534 <LL_RCC_HSE_IsEnabledDiv2>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d102      	bne.n	80056d2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056ce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056d0:	e00d      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056d2:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_RCC_GetSysClockFreq+0xd4>)
 80056d4:	60bb      	str	r3, [r7, #8]
        break;
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056d8:	f7ff f8ff 	bl	80048da <LL_RCC_MSI_GetRange>
 80056dc:	4603      	mov	r3, r0
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ea:	60bb      	str	r3, [r7, #8]
        break;
 80056ec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80056ee:	f7ff fa20 	bl	8004b32 <LL_RCC_PLL_GetN>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	fb03 f402 	mul.w	r4, r3, r2
 80056fa:	f7ff fa33 	bl	8004b64 <LL_RCC_PLL_GetDivider>
 80056fe:	4603      	mov	r3, r0
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	3301      	adds	r3, #1
 8005704:	fbb4 f4f3 	udiv	r4, r4, r3
 8005708:	f7ff fa20 	bl	8004b4c <LL_RCC_PLL_GetR>
 800570c:	4603      	mov	r3, r0
 800570e:	0f5b      	lsrs	r3, r3, #29
 8005710:	3301      	adds	r3, #1
 8005712:	fbb4 f3f3 	udiv	r3, r4, r3
 8005716:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	bd90      	pop	{r4, r7, pc}
 8005722:	bf00      	nop
 8005724:	0800f350 	.word	0x0800f350
 8005728:	00f42400 	.word	0x00f42400
 800572c:	01e84800 	.word	0x01e84800

08005730 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b598      	push	{r3, r4, r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005734:	f7ff ff90 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8005738:	4604      	mov	r4, r0
 800573a:	f7ff f981 	bl	8004a40 <LL_RCC_GetAHBPrescaler>
 800573e:	4603      	mov	r3, r0
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	4a03      	ldr	r2, [pc, #12]	; (8005754 <HAL_RCC_GetHCLKFreq+0x24>)
 8005748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd98      	pop	{r3, r4, r7, pc}
 8005754:	0800f2f0 	.word	0x0800f2f0

08005758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005758:	b598      	push	{r3, r4, r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800575c:	f7ff ffe8 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005760:	4604      	mov	r4, r0
 8005762:	f7ff f987 	bl	8004a74 <LL_RCC_GetAPB1Prescaler>
 8005766:	4603      	mov	r3, r0
 8005768:	0a1b      	lsrs	r3, r3, #8
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	4a04      	ldr	r2, [pc, #16]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	fa24 f303 	lsr.w	r3, r4, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd98      	pop	{r3, r4, r7, pc}
 8005780:	0800f330 	.word	0x0800f330

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b598      	push	{r3, r4, r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005788:	f7ff ffd2 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 800578c:	4604      	mov	r4, r0
 800578e:	f7ff f97d 	bl	8004a8c <LL_RCC_GetAPB2Prescaler>
 8005792:	4603      	mov	r3, r0
 8005794:	0adb      	lsrs	r3, r3, #11
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd98      	pop	{r3, r4, r7, pc}
 80057ac:	0800f330 	.word	0x0800f330

080057b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2bb0      	cmp	r3, #176	; 0xb0
 80057bc:	d903      	bls.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e007      	b.n	80057d6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80057d6:	f7ff f93f 	bl	8004a58 <LL_RCC_GetAHB4Prescaler>
 80057da:	4603      	mov	r3, r0
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80057e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	0c9c      	lsrs	r4, r3, #18
 80057fa:	f7fe fe8d 	bl	8004518 <HAL_PWREx_GetVoltageRange>
 80057fe:	4603      	mov	r3, r0
 8005800:	4619      	mov	r1, r3
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f80c 	bl	8005820 <RCC_SetFlashLatency>
 8005808:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	bf00      	nop
 8005814:	0800f350 	.word	0x0800f350
 8005818:	0800f2f0 	.word	0x0800f2f0
 800581c:	431bde83 	.word	0x431bde83

08005820 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b093      	sub	sp, #76	; 0x4c
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <RCC_SetFlashLatency+0xe8>)
 800582c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005836:	4a35      	ldr	r2, [pc, #212]	; (800590c <RCC_SetFlashLatency+0xec>)
 8005838:	f107 031c 	add.w	r3, r7, #28
 800583c:	ca07      	ldmia	r2, {r0, r1, r2}
 800583e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005842:	4b33      	ldr	r3, [pc, #204]	; (8005910 <RCC_SetFlashLatency+0xf0>)
 8005844:	f107 040c 	add.w	r4, r7, #12
 8005848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800584a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800584e:	2300      	movs	r3, #0
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005858:	d11a      	bne.n	8005890 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800585a:	2300      	movs	r3, #0
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
 800585e:	e013      	b.n	8005888 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	3348      	adds	r3, #72	; 0x48
 8005866:	443b      	add	r3, r7
 8005868:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	d807      	bhi.n	8005882 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	3348      	adds	r3, #72	; 0x48
 8005878:	443b      	add	r3, r7
 800587a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800587e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005880:	e020      	b.n	80058c4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005884:	3301      	adds	r3, #1
 8005886:	643b      	str	r3, [r7, #64]	; 0x40
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	2b03      	cmp	r3, #3
 800588c:	d9e8      	bls.n	8005860 <RCC_SetFlashLatency+0x40>
 800588e:	e019      	b.n	80058c4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005894:	e013      	b.n	80058be <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	3348      	adds	r3, #72	; 0x48
 800589c:	443b      	add	r3, r7
 800589e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d807      	bhi.n	80058b8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	3348      	adds	r3, #72	; 0x48
 80058ae:	443b      	add	r3, r7
 80058b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80058b6:	e005      	b.n	80058c4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	3301      	adds	r3, #1
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d9e8      	bls.n	8005896 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <RCC_SetFlashLatency+0xf4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 0207 	bic.w	r2, r3, #7
 80058cc:	4911      	ldr	r1, [pc, #68]	; (8005914 <RCC_SetFlashLatency+0xf4>)
 80058ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058d4:	f7fd fc80 	bl	80031d8 <HAL_GetTick>
 80058d8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058da:	e008      	b.n	80058ee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058dc:	f7fd fc7c 	bl	80031d8 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e007      	b.n	80058fe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <RCC_SetFlashLatency+0xf4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d1ef      	bne.n	80058dc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	374c      	adds	r7, #76	; 0x4c
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}
 8005906:	bf00      	nop
 8005908:	0800e130 	.word	0x0800e130
 800590c:	0800e140 	.word	0x0800e140
 8005910:	0800e14c 	.word	0x0800e14c
 8005914:	58004000 	.word	0x58004000

08005918 <LL_RCC_LSE_IsEnabled>:
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <LL_RCC_LSE_IsEnabled+0x18>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <LL_RCC_LSE_IsEnabled+0x1a>
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <LL_RCC_LSE_IsReady>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d101      	bne.n	8005954 <LL_RCC_LSE_IsReady+0x18>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <LL_RCC_LSE_IsReady+0x1a>
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_MSI_EnablePLLMode>:
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800596e:	f043 0304 	orr.w	r3, r3, #4
 8005972:	6013      	str	r3, [r2, #0]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_RCC_SetRFWKPClockSource>:
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_SetSMPSClockSource>:
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f023 0203 	bic.w	r2, r3, #3
 80059bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_SetSMPSPrescaler>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_SetUSARTClockSource>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f023 0203 	bic.w	r2, r3, #3
 8005a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_SetLPUARTClockSource>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <LL_RCC_SetI2CClockSource>:
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_SetLPTIMClockSource>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_SetSAIClockSource>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <LL_RCC_SetRNGClockSource>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <LL_RCC_SetCLK48ClockSource>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_RCC_SetUSBClockSource>:
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffe3 	bl	8005b18 <LL_RCC_SetCLK48ClockSource>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <LL_RCC_SetADCClockSource>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <LL_RCC_SetRTCClockSource>:
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_GetRTCClockSource>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_ForceBackupDomainReset>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_ReleaseBackupDomainReset>:
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_PLLSAI1_Enable>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <LL_RCC_PLLSAI1_Disable>:
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <LL_RCC_PLLSAI1_IsReady>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5e:	d101      	bne.n	8005c64 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c78:	2300      	movs	r3, #0
 8005c7a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d034      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c94:	d021      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005c96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c9a:	d81b      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca0:	d01d      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca6:	d815      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb0:	d110      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cc2:	e00d      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f94d 	bl	8005f68 <RCCEx_PLLSAI1_ConfigNP>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cd2:	e005      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	77fb      	strb	r3, [r7, #31]
        break;
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce0:	7ffb      	ldrb	r3, [r7, #31]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fee8 	bl	8005ac0 <LL_RCC_SetSAIClockSource>
 8005cf0:	e001      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	7ffb      	ldrb	r3, [r7, #31]
 8005cf4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d046      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d02:	f7ff ff56 	bl	8005bb2 <LL_RCC_GetRTCClockSource>
 8005d06:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d03c      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d12:	f7fe fbf1 	bl	80044f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff30 	bl	8005b86 <LL_RCC_SetRTCClockSource>
 8005d26:	e02e      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005d32:	f7ff ff4b 	bl	8005bcc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005d36:	f7ff ff5a 	bl	8005bee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005d52:	f7ff fde1 	bl	8005918 <LL_RCC_LSE_IsEnabled>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d114      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d5c:	f7fd fa3c 	bl	80031d8 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d62:	e00b      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fd fa38 	bl	80031d8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d902      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	77fb      	strb	r3, [r7, #31]
              break;
 8005d7a:	e004      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d7c:	f7ff fdde 	bl	800593c <LL_RCC_LSE_IsReady>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005d86:	7ffb      	ldrb	r3, [r7, #31]
 8005d88:	77bb      	strb	r3, [r7, #30]
 8005d8a:	e001      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
 8005d8e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fe2a 	bl	80059fa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fe35 	bl	8005a26 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fe5d 	bl	8005a8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fe52 	bl	8005a8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fe2a 	bl	8005a52 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fe1f 	bl	8005a52 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d022      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fe8d 	bl	8005b44 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e32:	d107      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e42:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f8e3 	bl	800601e <RCCEx_PLLSAI1_ConfigNQ>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005e62:	7ffb      	ldrb	r3, [r7, #31]
 8005e64:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02b      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e84:	d003      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fe2a 	bl	8005aec <LL_RCC_SetRNGClockSource>
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f7ff fe21 	bl	8005aec <LL_RCC_SetRNGClockSource>
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fe34 	bl	8005b18 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005eb8:	d107      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d022      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fe3d 	bl	8005b5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee8:	d107      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f02:	d10b      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f8e3 	bl	80060d4 <RCCEx_PLLSAI1_ConfigNR>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f12:	7ffb      	ldrb	r3, [r7, #31]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fd26 	bl	800597e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fd45 	bl	80059d2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fd2c 	bl	80059aa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005f52:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005f60:	f7ff fcfe 	bl	8005960 <LL_RCC_MSI_EnablePLLMode>
}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f74:	f7ff fe5b 	bl	8005c2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f78:	f7fd f92e 	bl	80031d8 <HAL_GetTick>
 8005f7c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f7e:	e009      	b.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f80:	f7fd f92a 	bl	80031d8 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d902      	bls.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	73fb      	strb	r3, [r7, #15]
      break;
 8005f92:	e004      	b.n	8005f9e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f94:	f7ff fe5a 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d137      	bne.n	8006014 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fd2:	f7ff fe1d 	bl	8005c10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fd f8ff 	bl	80031d8 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fdc:	e009      	b.n	8005ff2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fde:	f7fd f8fb 	bl	80031d8 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d902      	bls.n	8005ff2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	73fb      	strb	r3, [r7, #15]
        break;
 8005ff0:	e004      	b.n	8005ffc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff2:	f7ff fe2b 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d1f0      	bne.n	8005fde <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800602a:	f7ff fe00 	bl	8005c2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800602e:	f7fd f8d3 	bl	80031d8 <HAL_GetTick>
 8006032:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006034:	e009      	b.n	800604a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006036:	f7fd f8cf 	bl	80031d8 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d902      	bls.n	800604a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	73fb      	strb	r3, [r7, #15]
      break;
 8006048:	e004      	b.n	8006054 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800604a:	f7ff fdff 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d137      	bne.n	80060ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006084:	4313      	orrs	r3, r2
 8006086:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006088:	f7ff fdc2 	bl	8005c10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608c:	f7fd f8a4 	bl	80031d8 <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006092:	e009      	b.n	80060a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006094:	f7fd f8a0 	bl	80031d8 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d902      	bls.n	80060a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	73fb      	strb	r3, [r7, #15]
        break;
 80060a6:	e004      	b.n	80060b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060a8:	f7ff fdd0 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d1f0      	bne.n	8006094 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d108      	bne.n	80060ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c6:	4313      	orrs	r3, r2
 80060c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060e0:	f7ff fda5 	bl	8005c2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060e4:	f7fd f878 	bl	80031d8 <HAL_GetTick>
 80060e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060ea:	e009      	b.n	8006100 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ec:	f7fd f874 	bl	80031d8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d902      	bls.n	8006100 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	e004      	b.n	800610a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006100:	f7ff fda4 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d137      	bne.n	8006180 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006124:	4313      	orrs	r3, r2
 8006126:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800613a:	4313      	orrs	r3, r2
 800613c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800613e:	f7ff fd67 	bl	8005c10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006142:	f7fd f849 	bl	80031d8 <HAL_GetTick>
 8006146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006148:	e009      	b.n	800615e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800614a:	f7fd f845 	bl	80031d8 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d902      	bls.n	800615e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	73fb      	strb	r3, [r7, #15]
        break;
 800615c:	e004      	b.n	8006168 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800615e:	f7ff fd75 	bl	8005c4c <LL_RCC_PLLSAI1_IsReady>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d1f0      	bne.n	800614a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e090      	b.n	80062be <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fc fcdb 	bl	8002b6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	22ca      	movs	r2, #202	; 0xca
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2253      	movs	r2, #83	; 0x53
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f89f 	bl	8006312 <RTC_EnterInitMode>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	22ff      	movs	r2, #255	; 0xff
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e067      	b.n	80062be <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006200:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6899      	ldr	r1, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6919      	ldr	r1, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	041a      	lsls	r2, r3, #16
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0203 	bic.w	r2, r2, #3
 800625c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d113      	bne.n	80062ac <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f81e 	bl	80062c6 <HAL_RTC_WaitForSynchro>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2204      	movs	r2, #4
 800629c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e008      	b.n	80062be <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	22ff      	movs	r2, #255	; 0xff
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062dc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062de:	f7fc ff7b 	bl	80031d8 <HAL_GetTick>
 80062e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062e4:	e009      	b.n	80062fa <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062e6:	f7fc ff77 	bl	80031d8 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f4:	d901      	bls.n	80062fa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e007      	b.n	800630a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ee      	beq.n	80062e6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d119      	bne.n	800635c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006332:	f7fc ff51 	bl	80031d8 <HAL_GetTick>
 8006336:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006338:	e009      	b.n	800634e <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800633a:	f7fc ff4d 	bl	80031d8 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006348:	d901      	bls.n	800634e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e007      	b.n	800635e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ee      	beq.n	800633a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800637e:	2302      	movs	r3, #2
 8006380:	e0a8      	b.n	80064d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	22ca      	movs	r2, #202	; 0xca
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2253      	movs	r2, #83	; 0x53
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80063b0:	f7fc ff12 	bl	80031d8 <HAL_GetTick>
 80063b4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80063b6:	e015      	b.n	80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063b8:	f7fc ff0e 	bl	80031d8 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c6:	d90d      	bls.n	80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	22ff      	movs	r2, #255	; 0xff
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2203      	movs	r2, #3
 80063d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e077      	b.n	80064d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e2      	bne.n	80063b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006400:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006412:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006414:	f7fc fee0 	bl	80031d8 <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800641a:	e015      	b.n	8006448 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800641c:	f7fc fedc 	bl	80031d8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800642a:	d90d      	bls.n	8006448 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	22ff      	movs	r2, #255	; 0xff
 8006432:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2203      	movs	r2, #3
 8006438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e045      	b.n	80064d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0e2      	beq.n	800641c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0207 	bic.w	r2, r2, #7
 800646c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a12      	ldr	r2, [pc, #72]	; (80064dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006498:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	22ff      	movs	r2, #255	; 0xff
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	58000800 	.word	0x58000800

080064e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e049      	b.n	8006586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fc fb64 	bl	8002bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 f9cc 	bl	80068bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d001      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e036      	b.n	8006616 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a17      	ldr	r2, [pc, #92]	; (8006624 <HAL_TIM_Base_Start_IT+0x94>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x44>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d115      	bne.n	8006600 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <HAL_TIM_Base_Start_IT+0x98>)
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d015      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x82>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ec:	d011      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	e008      	b.n	8006612 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e000      	b.n	8006614 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40012c00 	.word	0x40012c00
 8006628:	00010007 	.word	0x00010007

0800662c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b02      	cmp	r3, #2
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0202 	mvn.w	r2, #2
 8006658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f905 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8f7 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f908 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0204 	mvn.w	r2, #4
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8db 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8cd 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f8de 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d122      	bne.n	8006730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d11b      	bne.n	8006730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0208 	mvn.w	r2, #8
 8006700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2204      	movs	r2, #4
 8006706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8b1 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8a3 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8b4 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b10      	cmp	r3, #16
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b10      	cmp	r3, #16
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0210 	mvn.w	r2, #16
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2208      	movs	r2, #8
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f887 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f879 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f88a 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0201 	mvn.w	r2, #1
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fa ff56 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d10e      	bne.n	80067dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8de 	bl	8006998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	d10e      	bne.n	800680a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d107      	bne.n	800680a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8d1 	bl	80069ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d10e      	bne.n	8006836 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d107      	bne.n	8006836 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800682e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f838 	bl	80068a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b20      	cmp	r3, #32
 8006842:	d10e      	bne.n	8006862 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b20      	cmp	r3, #32
 8006850:	d107      	bne.n	8006862 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f06f 0220 	mvn.w	r2, #32
 800685a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f891 	bl	8006984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <TIM_Base_SetConfig+0xbc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0x20>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068da:	d108      	bne.n	80068ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <TIM_Base_SetConfig+0xbc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_Base_SetConfig+0x52>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fc:	d007      	beq.n	800690e <TIM_Base_SetConfig+0x52>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <TIM_Base_SetConfig+0xc0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_Base_SetConfig+0x52>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <TIM_Base_SetConfig+0xc4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d108      	bne.n	8006920 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <TIM_Base_SetConfig+0xbc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_Base_SetConfig+0xa0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a0b      	ldr	r2, [pc, #44]	; (800697c <TIM_Base_SetConfig+0xc0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_Base_SetConfig+0xa0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <TIM_Base_SetConfig+0xc4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d103      	bne.n	8006964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	615a      	str	r2, [r3, #20]
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800

08006984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LL_RCC_GetUSARTClockSource>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80069c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4013      	ands	r3, r2
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_RCC_GetLPUARTClockSource>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80069e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4013      	ands	r3, r2
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e042      	b.n	8006a98 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fc f8f1 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fbf6 	bl	8007234 <UART_SetConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e022      	b.n	8006a98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fe10 	bl	8007680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fe97 	bl	80077c4 <UART_CheckIdleState>
 8006a96:	4603      	mov	r3, r0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d17a      	bne.n	8006bae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_UART_Transmit_DMA+0x24>
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e073      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Transmit_DMA+0x36>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e06c      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0x110>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2221      	movs	r2, #33	; 0x21
 8006b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d02c      	beq.n	8006b66 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b10:	4a29      	ldr	r2, [pc, #164]	; (8006bb8 <HAL_UART_Transmit_DMA+0x118>)
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b18:	4a28      	ldr	r2, [pc, #160]	; (8006bbc <HAL_UART_Transmit_DMA+0x11c>)
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b20:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <HAL_UART_Transmit_DMA+0x120>)
 8006b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b28:	2200      	movs	r2, #0
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	4619      	mov	r1, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3328      	adds	r3, #40	; 0x28
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	f7fc fdb0 	bl	80036a4 <HAL_DMA_Start_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e024      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b96:	623a      	str	r2, [r7, #32]
 8006b98:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69f9      	ldr	r1, [r7, #28]
 8006b9c:	6a3a      	ldr	r2, [r7, #32]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08007b39 	.word	0x08007b39
 8006bbc:	08007bd3 	.word	0x08007bd3
 8006bc0:	08007bef 	.word	0x08007bef

08006bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b0ba      	sub	sp, #232	; 0xe8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11b      	bne.n	8006c38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 82d6 	beq.w	80071da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
      }
      return;
 8006c36:	e2d0      	b.n	80071da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 811f 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c46:	4b8b      	ldr	r3, [pc, #556]	; (8006e74 <HAL_UART_IRQHandler+0x2b0>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c52:	4b89      	ldr	r3, [pc, #548]	; (8006e78 <HAL_UART_IRQHandler+0x2b4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8112 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0xc8>
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0xf8>
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb2:	f043 0204 	orr.w	r2, r3, #4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d011      	beq.n	8006cec <HAL_UART_IRQHandler+0x128>
 8006cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce2:	f043 0202 	orr.w	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d017      	beq.n	8006d28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d105      	bne.n	8006d10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d08:	4b5a      	ldr	r3, [pc, #360]	; (8006e74 <HAL_UART_IRQHandler+0x2b0>)
 8006d0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2208      	movs	r2, #8
 8006d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d1e:	f043 0208 	orr.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d012      	beq.n	8006d5a <HAL_UART_IRQHandler+0x196>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d50:	f043 0220 	orr.w	r2, r3, #32
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 823c 	beq.w	80071de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d013      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d105      	bne.n	8006d8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b40      	cmp	r3, #64	; 0x40
 8006db0:	d005      	beq.n	8006dbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d04f      	beq.n	8006e5e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fe54 	bl	8007a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d141      	bne.n	8006e56 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1d9      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d013      	beq.n	8006e4e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2a:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <HAL_UART_IRQHandler+0x2b8>)
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fc fd10 	bl	8003858 <HAL_DMA_Abort_IT>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	e00f      	b.n	8006e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9da 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	e00b      	b.n	8006e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9d6 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	e007      	b.n	8006e6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9d2 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e6c:	e1b7      	b.n	80071de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6e:	bf00      	nop
    return;
 8006e70:	e1b5      	b.n	80071de <HAL_UART_IRQHandler+0x61a>
 8006e72:	bf00      	nop
 8006e74:	10000001 	.word	0x10000001
 8006e78:	04000120 	.word	0x04000120
 8006e7c:	08007c6f 	.word	0x08007c6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 814a 	bne.w	800711e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8143 	beq.w	800711e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 813c 	beq.w	800711e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	f040 80b5 	bne.w	8007028 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8187 	beq.w	80071e2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f080 817f 	bcs.w	80071e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8086 	bne.w	800700c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1da      	bne.n	8006f00 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e1      	bne.n	8006f4a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e3      	bne.n	8006f86 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
 8006fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e4      	bne.n	8006fcc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	4618      	mov	r0, r3
 8007008:	f7fc fbc7 	bl	800379a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007018:	b29b      	uxth	r3, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	b29b      	uxth	r3, r3
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f8fb 	bl	800721c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007026:	e0dc      	b.n	80071e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007034:	b29b      	uxth	r3, r3
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80ce 	beq.w	80071e6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800704a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80c9 	beq.w	80071e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007076:	647b      	str	r3, [r7, #68]	; 0x44
 8007078:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800707c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e4      	bne.n	8007054 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	623b      	str	r3, [r7, #32]
   return(result);
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070b2:	633a      	str	r2, [r7, #48]	; 0x30
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e1      	bne.n	800708a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0310 	bic.w	r3, r3, #16
 80070ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	69b9      	ldr	r1, [r7, #24]
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	617b      	str	r3, [r7, #20]
   return(result);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e4      	bne.n	80070da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f880 	bl	800721c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800711c:	e063      	b.n	80071e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00e      	beq.n	8007148 <HAL_UART_IRQHandler+0x584>
 800712a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800713e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fdd5 	bl	8007cf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007146:	e051      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b00      	cmp	r3, #0
 8007152:	d014      	beq.n	800717e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007170:	2b00      	cmp	r3, #0
 8007172:	d03a      	beq.n	80071ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
    }
    return;
 800717c:	e035      	b.n	80071ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_UART_IRQHandler+0x5da>
 800718a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fd7f 	bl	8007c9a <UART_EndTransmit_IT>
    return;
 800719c:	e026      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_UART_IRQHandler+0x5fa>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fdae 	bl	8007d18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071bc:	e016      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <HAL_UART_IRQHandler+0x628>
 80071ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da0c      	bge.n	80071ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd96 	bl	8007d04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d8:	e008      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
      return;
 80071da:	bf00      	nop
 80071dc:	e006      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
    return;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
      return;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
      return;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_UART_IRQHandler+0x628>
    return;
 80071ea:	bf00      	nop
  }
}
 80071ec:	37e8      	adds	r7, #232	; 0xe8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007238:	b08c      	sub	sp, #48	; 0x30
 800723a:	af00      	add	r7, sp, #0
 800723c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	431a      	orrs	r2, r3
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	4313      	orrs	r3, r2
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4baf      	ldr	r3, [pc, #700]	; (8007520 <UART_SetConfig+0x2ec>)
 8007264:	4013      	ands	r3, r2
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800726c:	430b      	orrs	r3, r1
 800726e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4aa4      	ldr	r2, [pc, #656]	; (8007524 <UART_SetConfig+0x2f0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729c:	4313      	orrs	r3, r2
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	f023 010f 	bic.w	r1, r3, #15
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a95      	ldr	r2, [pc, #596]	; (8007528 <UART_SetConfig+0x2f4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d125      	bne.n	8007324 <UART_SetConfig+0xf0>
 80072d8:	2003      	movs	r0, #3
 80072da:	f7ff fb71 	bl	80069c0 <LL_RCC_GetUSARTClockSource>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d81b      	bhi.n	800731c <UART_SetConfig+0xe8>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <UART_SetConfig+0xb8>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007305 	.word	0x08007305
 80072f8:	08007315 	.word	0x08007315
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e042      	b.n	800738a <UART_SetConfig+0x156>
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730a:	e03e      	b.n	800738a <UART_SetConfig+0x156>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007312:	e03a      	b.n	800738a <UART_SetConfig+0x156>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731a:	e036      	b.n	800738a <UART_SetConfig+0x156>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007322:	e032      	b.n	800738a <UART_SetConfig+0x156>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7e      	ldr	r2, [pc, #504]	; (8007524 <UART_SetConfig+0x2f0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d12a      	bne.n	8007384 <UART_SetConfig+0x150>
 800732e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007332:	f7ff fb55 	bl	80069e0 <LL_RCC_GetLPUARTClockSource>
 8007336:	4603      	mov	r3, r0
 8007338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800733c:	d01a      	beq.n	8007374 <UART_SetConfig+0x140>
 800733e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007342:	d81b      	bhi.n	800737c <UART_SetConfig+0x148>
 8007344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007348:	d00c      	beq.n	8007364 <UART_SetConfig+0x130>
 800734a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734e:	d815      	bhi.n	800737c <UART_SetConfig+0x148>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <UART_SetConfig+0x128>
 8007354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007358:	d008      	beq.n	800736c <UART_SetConfig+0x138>
 800735a:	e00f      	b.n	800737c <UART_SetConfig+0x148>
 800735c:	2300      	movs	r3, #0
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007362:	e012      	b.n	800738a <UART_SetConfig+0x156>
 8007364:	2302      	movs	r3, #2
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736a:	e00e      	b.n	800738a <UART_SetConfig+0x156>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007372:	e00a      	b.n	800738a <UART_SetConfig+0x156>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e006      	b.n	800738a <UART_SetConfig+0x156>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e002      	b.n	800738a <UART_SetConfig+0x156>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a65      	ldr	r2, [pc, #404]	; (8007524 <UART_SetConfig+0x2f0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	f040 8097 	bne.w	80074c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800739a:	2b08      	cmp	r3, #8
 800739c:	d823      	bhi.n	80073e6 <UART_SetConfig+0x1b2>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <UART_SetConfig+0x170>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073e7 	.word	0x080073e7
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073e7 	.word	0x080073e7
 80073b4:	080073d7 	.word	0x080073d7
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	080073df 	.word	0x080073df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c8:	f7fe f9c6 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073ce:	e010      	b.n	80073f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b56      	ldr	r3, [pc, #344]	; (800752c <UART_SetConfig+0x2f8>)
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073d4:	e00d      	b.n	80073f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fe f93f 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 80073da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073e4:	e005      	b.n	80073f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 812a 	beq.w	800764e <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	4a4c      	ldr	r2, [pc, #304]	; (8007530 <UART_SetConfig+0x2fc>)
 8007400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007404:	461a      	mov	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	fbb3 f3f2 	udiv	r3, r3, r2
 800740c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d305      	bcc.n	800742a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007430:	e10d      	b.n	800764e <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	60fa      	str	r2, [r7, #12]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	4a3c      	ldr	r2, [pc, #240]	; (8007530 <UART_SetConfig+0x2fc>)
 8007440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007444:	b29b      	uxth	r3, r3
 8007446:	2200      	movs	r2, #0
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007454:	f7f9 f9d2 	bl	80007fc <__aeabi_uldivmod>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	020b      	lsls	r3, r1, #8
 800746a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800746e:	0202      	lsls	r2, r0, #8
 8007470:	6979      	ldr	r1, [r7, #20]
 8007472:	6849      	ldr	r1, [r1, #4]
 8007474:	0849      	lsrs	r1, r1, #1
 8007476:	2000      	movs	r0, #0
 8007478:	460c      	mov	r4, r1
 800747a:	4605      	mov	r5, r0
 800747c:	eb12 0804 	adds.w	r8, r2, r4
 8007480:	eb43 0905 	adc.w	r9, r3, r5
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	469a      	mov	sl, r3
 800748c:	4693      	mov	fp, r2
 800748e:	4652      	mov	r2, sl
 8007490:	465b      	mov	r3, fp
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f9 f9b1 	bl	80007fc <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4613      	mov	r3, r2
 80074a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a8:	d308      	bcc.n	80074bc <UART_SetConfig+0x288>
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b0:	d204      	bcs.n	80074bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	60da      	str	r2, [r3, #12]
 80074ba:	e0c8      	b.n	800764e <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074c2:	e0c4      	b.n	800764e <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074cc:	d16d      	bne.n	80075aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80074ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b07      	cmp	r3, #7
 80074d6:	d82d      	bhi.n	8007534 <UART_SetConfig+0x300>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x2ac>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007501 	.word	0x08007501
 80074e4:	08007509 	.word	0x08007509
 80074e8:	08007535 	.word	0x08007535
 80074ec:	0800750f 	.word	0x0800750f
 80074f0:	08007535 	.word	0x08007535
 80074f4:	08007535 	.word	0x08007535
 80074f8:	08007535 	.word	0x08007535
 80074fc:	08007517 	.word	0x08007517
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007500:	f7fe f940 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007506:	e01b      	b.n	8007540 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007508:	4b08      	ldr	r3, [pc, #32]	; (800752c <UART_SetConfig+0x2f8>)
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800750c:	e018      	b.n	8007540 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750e:	f7fe f8a3 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8007512:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007514:	e014      	b.n	8007540 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800751c:	e010      	b.n	8007540 <UART_SetConfig+0x30c>
 800751e:	bf00      	nop
 8007520:	cfff69f3 	.word	0xcfff69f3
 8007524:	40008000 	.word	0x40008000
 8007528:	40013800 	.word	0x40013800
 800752c:	00f42400 	.word	0x00f42400
 8007530:	0800f390 	.word	0x0800f390
      default:
        pclk = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800753e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8083 	beq.w	800764e <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	4a4a      	ldr	r2, [pc, #296]	; (8007678 <UART_SetConfig+0x444>)
 800754e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007552:	461a      	mov	r2, r3
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	fbb3 f3f2 	udiv	r3, r3, r2
 800755a:	005a      	lsls	r2, r3, #1
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	441a      	add	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d916      	bls.n	80075a2 <UART_SetConfig+0x36e>
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757a:	d212      	bcs.n	80075a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f023 030f 	bic.w	r3, r3, #15
 8007584:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	b29b      	uxth	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	b29a      	uxth	r2, r3
 8007592:	8bfb      	ldrh	r3, [r7, #30]
 8007594:	4313      	orrs	r3, r2
 8007596:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	8bfa      	ldrh	r2, [r7, #30]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e055      	b.n	800764e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075a8:	e051      	b.n	800764e <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b07      	cmp	r3, #7
 80075b2:	d822      	bhi.n	80075fa <UART_SetConfig+0x3c6>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0x388>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075dd 	.word	0x080075dd
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	080075fb 	.word	0x080075fb
 80075c8:	080075eb 	.word	0x080075eb
 80075cc:	080075fb 	.word	0x080075fb
 80075d0:	080075fb 	.word	0x080075fb
 80075d4:	080075fb 	.word	0x080075fb
 80075d8:	080075f3 	.word	0x080075f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075dc:	f7fe f8d2 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 80075e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075e2:	e010      	b.n	8007606 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <UART_SetConfig+0x448>)
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e8:	e00d      	b.n	8007606 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ea:	f7fe f835 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 80075ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075f0:	e009      	b.n	8007606 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075f8:	e005      	b.n	8007606 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007604:	bf00      	nop
    }

    if (pclk != 0U)
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d020      	beq.n	800764e <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	4a19      	ldr	r2, [pc, #100]	; (8007678 <UART_SetConfig+0x444>)
 8007612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007616:	461a      	mov	r2, r3
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	fbb3 f2f2 	udiv	r2, r3, r2
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	441a      	add	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	fbb2 f3f3 	udiv	r3, r2, r3
 800762e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	2b0f      	cmp	r3, #15
 8007634:	d908      	bls.n	8007648 <UART_SetConfig+0x414>
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763c:	d204      	bcs.n	8007648 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	e002      	b.n	800764e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2201      	movs	r2, #1
 8007652:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2201      	movs	r2, #1
 800765a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2200      	movs	r2, #0
 8007662:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2200      	movs	r2, #0
 8007668:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800766a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800766e:	4618      	mov	r0, r3
 8007670:	3730      	adds	r7, #48	; 0x30
 8007672:	46bd      	mov	sp, r7
 8007674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007678:	0800f390 	.word	0x0800f390
 800767c:	00f42400 	.word	0x00f42400

08007680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00a      	beq.n	8007732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01a      	beq.n	8007796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800777e:	d10a      	bne.n	8007796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077d4:	f7fb fd00 	bl	80031d8 <HAL_GetTick>
 80077d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d10e      	bne.n	8007806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f82f 	bl	800785a <UART_WaitOnFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e025      	b.n	8007852 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b04      	cmp	r3, #4
 8007812:	d10e      	bne.n	8007832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f819 	bl	800785a <UART_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e00f      	b.n	8007852 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b09c      	sub	sp, #112	; 0x70
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786a:	e0a9      	b.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	f000 80a5 	beq.w	80079c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fb fcaf 	bl	80031d8 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <UART_WaitOnFlagUntilTimeout+0x32>
 8007886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007888:	2b00      	cmp	r3, #0
 800788a:	d140      	bne.n	800790e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800789a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078a0:	667b      	str	r3, [r7, #100]	; 0x64
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078de:	64ba      	str	r2, [r7, #72]	; 0x48
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e069      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d051      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792a:	d149      	bne.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800794a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	461a      	mov	r2, r3
 8007952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800795a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e6      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3308      	adds	r3, #8
 800796e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	613b      	str	r3, [r7, #16]
   return(result);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007988:	623a      	str	r2, [r7, #32]
 800798a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	69f9      	ldr	r1, [r7, #28]
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	61bb      	str	r3, [r7, #24]
   return(result);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e010      	b.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	f43f af46 	beq.w	800786c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3770      	adds	r7, #112	; 0x70
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b08f      	sub	sp, #60	; 0x3c
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a12:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e6      	bne.n	80079f2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a44:	61ba      	str	r2, [r7, #24]
 8007a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007a60:	bf00      	nop
 8007a62:	373c      	adds	r7, #60	; 0x3c
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b095      	sub	sp, #84	; 0x54
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
 8007a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e3      	bne.n	8007aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d118      	bne.n	8007b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f023 0310 	bic.w	r3, r3, #16
 8007afa:	647b      	str	r3, [r7, #68]	; 0x44
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6979      	ldr	r1, [r7, #20]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	613b      	str	r3, [r7, #16]
   return(result);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e6      	bne.n	8007ae6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007b2c:	bf00      	nop
 8007b2e:	3754      	adds	r7, #84	; 0x54
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b090      	sub	sp, #64	; 0x40
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d137      	bne.n	8007bc4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e5      	bne.n	8007b5c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	69b9      	ldr	r1, [r7, #24]
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	617b      	str	r3, [r7, #20]
   return(result);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e6      	bne.n	8007b90 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bc2:	e002      	b.n	8007bca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bc6:	f7fa fbd1 	bl	800236c <HAL_UART_TxCpltCallback>
}
 8007bca:	bf00      	nop
 8007bcc:	3740      	adds	r7, #64	; 0x40
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fb07 	bl	80071f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	2b80      	cmp	r3, #128	; 0x80
 8007c18:	d109      	bne.n	8007c2e <UART_DMAError+0x40>
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b21      	cmp	r3, #33	; 0x21
 8007c1e:	d106      	bne.n	8007c2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007c28:	6978      	ldr	r0, [r7, #20]
 8007c2a:	f7ff fede 	bl	80079ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	d109      	bne.n	8007c50 <UART_DMAError+0x62>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b22      	cmp	r3, #34	; 0x22
 8007c40:	d106      	bne.n	8007c50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007c4a:	6978      	ldr	r0, [r7, #20]
 8007c4c:	f7ff ff0e 	bl	8007a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c56:	f043 0210 	orr.w	r2, r3, #16
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c60:	6978      	ldr	r0, [r7, #20]
 8007c62:	f7ff fad1 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c66:	bf00      	nop
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fabb 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c92:	bf00      	nop
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb6:	61fb      	str	r3, [r7, #28]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fb42 	bl	800236c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce8:	bf00      	nop
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e027      	b.n	8007d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2224      	movs	r2, #36	; 0x24
 8007d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0201 	bic.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e02d      	b.n	8007e12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2224      	movs	r2, #36	; 0x24
 8007dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f850 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e02d      	b.n	8007e8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2224      	movs	r2, #36	; 0x24
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f812 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eb8:	e031      	b.n	8007f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eba:	2308      	movs	r3, #8
 8007ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ebe:	2308      	movs	r3, #8
 8007ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	0e5b      	lsrs	r3, r3, #25
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	0f5b      	lsrs	r3, r3, #29
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	7b3a      	ldrb	r2, [r7, #12]
 8007ee6:	4911      	ldr	r1, [pc, #68]	; (8007f2c <UARTEx_SetNbDataToProcess+0x94>)
 8007ee8:	5c8a      	ldrb	r2, [r1, r2]
 8007eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eee:	7b3a      	ldrb	r2, [r7, #12]
 8007ef0:	490f      	ldr	r1, [pc, #60]	; (8007f30 <UARTEx_SetNbDataToProcess+0x98>)
 8007ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	7b7a      	ldrb	r2, [r7, #13]
 8007f04:	4909      	ldr	r1, [pc, #36]	; (8007f2c <UARTEx_SetNbDataToProcess+0x94>)
 8007f06:	5c8a      	ldrb	r2, [r1, r2]
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	4908      	ldr	r1, [pc, #32]	; (8007f30 <UARTEx_SetNbDataToProcess+0x98>)
 8007f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	0800f3a8 	.word	0x0800f3a8
 8007f30:	0800f3b0 	.word	0x0800f3b0

08007f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007f40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4013      	ands	r3, r2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	f107 0014 	add.w	r0, r7, #20
 8007f78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	b004      	add	sp, #16
 8007faa:	4770      	bx	lr

08007fac <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	2218      	movs	r2, #24
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 f8d8 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fc4:	233f      	movs	r3, #63	; 0x3f
 8007fc6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007fc8:	2381      	movs	r3, #129	; 0x81
 8007fca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007fcc:	1dfb      	adds	r3, r7, #7
 8007fce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 fb54 	bl	8009688 <hci_send_req>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da01      	bge.n	8007fea <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007fe6:	23ff      	movs	r3, #255	; 0xff
 8007fe8:	e000      	b.n	8007fec <aci_gap_set_non_discoverable+0x40>
  return status;
 8007fea:	79fb      	ldrb	r3, [r7, #7]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3720      	adds	r7, #32
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007ff4:	b5b0      	push	{r4, r5, r7, lr}
 8007ff6:	b0ce      	sub	sp, #312	; 0x138
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008006:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800800a:	462a      	mov	r2, r5
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008012:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008016:	4622      	mov	r2, r4
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800801e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008022:	4602      	mov	r2, r0
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800802a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800802e:	460a      	mov	r2, r1
 8008030:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008032:	f107 0310 	add.w	r3, r7, #16
 8008036:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800803a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800803e:	3308      	adds	r3, #8
 8008040:	f107 0210 	add.w	r2, r7, #16
 8008044:	4413      	add	r3, r2
 8008046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800804a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800804e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008052:	4413      	add	r3, r2
 8008054:	3309      	adds	r3, #9
 8008056:	f107 0210 	add.w	r2, r7, #16
 800805a:	4413      	add	r3, r2
 800805c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008060:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008064:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008072:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008076:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800807a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008086:	3301      	adds	r3, #1
 8008088:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800808c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008090:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008094:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008098:	8812      	ldrh	r2, [r2, #0]
 800809a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800809e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a2:	3302      	adds	r3, #2
 80080a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80080a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80080b0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80080b4:	8812      	ldrh	r2, [r2, #0]
 80080b6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80080ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080be:	3302      	adds	r3, #2
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80080c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80080cc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80080d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080d8:	3301      	adds	r3, #1
 80080da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80080de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080e2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80080e6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80080e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080ec:	3301      	adds	r3, #1
 80080ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80080f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80080f6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80080fa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80080fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008100:	3301      	adds	r3, #1
 8008102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008106:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800810a:	3308      	adds	r3, #8
 800810c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008110:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f81d 	bl	8009154 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800811a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800811e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008122:	4413      	add	r3, r2
 8008124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800812c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008130:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008136:	3301      	adds	r3, #1
 8008138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800813c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008140:	3301      	adds	r3, #1
 8008142:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008146:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800814a:	4618      	mov	r0, r3
 800814c:	f001 f802 	bl	8009154 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008150:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008154:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008158:	4413      	add	r3, r2
 800815a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008166:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800816c:	3302      	adds	r3, #2
 800816e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008176:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800817a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800817c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008180:	3302      	adds	r3, #2
 8008182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008186:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800818a:	2218      	movs	r2, #24
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f000 fff0 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008194:	233f      	movs	r3, #63	; 0x3f
 8008196:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800819a:	2383      	movs	r3, #131	; 0x83
 800819c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081a0:	f107 0310 	add.w	r3, r7, #16
 80081a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081b0:	f107 030f 	add.w	r3, r7, #15
 80081b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fa5f 	bl	8009688 <hci_send_req>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da01      	bge.n	80081d4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80081d0:	23ff      	movs	r3, #255	; 0xff
 80081d2:	e004      	b.n	80081de <aci_gap_set_discoverable+0x1ea>
  return status;
 80081d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80081dc:	781b      	ldrb	r3, [r3, #0]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bdb0      	pop	{r4, r5, r7, pc}

080081e8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b0cc      	sub	sp, #304	; 0x130
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4602      	mov	r2, r0
 80081f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80081f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008206:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800821c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008228:	3301      	adds	r3, #1
 800822a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800822e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008232:	2218      	movs	r2, #24
 8008234:	2100      	movs	r1, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f000 ff9c 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800823c:	233f      	movs	r3, #63	; 0x3f
 800823e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008242:	2385      	movs	r3, #133	; 0x85
 8008244:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008248:	f107 0310 	add.w	r3, r7, #16
 800824c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008254:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008258:	f107 030f 	add.w	r3, r7, #15
 800825c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008260:	2301      	movs	r3, #1
 8008262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa0b 	bl	8009688 <hci_send_req>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	da01      	bge.n	800827c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008278:	23ff      	movs	r3, #255	; 0xff
 800827a:	e004      	b.n	8008286 <aci_gap_set_io_capability+0x9e>
  return status;
 800827c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008280:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008284:	781b      	ldrb	r3, [r3, #0]
}
 8008286:	4618      	mov	r0, r3
 8008288:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b0cc      	sub	sp, #304	; 0x130
 8008294:	af00      	add	r7, sp, #0
 8008296:	4605      	mov	r5, r0
 8008298:	460c      	mov	r4, r1
 800829a:	4610      	mov	r0, r2
 800829c:	4619      	mov	r1, r3
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80082a6:	462a      	mov	r2, r5
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80082b2:	4622      	mov	r2, r4
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ba:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80082be:	4602      	mov	r2, r0
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ca:	460a      	mov	r2, r1
 80082cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80082e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082f0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80082f4:	7812      	ldrb	r2, [r2, #0]
 80082f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80082f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008306:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800830a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008316:	3301      	adds	r3, #1
 8008318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800831c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008324:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800832c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008330:	3301      	adds	r3, #1
 8008332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800833e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800834a:	3301      	adds	r3, #1
 800834c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008354:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008358:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800835a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800835e:	3301      	adds	r3, #1
 8008360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008368:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800836c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800836e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008372:	3301      	adds	r3, #1
 8008374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008380:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008386:	3301      	adds	r3, #1
 8008388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800838c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008390:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008394:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839c:	3304      	adds	r3, #4
 800839e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80083a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80083aa:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80083ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b0:	3301      	adds	r3, #1
 80083b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083ba:	2218      	movs	r2, #24
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fed8 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083c4:	233f      	movs	r3, #63	; 0x3f
 80083c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80083ca:	2386      	movs	r3, #134	; 0x86
 80083cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80083d0:	f107 0310 	add.w	r3, r7, #16
 80083d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80083d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80083e0:	f107 030f 	add.w	r3, r7, #15
 80083e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 f947 	bl	8009688 <hci_send_req>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da01      	bge.n	8008404 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008400:	23ff      	movs	r3, #255	; 0xff
 8008402:	e004      	b.n	800840e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800840c:	781b      	ldrb	r3, [r3, #0]
}
 800840e:	4618      	mov	r0, r3
 8008410:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008414:	46bd      	mov	sp, r7
 8008416:	bdb0      	pop	{r4, r5, r7, pc}

08008418 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b0cc      	sub	sp, #304	; 0x130
 800841c:	af00      	add	r7, sp, #0
 800841e:	4602      	mov	r2, r0
 8008420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008428:	6019      	str	r1, [r3, #0]
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008432:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008434:	f107 0310 	add.w	r3, r7, #16
 8008438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800844e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008452:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008456:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800845a:	8812      	ldrh	r2, [r2, #0]
 800845c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800845e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008462:	3302      	adds	r3, #2
 8008464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008470:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800847a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800847e:	3304      	adds	r3, #4
 8008480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008488:	2218      	movs	r2, #24
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fe71 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008492:	233f      	movs	r3, #63	; 0x3f
 8008494:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008498:	2388      	movs	r3, #136	; 0x88
 800849a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800849e:	f107 0310 	add.w	r3, r7, #16
 80084a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084ae:	f107 030f 	add.w	r3, r7, #15
 80084b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 f8e0 	bl	8009688 <hci_send_req>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da01      	bge.n	80084d2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80084ce:	23ff      	movs	r3, #255	; 0xff
 80084d0:	e004      	b.n	80084dc <aci_gap_pass_key_resp+0xc4>
  return status;
 80084d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084da:	781b      	ldrb	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80084e6:	b590      	push	{r4, r7, lr}
 80084e8:	b0cd      	sub	sp, #308	; 0x134
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	4611      	mov	r1, r2
 80084f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084f6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008500:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008504:	4622      	mov	r2, r4
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008510:	4602      	mov	r2, r0
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008518:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800851c:	460a      	mov	r2, r1
 800851e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	2207      	movs	r2, #7
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fe1f 	bl	8009174 <Osal_MemSet>
  int index_input = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800853c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008540:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008544:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008548:	7812      	ldrb	r2, [r2, #0]
 800854a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800854c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008550:	3301      	adds	r3, #1
 8008552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800855e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800856a:	3301      	adds	r3, #1
 800856c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008574:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008578:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800857c:	7812      	ldrb	r2, [r2, #0]
 800857e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008580:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008584:	3301      	adds	r3, #1
 8008586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800858a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800858e:	2218      	movs	r2, #24
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fdee 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008598:	233f      	movs	r3, #63	; 0x3f
 800859a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800859e:	238a      	movs	r3, #138	; 0x8a
 80085a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085a4:	f107 0310 	add.w	r3, r7, #16
 80085a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80085bc:	2307      	movs	r3, #7
 80085be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 f85d 	bl	8009688 <hci_send_req>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da01      	bge.n	80085d8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80085d4:	23ff      	movs	r3, #255	; 0xff
 80085d6:	e02e      	b.n	8008636 <aci_gap_init+0x150>
  if ( resp.Status )
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <aci_gap_init+0x10c>
    return resp.Status;
 80085e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	e021      	b.n	8008636 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80085f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80085fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800860c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008610:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008614:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008618:	b29a      	uxth	r2, r3
 800861a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800861e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008624:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008628:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800862c:	b29a      	uxth	r2, r3
 800862e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008632:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b0cc      	sub	sp, #304	; 0x130
 8008644:	af00      	add	r7, sp, #0
 8008646:	4602      	mov	r2, r0
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008650:	6019      	str	r1, [r3, #0]
 8008652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008656:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800865a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800865c:	f107 0310 	add.w	r3, r7, #16
 8008660:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008668:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800867e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008682:	7812      	ldrb	r2, [r2, #0]
 8008684:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800868a:	3301      	adds	r3, #1
 800868c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008694:	1c58      	adds	r0, r3, #1
 8008696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a8:	6819      	ldr	r1, [r3, #0]
 80086aa:	f000 fd53 	bl	8009154 <Osal_MemCpy>
  index_input += AdvDataLen;
 80086ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80086bc:	4413      	add	r3, r2
 80086be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086c6:	2218      	movs	r2, #24
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fd52 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086d0:	233f      	movs	r3, #63	; 0x3f
 80086d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80086d6:	238e      	movs	r3, #142	; 0x8e
 80086d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086dc:	f107 0310 	add.w	r3, r7, #16
 80086e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086ec:	f107 030f 	add.w	r3, r7, #15
 80086f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ffc1 	bl	8009688 <hci_send_req>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	da01      	bge.n	8008710 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800870c:	23ff      	movs	r3, #255	; 0xff
 800870e:	e004      	b.n	800871a <aci_gap_update_adv_data+0xda>
  return status;
 8008710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008714:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008718:	781b      	ldrb	r3, [r3, #0]
}
 800871a:	4618      	mov	r0, r3
 800871c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	2218      	movs	r2, #24
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fd1c 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 800873c:	233f      	movs	r3, #63	; 0x3f
 800873e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008740:	2392      	movs	r3, #146	; 0x92
 8008742:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008744:	1dfb      	adds	r3, r7, #7
 8008746:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008748:	2301      	movs	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f000 ff98 	bl	8009688 <hci_send_req>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	da01      	bge.n	8008762 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800875e:	23ff      	movs	r3, #255	; 0xff
 8008760:	e000      	b.n	8008764 <aci_gap_configure_whitelist+0x40>
  return status;
 8008762:	79fb      	ldrb	r3, [r7, #7]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b0cc      	sub	sp, #304	; 0x130
 8008770:	af00      	add	r7, sp, #0
 8008772:	4602      	mov	r2, r0
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008782:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008786:	460a      	mov	r2, r1
 8008788:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800878a:	f107 0310 	add.w	r3, r7, #16
 800878e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087b0:	8812      	ldrh	r2, [r2, #0]
 80087b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087b8:	3302      	adds	r3, #2
 80087ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80087be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087c6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80087ca:	7812      	ldrb	r2, [r2, #0]
 80087cc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80087ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d2:	3301      	adds	r3, #1
 80087d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087dc:	2218      	movs	r2, #24
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fcc7 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087e6:	233f      	movs	r3, #63	; 0x3f
 80087e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80087ec:	23a5      	movs	r3, #165	; 0xa5
 80087ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087f2:	f107 0310 	add.w	r3, r7, #16
 80087f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008802:	f107 030f 	add.w	r3, r7, #15
 8008806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800880a:	2301      	movs	r3, #1
 800880c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f000 ff36 	bl	8009688 <hci_send_req>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	da01      	bge.n	8008826 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008822:	23ff      	movs	r3, #255	; 0xff
 8008824:	e004      	b.n	8008830 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800882e:	781b      	ldrb	r3, [r3, #0]
}
 8008830:	4618      	mov	r0, r3
 8008832:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008844:	f107 0308 	add.w	r3, r7, #8
 8008848:	2218      	movs	r2, #24
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fc91 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008852:	233f      	movs	r3, #63	; 0x3f
 8008854:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008856:	f240 1301 	movw	r3, #257	; 0x101
 800885a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800885c:	1dfb      	adds	r3, r7, #7
 800885e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008860:	2301      	movs	r3, #1
 8008862:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008864:	f107 0308 	add.w	r3, r7, #8
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f000 ff0c 	bl	8009688 <hci_send_req>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	da01      	bge.n	800887a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008876:	23ff      	movs	r3, #255	; 0xff
 8008878:	e000      	b.n	800887c <aci_gatt_init+0x42>
  return status;
 800887a:	79fb      	ldrb	r3, [r7, #7]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b0cf      	sub	sp, #316	; 0x13c
 8008888:	af00      	add	r7, sp, #0
 800888a:	4604      	mov	r4, r0
 800888c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008890:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008894:	6001      	str	r1, [r0, #0]
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800889e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80088a2:	4622      	mov	r2, r4
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088aa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80088ae:	4602      	mov	r2, r0
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088b6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80088ba:	460a      	mov	r2, r1
 80088bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80088be:	f107 0310 	add.w	r3, r7, #16
 80088c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80088c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088ca:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d00a      	beq.n	80088ea <aci_gatt_add_service+0x66>
 80088d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088d8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d101      	bne.n	80088e6 <aci_gatt_add_service+0x62>
 80088e2:	2311      	movs	r3, #17
 80088e4:	e002      	b.n	80088ec <aci_gatt_add_service+0x68>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <aci_gatt_add_service+0x68>
 80088ea:	2303      	movs	r3, #3
 80088ec:	f107 0210 	add.w	r2, r7, #16
 80088f0:	4413      	add	r3, r2
 80088f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	2203      	movs	r2, #3
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fc38 	bl	8009174 <Osal_MemSet>
  int index_input = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800890a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800890e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008912:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008916:	7812      	ldrb	r2, [r2, #0]
 8008918:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800891a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800891e:	3301      	adds	r3, #1
 8008920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008924:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008928:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d002      	beq.n	8008938 <aci_gatt_add_service+0xb4>
 8008932:	2b02      	cmp	r3, #2
 8008934:	d004      	beq.n	8008940 <aci_gatt_add_service+0xbc>
 8008936:	e007      	b.n	8008948 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008938:	2302      	movs	r3, #2
 800893a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800893e:	e005      	b.n	800894c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008940:	2310      	movs	r3, #16
 8008942:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008946:	e001      	b.n	800894c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008948:	2397      	movs	r3, #151	; 0x97
 800894a:	e06c      	b.n	8008a26 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800894c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008950:	1c58      	adds	r0, r3, #1
 8008952:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008956:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800895a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800895e:	6819      	ldr	r1, [r3, #0]
 8008960:	f000 fbf8 	bl	8009154 <Osal_MemCpy>
    index_input += size;
 8008964:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008968:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800896c:	4413      	add	r3, r2
 800896e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008976:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800897a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008982:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008986:	3301      	adds	r3, #1
 8008988:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800898c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008990:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008994:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008998:	7812      	ldrb	r2, [r2, #0]
 800899a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800899c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089a0:	3301      	adds	r3, #1
 80089a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089aa:	2218      	movs	r2, #24
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fbe0 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089b4:	233f      	movs	r3, #63	; 0x3f
 80089b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80089ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 80089be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089c2:	f107 0310 	add.w	r3, r7, #16
 80089c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80089d2:	f107 030c 	add.w	r3, r7, #12
 80089d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80089da:	2303      	movs	r3, #3
 80089dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089e4:	2100      	movs	r1, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fe4e 	bl	8009688 <hci_send_req>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da01      	bge.n	80089f6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80089f2:	23ff      	movs	r3, #255	; 0xff
 80089f4:	e017      	b.n	8008a26 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80089f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	e00a      	b.n	8008a26 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008a10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a18:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008a22:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd90      	pop	{r4, r7, pc}

08008a30 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b0d1      	sub	sp, #324	; 0x144
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008a3e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008a42:	600a      	str	r2, [r1, #0]
 8008a44:	4619      	mov	r1, r3
 8008a46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a4a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008a4e:	4622      	mov	r2, r4
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a56:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a62:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008a66:	460a      	mov	r2, r1
 8008a68:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008a6a:	f107 0318 	add.w	r3, r7, #24
 8008a6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008a72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a76:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d00a      	beq.n	8008a96 <aci_gatt_add_char+0x66>
 8008a80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008a84:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d101      	bne.n	8008a92 <aci_gatt_add_char+0x62>
 8008a8e:	2313      	movs	r3, #19
 8008a90:	e002      	b.n	8008a98 <aci_gatt_add_char+0x68>
 8008a92:	2303      	movs	r3, #3
 8008a94:	e000      	b.n	8008a98 <aci_gatt_add_char+0x68>
 8008a96:	2305      	movs	r3, #5
 8008a98:	f107 0218 	add.w	r2, r7, #24
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008aa2:	f107 0314 	add.w	r3, r7, #20
 8008aa6:	2203      	movs	r2, #3
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fb62 	bl	8009174 <Osal_MemSet>
  int index_input = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008ab6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008aba:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008abe:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008aca:	3302      	adds	r3, #2
 8008acc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008ad0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008ad4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008ad8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008aea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008aee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d002      	beq.n	8008afe <aci_gatt_add_char+0xce>
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d004      	beq.n	8008b06 <aci_gatt_add_char+0xd6>
 8008afc:	e007      	b.n	8008b0e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008afe:	2302      	movs	r3, #2
 8008b00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008b04:	e005      	b.n	8008b12 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008b06:	2310      	movs	r3, #16
 8008b08:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008b0c:	e001      	b.n	8008b12 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008b0e:	2397      	movs	r3, #151	; 0x97
 8008b10:	e091      	b.n	8008c36 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008b12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008b16:	1cd8      	adds	r0, r3, #3
 8008b18:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008b1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008b20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008b24:	6819      	ldr	r1, [r3, #0]
 8008b26:	f000 fb15 	bl	8009154 <Osal_MemCpy>
    index_input += size;
 8008b2a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008b2e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008b32:	4413      	add	r3, r2
 8008b34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008b38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b3c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008b40:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008b44:	8812      	ldrh	r2, [r2, #0]
 8008b46:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b4c:	3302      	adds	r3, #2
 8008b4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b56:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008b5a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008b5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b60:	3301      	adds	r3, #1
 8008b62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008b66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b6a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b6e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008b70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b74:	3301      	adds	r3, #1
 8008b76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b7e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008b82:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008b84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b88:	3301      	adds	r3, #1
 8008b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008b8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b92:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008b96:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008b98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008ba2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ba6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008baa:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008bba:	2218      	movs	r2, #24
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fad8 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bc4:	233f      	movs	r3, #63	; 0x3f
 8008bc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008bca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008bce:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008bd2:	f107 0318 	add.w	r3, r7, #24
 8008bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008bea:	2303      	movs	r3, #3
 8008bec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fd46 	bl	8009688 <hci_send_req>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da01      	bge.n	8008c06 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008c02:	23ff      	movs	r3, #255	; 0xff
 8008c04:	e017      	b.n	8008c36 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008c06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008c14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	e00a      	b.n	8008c36 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008c20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008c32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd90      	pop	{r4, r7, pc}

08008c40 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008c40:	b5b0      	push	{r4, r5, r7, lr}
 8008c42:	b0cc      	sub	sp, #304	; 0x130
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4605      	mov	r5, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c52:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008c56:	462a      	mov	r2, r5
 8008c58:	801a      	strh	r2, [r3, #0]
 8008c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c62:	4622      	mov	r2, r4
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008c6e:	4602      	mov	r2, r0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c76:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008c7a:	460a      	mov	r2, r1
 8008c7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008c7e:	f107 0310 	add.w	r3, r7, #16
 8008c82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ca0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ca4:	8812      	ldrh	r2, [r2, #0]
 8008ca6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cac:	3302      	adds	r3, #2
 8008cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008cbe:	8812      	ldrh	r2, [r2, #0]
 8008cc0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cd4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008cd8:	7812      	ldrb	r2, [r2, #0]
 8008cda:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cee:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d04:	1d98      	adds	r0, r3, #6
 8008d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008d16:	f000 fa1d 	bl	8009154 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d28:	4413      	add	r3, r2
 8008d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d32:	2218      	movs	r2, #24
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fa1c 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d3c:	233f      	movs	r3, #63	; 0x3f
 8008d3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008d42:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008d46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d4a:	f107 0310 	add.w	r3, r7, #16
 8008d4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d5a:	f107 030f 	add.w	r3, r7, #15
 8008d5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fc8a 	bl	8009688 <hci_send_req>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da01      	bge.n	8008d7e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008d7a:	23ff      	movs	r3, #255	; 0xff
 8008d7c:	e004      	b.n	8008d88 <aci_gatt_update_char_value+0x148>
  return status;
 8008d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d86:	781b      	ldrb	r3, [r3, #0]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bdb0      	pop	{r4, r5, r7, pc}

08008d92 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b0cc      	sub	sp, #304	; 0x130
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008daa:	4602      	mov	r2, r0
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008db6:	460a      	mov	r2, r1
 8008db8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008dba:	f107 0310 	add.w	r3, r7, #16
 8008dbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ddc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008de0:	7812      	ldrb	r2, [r2, #0]
 8008de2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008de8:	3301      	adds	r3, #1
 8008dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008df6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008dfa:	7812      	ldrb	r2, [r2, #0]
 8008dfc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e02:	3301      	adds	r3, #1
 8008e04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0c:	1c98      	adds	r0, r3, #2
 8008e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e20:	6819      	ldr	r1, [r3, #0]
 8008e22:	f000 f997 	bl	8009154 <Osal_MemCpy>
  index_input += Length;
 8008e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e34:	4413      	add	r3, r2
 8008e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e3e:	2218      	movs	r2, #24
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f996 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e48:	233f      	movs	r3, #63	; 0x3f
 8008e4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008e4e:	230c      	movs	r3, #12
 8008e50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e54:	f107 0310 	add.w	r3, r7, #16
 8008e58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e64:	f107 030f 	add.w	r3, r7, #15
 8008e68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 fc05 	bl	8009688 <hci_send_req>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da01      	bge.n	8008e88 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008e84:	23ff      	movs	r3, #255	; 0xff
 8008e86:	e004      	b.n	8008e92 <aci_hal_write_config_data+0x100>
  return status;
 8008e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e90:	781b      	ldrb	r3, [r3, #0]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b0cc      	sub	sp, #304	; 0x130
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008eba:	f107 0310 	add.w	r3, r7, #16
 8008ebe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008edc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008ee0:	7812      	ldrb	r2, [r2, #0]
 8008ee2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ef6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f02:	3301      	adds	r3, #1
 8008f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f0c:	2218      	movs	r2, #24
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 f92f 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f16:	233f      	movs	r3, #63	; 0x3f
 8008f18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008f1c:	230f      	movs	r3, #15
 8008f1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f32:	f107 030f 	add.w	r3, r7, #15
 8008f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f44:	2100      	movs	r1, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fb9e 	bl	8009688 <hci_send_req>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da01      	bge.n	8008f56 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008f52:	23ff      	movs	r3, #255	; 0xff
 8008f54:	e004      	b.n	8008f60 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f5e:	781b      	ldrb	r3, [r3, #0]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b0cc      	sub	sp, #304	; 0x130
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	4602      	mov	r2, r0
 8008f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f7a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008f7c:	f107 0310 	add.w	r3, r7, #16
 8008f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f9e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008fa2:	8812      	ldrh	r2, [r2, #0]
 8008fa4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008faa:	3302      	adds	r3, #2
 8008fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fb4:	2218      	movs	r2, #24
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f8db 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fbe:	233f      	movs	r3, #63	; 0x3f
 8008fc0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008fc4:	2318      	movs	r3, #24
 8008fc6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fca:	f107 0310 	add.w	r3, r7, #16
 8008fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008fda:	f107 030f 	add.w	r3, r7, #15
 8008fde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fb4a 	bl	8009688 <hci_send_req>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da01      	bge.n	8008ffe <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008ffa:	23ff      	movs	r3, #255	; 0xff
 8008ffc:	e004      	b.n	8009008 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009002:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b088      	sub	sp, #32
 8009016:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	2218      	movs	r2, #24
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f000 f8a5 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x03;
 800902a:	2303      	movs	r3, #3
 800902c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800902e:	2303      	movs	r3, #3
 8009030:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009032:	1dfb      	adds	r3, r7, #7
 8009034:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fb21 	bl	8009688 <hci_send_req>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	da01      	bge.n	8009050 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800904c:	23ff      	movs	r3, #255	; 0xff
 800904e:	e000      	b.n	8009052 <hci_reset+0x40>
  return status;
 8009050:	79fb      	ldrb	r3, [r7, #7]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3720      	adds	r7, #32
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800905a:	b590      	push	{r4, r7, lr}
 800905c:	b0cd      	sub	sp, #308	; 0x134
 800905e:	af00      	add	r7, sp, #0
 8009060:	4604      	mov	r4, r0
 8009062:	4608      	mov	r0, r1
 8009064:	4611      	mov	r1, r2
 8009066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800906e:	4622      	mov	r2, r4
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009076:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800907a:	4602      	mov	r2, r0
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009082:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009086:	460a      	mov	r2, r1
 8009088:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009096:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80090a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80090b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b8:	3301      	adds	r3, #1
 80090ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80090be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80090ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090d2:	3301      	adds	r3, #1
 80090d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80090d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090e0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ec:	3301      	adds	r3, #1
 80090ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090f6:	2218      	movs	r2, #24
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f83a 	bl	8009174 <Osal_MemSet>
  rq.ogf = 0x08;
 8009100:	2308      	movs	r3, #8
 8009102:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009106:	2331      	movs	r3, #49	; 0x31
 8009108:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009118:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800911c:	f107 030f 	add.w	r3, r7, #15
 8009120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009124:	2301      	movs	r3, #1
 8009126:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800912a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f000 faa9 	bl	8009688 <hci_send_req>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	da01      	bge.n	8009140 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800913c:	23ff      	movs	r3, #255	; 0xff
 800913e:	e004      	b.n	800914a <hci_le_set_default_phy+0xf0>
  return status;
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009148:	781b      	ldrb	r3, [r3, #0]
}
 800914a:	4618      	mov	r0, r3
 800914c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009150:	46bd      	mov	sp, r7
 8009152:	bd90      	pop	{r4, r7, pc}

08009154 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f003 fd8b 	bl	800cc80 <memcpy>
 800916a:	4603      	mov	r3, r0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f003 fd89 	bl	800cc9c <memset>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009194:	b480      	push	{r7}
 8009196:	af00      	add	r7, sp, #0
  return;
 8009198:	bf00      	nop
}
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80091a2:	b480      	push	{r7}
 80091a4:	af00      	add	r7, sp, #0
  return;
 80091a6:	bf00      	nop
}
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  return;
 80091b4:	bf00      	nop
}
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80091be:	b480      	push	{r7}
 80091c0:	af00      	add	r7, sp, #0
  return;
 80091c2:	bf00      	nop
}
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  return;
 80091d0:	bf00      	nop
}
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80091da:	b480      	push	{r7}
 80091dc:	af00      	add	r7, sp, #0
  return;
 80091de:	bf00      	nop
}
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
  return;
 80091ec:	bf00      	nop
}
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80091f6:	b480      	push	{r7}
 80091f8:	af00      	add	r7, sp, #0
  return;
 80091fa:	bf00      	nop
}
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
  return;
 8009208:	bf00      	nop
}
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009212:	b480      	push	{r7}
 8009214:	af00      	add	r7, sp, #0
  return;
 8009216:	bf00      	nop
}
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  return;
 8009224:	bf00      	nop
}
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800922e:	b480      	push	{r7}
 8009230:	af00      	add	r7, sp, #0
  return;
 8009232:	bf00      	nop
}
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
  return;
 8009240:	bf00      	nop
}
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800924a:	b480      	push	{r7}
 800924c:	af00      	add	r7, sp, #0
  return;
 800924e:	bf00      	nop
}
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  return;
 800925c:	bf00      	nop
}
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009266:	b480      	push	{r7}
 8009268:	af00      	add	r7, sp, #0
  return;
 800926a:	bf00      	nop
}
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
  return;
 8009278:	bf00      	nop
}
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
	...

08009284 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009288:	4b04      	ldr	r3, [pc, #16]	; (800929c <SVCCTL_Init+0x18>)
 800928a:	2200      	movs	r2, #0
 800928c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <SVCCTL_Init+0x1c>)
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009294:	f000 f806 	bl	80092a4 <SVCCTL_SvcInit>

  return;
 8009298:	bf00      	nop
}
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20000130 	.word	0x20000130
 80092a0:	20000150 	.word	0x20000150

080092a4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  BAS_Init();
 80092a8:	f7ff ff74 	bl	8009194 <BAS_Init>

  BLS_Init();
 80092ac:	f7ff ff79 	bl	80091a2 <BLS_Init>

  CRS_STM_Init();
 80092b0:	f7ff ff7e 	bl	80091b0 <CRS_STM_Init>

  DIS_Init();
 80092b4:	f7ff ff83 	bl	80091be <DIS_Init>

  EDS_STM_Init();
 80092b8:	f7ff ff88 	bl	80091cc <EDS_STM_Init>

  HIDS_Init();
 80092bc:	f7ff ff8d 	bl	80091da <HIDS_Init>

  HRS_Init();
 80092c0:	f7ff ff92 	bl	80091e8 <HRS_Init>

  HTS_Init();
 80092c4:	f7ff ff97 	bl	80091f6 <HTS_Init>

  IAS_Init();
 80092c8:	f7ff ff9c 	bl	8009204 <IAS_Init>

  LLS_Init();
 80092cc:	f7ff ffa1 	bl	8009212 <LLS_Init>

  TPS_Init();
 80092d0:	f7ff ffa6 	bl	8009220 <TPS_Init>

  MOTENV_STM_Init();
 80092d4:	f7ff ffab 	bl	800922e <MOTENV_STM_Init>

  P2PS_STM_Init();
 80092d8:	f7ff ffb0 	bl	800923c <P2PS_STM_Init>

  ZDD_STM_Init();
 80092dc:	f7ff ffb5 	bl	800924a <ZDD_STM_Init>

  OTAS_STM_Init();
 80092e0:	f7ff ffba 	bl	8009258 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80092e4:	f7ff ffc6 	bl	8009274 <BVOPUS_STM_Init>

  MESH_Init();
 80092e8:	f7ff ffbd 	bl	8009266 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80092ec:	f002 fe28 	bl	800bf40 <SVCCTL_InitCustomSvc>
  
  return;
 80092f0:	bf00      	nop
}
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <SVCCTL_RegisterSvcHandler+0x30>)
 80092fe:	7f1b      	ldrb	r3, [r3, #28]
 8009300:	4619      	mov	r1, r3
 8009302:	4a08      	ldr	r2, [pc, #32]	; (8009324 <SVCCTL_RegisterSvcHandler+0x30>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800930a:	4b06      	ldr	r3, [pc, #24]	; (8009324 <SVCCTL_RegisterSvcHandler+0x30>)
 800930c:	7f1b      	ldrb	r3, [r3, #28]
 800930e:	3301      	adds	r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	4b04      	ldr	r3, [pc, #16]	; (8009324 <SVCCTL_RegisterSvcHandler+0x30>)
 8009314:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009316:	bf00      	nop
}
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000130 	.word	0x20000130

08009328 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3301      	adds	r3, #1
 8009334:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2bff      	cmp	r3, #255	; 0xff
 8009340:	d125      	bne.n	800938e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3302      	adds	r3, #2
 8009346:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	b29b      	uxth	r3, r3
 800934e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009356:	d118      	bne.n	800938a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009358:	2300      	movs	r3, #0
 800935a:	757b      	strb	r3, [r7, #21]
 800935c:	e00d      	b.n	800937a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800935e:	7d7b      	ldrb	r3, [r7, #21]
 8009360:	4a1a      	ldr	r2, [pc, #104]	; (80093cc <SVCCTL_UserEvtRx+0xa4>)
 8009362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d108      	bne.n	8009386 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009374:	7d7b      	ldrb	r3, [r7, #21]
 8009376:	3301      	adds	r3, #1
 8009378:	757b      	strb	r3, [r7, #21]
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <SVCCTL_UserEvtRx+0xa4>)
 800937c:	7f1b      	ldrb	r3, [r3, #28]
 800937e:	7d7a      	ldrb	r2, [r7, #21]
 8009380:	429a      	cmp	r2, r3
 8009382:	d3ec      	bcc.n	800935e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009384:	e002      	b.n	800938c <SVCCTL_UserEvtRx+0x64>
              break;
 8009386:	bf00      	nop
          break;
 8009388:	e000      	b.n	800938c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800938a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800938c:	e000      	b.n	8009390 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800938e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d00f      	beq.n	80093b6 <SVCCTL_UserEvtRx+0x8e>
 8009396:	2b02      	cmp	r3, #2
 8009398:	dc10      	bgt.n	80093bc <SVCCTL_UserEvtRx+0x94>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <SVCCTL_UserEvtRx+0x7c>
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d006      	beq.n	80093b0 <SVCCTL_UserEvtRx+0x88>
 80093a2:	e00b      	b.n	80093bc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fca9 	bl	800acfc <SVCCTL_App_Notification>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75bb      	strb	r3, [r7, #22]
      break;
 80093ae:	e008      	b.n	80093c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75bb      	strb	r3, [r7, #22]
      break;
 80093b4:	e005      	b.n	80093c2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75bb      	strb	r3, [r7, #22]
      break;
 80093ba:	e002      	b.n	80093c2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093bc:	2301      	movs	r3, #1
 80093be:	75bb      	strb	r3, [r7, #22]
      break;
 80093c0:	bf00      	nop
  }

  return (return_status);
 80093c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000130 	.word	0x20000130

080093d0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80093d8:	f107 030c 	add.w	r3, r7, #12
 80093dc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	212c      	movs	r1, #44	; 0x2c
 80093e8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80093ec:	f000 fae2 	bl	80099b4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	330b      	adds	r3, #11
 80093f4:	78db      	ldrb	r3, [r3, #3]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b088      	sub	sp, #32
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	210f      	movs	r1, #15
 8009416:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800941a:	f000 facb 	bl	80099b4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	330b      	adds	r3, #11
 8009422:	78db      	ldrb	r3, [r3, #3]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009434:	f107 030c 	add.w	r3, r7, #12
 8009438:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	210e      	movs	r1, #14
 8009440:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009444:	f000 fab6 	bl	80099b4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	330b      	adds	r3, #11
 800944c:	78db      	ldrb	r3, [r3, #3]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009458:	b480      	push	{r7}
 800945a:	b08b      	sub	sp, #44	; 0x2c
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009480:	4b4a      	ldr	r3, [pc, #296]	; (80095ac <SHCI_GetWirelessFwInfo+0x154>)
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009488:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009492:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a44      	ldr	r2, [pc, #272]	; (80095b0 <SHCI_GetWirelessFwInfo+0x158>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d10f      	bne.n	80094c4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e01a      	b.n	80094fa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80094cc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80094d0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	0e1b      	lsrs	r3, r3, #24
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	0a1b      	lsrs	r3, r3, #8
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	091b      	lsrs	r3, r3, #4
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	b2da      	uxtb	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	b2da      	uxtb	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	0e1b      	lsrs	r3, r3, #24
 800953a:	b2da      	uxtb	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	b2da      	uxtb	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	0a1b      	lsrs	r3, r3, #8
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	0e1b      	lsrs	r3, r3, #24
 8009568:	b2da      	uxtb	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	b2da      	uxtb	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	0a1b      	lsrs	r3, r3, #8
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	0e1b      	lsrs	r3, r3, #24
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2da      	uxtb	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	372c      	adds	r7, #44	; 0x2c
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	58004000 	.word	0x58004000
 80095b0:	a94656b9 	.word	0xa94656b9

080095b4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <hci_init+0x30>)
 80095c4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80095c6:	4a08      	ldr	r2, [pc, #32]	; (80095e8 <hci_init+0x34>)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80095cc:	4806      	ldr	r0, [pc, #24]	; (80095e8 <hci_init+0x34>)
 80095ce:	f000 f973 	bl	80098b8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f8d4 	bl	8009784 <TlInit>

  return;
 80095dc:	bf00      	nop
}
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20000754 	.word	0x20000754
 80095e8:	2000072c 	.word	0x2000072c

080095ec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80095f2:	4822      	ldr	r0, [pc, #136]	; (800967c <hci_user_evt_proc+0x90>)
 80095f4:	f000 fe06 	bl	800a204 <LST_is_empty>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d12b      	bne.n	8009656 <hci_user_evt_proc+0x6a>
 80095fe:	4b20      	ldr	r3, [pc, #128]	; (8009680 <hci_user_evt_proc+0x94>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d027      	beq.n	8009656 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009606:	f107 030c 	add.w	r3, r7, #12
 800960a:	4619      	mov	r1, r3
 800960c:	481b      	ldr	r0, [pc, #108]	; (800967c <hci_user_evt_proc+0x90>)
 800960e:	f000 fe88 	bl	800a322 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <hci_user_evt_proc+0x98>)
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00c      	beq.n	8009634 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800961e:	2301      	movs	r3, #1
 8009620:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009622:	4b18      	ldr	r3, [pc, #96]	; (8009684 <hci_user_evt_proc+0x98>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	1d3a      	adds	r2, r7, #4
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800962c:	793a      	ldrb	r2, [r7, #4]
 800962e:	4b14      	ldr	r3, [pc, #80]	; (8009680 <hci_user_evt_proc+0x94>)
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e002      	b.n	800963a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009634:	4b12      	ldr	r3, [pc, #72]	; (8009680 <hci_user_evt_proc+0x94>)
 8009636:	2201      	movs	r2, #1
 8009638:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800963a:	4b11      	ldr	r3, [pc, #68]	; (8009680 <hci_user_evt_proc+0x94>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fc03 	bl	8009e50 <TL_MM_EvtDone>
 800964a:	e004      	b.n	8009656 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4619      	mov	r1, r3
 8009650:	480a      	ldr	r0, [pc, #40]	; (800967c <hci_user_evt_proc+0x90>)
 8009652:	f000 fdf9 	bl	800a248 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009656:	4809      	ldr	r0, [pc, #36]	; (800967c <hci_user_evt_proc+0x90>)
 8009658:	f000 fdd4 	bl	800a204 <LST_is_empty>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d107      	bne.n	8009672 <hci_user_evt_proc+0x86>
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <hci_user_evt_proc+0x94>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800966a:	4804      	ldr	r0, [pc, #16]	; (800967c <hci_user_evt_proc+0x90>)
 800966c:	f002 f9b8 	bl	800b9e0 <hci_notify_asynch_evt>
  }


  return;
 8009670:	bf00      	nop
 8009672:	bf00      	nop
}
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000158 	.word	0x20000158
 8009680:	20000164 	.word	0x20000164
 8009684:	2000072c 	.word	0x2000072c

08009688 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009694:	2000      	movs	r0, #0
 8009696:	f000 f8cb 	bl	8009830 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800969a:	2300      	movs	r3, #0
 800969c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	885b      	ldrh	r3, [r3, #2]
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096a8:	b21a      	sxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	029b      	lsls	r3, r3, #10
 80096b0:	b21b      	sxth	r3, r3
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b21b      	sxth	r3, r3
 80096b6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	b2d9      	uxtb	r1, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	8bbb      	ldrh	r3, [r7, #28]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f88d 	bl	80097e4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80096ca:	e04e      	b.n	800976a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80096cc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80096d0:	f002 f99d 	bl	800ba0e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80096d4:	e043      	b.n	800975e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80096d6:	f107 030c 	add.w	r3, r7, #12
 80096da:	4619      	mov	r1, r3
 80096dc:	4828      	ldr	r0, [pc, #160]	; (8009780 <hci_send_req+0xf8>)
 80096de:	f000 fe20 	bl	800a322 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	7a5b      	ldrb	r3, [r3, #9]
 80096e6:	2b0f      	cmp	r3, #15
 80096e8:	d114      	bne.n	8009714 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	330b      	adds	r3, #11
 80096ee:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	885b      	ldrh	r3, [r3, #2]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	8bba      	ldrh	r2, [r7, #28]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d104      	bne.n	8009706 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d027      	beq.n	800975e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800970e:	2301      	movs	r3, #1
 8009710:	77fb      	strb	r3, [r7, #31]
 8009712:	e024      	b.n	800975e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	330b      	adds	r3, #11
 8009718:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009720:	b29b      	uxth	r3, r3
 8009722:	8bba      	ldrh	r2, [r7, #28]
 8009724:	429a      	cmp	r2, r3
 8009726:	d114      	bne.n	8009752 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	7a9b      	ldrb	r3, [r3, #10]
 800972c:	3b03      	subs	r3, #3
 800972e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	429a      	cmp	r2, r3
 8009738:	bfa8      	it	ge
 800973a:	461a      	movge	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6918      	ldr	r0, [r3, #16]
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	1cd9      	adds	r1, r3, #3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	461a      	mov	r2, r3
 800974e:	f003 fa97 	bl	800cc80 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800975a:	2301      	movs	r3, #1
 800975c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800975e:	4808      	ldr	r0, [pc, #32]	; (8009780 <hci_send_req+0xf8>)
 8009760:	f000 fd50 	bl	800a204 <LST_is_empty>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0b5      	beq.n	80096d6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800976a:	7ffb      	ldrb	r3, [r7, #31]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0ad      	beq.n	80096cc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009770:	2001      	movs	r0, #1
 8009772:	f000 f85d 	bl	8009830 <NotifyCmdStatus>

  return 0;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	2000074c 	.word	0x2000074c

08009784 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800978c:	480f      	ldr	r0, [pc, #60]	; (80097cc <TlInit+0x48>)
 800978e:	f000 fd29 	bl	800a1e4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009792:	4a0f      	ldr	r2, [pc, #60]	; (80097d0 <TlInit+0x4c>)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009798:	480e      	ldr	r0, [pc, #56]	; (80097d4 <TlInit+0x50>)
 800979a:	f000 fd23 	bl	800a1e4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800979e:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <TlInit+0x54>)
 80097a0:	2201      	movs	r2, #1
 80097a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80097a4:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <TlInit+0x58>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <TlInit+0x5c>)
 80097b2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <TlInit+0x58>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f107 0208 	add.w	r2, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
  }

  return;
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
}
 80097c4:	3718      	adds	r7, #24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	2000074c 	.word	0x2000074c
 80097d0:	20000160 	.word	0x20000160
 80097d4:	20000158 	.word	0x20000158
 80097d8:	20000164 	.word	0x20000164
 80097dc:	2000072c 	.word	0x2000072c
 80097e0:	08009871 	.word	0x08009871

080097e4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	603a      	str	r2, [r7, #0]
 80097ee:	80fb      	strh	r3, [r7, #6]
 80097f0:	460b      	mov	r3, r1
 80097f2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <SendCmd+0x44>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	88fa      	ldrh	r2, [r7, #6]
 80097fa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80097fe:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <SendCmd+0x44>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	797a      	ldrb	r2, [r7, #5]
 8009804:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009806:	4b08      	ldr	r3, [pc, #32]	; (8009828 <SendCmd+0x44>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	330c      	adds	r3, #12
 800980c:	797a      	ldrb	r2, [r7, #5]
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f003 fa35 	bl	800cc80 <memcpy>

  hciContext.io.Send(0,0);
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <SendCmd+0x48>)
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	2100      	movs	r1, #0
 800981c:	2000      	movs	r0, #0
 800981e:	4798      	blx	r3

  return;
 8009820:	bf00      	nop
}
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000160 	.word	0x20000160
 800982c:	2000072c 	.word	0x2000072c

08009830 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d108      	bne.n	8009852 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <NotifyCmdStatus+0x3c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00d      	beq.n	8009864 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <NotifyCmdStatus+0x3c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2000      	movs	r0, #0
 800984e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009850:	e008      	b.n	8009864 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009852:	4b06      	ldr	r3, [pc, #24]	; (800986c <NotifyCmdStatus+0x3c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800985a:	4b04      	ldr	r3, [pc, #16]	; (800986c <NotifyCmdStatus+0x3c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2001      	movs	r0, #1
 8009860:	4798      	blx	r3
  return;
 8009862:	bf00      	nop
 8009864:	bf00      	nop
}
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000754 	.word	0x20000754

08009870 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7a5b      	ldrb	r3, [r3, #9]
 800987c:	2b0f      	cmp	r3, #15
 800987e:	d003      	beq.n	8009888 <TlEvtReceived+0x18>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7a5b      	ldrb	r3, [r3, #9]
 8009884:	2b0e      	cmp	r3, #14
 8009886:	d107      	bne.n	8009898 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4809      	ldr	r0, [pc, #36]	; (80098b0 <TlEvtReceived+0x40>)
 800988c:	f000 fd02 	bl	800a294 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009890:	2000      	movs	r0, #0
 8009892:	f002 f8b1 	bl	800b9f8 <hci_cmd_resp_release>
 8009896:	e006      	b.n	80098a6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4806      	ldr	r0, [pc, #24]	; (80098b4 <TlEvtReceived+0x44>)
 800989c:	f000 fcfa 	bl	800a294 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80098a0:	4804      	ldr	r0, [pc, #16]	; (80098b4 <TlEvtReceived+0x44>)
 80098a2:	f002 f89d 	bl	800b9e0 <hci_notify_asynch_evt>
  }

  return;
 80098a6:	bf00      	nop
}
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000074c 	.word	0x2000074c
 80098b4:	20000158 	.word	0x20000158

080098b8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <hci_register_io_bus+0x20>)
 80098c4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <hci_register_io_bus+0x24>)
 80098ca:	611a      	str	r2, [r3, #16]

  return;
 80098cc:	bf00      	nop
}
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	08009bc9 	.word	0x08009bc9
 80098dc:	08009c31 	.word	0x08009c31

080098e0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	4a08      	ldr	r2, [pc, #32]	; (8009910 <shci_init+0x30>)
 80098f0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80098f2:	4a08      	ldr	r2, [pc, #32]	; (8009914 <shci_init+0x34>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80098f8:	4806      	ldr	r0, [pc, #24]	; (8009914 <shci_init+0x34>)
 80098fa:	f000 f911 	bl	8009b20 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f894 	bl	8009a30 <TlInit>

  return;
 8009908:	bf00      	nop
}
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000778 	.word	0x20000778
 8009914:	20000758 	.word	0x20000758

08009918 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800991e:	4822      	ldr	r0, [pc, #136]	; (80099a8 <shci_user_evt_proc+0x90>)
 8009920:	f000 fc70 	bl	800a204 <LST_is_empty>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d12b      	bne.n	8009982 <shci_user_evt_proc+0x6a>
 800992a:	4b20      	ldr	r3, [pc, #128]	; (80099ac <shci_user_evt_proc+0x94>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d027      	beq.n	8009982 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009932:	f107 030c 	add.w	r3, r7, #12
 8009936:	4619      	mov	r1, r3
 8009938:	481b      	ldr	r0, [pc, #108]	; (80099a8 <shci_user_evt_proc+0x90>)
 800993a:	f000 fcf2 	bl	800a322 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800993e:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <shci_user_evt_proc+0x98>)
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00c      	beq.n	8009960 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800994a:	2301      	movs	r3, #1
 800994c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800994e:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <shci_user_evt_proc+0x98>)
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	1d3a      	adds	r2, r7, #4
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009958:	793a      	ldrb	r2, [r7, #4]
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <shci_user_evt_proc+0x94>)
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	e002      	b.n	8009966 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009960:	4b12      	ldr	r3, [pc, #72]	; (80099ac <shci_user_evt_proc+0x94>)
 8009962:	2201      	movs	r2, #1
 8009964:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <shci_user_evt_proc+0x94>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fa6d 	bl	8009e50 <TL_MM_EvtDone>
 8009976:	e004      	b.n	8009982 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4619      	mov	r1, r3
 800997c:	480a      	ldr	r0, [pc, #40]	; (80099a8 <shci_user_evt_proc+0x90>)
 800997e:	f000 fc63 	bl	800a248 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009982:	4809      	ldr	r0, [pc, #36]	; (80099a8 <shci_user_evt_proc+0x90>)
 8009984:	f000 fc3e 	bl	800a204 <LST_is_empty>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d107      	bne.n	800999e <shci_user_evt_proc+0x86>
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <shci_user_evt_proc+0x94>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009996:	4804      	ldr	r0, [pc, #16]	; (80099a8 <shci_user_evt_proc+0x90>)
 8009998:	f7f7 fe20 	bl	80015dc <shci_notify_asynch_evt>
  }


  return;
 800999c:	bf00      	nop
 800999e:	bf00      	nop
}
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000170 	.word	0x20000170
 80099ac:	20000180 	.word	0x20000180
 80099b0:	20000758 	.word	0x20000758

080099b4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60ba      	str	r2, [r7, #8]
 80099bc:	607b      	str	r3, [r7, #4]
 80099be:	4603      	mov	r3, r0
 80099c0:	81fb      	strh	r3, [r7, #14]
 80099c2:	460b      	mov	r3, r1
 80099c4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80099c6:	2000      	movs	r0, #0
 80099c8:	f000 f864 	bl	8009a94 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80099cc:	4b16      	ldr	r3, [pc, #88]	; (8009a28 <shci_send+0x74>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	89fa      	ldrh	r2, [r7, #14]
 80099d2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <shci_send+0x74>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	7b7a      	ldrb	r2, [r7, #13]
 80099dc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80099de:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <shci_send+0x74>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	330c      	adds	r3, #12
 80099e4:	7b7a      	ldrb	r2, [r7, #13]
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f003 f949 	bl	800cc80 <memcpy>

  shciContext.io.Send(0,0);
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <shci_send+0x78>)
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2100      	movs	r1, #0
 80099f4:	2000      	movs	r0, #0
 80099f6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80099f8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80099fc:	f7f7 fe05 	bl	800160a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f103 0008 	add.w	r0, r3, #8
 8009a06:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <shci_send+0x74>)
 8009a08:	6819      	ldr	r1, [r3, #0]
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <shci_send+0x74>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	789b      	ldrb	r3, [r3, #2]
 8009a10:	3303      	adds	r3, #3
 8009a12:	461a      	mov	r2, r3
 8009a14:	f003 f934 	bl	800cc80 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a18:	2001      	movs	r0, #1
 8009a1a:	f000 f83b 	bl	8009a94 <Cmd_SetStatus>

  return;
 8009a1e:	bf00      	nop
}
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	2000017c 	.word	0x2000017c
 8009a2c:	20000758 	.word	0x20000758

08009a30 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009a38:	4a10      	ldr	r2, [pc, #64]	; (8009a7c <TlInit+0x4c>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009a3e:	4810      	ldr	r0, [pc, #64]	; (8009a80 <TlInit+0x50>)
 8009a40:	f000 fbd0 	bl	800a1e4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a44:	2001      	movs	r0, #1
 8009a46:	f000 f825 	bl	8009a94 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a4a:	4b0e      	ldr	r3, [pc, #56]	; (8009a84 <TlInit+0x54>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <TlInit+0x58>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00c      	beq.n	8009a72 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <TlInit+0x5c>)
 8009a5e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <TlInit+0x60>)
 8009a62:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <TlInit+0x58>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f107 020c 	add.w	r2, r7, #12
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
  }

  return;
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
}
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000017c 	.word	0x2000017c
 8009a80:	20000170 	.word	0x20000170
 8009a84:	20000180 	.word	0x20000180
 8009a88:	20000758 	.word	0x20000758
 8009a8c:	08009ae5 	.word	0x08009ae5
 8009a90:	08009afd 	.word	0x08009afd

08009a94 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10b      	bne.n	8009abc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <Cmd_SetStatus+0x48>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <Cmd_SetStatus+0x48>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <Cmd_SetStatus+0x4c>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009aba:	e00b      	b.n	8009ad4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <Cmd_SetStatus+0x4c>)
 8009abe:	2201      	movs	r2, #1
 8009ac0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009ac2:	4b06      	ldr	r3, [pc, #24]	; (8009adc <Cmd_SetStatus+0x48>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009aca:	4b04      	ldr	r3, [pc, #16]	; (8009adc <Cmd_SetStatus+0x48>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2001      	movs	r0, #1
 8009ad0:	4798      	blx	r3
  return;
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
}
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20000778 	.word	0x20000778
 8009ae0:	20000178 	.word	0x20000178

08009ae4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f7 fd81 	bl	80015f4 <shci_cmd_resp_release>

  return;
 8009af2:	bf00      	nop
}
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4805      	ldr	r0, [pc, #20]	; (8009b1c <TlUserEvtReceived+0x20>)
 8009b08:	f000 fbc4 	bl	800a294 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009b0c:	4803      	ldr	r0, [pc, #12]	; (8009b1c <TlUserEvtReceived+0x20>)
 8009b0e:	f7f7 fd65 	bl	80015dc <shci_notify_asynch_evt>

  return;
 8009b12:	bf00      	nop
}
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000170 	.word	0x20000170

08009b20 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a05      	ldr	r2, [pc, #20]	; (8009b40 <shci_register_io_bus+0x20>)
 8009b2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <shci_register_io_bus+0x24>)
 8009b32:	611a      	str	r2, [r3, #16]

  return;
 8009b34:	bf00      	nop
}
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	08009cdd 	.word	0x08009cdd
 8009b44:	08009d31 	.word	0x08009d31

08009b48 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009b4c:	f002 fd1c 	bl	800c588 <HW_IPCC_Enable>

  return;
 8009b50:	bf00      	nop
}
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <TL_Init>:


void TL_Init( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009b58:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <TL_Init+0x48>)
 8009b5a:	4a11      	ldr	r2, [pc, #68]	; (8009ba0 <TL_Init+0x4c>)
 8009b5c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <TL_Init+0x48>)
 8009b60:	4a10      	ldr	r2, [pc, #64]	; (8009ba4 <TL_Init+0x50>)
 8009b62:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <TL_Init+0x48>)
 8009b66:	4a10      	ldr	r2, [pc, #64]	; (8009ba8 <TL_Init+0x54>)
 8009b68:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <TL_Init+0x48>)
 8009b6c:	4a0f      	ldr	r2, [pc, #60]	; (8009bac <TL_Init+0x58>)
 8009b6e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <TL_Init+0x48>)
 8009b72:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <TL_Init+0x5c>)
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <TL_Init+0x48>)
 8009b78:	4a0e      	ldr	r2, [pc, #56]	; (8009bb4 <TL_Init+0x60>)
 8009b7a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <TL_Init+0x48>)
 8009b7e:	4a0e      	ldr	r2, [pc, #56]	; (8009bb8 <TL_Init+0x64>)
 8009b80:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <TL_Init+0x48>)
 8009b84:	4a0d      	ldr	r2, [pc, #52]	; (8009bbc <TL_Init+0x68>)
 8009b86:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <TL_Init+0x48>)
 8009b8a:	4a0d      	ldr	r2, [pc, #52]	; (8009bc0 <TL_Init+0x6c>)
 8009b8c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <TL_Init+0x48>)
 8009b90:	4a0c      	ldr	r2, [pc, #48]	; (8009bc4 <TL_Init+0x70>)
 8009b92:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009b94:	f002 fd0c 	bl	800c5b0 <HW_IPCC_Init>

  return;
 8009b98:	bf00      	nop
}
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20030000 	.word	0x20030000
 8009ba0:	20030028 	.word	0x20030028
 8009ba4:	20030048 	.word	0x20030048
 8009ba8:	20030058 	.word	0x20030058
 8009bac:	20030068 	.word	0x20030068
 8009bb0:	20030070 	.word	0x20030070
 8009bb4:	20030078 	.word	0x20030078
 8009bb8:	20030080 	.word	0x20030080
 8009bbc:	2003009c 	.word	0x2003009c
 8009bc0:	200300a0 	.word	0x200300a0
 8009bc4:	200300ac 	.word	0x200300ac

08009bc8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009bd4:	4811      	ldr	r0, [pc, #68]	; (8009c1c <TL_BLE_Init+0x54>)
 8009bd6:	f000 fb05 	bl	800a1e4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <TL_BLE_Init+0x58>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4a0c      	ldr	r2, [pc, #48]	; (8009c24 <TL_BLE_Init+0x5c>)
 8009bf4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <TL_BLE_Init+0x54>)
 8009bfa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009bfc:	f002 fcee 	bl	800c5dc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <TL_BLE_Init+0x60>)
 8009c06:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <TL_BLE_Init+0x64>)
 8009c0e:	6013      	str	r3, [r2, #0]

  return 0;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200300c8 	.word	0x200300c8
 8009c20:	20030000 	.word	0x20030000
 8009c24:	20030a58 	.word	0x20030a58
 8009c28:	20000784 	.word	0x20000784
 8009c2c:	20000788 	.word	0x20000788

08009c30 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <TL_BLE_SendCmd+0x34>)
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2201      	movs	r2, #1
 8009c44:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009c46:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <TL_BLE_SendCmd+0x34>)
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	2001      	movs	r0, #1
 8009c50:	f000 f96c 	bl	8009f2c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009c54:	f002 fccc 	bl	800c5f0 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20030000 	.word	0x20030000

08009c68 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c6e:	e01c      	b.n	8009caa <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009c70:	1d3b      	adds	r3, r7, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4812      	ldr	r0, [pc, #72]	; (8009cc0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c76:	f000 fb54 	bl	800a322 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7a5b      	ldrb	r3, [r3, #9]
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	d003      	beq.n	8009c8a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7a5b      	ldrb	r3, [r3, #9]
 8009c86:	2b0e      	cmp	r3, #14
 8009c88:	d105      	bne.n	8009c96 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	2002      	movs	r0, #2
 8009c90:	f000 f94c 	bl	8009f2c <OutputDbgTrace>
 8009c94:	e004      	b.n	8009ca0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	2003      	movs	r0, #3
 8009c9c:	f000 f946 	bl	8009f2c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009ca0:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009caa:	4805      	ldr	r0, [pc, #20]	; (8009cc0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009cac:	f000 faaa 	bl	800a204 <LST_is_empty>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0dc      	beq.n	8009c70 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009cb6:	bf00      	nop
}
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	200300c8 	.word	0x200300c8
 8009cc4:	20000784 	.word	0x20000784

08009cc8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009ccc:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4798      	blx	r3

  return;
 8009cd2:	bf00      	nop
}
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000788 	.word	0x20000788

08009cdc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009ce8:	480d      	ldr	r0, [pc, #52]	; (8009d20 <TL_SYS_Init+0x44>)
 8009cea:	f000 fa7b 	bl	800a1e4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009cee:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <TL_SYS_Init+0x48>)
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689a      	ldr	r2, [r3, #8]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4a08      	ldr	r2, [pc, #32]	; (8009d20 <TL_SYS_Init+0x44>)
 8009d00:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009d02:	f002 fc97 	bl	800c634 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <TL_SYS_Init+0x4c>)
 8009d0c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	4a06      	ldr	r2, [pc, #24]	; (8009d2c <TL_SYS_Init+0x50>)
 8009d14:	6013      	str	r3, [r2, #0]

  return 0;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200300d0 	.word	0x200300d0
 8009d24:	20030000 	.word	0x20030000
 8009d28:	2000078c 	.word	0x2000078c
 8009d2c:	20000790 	.word	0x20000790

08009d30 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009d3c:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <TL_SYS_SendCmd+0x34>)
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2210      	movs	r2, #16
 8009d44:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <TL_SYS_SendCmd+0x34>)
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	2004      	movs	r0, #4
 8009d50:	f000 f8ec 	bl	8009f2c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009d54:	f002 fc78 	bl	800c648 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20030000 	.word	0x20030000

08009d68 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4619      	mov	r1, r3
 8009d74:	2005      	movs	r0, #5
 8009d76:	f000 f8d9 	bl	8009f2c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a03      	ldr	r2, [pc, #12]	; (8009d8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d80:	68d2      	ldr	r2, [r2, #12]
 8009d82:	6812      	ldr	r2, [r2, #0]
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3

  return;
 8009d88:	bf00      	nop
}
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20030000 	.word	0x20030000
 8009d90:	2000078c 	.word	0x2000078c

08009d94 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009d9a:	e00e      	b.n	8009dba <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009d9c:	1d3b      	adds	r3, r7, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	480b      	ldr	r0, [pc, #44]	; (8009dd0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009da2:	f000 fabe 	bl	800a322 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4619      	mov	r1, r3
 8009daa:	2006      	movs	r0, #6
 8009dac:	f000 f8be 	bl	8009f2c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009db0:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <HW_IPCC_SYS_EvtNot+0x40>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4610      	mov	r0, r2
 8009db8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dba:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009dbc:	f000 fa22 	bl	800a204 <LST_is_empty>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0ea      	beq.n	8009d9c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009dc6:	bf00      	nop
}
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200300d0 	.word	0x200300d0
 8009dd4:	20000790 	.word	0x20000790

08009dd8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009de0:	4817      	ldr	r0, [pc, #92]	; (8009e40 <TL_MM_Init+0x68>)
 8009de2:	f000 f9ff 	bl	800a1e4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009de6:	4817      	ldr	r0, [pc, #92]	; (8009e44 <TL_MM_Init+0x6c>)
 8009de8:	f000 f9fc 	bl	800a1e4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009dec:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <TL_MM_Init+0x70>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <TL_MM_Init+0x74>)
 8009df2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009df4:	4b15      	ldr	r3, [pc, #84]	; (8009e4c <TL_MM_Init+0x74>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6892      	ldr	r2, [r2, #8]
 8009dfc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <TL_MM_Init+0x74>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68d2      	ldr	r2, [r2, #12]
 8009e06:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <TL_MM_Init+0x74>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a0c      	ldr	r2, [pc, #48]	; (8009e40 <TL_MM_Init+0x68>)
 8009e0e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009e10:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <TL_MM_Init+0x74>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <TL_MM_Init+0x74>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6852      	ldr	r2, [r2, #4]
 8009e22:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009e24:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <TL_MM_Init+0x74>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6912      	ldr	r2, [r2, #16]
 8009e2c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <TL_MM_Init+0x74>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6952      	ldr	r2, [r2, #20]
 8009e36:	619a      	str	r2, [r3, #24]

  return;
 8009e38:	bf00      	nop
}
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	200300b8 	.word	0x200300b8
 8009e44:	2000077c 	.word	0x2000077c
 8009e48:	20030000 	.word	0x20030000
 8009e4c:	20000794 	.word	0x20000794

08009e50 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	4807      	ldr	r0, [pc, #28]	; (8009e78 <TL_MM_EvtDone+0x28>)
 8009e5c:	f000 fa1a 	bl	800a294 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	2000      	movs	r0, #0
 8009e64:	f000 f862 	bl	8009f2c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e68:	4804      	ldr	r0, [pc, #16]	; (8009e7c <TL_MM_EvtDone+0x2c>)
 8009e6a:	f002 fc13 	bl	800c694 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e6e:	bf00      	nop
}
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	2000077c 	.word	0x2000077c
 8009e7c:	08009e81 	.word	0x08009e81

08009e80 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e86:	e00c      	b.n	8009ea2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009e88:	1d3b      	adds	r3, r7, #4
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	480a      	ldr	r0, [pc, #40]	; (8009eb8 <SendFreeBuf+0x38>)
 8009e8e:	f000 fa48 	bl	800a322 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009e92:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <SendFreeBuf+0x3c>)
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f9f9 	bl	800a294 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009ea2:	4805      	ldr	r0, [pc, #20]	; (8009eb8 <SendFreeBuf+0x38>)
 8009ea4:	f000 f9ae 	bl	800a204 <LST_is_empty>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0ec      	beq.n	8009e88 <SendFreeBuf+0x8>
  }

  return;
 8009eae:	bf00      	nop
}
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000077c 	.word	0x2000077c
 8009ebc:	20030000 	.word	0x20030000

08009ec0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <TL_TRACES_Init+0x1c>)
 8009ec6:	f000 f98d 	bl	800a1e4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <TL_TRACES_Init+0x20>)
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	4a03      	ldr	r2, [pc, #12]	; (8009edc <TL_TRACES_Init+0x1c>)
 8009ed0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009ed2:	f002 fc15 	bl	800c700 <HW_IPCC_TRACES_Init>

  return;
 8009ed6:	bf00      	nop
}
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200300c0 	.word	0x200300c0
 8009ee0:	20030000 	.word	0x20030000

08009ee4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009eea:	e008      	b.n	8009efe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009eec:	1d3b      	adds	r3, r7, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4808      	ldr	r0, [pc, #32]	; (8009f14 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009ef2:	f000 fa16 	bl	800a322 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f80d 	bl	8009f18 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009efe:	4805      	ldr	r0, [pc, #20]	; (8009f14 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f00:	f000 f980 	bl	800a204 <LST_is_empty>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0f0      	beq.n	8009eec <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200300c0 	.word	0x200300c0

08009f18 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	6039      	str	r1, [r7, #0]
 8009f36:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	2b06      	cmp	r3, #6
 8009f3c:	d845      	bhi.n	8009fca <OutputDbgTrace+0x9e>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <OutputDbgTrace+0x18>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	08009f85 	.word	0x08009f85
 8009f4c:	08009f8b 	.word	0x08009f8b
 8009f50:	08009f9f 	.word	0x08009f9f
 8009f54:	08009fab 	.word	0x08009fab
 8009f58:	08009fb1 	.word	0x08009fb1
 8009f5c:	08009fbf 	.word	0x08009fbf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	7a5b      	ldrb	r3, [r3, #9]
 8009f68:	2bff      	cmp	r3, #255	; 0xff
 8009f6a:	d005      	beq.n	8009f78 <OutputDbgTrace+0x4c>
 8009f6c:	2bff      	cmp	r3, #255	; 0xff
 8009f6e:	dc05      	bgt.n	8009f7c <OutputDbgTrace+0x50>
 8009f70:	2b0e      	cmp	r3, #14
 8009f72:	d005      	beq.n	8009f80 <OutputDbgTrace+0x54>
 8009f74:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009f76:	e001      	b.n	8009f7c <OutputDbgTrace+0x50>
          break;
 8009f78:	bf00      	nop
 8009f7a:	e027      	b.n	8009fcc <OutputDbgTrace+0xa0>
          break;
 8009f7c:	bf00      	nop
 8009f7e:	e025      	b.n	8009fcc <OutputDbgTrace+0xa0>
          break;
 8009f80:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009f82:	e023      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f88:	e020      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	7a5b      	ldrb	r3, [r3, #9]
 8009f92:	2b0e      	cmp	r3, #14
 8009f94:	d001      	beq.n	8009f9a <OutputDbgTrace+0x6e>
 8009f96:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009f98:	e000      	b.n	8009f9c <OutputDbgTrace+0x70>
          break;
 8009f9a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f9c:	e016      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	7a5b      	ldrb	r3, [r3, #9]
 8009fa6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fa8:	e010      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fae:	e00d      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7a5b      	ldrb	r3, [r3, #9]
 8009fb8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fba:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fbc:	e006      	b.n	8009fcc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	7a5b      	ldrb	r3, [r3, #9]
 8009fc6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fc8:	e000      	b.n	8009fcc <OutputDbgTrace+0xa0>

    default:
      break;
 8009fca:	bf00      	nop
  }

  return;
 8009fcc:	bf00      	nop
}
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8009fe4:	215c      	movs	r1, #92	; 0x5c
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f002 ff04 	bl	800cdf4 <strrchr>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d007      	beq.n	800a002 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8009ff2:	215c      	movs	r1, #92	; 0x5c
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f002 fefd 	bl	800cdf4 <strrchr>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e00d      	b.n	800a01e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a002:	212f      	movs	r1, #47	; 0x2f
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f002 fef5 	bl	800cdf4 <strrchr>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800a010:	212f      	movs	r1, #47	; 0x2f
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f002 feee 	bl	800cdf4 <strrchr>
 800a018:	4603      	mov	r3, r0
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a01e:	68fb      	ldr	r3, [r7, #12]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a02e:	f3ef 8310 	mrs	r3, PRIMASK
 800a032:	60fb      	str	r3, [r7, #12]
  return(result);
 800a034:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a038:	b672      	cpsid	i
}
 800a03a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a03c:	1cbb      	adds	r3, r7, #2
 800a03e:	4619      	mov	r1, r3
 800a040:	4812      	ldr	r0, [pc, #72]	; (800a08c <DbgTrace_TxCpltCallback+0x64>)
 800a042:	f000 fbe6 	bl	800a812 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a046:	1cbb      	adds	r3, r7, #2
 800a048:	4619      	mov	r1, r3
 800a04a:	4810      	ldr	r0, [pc, #64]	; (800a08c <DbgTrace_TxCpltCallback+0x64>)
 800a04c:	f000 fcd2 	bl	800a9f4 <CircularQueue_Sense>
 800a050:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00c      	beq.n	800a072 <DbgTrace_TxCpltCallback+0x4a>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	f383 8810 	msr	PRIMASK, r3
}
 800a062:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a064:	887b      	ldrh	r3, [r7, #2]
 800a066:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <DbgTrace_TxCpltCallback+0x68>)
 800a068:	4619      	mov	r1, r3
 800a06a:	6938      	ldr	r0, [r7, #16]
 800a06c:	f7f6 fe71 	bl	8000d52 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a070:	e008      	b.n	800a084 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <DbgTrace_TxCpltCallback+0x6c>)
 800a074:	2201      	movs	r2, #1
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f383 8810 	msr	PRIMASK, r3
}
 800a082:	bf00      	nop
}
 800a084:	bf00      	nop
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000798 	.word	0x20000798
 800a090:	0800a029 	.word	0x0800a029
 800a094:	2000000d 	.word	0x2000000d

0800a098 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a09e:	f7f6 fe52 	bl	8000d46 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0ac:	4903      	ldr	r1, [pc, #12]	; (800a0bc <DbgTraceInit+0x24>)
 800a0ae:	4804      	ldr	r0, [pc, #16]	; (800a0c0 <DbgTraceInit+0x28>)
 800a0b0:	f000 f956 	bl	800a360 <CircularQueue_Init>
#endif 
#endif
  return;
 800a0b4:	bf00      	nop
}
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200007b8 	.word	0x200007b8
 800a0c0:	20000798 	.word	0x20000798

0800a0c4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f805 	bl	800a0e4 <DbgTraceWrite>
 800a0da:	4603      	mov	r3, r0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a0fc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d102      	bne.n	800a10c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a106:	2300      	movs	r3, #0
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
 800a10a:	e037      	b.n	800a17c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d006      	beq.n	800a120 <DbgTraceWrite+0x3c>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d003      	beq.n	800a120 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a118:	f04f 33ff 	mov.w	r3, #4294967295
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
 800a11e:	e02d      	b.n	800a17c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d02a      	beq.n	800a17c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a12a:	b672      	cpsid	i
}
 800a12c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	b29a      	uxth	r2, r3
 800a132:	2301      	movs	r3, #1
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	4814      	ldr	r0, [pc, #80]	; (800a188 <DbgTraceWrite+0xa4>)
 800a138:	f000 f944 	bl	800a3c4 <CircularQueue_Add>
 800a13c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d015      	beq.n	800a170 <DbgTraceWrite+0x8c>
 800a144:	4b11      	ldr	r3, [pc, #68]	; (800a18c <DbgTraceWrite+0xa8>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d010      	beq.n	800a170 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <DbgTraceWrite+0xa8>)
 800a150:	2200      	movs	r2, #0
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f383 8810 	msr	PRIMASK, r3
}
 800a15e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	b29b      	uxth	r3, r3
 800a164:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <DbgTraceWrite+0xac>)
 800a166:	4619      	mov	r1, r3
 800a168:	69f8      	ldr	r0, [r7, #28]
 800a16a:	f7f6 fdf2 	bl	8000d52 <DbgOutputTraces>
 800a16e:	e005      	b.n	800a17c <DbgTraceWrite+0x98>
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f383 8810 	msr	PRIMASK, r3
}
 800a17a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3728      	adds	r7, #40	; 0x28
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000798 	.word	0x20000798
 800a18c:	2000000d 	.word	0x2000000d
 800a190:	0800a029 	.word	0x0800a029

0800a194 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a19e:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <OTP_Read+0x48>)
 800a1a0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1a2:	e002      	b.n	800a1aa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3b08      	subs	r3, #8
 800a1a8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3307      	adds	r3, #7
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	79fa      	ldrb	r2, [r7, #7]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d003      	beq.n	800a1be <OTP_Read+0x2a>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <OTP_Read+0x4c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d1f2      	bne.n	800a1a4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3307      	adds	r3, #7
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	79fa      	ldrb	r2, [r7, #7]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d001      	beq.n	800a1ce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	1fff73f8 	.word	0x1fff73f8
 800a1e0:	1fff7000 	.word	0x1fff7000

0800a1e4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	605a      	str	r2, [r3, #4]
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20c:	f3ef 8310 	mrs	r3, PRIMASK
 800a210:	60fb      	str	r3, [r7, #12]
  return(result);
 800a212:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a216:	b672      	cpsid	i
}
 800a218:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d102      	bne.n	800a22a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
 800a228:	e001      	b.n	800a22e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	75fb      	strb	r3, [r7, #23]
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f383 8810 	msr	PRIMASK, r3
}
 800a238:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a252:	f3ef 8310 	mrs	r3, PRIMASK
 800a256:	60fb      	str	r3, [r7, #12]
  return(result);
 800a258:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a25a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a25c:	b672      	cpsid	i
}
 800a25e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	605a      	str	r2, [r3, #4]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f383 8810 	msr	PRIMASK, r3
}
 800a286:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a29e:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a8:	b672      	cpsid	i
}
 800a2aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f383 8810 	msr	PRIMASK, r3
}
 800a2d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f2:	b672      	cpsid	i
}
 800a2f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6812      	ldr	r2, [r2, #0]
 800a2fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6852      	ldr	r2, [r2, #4]
 800a308:	605a      	str	r2, [r3, #4]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f383 8810 	msr	PRIMASK, r3
}
 800a314:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a316:	bf00      	nop
 800a318:	371c      	adds	r7, #28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b086      	sub	sp, #24
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a32c:	f3ef 8310 	mrs	r3, PRIMASK
 800a330:	60fb      	str	r3, [r7, #12]
  return(result);
 800a332:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a336:	b672      	cpsid	i
}
 800a338:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff ffca 	bl	800a2e0 <LST_remove_node>
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f383 8810 	msr	PRIMASK, r3
}
 800a356:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a358:	bf00      	nop
 800a35a:	3718      	adds	r7, #24
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	887a      	ldrh	r2, [r7, #2]
 800a396:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	7e3a      	ldrb	r2, [r7, #24]
 800a39c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a39e:	7e3b      	ldrb	r3, [r7, #24]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d006      	beq.n	800a3b6 <CircularQueue_Init+0x56>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	891b      	ldrh	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b4:	e000      	b.n	800a3b8 <CircularQueue_Init+0x58>
  }
  return 0;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08e      	sub	sp, #56	; 0x38
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a3d8:	2300      	movs	r3, #0
 800a3da:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a3dc:	2300      	movs	r3, #0
 800a3de:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	891b      	ldrh	r3, [r3, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <CircularQueue_Add+0x38>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e000      	b.n	800a3fe <CircularQueue_Add+0x3a>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02a      	beq.n	800a45e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	891b      	ldrh	r3, [r3, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d123      	bne.n	800a458 <CircularQueue_Add+0x94>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	4413      	add	r3, r2
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	1c58      	adds	r0, r3, #1
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4298      	cmp	r0, r3
 800a42e:	d306      	bcc.n	800a43e <CircularQueue_Add+0x7a>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6918      	ldr	r0, [r3, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	1ac3      	subs	r3, r0, r3
 800a43a:	3301      	adds	r3, #1
 800a43c:	e002      	b.n	800a444 <CircularQueue_Add+0x80>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	3301      	adds	r3, #1
 800a444:	440b      	add	r3, r1
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4413      	add	r3, r2
 800a450:	b29b      	uxth	r3, r3
 800a452:	3302      	adds	r3, #2
 800a454:	b29b      	uxth	r3, r3
 800a456:	e001      	b.n	800a45c <CircularQueue_Add+0x98>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	891b      	ldrh	r3, [r3, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	891b      	ldrh	r3, [r3, #8]
 800a46a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	429a      	cmp	r2, r3
 800a476:	d307      	bcc.n	800a488 <CircularQueue_Add+0xc4>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6919      	ldr	r1, [r3, #16]
 800a480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a482:	440b      	add	r3, r1
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	e000      	b.n	800a48a <CircularQueue_Add+0xc6>
 800a488:	2300      	movs	r3, #0
 800a48a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a48c:	88fa      	ldrh	r2, [r7, #6]
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	4413      	add	r3, r2
 800a492:	461a      	mov	r2, r3
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	fb02 f303 	mul.w	r3, r2, r3
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d80b      	bhi.n	800a4b8 <CircularQueue_Add+0xf4>
 800a4a0:	88fa      	ldrh	r2, [r7, #6]
 800a4a2:	7ffb      	ldrb	r3, [r7, #31]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4ae:	fb01 f202 	mul.w	r2, r1, r2
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	e000      	b.n	800a4ba <CircularQueue_Add+0xf6>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a4bc:	7dfa      	ldrb	r2, [r7, #23]
 800a4be:	7ffb      	ldrb	r3, [r7, #31]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	bf8c      	ite	hi
 800a4c4:	2301      	movhi	r3, #1
 800a4c6:	2300      	movls	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a4cc:	7fbb      	ldrb	r3, [r7, #30]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <CircularQueue_Add+0x120>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	7f1b      	ldrb	r3, [r3, #28]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d002      	beq.n	800a4e4 <CircularQueue_Add+0x120>
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	e000      	b.n	800a4e6 <CircularQueue_Add+0x122>
 800a4e4:	8bbb      	ldrh	r3, [r7, #28]
 800a4e6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a4e8:	7fbb      	ldrb	r3, [r7, #30]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <CircularQueue_Add+0x13c>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	7f1b      	ldrb	r3, [r3, #28]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <CircularQueue_Add+0x13c>
 800a4fa:	7ffb      	ldrb	r3, [r7, #31]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	e000      	b.n	800a502 <CircularQueue_Add+0x13e>
 800a500:	8bbb      	ldrh	r3, [r7, #28]
 800a502:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 817e 	beq.w	800a808 <CircularQueue_Add+0x444>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	88f9      	ldrh	r1, [r7, #6]
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	440b      	add	r3, r1
 800a516:	4619      	mov	r1, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	441a      	add	r2, r3
 800a520:	8bbb      	ldrh	r3, [r7, #28]
 800a522:	441a      	add	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	f200 816d 	bhi.w	800a808 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a52e:	2300      	movs	r3, #0
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a532:	e14a      	b.n	800a7ca <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a53a:	441a      	add	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d307      	bcc.n	800a554 <CircularQueue_Add+0x190>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a54a:	441a      	add	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	e003      	b.n	800a55c <CircularQueue_Add+0x198>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a55a:	4413      	add	r3, r2
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	891b      	ldrh	r3, [r3, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d130      	bne.n	800a5d0 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	1c59      	adds	r1, r3, #1
 800a576:	6339      	str	r1, [r7, #48]	; 0x30
 800a578:	4413      	add	r3, r2
 800a57a:	88fa      	ldrh	r2, [r7, #6]
 800a57c:	b2d2      	uxtb	r2, r2
 800a57e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a586:	429a      	cmp	r2, r3
 800a588:	d304      	bcc.n	800a594 <CircularQueue_Add+0x1d0>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	e000      	b.n	800a596 <CircularQueue_Add+0x1d2>
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	b298      	uxth	r0, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	6339      	str	r1, [r7, #48]	; 0x30
 800a5a8:	4413      	add	r3, r2
 800a5aa:	b2c2      	uxtb	r2, r0
 800a5ac:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d304      	bcc.n	800a5c2 <CircularQueue_Add+0x1fe>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	e000      	b.n	800a5c4 <CircularQueue_Add+0x200>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	1c9a      	adds	r2, r3, #2
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6859      	ldr	r1, [r3, #4]
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	1acb      	subs	r3, r1, r3
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	bf28      	it	cs
 800a5de:	4613      	movcs	r3, r2
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a5e2:	88fb      	ldrh	r3, [r7, #6]
 800a5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d007      	beq.n	800a5fa <CircularQueue_Add+0x236>
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d225      	bcs.n	800a63e <CircularQueue_Add+0x27a>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	7f1b      	ldrb	r3, [r3, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d121      	bne.n	800a63e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	18d0      	adds	r0, r2, r3
 800a602:	88fb      	ldrh	r3, [r7, #6]
 800a604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a606:	fb02 f303 	mul.w	r3, r2, r3
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a610:	4619      	mov	r1, r3
 800a612:	f002 fb35 	bl	800cc80 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	695a      	ldr	r2, [r3, #20]
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a622:	2300      	movs	r3, #0
 800a624:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a62a:	88fa      	ldrh	r2, [r7, #6]
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a632:	7ffb      	ldrb	r3, [r7, #31]
 800a634:	b29a      	uxth	r2, r3
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	4413      	add	r3, r2
 800a63a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a63c:	e0a4      	b.n	800a788 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 80a1 	beq.w	800a788 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	7f1b      	ldrb	r3, [r3, #28]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d03a      	beq.n	800a6c8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10d      	bne.n	800a676 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	3b02      	subs	r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	3b01      	subs	r3, #1
 800a670:	4413      	add	r3, r2
 800a672:	22ff      	movs	r2, #255	; 0xff
 800a674:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	695a      	ldr	r2, [r3, #20]
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	441a      	add	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a68a:	2300      	movs	r3, #0
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d16f      	bne.n	800a776 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	1c59      	adds	r1, r3, #1
 800a69e:	6339      	str	r1, [r7, #48]	; 0x30
 800a6a0:	4413      	add	r3, r2
 800a6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a4:	b2d2      	uxtb	r2, r2
 800a6a6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	0a18      	lsrs	r0, r3, #8
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	1c59      	adds	r1, r3, #1
 800a6b4:	6339      	str	r1, [r7, #48]	; 0x30
 800a6b6:	4413      	add	r3, r2
 800a6b8:	b2c2      	uxtb	r2, r0
 800a6ba:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	1c9a      	adds	r2, r3, #2
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	615a      	str	r2, [r3, #20]
 800a6c6:	e056      	b.n	800a776 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	7f1b      	ldrb	r3, [r3, #28]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d050      	beq.n	800a776 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	891b      	ldrh	r3, [r3, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d14a      	bne.n	800a772 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	3b02      	subs	r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	0a19      	lsrs	r1, r3, #8
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	4413      	add	r3, r2
 800a6fa:	b2ca      	uxtb	r2, r1
 800a6fc:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	18d0      	adds	r0, r2, r3
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a70a:	fb02 f303 	mul.w	r3, r2, r3
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a714:	4619      	mov	r1, r3
 800a716:	f002 fab3 	bl	800cc80 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	695a      	ldr	r2, [r3, #20]
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a73c:	2300      	movs	r3, #0
 800a73e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	6339      	str	r1, [r7, #48]	; 0x30
 800a74a:	4413      	add	r3, r2
 800a74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	0a18      	lsrs	r0, r3, #8
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	1c59      	adds	r1, r3, #1
 800a75e:	6339      	str	r1, [r7, #48]	; 0x30
 800a760:	4413      	add	r3, r2
 800a762:	b2c2      	uxtb	r2, r0
 800a764:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	1c9a      	adds	r2, r3, #2
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	615a      	str	r2, [r3, #20]
 800a770:	e001      	b.n	800a776 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	e049      	b.n	800a80a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a776:	7ffb      	ldrb	r3, [r7, #31]
 800a778:	b29a      	uxth	r2, r3
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	4413      	add	r3, r2
 800a780:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d015      	beq.n	800a7ba <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	18d0      	adds	r0, r2, r3
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79a:	fb03 f202 	mul.w	r2, r3, r2
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	4413      	add	r3, r2
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f002 fa69 	bl	800cc80 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	695a      	ldr	r2, [r3, #20]
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	441a      	add	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	1c5a      	adds	r2, r3, #1
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	f4ff aeb0 	bcc.w	800a534 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6919      	ldr	r1, [r3, #16]
 800a7dc:	7ffb      	ldrb	r3, [r7, #31]
 800a7de:	4419      	add	r1, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4299      	cmp	r1, r3
 800a7e6:	d307      	bcc.n	800a7f8 <CircularQueue_Add+0x434>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6919      	ldr	r1, [r3, #16]
 800a7ec:	7ffb      	ldrb	r3, [r7, #31]
 800a7ee:	4419      	add	r1, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	1acb      	subs	r3, r1, r3
 800a7f6:	e003      	b.n	800a800 <CircularQueue_Add+0x43c>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6919      	ldr	r1, [r3, #16]
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
 800a7fe:	440b      	add	r3, r1
 800a800:	4413      	add	r3, r2
 800a802:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	e000      	b.n	800a80a <CircularQueue_Add+0x446>
    return NULL;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3738      	adds	r7, #56	; 0x38
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	891b      	ldrh	r3, [r3, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <CircularQueue_Remove+0x1e>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e000      	b.n	800a832 <CircularQueue_Remove+0x20>
 800a830:	2300      	movs	r3, #0
 800a832:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80cc 	beq.w	800a9da <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	891b      	ldrh	r3, [r3, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d121      	bne.n	800a88e <CircularQueue_Remove+0x7c>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	4413      	add	r3, r2
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	b29a      	uxth	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6819      	ldr	r1, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	1c58      	adds	r0, r3, #1
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	4298      	cmp	r0, r3
 800a868:	d306      	bcc.n	800a878 <CircularQueue_Remove+0x66>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68d8      	ldr	r0, [r3, #12]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	1ac3      	subs	r3, r0, r3
 800a874:	3301      	adds	r3, #1
 800a876:	e002      	b.n	800a87e <CircularQueue_Remove+0x6c>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	3301      	adds	r3, #1
 800a87e:	440b      	add	r3, r1
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b29b      	uxth	r3, r3
 800a884:	021b      	lsls	r3, r3, #8
 800a886:	b29b      	uxth	r3, r3
 800a888:	4413      	add	r3, r2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	e001      	b.n	800a892 <CircularQueue_Remove+0x80>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	891b      	ldrh	r3, [r3, #8]
 800a892:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7f1b      	ldrb	r3, [r3, #28]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d057      	beq.n	800a950 <CircularQueue_Remove+0x13e>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	7f1b      	ldrb	r3, [r3, #28]
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d151      	bne.n	800a950 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8ac:	897b      	ldrh	r3, [r7, #10]
 800a8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d103      	bne.n	800a8be <CircularQueue_Remove+0xac>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	891b      	ldrh	r3, [r3, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d012      	beq.n	800a8e4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d942      	bls.n	800a950 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	891b      	ldrh	r3, [r3, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d03e      	beq.n	800a950 <CircularQueue_Remove+0x13e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	8912      	ldrh	r2, [r2, #8]
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d235      	bcs.n	800a950 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695a      	ldr	r2, [r3, #20]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68d9      	ldr	r1, [r3, #12]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	1acb      	subs	r3, r1, r3
 800a8f2:	441a      	add	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	891b      	ldrh	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d121      	bne.n	800a94a <CircularQueue_Remove+0x138>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	b29a      	uxth	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6819      	ldr	r1, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	1c58      	adds	r0, r3, #1
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	4298      	cmp	r0, r3
 800a924:	d306      	bcc.n	800a934 <CircularQueue_Remove+0x122>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68d8      	ldr	r0, [r3, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	1ac3      	subs	r3, r0, r3
 800a930:	3301      	adds	r3, #1
 800a932:	e002      	b.n	800a93a <CircularQueue_Remove+0x128>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	440b      	add	r3, r1
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	b29b      	uxth	r3, r3
 800a944:	4413      	add	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	e001      	b.n	800a94e <CircularQueue_Remove+0x13c>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	891b      	ldrh	r3, [r3, #8]
 800a94e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68d9      	ldr	r1, [r3, #12]
 800a958:	7a7b      	ldrb	r3, [r7, #9]
 800a95a:	4419      	add	r1, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	4299      	cmp	r1, r3
 800a962:	d307      	bcc.n	800a974 <CircularQueue_Remove+0x162>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68d9      	ldr	r1, [r3, #12]
 800a968:	7a7b      	ldrb	r3, [r7, #9]
 800a96a:	4419      	add	r1, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	1acb      	subs	r3, r1, r3
 800a972:	e003      	b.n	800a97c <CircularQueue_Remove+0x16a>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68d9      	ldr	r1, [r3, #12]
 800a978:	7a7b      	ldrb	r3, [r7, #9]
 800a97a:	440b      	add	r3, r1
 800a97c:	4413      	add	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	8979      	ldrh	r1, [r7, #10]
 800a986:	7a7a      	ldrb	r2, [r7, #9]
 800a988:	440a      	add	r2, r1
 800a98a:	1a9a      	subs	r2, r3, r2
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d01b      	beq.n	800a9d0 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	897b      	ldrh	r3, [r7, #10]
 800a99e:	441a      	add	r2, r3
 800a9a0:	7a7b      	ldrb	r3, [r7, #9]
 800a9a2:	441a      	add	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d309      	bcc.n	800a9c0 <CircularQueue_Remove+0x1ae>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68da      	ldr	r2, [r3, #12]
 800a9b0:	897b      	ldrh	r3, [r7, #10]
 800a9b2:	441a      	add	r2, r3
 800a9b4:	7a7b      	ldrb	r3, [r7, #9]
 800a9b6:	441a      	add	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	e005      	b.n	800a9cc <CircularQueue_Remove+0x1ba>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	897b      	ldrh	r3, [r7, #10]
 800a9c6:	441a      	add	r2, r3
 800a9c8:	7a7b      	ldrb	r3, [r7, #9]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	1e5a      	subs	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	897a      	ldrh	r2, [r7, #10]
 800a9e4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	891b      	ldrh	r3, [r3, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <CircularQueue_Sense+0x1e>
 800aa0e:	2302      	movs	r3, #2
 800aa10:	e000      	b.n	800aa14 <CircularQueue_Sense+0x20>
 800aa12:	2300      	movs	r3, #0
 800aa14:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 8090 	beq.w	800ab48 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	891b      	ldrh	r3, [r3, #8]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d121      	bne.n	800aa7a <CircularQueue_Sense+0x86>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6819      	ldr	r1, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	1c58      	adds	r0, r3, #1
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	4298      	cmp	r0, r3
 800aa54:	d306      	bcc.n	800aa64 <CircularQueue_Sense+0x70>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68d8      	ldr	r0, [r3, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	1ac3      	subs	r3, r0, r3
 800aa60:	3301      	adds	r3, #1
 800aa62:	e002      	b.n	800aa6a <CircularQueue_Sense+0x76>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	440b      	add	r3, r1
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	4413      	add	r3, r2
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	e001      	b.n	800aa7e <CircularQueue_Sense+0x8a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	891b      	ldrh	r3, [r3, #8]
 800aa7e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7f1b      	ldrb	r3, [r3, #28]
 800aa84:	f003 0301 	and.w	r3, r3, #1
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d048      	beq.n	800ab1e <CircularQueue_Sense+0x12a>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7f1b      	ldrb	r3, [r3, #28]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d142      	bne.n	800ab1e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa98:	8a7b      	ldrh	r3, [r7, #18]
 800aa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d103      	bne.n	800aaaa <CircularQueue_Sense+0xb6>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	891b      	ldrh	r3, [r3, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d012      	beq.n	800aad0 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68da      	ldr	r2, [r3, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d933      	bls.n	800ab1e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	891b      	ldrh	r3, [r3, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d02f      	beq.n	800ab1e <CircularQueue_Sense+0x12a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	8912      	ldrh	r2, [r2, #8]
 800aacc:	4293      	cmp	r3, r2
 800aace:	d226      	bcs.n	800ab1e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	891b      	ldrh	r3, [r3, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d11d      	bne.n	800ab18 <CircularQueue_Sense+0x124>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6819      	ldr	r1, [r3, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	1c58      	adds	r0, r3, #1
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	4298      	cmp	r0, r3
 800aaf6:	d305      	bcc.n	800ab04 <CircularQueue_Sense+0x110>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	1ac3      	subs	r3, r0, r3
 800ab00:	3301      	adds	r3, #1
 800ab02:	e001      	b.n	800ab08 <CircularQueue_Sense+0x114>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3301      	adds	r3, #1
 800ab08:	440b      	add	r3, r1
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	4413      	add	r3, r2
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	e001      	b.n	800ab1c <CircularQueue_Sense+0x128>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	891b      	ldrh	r3, [r3, #8]
 800ab1c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	7af9      	ldrb	r1, [r7, #11]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4419      	add	r1, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d306      	bcc.n	800ab3e <CircularQueue_Sense+0x14a>
 800ab30:	7af9      	ldrb	r1, [r7, #11]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4419      	add	r1, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	1acb      	subs	r3, r1, r3
 800ab3c:	e002      	b.n	800ab44 <CircularQueue_Sense+0x150>
 800ab3e:	7af9      	ldrb	r1, [r7, #11]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	440b      	add	r3, r1
 800ab44:	4413      	add	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	8a7a      	ldrh	r2, [r7, #18]
 800ab52:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ab54:	697b      	ldr	r3, [r7, #20]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
	...

0800ab64 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ab68:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <LL_FLASH_GetUDN+0x14>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	1fff7580 	.word	0x1fff7580

0800ab7c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ab80:	4b03      	ldr	r3, [pc, #12]	; (800ab90 <LL_FLASH_GetDeviceID+0x14>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	b2db      	uxtb	r3, r3
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	1fff7584 	.word	0x1fff7584

0800ab94 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800ab98:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <LL_FLASH_GetSTCompanyID+0x14>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	0a1b      	lsrs	r3, r3, #8
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	1fff7584 	.word	0x1fff7584

0800abac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800abac:	b5b0      	push	{r4, r5, r7, lr}
 800abae:	b090      	sub	sp, #64	; 0x40
 800abb0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800abb2:	2392      	movs	r3, #146	; 0x92
 800abb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800abb8:	4b45      	ldr	r3, [pc, #276]	; (800acd0 <APP_BLE_Init+0x124>)
 800abba:	1d3c      	adds	r4, r7, #4
 800abbc:	461d      	mov	r5, r3
 800abbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800abce:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800abd2:	f000 fb37 	bl	800b244 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800abd6:	2101      	movs	r1, #1
 800abd8:	2002      	movs	r0, #2
 800abda:	f001 fdb9 	bl	800c750 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800abde:	4a3d      	ldr	r2, [pc, #244]	; (800acd4 <APP_BLE_Init+0x128>)
 800abe0:	2100      	movs	r1, #0
 800abe2:	2002      	movs	r0, #2
 800abe4:	f001 fee0 	bl	800c9a8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800abe8:	1d3b      	adds	r3, r7, #4
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fbf0 	bl	80093d0 <SHCI_C2_BLE_Init>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800abf6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d012      	beq.n	800ac24 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800abfe:	4836      	ldr	r0, [pc, #216]	; (800acd8 <APP_BLE_Init+0x12c>)
 800ac00:	f7ff f9ea 	bl	8009fd8 <DbgTraceGetFileName>
 800ac04:	4601      	mov	r1, r0
 800ac06:	f44f 739c 	mov.w	r3, #312	; 0x138
 800ac0a:	4a34      	ldr	r2, [pc, #208]	; (800acdc <APP_BLE_Init+0x130>)
 800ac0c:	4834      	ldr	r0, [pc, #208]	; (800ace0 <APP_BLE_Init+0x134>)
 800ac0e:	f002 f84d 	bl	800ccac <iprintf>
 800ac12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac16:	4619      	mov	r1, r3
 800ac18:	4832      	ldr	r0, [pc, #200]	; (800ace4 <APP_BLE_Init+0x138>)
 800ac1a:	f002 f847 	bl	800ccac <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ac1e:	f7f7 feb1 	bl	8002984 <Error_Handler>
 800ac22:	e00c      	b.n	800ac3e <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800ac24:	482c      	ldr	r0, [pc, #176]	; (800acd8 <APP_BLE_Init+0x12c>)
 800ac26:	f7ff f9d7 	bl	8009fd8 <DbgTraceGetFileName>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800ac30:	4a2a      	ldr	r2, [pc, #168]	; (800acdc <APP_BLE_Init+0x130>)
 800ac32:	482b      	ldr	r0, [pc, #172]	; (800ace0 <APP_BLE_Init+0x134>)
 800ac34:	f002 f83a 	bl	800ccac <iprintf>
 800ac38:	482b      	ldr	r0, [pc, #172]	; (800ace8 <APP_BLE_Init+0x13c>)
 800ac3a:	f002 f837 	bl	800ccac <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ac3e:	f000 fb17 	bl	800b270 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ac42:	f7fe fb1f 	bl	8009284 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac46:	4b29      	ldr	r3, [pc, #164]	; (800acec <APP_BLE_Init+0x140>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ac4e:	4b27      	ldr	r3, [pc, #156]	; (800acec <APP_BLE_Init+0x140>)
 800ac50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac54:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ac56:	4a26      	ldr	r2, [pc, #152]	; (800acf0 <APP_BLE_Init+0x144>)
 800ac58:	2100      	movs	r1, #0
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	f001 fea4 	bl	800c9a8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ac60:	2006      	movs	r0, #6
 800ac62:	f7fe f982 	bl	8008f6a <aci_hal_set_radio_activity_mask>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ac6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d010      	beq.n	800ac96 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ac74:	4818      	ldr	r0, [pc, #96]	; (800acd8 <APP_BLE_Init+0x12c>)
 800ac76:	f7ff f9af 	bl	8009fd8 <DbgTraceGetFileName>
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	f44f 73b1 	mov.w	r3, #354	; 0x162
 800ac80:	4a16      	ldr	r2, [pc, #88]	; (800acdc <APP_BLE_Init+0x130>)
 800ac82:	4817      	ldr	r0, [pc, #92]	; (800ace0 <APP_BLE_Init+0x134>)
 800ac84:	f002 f812 	bl	800ccac <iprintf>
 800ac88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4819      	ldr	r0, [pc, #100]	; (800acf4 <APP_BLE_Init+0x148>)
 800ac90:	f002 f80c 	bl	800ccac <iprintf>
 800ac94:	e00c      	b.n	800acb0 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ac96:	4810      	ldr	r0, [pc, #64]	; (800acd8 <APP_BLE_Init+0x12c>)
 800ac98:	f7ff f99e 	bl	8009fd8 <DbgTraceGetFileName>
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800aca2:	4a0e      	ldr	r2, [pc, #56]	; (800acdc <APP_BLE_Init+0x130>)
 800aca4:	480e      	ldr	r0, [pc, #56]	; (800ace0 <APP_BLE_Init+0x134>)
 800aca6:	f002 f801 	bl	800ccac <iprintf>
 800acaa:	4813      	ldr	r0, [pc, #76]	; (800acf8 <APP_BLE_Init+0x14c>)
 800acac:	f001 fffe 	bl	800ccac <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800acb0:	f000 ff88 	bl	800bbc4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800acb4:	4b0d      	ldr	r3, [pc, #52]	; (800acec <APP_BLE_Init+0x140>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800acba:	4b0c      	ldr	r3, [pc, #48]	; (800acec <APP_BLE_Init+0x140>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800acc0:	2001      	movs	r0, #1
 800acc2:	f000 fd69 	bl	800b798 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800acc6:	bf00      	nop
}
 800acc8:	3740      	adds	r7, #64	; 0x40
 800acca:	46bd      	mov	sp, r7
 800accc:	bdb0      	pop	{r4, r5, r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800e268 	.word	0x0800e268
 800acd4:	080095ed 	.word	0x080095ed
 800acd8:	0800e15c 	.word	0x0800e15c
 800acdc:	0800f3e0 	.word	0x0800f3e0
 800ace0:	0800e178 	.word	0x0800e178
 800ace4:	0800e18c 	.word	0x0800e18c
 800ace8:	0800e1c4 	.word	0x0800e1c4
 800acec:	20000184 	.word	0x20000184
 800acf0:	0800b91d 	.word	0x0800b91d
 800acf4:	0800e1ec 	.word	0x0800e1ec
 800acf8:	0800e230 	.word	0x0800e230

0800acfc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800acfc:	b5b0      	push	{r4, r5, r7, lr}
 800acfe:	b08e      	sub	sp, #56	; 0x38
 800ad00:	af04      	add	r7, sp, #16
 800ad02:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ad04:	2392      	movs	r3, #146	; 0x92
 800ad06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2bff      	cmp	r3, #255	; 0xff
 800ad16:	f000 811d 	beq.w	800af54 <SVCCTL_App_Notification+0x258>
 800ad1a:	2bff      	cmp	r3, #255	; 0xff
 800ad1c:	f300 8269 	bgt.w	800b1f2 <SVCCTL_App_Notification+0x4f6>
 800ad20:	2b05      	cmp	r3, #5
 800ad22:	d002      	beq.n	800ad2a <SVCCTL_App_Notification+0x2e>
 800ad24:	2b3e      	cmp	r3, #62	; 0x3e
 800ad26:	d042      	beq.n	800adae <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ad28:	e263      	b.n	800b1f2 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	4bb1      	ldr	r3, [pc, #708]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800ad3a:	8adb      	ldrh	r3, [r3, #22]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d128      	bne.n	800ad92 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ad40:	4baf      	ldr	r3, [pc, #700]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ad46:	4bae      	ldr	r3, [pc, #696]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ad4e:	48ad      	ldr	r0, [pc, #692]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800ad50:	f7ff f942 	bl	8009fd8 <DbgTraceGetFileName>
 800ad54:	4601      	mov	r1, r0
 800ad56:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad5a:	4aab      	ldr	r2, [pc, #684]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800ad5c:	48ab      	ldr	r0, [pc, #684]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800ad5e:	f001 ffa5 	bl	800ccac <iprintf>
 800ad62:	48ab      	ldr	r0, [pc, #684]	; (800b010 <SVCCTL_App_Notification+0x314>)
 800ad64:	f002 f83e 	bl	800cde4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ad68:	48a6      	ldr	r0, [pc, #664]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800ad6a:	f7ff f935 	bl	8009fd8 <DbgTraceGetFileName>
 800ad6e:	4601      	mov	r1, r0
 800ad70:	f240 13ab 	movw	r3, #427	; 0x1ab
 800ad74:	4aa4      	ldr	r2, [pc, #656]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800ad76:	48a5      	ldr	r0, [pc, #660]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800ad78:	f001 ff98 	bl	800ccac <iprintf>
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4619      	mov	r1, r3
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	78db      	ldrb	r3, [r3, #3]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	48a1      	ldr	r0, [pc, #644]	; (800b014 <SVCCTL_App_Notification+0x318>)
 800ad8e:	f001 ff8d 	bl	800ccac <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ad92:	2001      	movs	r0, #1
 800ad94:	f000 fd00 	bl	800b798 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ad98:	4b9f      	ldr	r3, [pc, #636]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ad9e:	4b98      	ldr	r3, [pc, #608]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800ada0:	8ada      	ldrh	r2, [r3, #22]
 800ada2:	4b9d      	ldr	r3, [pc, #628]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800ada4:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ada6:	489c      	ldr	r0, [pc, #624]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800ada8:	f000 fef8 	bl	800bb9c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800adac:	e224      	b.n	800b1f8 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	3302      	adds	r3, #2
 800adb2:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d042      	beq.n	800ae42 <SVCCTL_App_Notification+0x146>
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	f040 80c7 	bne.w	800af50 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	3301      	adds	r3, #1
 800adc6:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800adc8:	488e      	ldr	r0, [pc, #568]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800adca:	f7ff f905 	bl	8009fd8 <DbgTraceGetFileName>
 800adce:	4601      	mov	r1, r0
 800add0:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 800add4:	4a8c      	ldr	r2, [pc, #560]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800add6:	488d      	ldr	r0, [pc, #564]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800add8:	f001 ff68 	bl	800ccac <iprintf>
 800addc:	488f      	ldr	r0, [pc, #572]	; (800b01c <SVCCTL_App_Notification+0x320>)
 800adde:	f002 f801 	bl	800cde4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ade2:	4888      	ldr	r0, [pc, #544]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800ade4:	f7ff f8f8 	bl	8009fd8 <DbgTraceGetFileName>
 800ade8:	4601      	mov	r1, r0
 800adea:	f240 13d3 	movw	r3, #467	; 0x1d3
 800adee:	4a86      	ldr	r2, [pc, #536]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800adf0:	4886      	ldr	r0, [pc, #536]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800adf2:	f001 ff5b 	bl	800ccac <iprintf>
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f5 fc92 	bl	8000728 <__aeabi_i2d>
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	4b85      	ldr	r3, [pc, #532]	; (800b020 <SVCCTL_App_Notification+0x324>)
 800ae0a:	f7f5 fa11 	bl	8000230 <__aeabi_dmul>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4610      	mov	r0, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	461c      	mov	r4, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	9400      	str	r4, [sp, #0]
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	487a      	ldr	r0, [pc, #488]	; (800b024 <SVCCTL_App_Notification+0x328>)
 800ae3c:	f001 ff36 	bl	800ccac <iprintf>
          break;
 800ae40:	e087      	b.n	800af52 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800ae48:	486e      	ldr	r0, [pc, #440]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800ae4a:	f7ff f8c5 	bl	8009fd8 <DbgTraceGetFileName>
 800ae4e:	4601      	mov	r1, r0
 800ae50:	f240 13e5 	movw	r3, #485	; 0x1e5
 800ae54:	4a6c      	ldr	r2, [pc, #432]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800ae56:	486d      	ldr	r0, [pc, #436]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800ae58:	f001 ff28 	bl	800ccac <iprintf>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	4619      	mov	r1, r3
 800ae66:	4870      	ldr	r0, [pc, #448]	; (800b028 <SVCCTL_App_Notification+0x32c>)
 800ae68:	f001 ff20 	bl	800ccac <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ae6c:	4865      	ldr	r0, [pc, #404]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800ae6e:	f7ff f8b3 	bl	8009fd8 <DbgTraceGetFileName>
 800ae72:	4601      	mov	r1, r0
 800ae74:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 800ae78:	4a63      	ldr	r2, [pc, #396]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800ae7a:	4864      	ldr	r0, [pc, #400]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800ae7c:	f001 ff16 	bl	800ccac <iprintf>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	7a9b      	ldrb	r3, [r3, #10]
 800ae84:	4618      	mov	r0, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	7a5b      	ldrb	r3, [r3, #9]
 800ae8a:	461c      	mov	r4, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	7a1b      	ldrb	r3, [r3, #8]
 800ae90:	461d      	mov	r5, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	79db      	ldrb	r3, [r3, #7]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	799b      	ldrb	r3, [r3, #6]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	795b      	ldrb	r3, [r3, #5]
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	9101      	str	r1, [sp, #4]
 800aea6:	9200      	str	r2, [sp, #0]
 800aea8:	462b      	mov	r3, r5
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4601      	mov	r1, r0
 800aeae:	485f      	ldr	r0, [pc, #380]	; (800b02c <SVCCTL_App_Notification+0x330>)
 800aeb0:	f001 fefc 	bl	800ccac <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800aeb4:	4853      	ldr	r0, [pc, #332]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800aeb6:	f7ff f88f 	bl	8009fd8 <DbgTraceGetFileName>
 800aeba:	4601      	mov	r1, r0
 800aebc:	f240 13ed 	movw	r3, #493	; 0x1ed
 800aec0:	4a51      	ldr	r2, [pc, #324]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800aec2:	4852      	ldr	r0, [pc, #328]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800aec4:	f001 fef2 	bl	800ccac <iprintf>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f5 fc29 	bl	8000728 <__aeabi_i2d>
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	4b51      	ldr	r3, [pc, #324]	; (800b020 <SVCCTL_App_Notification+0x324>)
 800aedc:	f7f5 f9a8 	bl	8000230 <__aeabi_dmul>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4610      	mov	r0, r2
 800aee6:	4619      	mov	r1, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	461c      	mov	r4, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	461a      	mov	r2, r3
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	9400      	str	r4, [sp, #0]
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4845      	ldr	r0, [pc, #276]	; (800b024 <SVCCTL_App_Notification+0x328>)
 800af0e:	f001 fecd 	bl	800ccac <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800af12:	4b3b      	ldr	r3, [pc, #236]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800af14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d104      	bne.n	800af26 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800af1c:	4b38      	ldr	r3, [pc, #224]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800af1e:	2206      	movs	r2, #6
 800af20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800af24:	e003      	b.n	800af2e <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800af26:	4b36      	ldr	r3, [pc, #216]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800af28:	2205      	movs	r2, #5
 800af2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af34:	b29a      	uxth	r2, r3
 800af36:	4b32      	ldr	r3, [pc, #200]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800af38:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800af3a:	4b37      	ldr	r3, [pc, #220]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800af40:	4b2f      	ldr	r3, [pc, #188]	; (800b000 <SVCCTL_App_Notification+0x304>)
 800af42:	8ada      	ldrh	r2, [r3, #22]
 800af44:	4b34      	ldr	r3, [pc, #208]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800af46:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800af48:	4833      	ldr	r0, [pc, #204]	; (800b018 <SVCCTL_App_Notification+0x31c>)
 800af4a:	f000 fe27 	bl	800bb9c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800af4e:	e000      	b.n	800af52 <SVCCTL_App_Notification+0x256>
          break;
 800af50:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800af52:	e151      	b.n	800b1f8 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	3302      	adds	r3, #2
 800af58:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af64:	f000 8141 	beq.w	800b1ea <SVCCTL_App_Notification+0x4ee>
 800af68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af6c:	f300 8143 	bgt.w	800b1f6 <SVCCTL_App_Notification+0x4fa>
 800af70:	2b04      	cmp	r3, #4
 800af72:	f000 813c 	beq.w	800b1ee <SVCCTL_App_Notification+0x4f2>
 800af76:	2b04      	cmp	r3, #4
 800af78:	f2c0 813d 	blt.w	800b1f6 <SVCCTL_App_Notification+0x4fa>
 800af7c:	f240 420a 	movw	r2, #1034	; 0x40a
 800af80:	4293      	cmp	r3, r2
 800af82:	f300 8138 	bgt.w	800b1f6 <SVCCTL_App_Notification+0x4fa>
 800af86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af8a:	f340 8134 	ble.w	800b1f6 <SVCCTL_App_Notification+0x4fa>
 800af8e:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800af92:	2b09      	cmp	r3, #9
 800af94:	f200 812f 	bhi.w	800b1f6 <SVCCTL_App_Notification+0x4fa>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <SVCCTL_App_Notification+0x2a4>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b165 	.word	0x0800b165
 800afa4:	0800b039 	.word	0x0800b039
 800afa8:	0800b1f7 	.word	0x0800b1f7
 800afac:	0800b1f7 	.word	0x0800b1f7
 800afb0:	0800b1f7 	.word	0x0800b1f7
 800afb4:	0800b1f7 	.word	0x0800b1f7
 800afb8:	0800afc9 	.word	0x0800afc9
 800afbc:	0800b1f7 	.word	0x0800b1f7
 800afc0:	0800b0ab 	.word	0x0800b0ab
 800afc4:	0800afe5 	.word	0x0800afe5
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800afc8:	480e      	ldr	r0, [pc, #56]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800afca:	f7ff f805 	bl	8009fd8 <DbgTraceGetFileName>
 800afce:	4601      	mov	r1, r0
 800afd0:	f240 232f 	movw	r3, #559	; 0x22f
 800afd4:	4a0c      	ldr	r2, [pc, #48]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800afd6:	480d      	ldr	r0, [pc, #52]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800afd8:	f001 fe68 	bl	800ccac <iprintf>
 800afdc:	4814      	ldr	r0, [pc, #80]	; (800b030 <SVCCTL_App_Notification+0x334>)
 800afde:	f001 fe65 	bl	800ccac <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800afe2:	e105      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800afe4:	4807      	ldr	r0, [pc, #28]	; (800b004 <SVCCTL_App_Notification+0x308>)
 800afe6:	f7fe fff7 	bl	8009fd8 <DbgTraceGetFileName>
 800afea:	4601      	mov	r1, r0
 800afec:	f240 233f 	movw	r3, #575	; 0x23f
 800aff0:	4a05      	ldr	r2, [pc, #20]	; (800b008 <SVCCTL_App_Notification+0x30c>)
 800aff2:	4806      	ldr	r0, [pc, #24]	; (800b00c <SVCCTL_App_Notification+0x310>)
 800aff4:	f001 fe5a 	bl	800ccac <iprintf>
 800aff8:	480e      	ldr	r0, [pc, #56]	; (800b034 <SVCCTL_App_Notification+0x338>)
 800affa:	f001 fef3 	bl	800cde4 <puts>
          break;
 800affe:	e0f7      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
 800b000:	20000184 	.word	0x20000184
 800b004:	0800e15c 	.word	0x0800e15c
 800b008:	0800f3f0 	.word	0x0800f3f0
 800b00c:	0800e178 	.word	0x0800e178
 800b010:	0800e2a0 	.word	0x0800e2a0
 800b014:	0800e2cc 	.word	0x0800e2cc
 800b018:	200017c0 	.word	0x200017c0
 800b01c:	0800e308 	.word	0x0800e308
 800b020:	3ff40000 	.word	0x3ff40000
 800b024:	0800e33c 	.word	0x0800e33c
 800b028:	0800e3a8 	.word	0x0800e3a8
 800b02c:	0800e3f0 	.word	0x0800e3f0
 800b030:	0800e440 	.word	0x0800e440
 800b034:	0800e468 	.word	0x0800e468
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b038:	4872      	ldr	r0, [pc, #456]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b03a:	f7fe ffcd 	bl	8009fd8 <DbgTraceGetFileName>
 800b03e:	4601      	mov	r1, r0
 800b040:	f240 2346 	movw	r3, #582	; 0x246
 800b044:	4a70      	ldr	r2, [pc, #448]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b046:	4871      	ldr	r0, [pc, #452]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b048:	f001 fe30 	bl	800ccac <iprintf>
 800b04c:	4870      	ldr	r0, [pc, #448]	; (800b210 <SVCCTL_App_Notification+0x514>)
 800b04e:	f001 fec9 	bl	800cde4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b052:	4b70      	ldr	r3, [pc, #448]	; (800b214 <SVCCTL_App_Notification+0x518>)
 800b054:	8adb      	ldrh	r3, [r3, #22]
 800b056:	4970      	ldr	r1, [pc, #448]	; (800b218 <SVCCTL_App_Notification+0x51c>)
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fd f9dd 	bl	8008418 <aci_gap_pass_key_resp>
 800b05e:	4603      	mov	r3, r0
 800b060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d010      	beq.n	800b08e <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b06c:	4865      	ldr	r0, [pc, #404]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b06e:	f7fe ffb3 	bl	8009fd8 <DbgTraceGetFileName>
 800b072:	4601      	mov	r1, r0
 800b074:	f240 234b 	movw	r3, #587	; 0x24b
 800b078:	4a63      	ldr	r2, [pc, #396]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b07a:	4864      	ldr	r0, [pc, #400]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b07c:	f001 fe16 	bl	800ccac <iprintf>
 800b080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b084:	4619      	mov	r1, r3
 800b086:	4865      	ldr	r0, [pc, #404]	; (800b21c <SVCCTL_App_Notification+0x520>)
 800b088:	f001 fe10 	bl	800ccac <iprintf>
          break;
 800b08c:	e0b0      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800b08e:	485d      	ldr	r0, [pc, #372]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b090:	f7fe ffa2 	bl	8009fd8 <DbgTraceGetFileName>
 800b094:	4601      	mov	r1, r0
 800b096:	f240 234f 	movw	r3, #591	; 0x24f
 800b09a:	4a5b      	ldr	r2, [pc, #364]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b09c:	485b      	ldr	r0, [pc, #364]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b09e:	f001 fe05 	bl	800ccac <iprintf>
 800b0a2:	485f      	ldr	r0, [pc, #380]	; (800b220 <SVCCTL_App_Notification+0x524>)
 800b0a4:	f001 fe9e 	bl	800cde4 <puts>
          break;
 800b0a8:	e0a2      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800b0aa:	4856      	ldr	r0, [pc, #344]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b0ac:	f7fe ff94 	bl	8009fd8 <DbgTraceGetFileName>
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	f240 2357 	movw	r3, #599	; 0x257
 800b0b6:	4a54      	ldr	r2, [pc, #336]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b0b8:	4854      	ldr	r0, [pc, #336]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b0ba:	f001 fdf7 	bl	800ccac <iprintf>
 800b0be:	4859      	ldr	r0, [pc, #356]	; (800b224 <SVCCTL_App_Notification+0x528>)
 800b0c0:	f001 fe90 	bl	800cde4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800b0c4:	484f      	ldr	r0, [pc, #316]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b0c6:	f7fe ff87 	bl	8009fd8 <DbgTraceGetFileName>
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b0d0:	4a4d      	ldr	r2, [pc, #308]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b0d2:	484e      	ldr	r0, [pc, #312]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b0d4:	f001 fdea 	bl	800ccac <iprintf>
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	3302      	adds	r3, #2
 800b0dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4851      	ldr	r0, [pc, #324]	; (800b228 <SVCCTL_App_Notification+0x52c>)
 800b0e4:	f001 fde2 	bl	800ccac <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800b0e8:	4846      	ldr	r0, [pc, #280]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b0ea:	f7fe ff75 	bl	8009fd8 <DbgTraceGetFileName>
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	f240 235a 	movw	r3, #602	; 0x25a
 800b0f4:	4a44      	ldr	r2, [pc, #272]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b0f6:	4845      	ldr	r0, [pc, #276]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b0f8:	f001 fdd8 	bl	800ccac <iprintf>
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	3302      	adds	r3, #2
 800b100:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b104:	4619      	mov	r1, r3
 800b106:	4849      	ldr	r0, [pc, #292]	; (800b22c <SVCCTL_App_Notification+0x530>)
 800b108:	f001 fdd0 	bl	800ccac <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b10c:	4b41      	ldr	r3, [pc, #260]	; (800b214 <SVCCTL_App_Notification+0x518>)
 800b10e:	8adb      	ldrh	r3, [r3, #22]
 800b110:	2101      	movs	r1, #1
 800b112:	4618      	mov	r0, r3
 800b114:	f7fd fb2a 	bl	800876c <aci_gap_numeric_comparison_value_confirm_yesno>
 800b118:	4603      	mov	r3, r0
 800b11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b11e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b122:	2b00      	cmp	r3, #0
 800b124:	d010      	beq.n	800b148 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800b126:	4837      	ldr	r0, [pc, #220]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b128:	f7fe ff56 	bl	8009fd8 <DbgTraceGetFileName>
 800b12c:	4601      	mov	r1, r0
 800b12e:	f240 235f 	movw	r3, #607	; 0x25f
 800b132:	4a35      	ldr	r2, [pc, #212]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b134:	4835      	ldr	r0, [pc, #212]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b136:	f001 fdb9 	bl	800ccac <iprintf>
 800b13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b13e:	4619      	mov	r1, r3
 800b140:	483b      	ldr	r0, [pc, #236]	; (800b230 <SVCCTL_App_Notification+0x534>)
 800b142:	f001 fdb3 	bl	800ccac <iprintf>
          break;
 800b146:	e053      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800b148:	482e      	ldr	r0, [pc, #184]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b14a:	f7fe ff45 	bl	8009fd8 <DbgTraceGetFileName>
 800b14e:	4601      	mov	r1, r0
 800b150:	f240 2363 	movw	r3, #611	; 0x263
 800b154:	4a2c      	ldr	r2, [pc, #176]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b156:	482d      	ldr	r0, [pc, #180]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b158:	f001 fda8 	bl	800ccac <iprintf>
 800b15c:	4835      	ldr	r0, [pc, #212]	; (800b234 <SVCCTL_App_Notification+0x538>)
 800b15e:	f001 fe41 	bl	800cde4 <puts>
          break;
 800b162:	e045      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	3302      	adds	r3, #2
 800b168:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800b16a:	4826      	ldr	r0, [pc, #152]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b16c:	f7fe ff34 	bl	8009fd8 <DbgTraceGetFileName>
 800b170:	4601      	mov	r1, r0
 800b172:	f240 236d 	movw	r3, #621	; 0x26d
 800b176:	4a24      	ldr	r2, [pc, #144]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b178:	4824      	ldr	r0, [pc, #144]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b17a:	f001 fd97 	bl	800ccac <iprintf>
 800b17e:	482e      	ldr	r0, [pc, #184]	; (800b238 <SVCCTL_App_Notification+0x53c>)
 800b180:	f001 fe30 	bl	800cde4 <puts>
          if (p_pairing_complete->Status != 0)
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	789b      	ldrb	r3, [r3, #2]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d013      	beq.n	800b1b4 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800b18c:	481d      	ldr	r0, [pc, #116]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b18e:	f7fe ff23 	bl	8009fd8 <DbgTraceGetFileName>
 800b192:	4601      	mov	r1, r0
 800b194:	f44f 731c 	mov.w	r3, #624	; 0x270
 800b198:	4a1b      	ldr	r2, [pc, #108]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b19a:	481c      	ldr	r0, [pc, #112]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b19c:	f001 fd86 	bl	800ccac <iprintf>
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	789b      	ldrb	r3, [r3, #2]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	78db      	ldrb	r3, [r3, #3]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4823      	ldr	r0, [pc, #140]	; (800b23c <SVCCTL_App_Notification+0x540>)
 800b1ae:	f001 fd7d 	bl	800ccac <iprintf>
 800b1b2:	e00c      	b.n	800b1ce <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800b1b4:	4813      	ldr	r0, [pc, #76]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b1b6:	f7fe ff0f 	bl	8009fd8 <DbgTraceGetFileName>
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	f44f 731d 	mov.w	r3, #628	; 0x274
 800b1c0:	4a11      	ldr	r2, [pc, #68]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b1c2:	4812      	ldr	r0, [pc, #72]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b1c4:	f001 fd72 	bl	800ccac <iprintf>
 800b1c8:	481d      	ldr	r0, [pc, #116]	; (800b240 <SVCCTL_App_Notification+0x544>)
 800b1ca:	f001 fe0b 	bl	800cde4 <puts>
          APP_DBG_MSG("\n");
 800b1ce:	480d      	ldr	r0, [pc, #52]	; (800b204 <SVCCTL_App_Notification+0x508>)
 800b1d0:	f7fe ff02 	bl	8009fd8 <DbgTraceGetFileName>
 800b1d4:	4601      	mov	r1, r0
 800b1d6:	f240 2376 	movw	r3, #630	; 0x276
 800b1da:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <SVCCTL_App_Notification+0x50c>)
 800b1dc:	480b      	ldr	r0, [pc, #44]	; (800b20c <SVCCTL_App_Notification+0x510>)
 800b1de:	f001 fd65 	bl	800ccac <iprintf>
 800b1e2:	200a      	movs	r0, #10
 800b1e4:	f001 fd7a 	bl	800ccdc <putchar>
          break;
 800b1e8:	e002      	b.n	800b1f0 <SVCCTL_App_Notification+0x4f4>
          break;
 800b1ea:	bf00      	nop
 800b1ec:	e003      	b.n	800b1f6 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b1ee:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b1f0:	e001      	b.n	800b1f6 <SVCCTL_App_Notification+0x4fa>
      break;
 800b1f2:	bf00      	nop
 800b1f4:	e000      	b.n	800b1f8 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b1f6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b1f8:	2301      	movs	r3, #1
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3728      	adds	r7, #40	; 0x28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bdb0      	pop	{r4, r5, r7, pc}
 800b202:	bf00      	nop
 800b204:	0800e15c 	.word	0x0800e15c
 800b208:	0800f3f0 	.word	0x0800f3f0
 800b20c:	0800e178 	.word	0x0800e178
 800b210:	0800e498 	.word	0x0800e498
 800b214:	20000184 	.word	0x20000184
 800b218:	0001b207 	.word	0x0001b207
 800b21c:	0800e4c0 	.word	0x0800e4c0
 800b220:	0800e4f4 	.word	0x0800e4f4
 800b224:	0800e51c 	.word	0x0800e51c
 800b228:	0800e550 	.word	0x0800e550
 800b22c:	0800e56c 	.word	0x0800e56c
 800b230:	0800e584 	.word	0x0800e584
 800b234:	0800e5d4 	.word	0x0800e5d4
 800b238:	0800e61c 	.word	0x0800e61c
 800b23c:	0800e648 	.word	0x0800e648
 800b240:	0800e684 	.word	0x0800e684

0800b244 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b24a:	4b06      	ldr	r3, [pc, #24]	; (800b264 <Ble_Tl_Init+0x20>)
 800b24c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b24e:	4b06      	ldr	r3, [pc, #24]	; (800b268 <Ble_Tl_Init+0x24>)
 800b250:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b252:	463b      	mov	r3, r7
 800b254:	4619      	mov	r1, r3
 800b256:	4805      	ldr	r0, [pc, #20]	; (800b26c <Ble_Tl_Init+0x28>)
 800b258:	f7fe f9ac 	bl	80095b4 <hci_init>

  return;
 800b25c:	bf00      	nop
}
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200300d8 	.word	0x200300d8
 800b268:	0800ba5d 	.word	0x0800ba5d
 800b26c:	0800ba25 	.word	0x0800ba25

0800b270 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b272:	b08d      	sub	sp, #52	; 0x34
 800b274:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b276:	2300      	movs	r3, #0
 800b278:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b27a:	2392      	movs	r3, #146	; 0x92
 800b27c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b27e:	48a3      	ldr	r0, [pc, #652]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b280:	f7fe feaa 	bl	8009fd8 <DbgTraceGetFileName>
 800b284:	4601      	mov	r1, r0
 800b286:	f240 23b6 	movw	r3, #694	; 0x2b6
 800b28a:	4aa1      	ldr	r2, [pc, #644]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b28c:	48a1      	ldr	r0, [pc, #644]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b28e:	f001 fd0d 	bl	800ccac <iprintf>
 800b292:	48a1      	ldr	r0, [pc, #644]	; (800b518 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b294:	f001 fda6 	bl	800cde4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b298:	f7fd febb 	bl	8009012 <hci_reset>
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00f      	beq.n	800b2c6 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b2a6:	4899      	ldr	r0, [pc, #612]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b2a8:	f7fe fe96 	bl	8009fd8 <DbgTraceGetFileName>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	f240 23bf 	movw	r3, #703	; 0x2bf
 800b2b2:	4a97      	ldr	r2, [pc, #604]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b2b4:	4897      	ldr	r0, [pc, #604]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b2b6:	f001 fcf9 	bl	800ccac <iprintf>
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4897      	ldr	r0, [pc, #604]	; (800b51c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b2c0:	f001 fcf4 	bl	800ccac <iprintf>
 800b2c4:	e00c      	b.n	800b2e0 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b2c6:	4891      	ldr	r0, [pc, #580]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b2c8:	f7fe fe86 	bl	8009fd8 <DbgTraceGetFileName>
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	f240 23c3 	movw	r3, #707	; 0x2c3
 800b2d2:	4a8f      	ldr	r2, [pc, #572]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b2d4:	488f      	ldr	r0, [pc, #572]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b2d6:	f001 fce9 	bl	800ccac <iprintf>
 800b2da:	4891      	ldr	r0, [pc, #580]	; (800b520 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b2dc:	f001 fd82 	bl	800cde4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b2e0:	f000 fad8 	bl	800b894 <BleGetBdAddress>
 800b2e4:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	2106      	movs	r1, #6
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	f7fd fd51 	bl	8008d92 <aci_hal_write_config_data>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00f      	beq.n	800b31a <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b2fa:	4884      	ldr	r0, [pc, #528]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b2fc:	f7fe fe6c 	bl	8009fd8 <DbgTraceGetFileName>
 800b300:	4601      	mov	r1, r0
 800b302:	f240 23cd 	movw	r3, #717	; 0x2cd
 800b306:	4a82      	ldr	r2, [pc, #520]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b308:	4882      	ldr	r0, [pc, #520]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b30a:	f001 fccf 	bl	800ccac <iprintf>
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	4619      	mov	r1, r3
 800b312:	4884      	ldr	r0, [pc, #528]	; (800b524 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b314:	f001 fcca 	bl	800ccac <iprintf>
 800b318:	e035      	b.n	800b386 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b31a:	487c      	ldr	r0, [pc, #496]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b31c:	f7fe fe5c 	bl	8009fd8 <DbgTraceGetFileName>
 800b320:	4601      	mov	r1, r0
 800b322:	f240 23d1 	movw	r3, #721	; 0x2d1
 800b326:	4a7a      	ldr	r2, [pc, #488]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b328:	487a      	ldr	r0, [pc, #488]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b32a:	f001 fcbf 	bl	800ccac <iprintf>
 800b32e:	487e      	ldr	r0, [pc, #504]	; (800b528 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b330:	f001 fd58 	bl	800cde4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b334:	4875      	ldr	r0, [pc, #468]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b336:	f7fe fe4f 	bl	8009fd8 <DbgTraceGetFileName>
 800b33a:	4601      	mov	r1, r0
 800b33c:	f240 23d2 	movw	r3, #722	; 0x2d2
 800b340:	4a73      	ldr	r2, [pc, #460]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b342:	4874      	ldr	r0, [pc, #464]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b344:	f001 fcb2 	bl	800ccac <iprintf>
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	3305      	adds	r3, #5
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	4618      	mov	r0, r3
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3304      	adds	r3, #4
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	461c      	mov	r4, r3
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	3303      	adds	r3, #3
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	461d      	mov	r5, r3
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3302      	adds	r3, #2
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	3301      	adds	r3, #1
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	4619      	mov	r1, r3
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	9302      	str	r3, [sp, #8]
 800b376:	9101      	str	r1, [sp, #4]
 800b378:	9200      	str	r2, [sp, #0]
 800b37a:	462b      	mov	r3, r5
 800b37c:	4622      	mov	r2, r4
 800b37e:	4601      	mov	r1, r0
 800b380:	486a      	ldr	r0, [pc, #424]	; (800b52c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b382:	f001 fc93 	bl	800ccac <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b386:	4a6a      	ldr	r2, [pc, #424]	; (800b530 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b388:	2110      	movs	r1, #16
 800b38a:	2018      	movs	r0, #24
 800b38c:	f7fd fd01 	bl	8008d92 <aci_hal_write_config_data>
 800b390:	4603      	mov	r3, r0
 800b392:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b394:	7dfb      	ldrb	r3, [r7, #23]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00f      	beq.n	800b3ba <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b39a:	485c      	ldr	r0, [pc, #368]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b39c:	f7fe fe1c 	bl	8009fd8 <DbgTraceGetFileName>
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	f240 3319 	movw	r3, #793	; 0x319
 800b3a6:	4a5a      	ldr	r2, [pc, #360]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3a8:	485a      	ldr	r0, [pc, #360]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3aa:	f001 fc7f 	bl	800ccac <iprintf>
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4860      	ldr	r0, [pc, #384]	; (800b534 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b3b4:	f001 fc7a 	bl	800ccac <iprintf>
 800b3b8:	e00c      	b.n	800b3d4 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b3ba:	4854      	ldr	r0, [pc, #336]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b3bc:	f7fe fe0c 	bl	8009fd8 <DbgTraceGetFileName>
 800b3c0:	4601      	mov	r1, r0
 800b3c2:	f240 331d 	movw	r3, #797	; 0x31d
 800b3c6:	4a52      	ldr	r2, [pc, #328]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3c8:	4852      	ldr	r0, [pc, #328]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3ca:	f001 fc6f 	bl	800ccac <iprintf>
 800b3ce:	485a      	ldr	r0, [pc, #360]	; (800b538 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b3d0:	f001 fd08 	bl	800cde4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b3d4:	4a59      	ldr	r2, [pc, #356]	; (800b53c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b3d6:	2110      	movs	r1, #16
 800b3d8:	2008      	movs	r0, #8
 800b3da:	f7fd fcda 	bl	8008d92 <aci_hal_write_config_data>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00f      	beq.n	800b408 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b3e8:	4848      	ldr	r0, [pc, #288]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b3ea:	f7fe fdf5 	bl	8009fd8 <DbgTraceGetFileName>
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	f240 3326 	movw	r3, #806	; 0x326
 800b3f4:	4a46      	ldr	r2, [pc, #280]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3f6:	4847      	ldr	r0, [pc, #284]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3f8:	f001 fc58 	bl	800ccac <iprintf>
 800b3fc:	7dfb      	ldrb	r3, [r7, #23]
 800b3fe:	4619      	mov	r1, r3
 800b400:	484f      	ldr	r0, [pc, #316]	; (800b540 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b402:	f001 fc53 	bl	800ccac <iprintf>
 800b406:	e00c      	b.n	800b422 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b408:	4840      	ldr	r0, [pc, #256]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b40a:	f7fe fde5 	bl	8009fd8 <DbgTraceGetFileName>
 800b40e:	4601      	mov	r1, r0
 800b410:	f240 332a 	movw	r3, #810	; 0x32a
 800b414:	4a3e      	ldr	r2, [pc, #248]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b416:	483f      	ldr	r0, [pc, #252]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b418:	f001 fc48 	bl	800ccac <iprintf>
 800b41c:	4849      	ldr	r0, [pc, #292]	; (800b544 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b41e:	f001 fce1 	bl	800cde4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b422:	2118      	movs	r1, #24
 800b424:	2001      	movs	r0, #1
 800b426:	f7fd fd39 	bl	8008e9c <aci_hal_set_tx_power_level>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00f      	beq.n	800b454 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b434:	4835      	ldr	r0, [pc, #212]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b436:	f7fe fdcf 	bl	8009fd8 <DbgTraceGetFileName>
 800b43a:	4601      	mov	r1, r0
 800b43c:	f240 3333 	movw	r3, #819	; 0x333
 800b440:	4a33      	ldr	r2, [pc, #204]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b442:	4834      	ldr	r0, [pc, #208]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b444:	f001 fc32 	bl	800ccac <iprintf>
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	4619      	mov	r1, r3
 800b44c:	483e      	ldr	r0, [pc, #248]	; (800b548 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b44e:	f001 fc2d 	bl	800ccac <iprintf>
 800b452:	e00c      	b.n	800b46e <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b454:	482d      	ldr	r0, [pc, #180]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b456:	f7fe fdbf 	bl	8009fd8 <DbgTraceGetFileName>
 800b45a:	4601      	mov	r1, r0
 800b45c:	f240 3337 	movw	r3, #823	; 0x337
 800b460:	4a2b      	ldr	r2, [pc, #172]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b462:	482c      	ldr	r0, [pc, #176]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b464:	f001 fc22 	bl	800ccac <iprintf>
 800b468:	4838      	ldr	r0, [pc, #224]	; (800b54c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b46a:	f001 fcbb 	bl	800cde4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b46e:	f7fd f9e4 	bl	800883a <aci_gatt_init>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00f      	beq.n	800b49c <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b47c:	4823      	ldr	r0, [pc, #140]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b47e:	f7fe fdab 	bl	8009fd8 <DbgTraceGetFileName>
 800b482:	4601      	mov	r1, r0
 800b484:	f44f 7350 	mov.w	r3, #832	; 0x340
 800b488:	4a21      	ldr	r2, [pc, #132]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b48a:	4822      	ldr	r0, [pc, #136]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b48c:	f001 fc0e 	bl	800ccac <iprintf>
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	4619      	mov	r1, r3
 800b494:	482e      	ldr	r0, [pc, #184]	; (800b550 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b496:	f001 fc09 	bl	800ccac <iprintf>
 800b49a:	e00c      	b.n	800b4b6 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b49c:	481b      	ldr	r0, [pc, #108]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b49e:	f7fe fd9b 	bl	8009fd8 <DbgTraceGetFileName>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	f44f 7351 	mov.w	r3, #836	; 0x344
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b4aa:	481a      	ldr	r0, [pc, #104]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b4ac:	f001 fbfe 	bl	800ccac <iprintf>
 800b4b0:	4828      	ldr	r0, [pc, #160]	; (800b554 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b4b2:	f001 fc97 	bl	800cde4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	f043 0301 	orr.w	r3, r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d069      	beq.n	800b59c <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b4c8:	4b23      	ldr	r3, [pc, #140]	; (800b558 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b4ca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b4cc:	1dba      	adds	r2, r7, #6
 800b4ce:	7bf8      	ldrb	r0, [r7, #15]
 800b4d0:	1cbb      	adds	r3, r7, #2
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	1d3b      	adds	r3, r7, #4
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	2205      	movs	r2, #5
 800b4dc:	2100      	movs	r1, #0
 800b4de:	f7fd f802 	bl	80084e6 <aci_gap_init>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b4e6:	7dfb      	ldrb	r3, [r7, #23]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d039      	beq.n	800b560 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b4ec:	4807      	ldr	r0, [pc, #28]	; (800b50c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b4ee:	f7fe fd73 	bl	8009fd8 <DbgTraceGetFileName>
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	f44f 7359 	mov.w	r3, #868	; 0x364
 800b4f8:	4a05      	ldr	r2, [pc, #20]	; (800b510 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b4fa:	4806      	ldr	r0, [pc, #24]	; (800b514 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b4fc:	f001 fbd6 	bl	800ccac <iprintf>
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	4619      	mov	r1, r3
 800b504:	4815      	ldr	r0, [pc, #84]	; (800b55c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b506:	f001 fbd1 	bl	800ccac <iprintf>
 800b50a:	e036      	b.n	800b57a <Ble_Hci_Gap_Gatt_Init+0x30a>
 800b50c:	0800e15c 	.word	0x0800e15c
 800b510:	0800f408 	.word	0x0800f408
 800b514:	0800e178 	.word	0x0800e178
 800b518:	0800e69c 	.word	0x0800e69c
 800b51c:	0800e6c8 	.word	0x0800e6c8
 800b520:	0800e6f8 	.word	0x0800e6f8
 800b524:	0800e718 	.word	0x0800e718
 800b528:	0800e774 	.word	0x0800e774
 800b52c:	0800e7c0 	.word	0x0800e7c0
 800b530:	0800f3c0 	.word	0x0800f3c0
 800b534:	0800e7fc 	.word	0x0800e7fc
 800b538:	0800e854 	.word	0x0800e854
 800b53c:	0800f3d0 	.word	0x0800f3d0
 800b540:	0800e89c 	.word	0x0800e89c
 800b544:	0800e8f4 	.word	0x0800e8f4
 800b548:	0800e93c 	.word	0x0800e93c
 800b54c:	0800e97c 	.word	0x0800e97c
 800b550:	0800e9ac 	.word	0x0800e9ac
 800b554:	0800e9e0 	.word	0x0800e9e0
 800b558:	0800ea04 	.word	0x0800ea04
 800b55c:	0800ea0c 	.word	0x0800ea0c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b560:	487e      	ldr	r0, [pc, #504]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b562:	f7fe fd39 	bl	8009fd8 <DbgTraceGetFileName>
 800b566:	4601      	mov	r1, r0
 800b568:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b56c:	4a7c      	ldr	r2, [pc, #496]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b56e:	487d      	ldr	r0, [pc, #500]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b570:	f001 fb9c 	bl	800ccac <iprintf>
 800b574:	487c      	ldr	r0, [pc, #496]	; (800b768 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800b576:	f001 fc35 	bl	800cde4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b57a:	88fc      	ldrh	r4, [r7, #6]
 800b57c:	88bd      	ldrh	r5, [r7, #4]
 800b57e:	68b8      	ldr	r0, [r7, #8]
 800b580:	f7f4 fdfe 	bl	8000180 <strlen>
 800b584:	4603      	mov	r3, r0
 800b586:	b2da      	uxtb	r2, r3
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	4629      	mov	r1, r5
 800b592:	4620      	mov	r0, r4
 800b594:	f7fd fb54 	bl	8008c40 <aci_gatt_update_char_value>
 800b598:	4603      	mov	r3, r0
 800b59a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b59c:	88f8      	ldrh	r0, [r7, #6]
 800b59e:	8879      	ldrh	r1, [r7, #2]
 800b5a0:	463b      	mov	r3, r7
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f7fd fb4a 	bl	8008c40 <aci_gatt_update_char_value>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	2102      	movs	r1, #2
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	f7fd fd50 	bl	800905a <hci_le_set_default_phy>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00f      	beq.n	800b5e4 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b5c4:	4865      	ldr	r0, [pc, #404]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b5c6:	f7fe fd07 	bl	8009fd8 <DbgTraceGetFileName>
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	f240 338a 	movw	r3, #906	; 0x38a
 800b5d0:	4a63      	ldr	r2, [pc, #396]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b5d2:	4864      	ldr	r0, [pc, #400]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b5d4:	f001 fb6a 	bl	800ccac <iprintf>
 800b5d8:	7dfb      	ldrb	r3, [r7, #23]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4863      	ldr	r0, [pc, #396]	; (800b76c <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800b5de:	f001 fb65 	bl	800ccac <iprintf>
 800b5e2:	e00c      	b.n	800b5fe <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b5e4:	485d      	ldr	r0, [pc, #372]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b5e6:	f7fe fcf7 	bl	8009fd8 <DbgTraceGetFileName>
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	f240 338e 	movw	r3, #910	; 0x38e
 800b5f0:	4a5b      	ldr	r2, [pc, #364]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b5f2:	485c      	ldr	r0, [pc, #368]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b5f4:	f001 fb5a 	bl	800ccac <iprintf>
 800b5f8:	485d      	ldr	r0, [pc, #372]	; (800b770 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800b5fa:	f001 fbf3 	bl	800cde4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b5fe:	4b5d      	ldr	r3, [pc, #372]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b600:	2201      	movs	r2, #1
 800b602:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b604:	4b5b      	ldr	r3, [pc, #364]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fc fded 	bl	80081e8 <aci_gap_set_io_capability>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00f      	beq.n	800b638 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b618:	4850      	ldr	r0, [pc, #320]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b61a:	f7fe fcdd 	bl	8009fd8 <DbgTraceGetFileName>
 800b61e:	4601      	mov	r1, r0
 800b620:	f44f 7366 	mov.w	r3, #920	; 0x398
 800b624:	4a4e      	ldr	r2, [pc, #312]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b626:	484f      	ldr	r0, [pc, #316]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b628:	f001 fb40 	bl	800ccac <iprintf>
 800b62c:	7dfb      	ldrb	r3, [r7, #23]
 800b62e:	4619      	mov	r1, r3
 800b630:	4851      	ldr	r0, [pc, #324]	; (800b778 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800b632:	f001 fb3b 	bl	800ccac <iprintf>
 800b636:	e00c      	b.n	800b652 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b638:	4848      	ldr	r0, [pc, #288]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b63a:	f7fe fccd 	bl	8009fd8 <DbgTraceGetFileName>
 800b63e:	4601      	mov	r1, r0
 800b640:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800b644:	4a46      	ldr	r2, [pc, #280]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b646:	4847      	ldr	r0, [pc, #284]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b648:	f001 fb30 	bl	800ccac <iprintf>
 800b64c:	484b      	ldr	r0, [pc, #300]	; (800b77c <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800b64e:	f001 fbc9 	bl	800cde4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b652:	4b48      	ldr	r3, [pc, #288]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b654:	2201      	movs	r2, #1
 800b656:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b658:	4b46      	ldr	r3, [pc, #280]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b65a:	2208      	movs	r2, #8
 800b65c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b65e:	4b45      	ldr	r3, [pc, #276]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b660:	2210      	movs	r2, #16
 800b662:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b664:	4b43      	ldr	r3, [pc, #268]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b666:	2200      	movs	r2, #0
 800b668:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b66a:	4b42      	ldr	r3, [pc, #264]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b66c:	4a44      	ldr	r2, [pc, #272]	; (800b780 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800b66e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b670:	4b40      	ldr	r3, [pc, #256]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b672:	2200      	movs	r2, #0
 800b674:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b676:	4b3f      	ldr	r3, [pc, #252]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b678:	789c      	ldrb	r4, [r3, #2]
 800b67a:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b67c:	785d      	ldrb	r5, [r3, #1]
 800b67e:	4b3d      	ldr	r3, [pc, #244]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b680:	791b      	ldrb	r3, [r3, #4]
 800b682:	4a3c      	ldr	r2, [pc, #240]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b684:	7952      	ldrb	r2, [r2, #5]
 800b686:	493b      	ldr	r1, [pc, #236]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b688:	78c9      	ldrb	r1, [r1, #3]
 800b68a:	483a      	ldr	r0, [pc, #232]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b68c:	6880      	ldr	r0, [r0, #8]
 800b68e:	2600      	movs	r6, #0
 800b690:	9604      	str	r6, [sp, #16]
 800b692:	9003      	str	r0, [sp, #12]
 800b694:	9102      	str	r1, [sp, #8]
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	2201      	movs	r2, #1
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7fc fdf5 	bl	8008290 <aci_gap_set_authentication_requirement>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_BLE_ADDRESS_TYPE);
  if (ret != BLE_STATUS_SUCCESS)
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00f      	beq.n	800b6d0 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b6b0:	482a      	ldr	r0, [pc, #168]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b6b2:	f7fe fc91 	bl	8009fd8 <DbgTraceGetFileName>
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	f240 33b7 	movw	r3, #951	; 0x3b7
 800b6bc:	4a28      	ldr	r2, [pc, #160]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b6be:	4829      	ldr	r0, [pc, #164]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b6c0:	f001 faf4 	bl	800ccac <iprintf>
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	482e      	ldr	r0, [pc, #184]	; (800b784 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800b6ca:	f001 faef 	bl	800ccac <iprintf>
 800b6ce:	e00c      	b.n	800b6ea <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b6d0:	4822      	ldr	r0, [pc, #136]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b6d2:	f7fe fc81 	bl	8009fd8 <DbgTraceGetFileName>
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	f240 33bb 	movw	r3, #955	; 0x3bb
 800b6dc:	4a20      	ldr	r2, [pc, #128]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b6de:	4821      	ldr	r0, [pc, #132]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b6e0:	f001 fae4 	bl	800ccac <iprintf>
 800b6e4:	4828      	ldr	r0, [pc, #160]	; (800b788 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800b6e6:	f001 fb7d 	bl	800cde4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b6ea:	4b22      	ldr	r3, [pc, #136]	; (800b774 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6ec:	789b      	ldrb	r3, [r3, #2]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d023      	beq.n	800b73a <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800b6f2:	f7fd f817 	bl	8008724 <aci_gap_configure_whitelist>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00f      	beq.n	800b720 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b700:	4816      	ldr	r0, [pc, #88]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b702:	f7fe fc69 	bl	8009fd8 <DbgTraceGetFileName>
 800b706:	4601      	mov	r1, r0
 800b708:	f240 33c6 	movw	r3, #966	; 0x3c6
 800b70c:	4a14      	ldr	r2, [pc, #80]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b70e:	4815      	ldr	r0, [pc, #84]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b710:	f001 facc 	bl	800ccac <iprintf>
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	4619      	mov	r1, r3
 800b718:	481c      	ldr	r0, [pc, #112]	; (800b78c <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800b71a:	f001 fac7 	bl	800ccac <iprintf>
 800b71e:	e00c      	b.n	800b73a <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b720:	480e      	ldr	r0, [pc, #56]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b722:	f7fe fc59 	bl	8009fd8 <DbgTraceGetFileName>
 800b726:	4601      	mov	r1, r0
 800b728:	f240 33ca 	movw	r3, #970	; 0x3ca
 800b72c:	4a0c      	ldr	r2, [pc, #48]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b72e:	480d      	ldr	r0, [pc, #52]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b730:	f001 fabc 	bl	800ccac <iprintf>
 800b734:	4816      	ldr	r0, [pc, #88]	; (800b790 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800b736:	f001 fb55 	bl	800cde4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b73a:	4808      	ldr	r0, [pc, #32]	; (800b75c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b73c:	f7fe fc4c 	bl	8009fd8 <DbgTraceGetFileName>
 800b740:	4601      	mov	r1, r0
 800b742:	f240 33cd 	movw	r3, #973	; 0x3cd
 800b746:	4a06      	ldr	r2, [pc, #24]	; (800b760 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b748:	4806      	ldr	r0, [pc, #24]	; (800b764 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b74a:	f001 faaf 	bl	800ccac <iprintf>
 800b74e:	4811      	ldr	r0, [pc, #68]	; (800b794 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800b750:	f001 faac 	bl	800ccac <iprintf>
}
 800b754:	bf00      	nop
 800b756:	371c      	adds	r7, #28
 800b758:	46bd      	mov	sp, r7
 800b75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75c:	0800e15c 	.word	0x0800e15c
 800b760:	0800f408 	.word	0x0800f408
 800b764:	0800e178 	.word	0x0800e178
 800b768:	0800ea3c 	.word	0x0800ea3c
 800b76c:	0800ea5c 	.word	0x0800ea5c
 800b770:	0800ea98 	.word	0x0800ea98
 800b774:	20000184 	.word	0x20000184
 800b778:	0800eac4 	.word	0x0800eac4
 800b77c:	0800eb04 	.word	0x0800eb04
 800b780:	0001b207 	.word	0x0001b207
 800b784:	0800eb34 	.word	0x0800eb34
 800b788:	0800eb80 	.word	0x0800eb80
 800b78c:	0800ebbc 	.word	0x0800ebbc
 800b790:	0800ebfc 	.word	0x0800ebfc
 800b794:	0800ec2c 	.word	0x0800ec2c

0800b798 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08c      	sub	sp, #48	; 0x30
 800b79c:	af08      	add	r7, sp, #32
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b7a2:	2392      	movs	r3, #146	; 0x92
 800b7a4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b7a6:	4a32      	ldr	r2, [pc, #200]	; (800b870 <Adv_Request+0xd8>)
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9306      	str	r3, [sp, #24]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9305      	str	r3, [sp, #20]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9303      	str	r3, [sp, #12]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9302      	str	r3, [sp, #8]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	22a0      	movs	r2, #160	; 0xa0
 800b7ce:	2180      	movs	r1, #128	; 0x80
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f7fc fc0f 	bl	8007ff4 <aci_gap_set_discoverable>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00f      	beq.n	800b800 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b7e0:	4824      	ldr	r0, [pc, #144]	; (800b874 <Adv_Request+0xdc>)
 800b7e2:	f7fe fbf9 	bl	8009fd8 <DbgTraceGetFileName>
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	f240 33e3 	movw	r3, #995	; 0x3e3
 800b7ec:	4a22      	ldr	r2, [pc, #136]	; (800b878 <Adv_Request+0xe0>)
 800b7ee:	4823      	ldr	r0, [pc, #140]	; (800b87c <Adv_Request+0xe4>)
 800b7f0:	f001 fa5c 	bl	800ccac <iprintf>
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4821      	ldr	r0, [pc, #132]	; (800b880 <Adv_Request+0xe8>)
 800b7fa:	f001 fa57 	bl	800ccac <iprintf>
 800b7fe:	e00c      	b.n	800b81a <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b800:	481c      	ldr	r0, [pc, #112]	; (800b874 <Adv_Request+0xdc>)
 800b802:	f7fe fbe9 	bl	8009fd8 <DbgTraceGetFileName>
 800b806:	4601      	mov	r1, r0
 800b808:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b80c:	4a1a      	ldr	r2, [pc, #104]	; (800b878 <Adv_Request+0xe0>)
 800b80e:	481b      	ldr	r0, [pc, #108]	; (800b87c <Adv_Request+0xe4>)
 800b810:	f001 fa4c 	bl	800ccac <iprintf>
 800b814:	481b      	ldr	r0, [pc, #108]	; (800b884 <Adv_Request+0xec>)
 800b816:	f001 fae5 	bl	800cde4 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b81a:	491b      	ldr	r1, [pc, #108]	; (800b888 <Adv_Request+0xf0>)
 800b81c:	2013      	movs	r0, #19
 800b81e:	f7fc ff0f 	bl	8008640 <aci_gap_update_adv_data>
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00f      	beq.n	800b84c <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b82c:	4811      	ldr	r0, [pc, #68]	; (800b874 <Adv_Request+0xdc>)
 800b82e:	f7fe fbd3 	bl	8009fd8 <DbgTraceGetFileName>
 800b832:	4601      	mov	r1, r0
 800b834:	f240 33ee 	movw	r3, #1006	; 0x3ee
 800b838:	4a0f      	ldr	r2, [pc, #60]	; (800b878 <Adv_Request+0xe0>)
 800b83a:	4810      	ldr	r0, [pc, #64]	; (800b87c <Adv_Request+0xe4>)
 800b83c:	f001 fa36 	bl	800ccac <iprintf>
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	4619      	mov	r1, r3
 800b844:	4811      	ldr	r0, [pc, #68]	; (800b88c <Adv_Request+0xf4>)
 800b846:	f001 fa31 	bl	800ccac <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b84a:	e00d      	b.n	800b868 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b84c:	4809      	ldr	r0, [pc, #36]	; (800b874 <Adv_Request+0xdc>)
 800b84e:	f7fe fbc3 	bl	8009fd8 <DbgTraceGetFileName>
 800b852:	4601      	mov	r1, r0
 800b854:	f240 33f2 	movw	r3, #1010	; 0x3f2
 800b858:	4a07      	ldr	r2, [pc, #28]	; (800b878 <Adv_Request+0xe0>)
 800b85a:	4808      	ldr	r0, [pc, #32]	; (800b87c <Adv_Request+0xe4>)
 800b85c:	f001 fa26 	bl	800ccac <iprintf>
 800b860:	480b      	ldr	r0, [pc, #44]	; (800b890 <Adv_Request+0xf8>)
 800b862:	f001 fa23 	bl	800ccac <iprintf>
  return;
 800b866:	bf00      	nop
}
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20000184 	.word	0x20000184
 800b874:	0800e15c 	.word	0x0800e15c
 800b878:	0800f420 	.word	0x0800f420
 800b87c:	0800e178 	.word	0x0800e178
 800b880:	0800ec58 	.word	0x0800ec58
 800b884:	0800ec90 	.word	0x0800ec90
 800b888:	20000010 	.word	0x20000010
 800b88c:	0800ecb8 	.word	0x0800ecb8
 800b890:	0800ecec 	.word	0x0800ecec

0800b894 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b89a:	f7ff f963 	bl	800ab64 <LL_FLASH_GetUDN>
 800b89e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d023      	beq.n	800b8f0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b8a8:	f7ff f974 	bl	800ab94 <LL_FLASH_GetSTCompanyID>
 800b8ac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b8ae:	f7ff f965 	bl	800ab7c <LL_FLASH_GetDeviceID>
 800b8b2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	4b16      	ldr	r3, [pc, #88]	; (800b914 <BleGetBdAddress+0x80>)
 800b8ba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	0a1b      	lsrs	r3, r3, #8
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b14      	ldr	r3, [pc, #80]	; (800b914 <BleGetBdAddress+0x80>)
 800b8c4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	4b12      	ldr	r3, [pc, #72]	; (800b914 <BleGetBdAddress+0x80>)
 800b8cc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <BleGetBdAddress+0x80>)
 800b8d4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	0a1b      	lsrs	r3, r3, #8
 800b8da:	b2da      	uxtb	r2, r3
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <BleGetBdAddress+0x80>)
 800b8de:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	0c1b      	lsrs	r3, r3, #16
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	4b0b      	ldr	r3, [pc, #44]	; (800b914 <BleGetBdAddress+0x80>)
 800b8e8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b8ea:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <BleGetBdAddress+0x80>)
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	e00b      	b.n	800b908 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f7fe fc4f 	bl	800a194 <OTP_Read>
 800b8f6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e001      	b.n	800b908 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <BleGetBdAddress+0x84>)
 800b906:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b908:	697b      	ldr	r3, [r7, #20]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	200017b8 	.word	0x200017b8
 800b918:	0800f3b8 	.word	0x0800f3b8

0800b91c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <Adv_Cancel+0x84>)
 800b924:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b928:	2b05      	cmp	r3, #5
 800b92a:	d035      	beq.n	800b998 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b92c:	2392      	movs	r3, #146	; 0x92
 800b92e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b930:	f7fc fb3c 	bl	8007fac <aci_gap_set_non_discoverable>
 800b934:	4603      	mov	r3, r0
 800b936:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b938:	4b19      	ldr	r3, [pc, #100]	; (800b9a0 <Adv_Cancel+0x84>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00d      	beq.n	800b962 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b946:	4817      	ldr	r0, [pc, #92]	; (800b9a4 <Adv_Cancel+0x88>)
 800b948:	f7fe fb46 	bl	8009fd8 <DbgTraceGetFileName>
 800b94c:	4601      	mov	r1, r0
 800b94e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800b952:	4a15      	ldr	r2, [pc, #84]	; (800b9a8 <Adv_Cancel+0x8c>)
 800b954:	4815      	ldr	r0, [pc, #84]	; (800b9ac <Adv_Cancel+0x90>)
 800b956:	f001 f9a9 	bl	800ccac <iprintf>
 800b95a:	4815      	ldr	r0, [pc, #84]	; (800b9b0 <Adv_Cancel+0x94>)
 800b95c:	f001 f9a6 	bl	800ccac <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b960:	e01a      	b.n	800b998 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800b962:	4810      	ldr	r0, [pc, #64]	; (800b9a4 <Adv_Cancel+0x88>)
 800b964:	f7fe fb38 	bl	8009fd8 <DbgTraceGetFileName>
 800b968:	4601      	mov	r1, r0
 800b96a:	f240 4344 	movw	r3, #1092	; 0x444
 800b96e:	4a0e      	ldr	r2, [pc, #56]	; (800b9a8 <Adv_Cancel+0x8c>)
 800b970:	480e      	ldr	r0, [pc, #56]	; (800b9ac <Adv_Cancel+0x90>)
 800b972:	f001 f99b 	bl	800ccac <iprintf>
 800b976:	480f      	ldr	r0, [pc, #60]	; (800b9b4 <Adv_Cancel+0x98>)
 800b978:	f001 f998 	bl	800ccac <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b97c:	4809      	ldr	r0, [pc, #36]	; (800b9a4 <Adv_Cancel+0x88>)
 800b97e:	f7fe fb2b 	bl	8009fd8 <DbgTraceGetFileName>
 800b982:	4601      	mov	r1, r0
 800b984:	f240 4345 	movw	r3, #1093	; 0x445
 800b988:	4a07      	ldr	r2, [pc, #28]	; (800b9a8 <Adv_Cancel+0x8c>)
 800b98a:	4808      	ldr	r0, [pc, #32]	; (800b9ac <Adv_Cancel+0x90>)
 800b98c:	f001 f98e 	bl	800ccac <iprintf>
 800b990:	4809      	ldr	r0, [pc, #36]	; (800b9b8 <Adv_Cancel+0x9c>)
 800b992:	f001 f98b 	bl	800ccac <iprintf>
  return;
 800b996:	bf00      	nop
 800b998:	bf00      	nop
}
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20000184 	.word	0x20000184
 800b9a4:	0800e15c 	.word	0x0800e15c
 800b9a8:	0800f42c 	.word	0x0800f42c
 800b9ac:	0800e178 	.word	0x0800e178
 800b9b0:	0800ed14 	.word	0x0800ed14
 800b9b4:	0800ed38 	.word	0x0800ed38
 800b9b8:	0800ed40 	.word	0x0800ed40

0800b9bc <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800b9c0:	f000 f9ce 	bl	800bd60 <P2PS_APP_SW1_Button_Action>
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <APP_BLE_Key_Button2_Action>:
void APP_BLE_Key_Button2_Action(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
  P2PS_APP_SW2_Button_Action();
 800b9cc:	f000 f9e4 	bl	800bd98 <P2PS_APP_SW2_Button_Action>
}
 800b9d0:	bf00      	nop
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <APP_BLE_Key_Tim_Action>:
void APP_BLE_Key_Tim_Action(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  P2PS_APP_Tim_Action();
 800b9d8:	f000 fa06 	bl	800bde8 <P2PS_APP_Tim_Action>
}
 800b9dc:	bf00      	nop
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	2002      	movs	r0, #2
 800b9ec:	f000 fffe 	bl	800c9ec <UTIL_SEQ_SetTask>

  return;
 800b9f0:	bf00      	nop
}
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba00:	2001      	movs	r0, #1
 800ba02:	f001 f85f 	bl	800cac4 <UTIL_SEQ_SetEvt>

  return;
 800ba06:	bf00      	nop
}
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba16:	2001      	movs	r0, #1
 800ba18:	f001 f874 	bl	800cb04 <UTIL_SEQ_WaitEvt>

  return;
 800ba1c:	bf00      	nop
}
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	3308      	adds	r3, #8
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd fc76 	bl	8009328 <SVCCTL_UserEvtRx>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ba4c:	e003      	b.n	800ba56 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
  return;
 800ba54:	bf00      	nop
}
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <BLE_StatusNot+0x16>
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d006      	beq.n	800ba7e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ba70:	e00b      	b.n	800ba8a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ba72:	231f      	movs	r3, #31
 800ba74:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 ffe4 	bl	800ca44 <UTIL_SEQ_PauseTask>
      break;
 800ba7c:	e005      	b.n	800ba8a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ba7e:	231f      	movs	r3, #31
 800ba80:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fffe 	bl	800ca84 <UTIL_SEQ_ResumeTask>
      break;
 800ba88:	bf00      	nop
  }

  return;
 800ba8a:	bf00      	nop
}
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <Custom_STM_App_Notification>:
static void Button2Task(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d861      	bhi.n	800bb68 <Custom_STM_App_Notification+0xd4>
 800baa4:	a201      	add	r2, pc, #4	; (adr r2, 800baac <Custom_STM_App_Notification+0x18>)
 800baa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baaa:	bf00      	nop
 800baac:	0800bb69 	.word	0x0800bb69
 800bab0:	0800babd 	.word	0x0800babd
 800bab4:	0800bb29 	.word	0x0800bb29
 800bab8:	0800bb49 	.word	0x0800bb49
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 800babc:	482e      	ldr	r0, [pc, #184]	; (800bb78 <Custom_STM_App_Notification+0xe4>)
 800babe:	f7fe fa8b 	bl	8009fd8 <DbgTraceGetFileName>
 800bac2:	4601      	mov	r1, r0
 800bac4:	2372      	movs	r3, #114	; 0x72
 800bac6:	4a2d      	ldr	r2, [pc, #180]	; (800bb7c <Custom_STM_App_Notification+0xe8>)
 800bac8:	482d      	ldr	r0, [pc, #180]	; (800bb80 <Custom_STM_App_Notification+0xec>)
 800baca:	f001 f8ef 	bl	800ccac <iprintf>
 800bace:	482d      	ldr	r0, [pc, #180]	; (800bb84 <Custom_STM_App_Notification+0xf0>)
 800bad0:	f001 f988 	bl	800cde4 <puts>
    	APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800bad4:	4828      	ldr	r0, [pc, #160]	; (800bb78 <Custom_STM_App_Notification+0xe4>)
 800bad6:	f7fe fa7f 	bl	8009fd8 <DbgTraceGetFileName>
 800bada:	4601      	mov	r1, r0
 800badc:	2373      	movs	r3, #115	; 0x73
 800bade:	4a27      	ldr	r2, [pc, #156]	; (800bb7c <Custom_STM_App_Notification+0xe8>)
 800bae0:	4827      	ldr	r0, [pc, #156]	; (800bb80 <Custom_STM_App_Notification+0xec>)
 800bae2:	f001 f8e3 	bl	800ccac <iprintf>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	4619      	mov	r1, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	3301      	adds	r3, #1
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4823      	ldr	r0, [pc, #140]	; (800bb88 <Custom_STM_App_Notification+0xf4>)
 800bafa:	f001 f8d7 	bl	800ccac <iprintf>
    	 if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	3301      	adds	r3, #1
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d103      	bne.n	800bb12 <Custom_STM_App_Notification+0x7e>
    	      {
    	        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800bb0a:	2120      	movs	r1, #32
 800bb0c:	481f      	ldr	r0, [pc, #124]	; (800bb8c <Custom_STM_App_Notification+0xf8>)
 800bb0e:	f7f8 f9db 	bl	8003ec8 <HAL_GPIO_TogglePin>
    	      }
    	      if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	3301      	adds	r3, #1
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d126      	bne.n	800bb6c <Custom_STM_App_Notification+0xd8>
    	      {
    	    	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800bb1e:	2120      	movs	r1, #32
 800bb20:	481a      	ldr	r0, [pc, #104]	; (800bb8c <Custom_STM_App_Notification+0xf8>)
 800bb22:	f7f8 f9d1 	bl	8003ec8 <HAL_GPIO_TogglePin>
    	      }
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800bb26:	e021      	b.n	800bb6c <Custom_STM_App_Notification+0xd8>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 800bb28:	4813      	ldr	r0, [pc, #76]	; (800bb78 <Custom_STM_App_Notification+0xe4>)
 800bb2a:	f7fe fa55 	bl	8009fd8 <DbgTraceGetFileName>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	2381      	movs	r3, #129	; 0x81
 800bb32:	4a12      	ldr	r2, [pc, #72]	; (800bb7c <Custom_STM_App_Notification+0xe8>)
 800bb34:	4812      	ldr	r0, [pc, #72]	; (800bb80 <Custom_STM_App_Notification+0xec>)
 800bb36:	f001 f8b9 	bl	800ccac <iprintf>
 800bb3a:	4815      	ldr	r0, [pc, #84]	; (800bb90 <Custom_STM_App_Notification+0xfc>)
 800bb3c:	f001 f952 	bl	800cde4 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 1;
 800bb40:	4b14      	ldr	r3, [pc, #80]	; (800bb94 <Custom_STM_App_Notification+0x100>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800bb46:	e012      	b.n	800bb6e <Custom_STM_App_Notification+0xda>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 800bb48:	480b      	ldr	r0, [pc, #44]	; (800bb78 <Custom_STM_App_Notification+0xe4>)
 800bb4a:	f7fe fa45 	bl	8009fd8 <DbgTraceGetFileName>
 800bb4e:	4601      	mov	r1, r0
 800bb50:	2389      	movs	r3, #137	; 0x89
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <Custom_STM_App_Notification+0xe8>)
 800bb54:	480a      	ldr	r0, [pc, #40]	; (800bb80 <Custom_STM_App_Notification+0xec>)
 800bb56:	f001 f8a9 	bl	800ccac <iprintf>
 800bb5a:	480f      	ldr	r0, [pc, #60]	; (800bb98 <Custom_STM_App_Notification+0x104>)
 800bb5c:	f001 f942 	bl	800cde4 <puts>

    	      Custom_App_Context.Switch_c_Notification_Status = 0;
 800bb60:	4b0c      	ldr	r3, [pc, #48]	; (800bb94 <Custom_STM_App_Notification+0x100>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800bb66:	e002      	b.n	800bb6e <Custom_STM_App_Notification+0xda>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800bb68:	bf00      	nop
 800bb6a:	e000      	b.n	800bb6e <Custom_STM_App_Notification+0xda>
      break;
 800bb6c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800bb6e:	bf00      	nop
}
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800ed5c 	.word	0x0800ed5c
 800bb7c:	0800f438 	.word	0x0800f438
 800bb80:	0800ed7c 	.word	0x0800ed7c
 800bb84:	0800ed90 	.word	0x0800ed90
 800bb88:	0800edbc 	.word	0x0800edbc
 800bb8c:	48000400 	.word	0x48000400
 800bb90:	0800eddc 	.word	0x0800eddc
 800bb94:	20000208 	.word	0x20000208
 800bb98:	0800ee0c 	.word	0x0800ee0c

0800bb9c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <Custom_APP_Notification+0x16>
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d002      	beq.n	800bbb6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800bbb0:	e002      	b.n	800bbb8 <Custom_APP_Notification+0x1c>
      break;
 800bbb2:	bf00      	nop
 800bbb4:	e000      	b.n	800bbb8 <Custom_APP_Notification+0x1c>
      break;
 800bbb6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800bbb8:	bf00      	nop
}
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1Task);
 800bbc8:	4a0c      	ldr	r2, [pc, #48]	; (800bbfc <Custom_APP_Init+0x38>)
 800bbca:	2100      	movs	r1, #0
 800bbcc:	2008      	movs	r0, #8
 800bbce:	f000 feeb 	bl	800c9a8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2Task);
 800bbd2:	4a0b      	ldr	r2, [pc, #44]	; (800bc00 <Custom_APP_Init+0x3c>)
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	2010      	movs	r0, #16
 800bbd8:	f000 fee6 	bl	800c9a8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<< CFG_TASK_TIMER_EVT_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 800bbdc:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <Custom_APP_Init+0x40>)
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2004      	movs	r0, #4
 800bbe2:	f000 fee1 	bl	800c9a8 <UTIL_SEQ_RegTask>

	  Custom_App_Context.Switch_c_Notification_Status = 0;
 800bbe6:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <Custom_APP_Init+0x44>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.SW1_Status = 0;
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <Custom_APP_Init+0x44>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	705a      	strb	r2, [r3, #1]
	  Custom_App_Context.SW2_Status = 0;
 800bbf2:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <Custom_APP_Init+0x44>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	709a      	strb	r2, [r3, #2]
	  	Custom_STM_App_Update_Char(CUSTOM_STM_VIB_SAM, DUMMY_DATA);

	  	APP_DBG_MSG("\n**APP_INIT FINISHED!**\n");
	  	*/
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800bbf8:	bf00      	nop
}
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	0800bccd 	.word	0x0800bccd
 800bc00:	0800bd2d 	.word	0x0800bd2d
 800bc04:	0800bc0d 	.word	0x0800bc0d
 800bc08:	20000208 	.word	0x20000208

0800bc0c <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 800bc0c:	b5b0      	push	{r4, r5, r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN Switch_c_NS_1*/
  uint8_t test[32]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
 800bc18:	4b22      	ldr	r3, [pc, #136]	; (800bca4 <Custom_Switch_c_Send_Notification+0x98>)
 800bc1a:	1d3c      	adds	r4, r7, #4
 800bc1c:	461d      	mov	r5, r3
 800bc1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bc26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  APP_DBG_MSG("\r\nNOTIFYING \n");
 800bc2a:	481f      	ldr	r0, [pc, #124]	; (800bca8 <Custom_Switch_c_Send_Notification+0x9c>)
 800bc2c:	f7fe f9d4 	bl	8009fd8 <DbgTraceGetFileName>
 800bc30:	4601      	mov	r1, r0
 800bc32:	23fa      	movs	r3, #250	; 0xfa
 800bc34:	4a1d      	ldr	r2, [pc, #116]	; (800bcac <Custom_Switch_c_Send_Notification+0xa0>)
 800bc36:	481e      	ldr	r0, [pc, #120]	; (800bcb0 <Custom_Switch_c_Send_Notification+0xa4>)
 800bc38:	f001 f838 	bl	800ccac <iprintf>
 800bc3c:	481d      	ldr	r0, [pc, #116]	; (800bcb4 <Custom_Switch_c_Send_Notification+0xa8>)
 800bc3e:	f001 f8d1 	bl	800cde4 <puts>
	  if(Custom_App_Context.Switch_c_Notification_Status)
 800bc42:	4b1d      	ldr	r3, [pc, #116]	; (800bcb8 <Custom_Switch_c_Send_Notification+0xac>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d011      	beq.n	800bc6e <Custom_Switch_c_Send_Notification+0x62>
		{
		  memset(testo,i++,200);
 800bc4a:	4b1c      	ldr	r3, [pc, #112]	; (800bcbc <Custom_Switch_c_Send_Notification+0xb0>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	b2d1      	uxtb	r1, r2
 800bc52:	4a1a      	ldr	r2, [pc, #104]	; (800bcbc <Custom_Switch_c_Send_Notification+0xb0>)
 800bc54:	7011      	strb	r1, [r2, #0]
 800bc56:	22c8      	movs	r2, #200	; 0xc8
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4819      	ldr	r0, [pc, #100]	; (800bcc0 <Custom_Switch_c_Send_Notification+0xb4>)
 800bc5c:	f001 f81e 	bl	800cc9c <memset>
		  P2PS_NOTIFY_INT8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)testo, 200);
 800bc60:	22c8      	movs	r2, #200	; 0xc8
 800bc62:	4917      	ldr	r1, [pc, #92]	; (800bcc0 <Custom_Switch_c_Send_Notification+0xb4>)
 800bc64:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bc68:	f000 f8ce 	bl	800be08 <P2PS_NOTIFY_INT8>
 800bc6c:	e00c      	b.n	800bc88 <Custom_Switch_c_Send_Notification+0x7c>
		}
	 else
	 {
	   APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800bc6e:	480e      	ldr	r0, [pc, #56]	; (800bca8 <Custom_Switch_c_Send_Notification+0x9c>)
 800bc70:	f7fe f9b2 	bl	8009fd8 <DbgTraceGetFileName>
 800bc74:	4601      	mov	r1, r0
 800bc76:	f44f 7381 	mov.w	r3, #258	; 0x102
 800bc7a:	4a0c      	ldr	r2, [pc, #48]	; (800bcac <Custom_Switch_c_Send_Notification+0xa0>)
 800bc7c:	480c      	ldr	r0, [pc, #48]	; (800bcb0 <Custom_Switch_c_Send_Notification+0xa4>)
 800bc7e:	f001 f815 	bl	800ccac <iprintf>
 800bc82:	4810      	ldr	r0, [pc, #64]	; (800bcc4 <Custom_Switch_c_Send_Notification+0xb8>)
 800bc84:	f001 f8ae 	bl	800cde4 <puts>
	 }
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 800bc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <Custom_Switch_c_Send_Notification+0x8e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800bc90:	490d      	ldr	r1, [pc, #52]	; (800bcc8 <Custom_Switch_c_Send_Notification+0xbc>)
 800bc92:	2001      	movs	r0, #1
 800bc94:	f000 fa76 	bl	800c184 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
}
 800bc9c:	3728      	adds	r7, #40	; 0x28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bdb0      	pop	{r4, r5, r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0800ee94 	.word	0x0800ee94
 800bca8:	0800ed5c 	.word	0x0800ed5c
 800bcac:	0800f454 	.word	0x0800f454
 800bcb0:	0800ed7c 	.word	0x0800ed7c
 800bcb4:	0800ee3c 	.word	0x0800ee3c
 800bcb8:	20000208 	.word	0x20000208
 800bcbc:	200018bb 	.word	0x200018bb
 800bcc0:	200018c0 	.word	0x200018c0
 800bcc4:	0800ee4c 	.word	0x0800ee4c
 800bcc8:	200017c4 	.word	0x200017c4

0800bccc <Button1Task>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Button1Task(void) /* Property Notification */
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
  APP_DBG_MSG("\r\nPAUSED \n");
 800bcd0:	4810      	ldr	r0, [pc, #64]	; (800bd14 <Button1Task+0x48>)
 800bcd2:	f7fe f981 	bl	8009fd8 <DbgTraceGetFileName>
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	f240 1315 	movw	r3, #277	; 0x115
 800bcdc:	4a0e      	ldr	r2, [pc, #56]	; (800bd18 <Button1Task+0x4c>)
 800bcde:	480f      	ldr	r0, [pc, #60]	; (800bd1c <Button1Task+0x50>)
 800bce0:	f000 ffe4 	bl	800ccac <iprintf>
 800bce4:	480e      	ldr	r0, [pc, #56]	; (800bd20 <Button1Task+0x54>)
 800bce6:	f001 f87d 	bl	800cde4 <puts>
	  if(Custom_App_Context.Switch_c_Notification_Status)
 800bcea:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <Button1Task+0x58>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10d      	bne.n	800bd0e <Button1Task+0x42>
		{
		}
	 else
	 {
	   APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800bcf2:	4808      	ldr	r0, [pc, #32]	; (800bd14 <Button1Task+0x48>)
 800bcf4:	f7fe f970 	bl	8009fd8 <DbgTraceGetFileName>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	f240 131b 	movw	r3, #283	; 0x11b
 800bcfe:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <Button1Task+0x4c>)
 800bd00:	4806      	ldr	r0, [pc, #24]	; (800bd1c <Button1Task+0x50>)
 800bd02:	f000 ffd3 	bl	800ccac <iprintf>
 800bd06:	4808      	ldr	r0, [pc, #32]	; (800bd28 <Button1Task+0x5c>)
 800bd08:	f001 f86c 	bl	800cde4 <puts>
	 }


  return;
 800bd0c:	bf00      	nop
 800bd0e:	bf00      	nop
}
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	0800ed5c 	.word	0x0800ed5c
 800bd18:	0800f478 	.word	0x0800f478
 800bd1c:	0800ed7c 	.word	0x0800ed7c
 800bd20:	0800eeb4 	.word	0x0800eeb4
 800bd24:	20000208 	.word	0x20000208
 800bd28:	0800ee4c 	.word	0x0800ee4c

0800bd2c <Button2Task>:
void Button2Task(void) /* Property Notification */
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
  APP_DBG_MSG("\r\nRESUMING \n");
 800bd30:	4807      	ldr	r0, [pc, #28]	; (800bd50 <Button2Task+0x24>)
 800bd32:	f7fe f951 	bl	8009fd8 <DbgTraceGetFileName>
 800bd36:	4601      	mov	r1, r0
 800bd38:	f240 1323 	movw	r3, #291	; 0x123
 800bd3c:	4a05      	ldr	r2, [pc, #20]	; (800bd54 <Button2Task+0x28>)
 800bd3e:	4806      	ldr	r0, [pc, #24]	; (800bd58 <Button2Task+0x2c>)
 800bd40:	f000 ffb4 	bl	800ccac <iprintf>
 800bd44:	4805      	ldr	r0, [pc, #20]	; (800bd5c <Button2Task+0x30>)
 800bd46:	f001 f84d 	bl	800cde4 <puts>
	 else
	 {
	 }


  return;
 800bd4a:	bf00      	nop
}
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800ed5c 	.word	0x0800ed5c
 800bd54:	0800f484 	.word	0x0800f484
 800bd58:	0800ed7c 	.word	0x0800ed7c
 800bd5c:	0800eec0 	.word	0x0800eec0

0800bd60 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void){
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
	UTIL_SEQ_PauseTask(1<<CFG_TASK_TIMER_EVT_ID);
 800bd64:	2004      	movs	r0, #4
 800bd66:	f000 fe6d 	bl	800ca44 <UTIL_SEQ_PauseTask>
	  APP_DBG_MSG("\r\nPAUSED \n");
 800bd6a:	4807      	ldr	r0, [pc, #28]	; (800bd88 <P2PS_APP_SW1_Button_Action+0x28>)
 800bd6c:	f7fe f934 	bl	8009fd8 <DbgTraceGetFileName>
 800bd70:	4601      	mov	r1, r0
 800bd72:	f240 1331 	movw	r3, #305	; 0x131
 800bd76:	4a05      	ldr	r2, [pc, #20]	; (800bd8c <P2PS_APP_SW1_Button_Action+0x2c>)
 800bd78:	4805      	ldr	r0, [pc, #20]	; (800bd90 <P2PS_APP_SW1_Button_Action+0x30>)
 800bd7a:	f000 ff97 	bl	800ccac <iprintf>
 800bd7e:	4805      	ldr	r0, [pc, #20]	; (800bd94 <P2PS_APP_SW1_Button_Action+0x34>)
 800bd80:	f001 f830 	bl	800cde4 <puts>
	/*
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    flag=0 ;
    APP_DBG_MSG("\r\nFLAG = 0\t Stream Halt value = %d \n", testo[0]);
*/
    return;
 800bd84:	bf00      	nop
  }
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	0800ed5c 	.word	0x0800ed5c
 800bd8c:	0800f490 	.word	0x0800f490
 800bd90:	0800ed7c 	.word	0x0800ed7c
 800bd94:	0800eeb4 	.word	0x0800eeb4

0800bd98 <P2PS_APP_SW2_Button_Action>:
void P2PS_APP_SW2_Button_Action(void){
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
	UTIL_SEQ_ResumeTask(1<<CFG_TASK_TIMER_EVT_ID);
 800bd9c:	2004      	movs	r0, #4
 800bd9e:	f000 fe71 	bl	800ca84 <UTIL_SEQ_ResumeTask>
	APP_DBG_MSG("\r\nRESUMING \n");
 800bda2:	4807      	ldr	r0, [pc, #28]	; (800bdc0 <P2PS_APP_SW2_Button_Action+0x28>)
 800bda4:	f7fe f918 	bl	8009fd8 <DbgTraceGetFileName>
 800bda8:	4601      	mov	r1, r0
 800bdaa:	f240 133b 	movw	r3, #315	; 0x13b
 800bdae:	4a05      	ldr	r2, [pc, #20]	; (800bdc4 <P2PS_APP_SW2_Button_Action+0x2c>)
 800bdb0:	4805      	ldr	r0, [pc, #20]	; (800bdc8 <P2PS_APP_SW2_Button_Action+0x30>)
 800bdb2:	f000 ff7b 	bl	800ccac <iprintf>
 800bdb6:	4805      	ldr	r0, [pc, #20]	; (800bdcc <P2PS_APP_SW2_Button_Action+0x34>)
 800bdb8:	f001 f814 	bl	800cde4 <puts>
/*
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    flag=1;
	APP_DBG_MSG("\r\nFLAG = 1\t Streaming \n");
*/
    return;
 800bdbc:	bf00      	nop
  }
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	0800ed5c 	.word	0x0800ed5c
 800bdc4:	0800f4ac 	.word	0x0800f4ac
 800bdc8:	0800ed7c 	.word	0x0800ed7c
 800bdcc:	0800eec0 	.word	0x0800eec0

0800bdd0 <P2PS_APP_SW3_Button_Action>:
void P2PS_APP_SW3_Button_Action(void){
 800bdd0:	b480      	push	{r7}
 800bdd2:	af00      	add	r7, sp, #0
	flag=1;
 800bdd4:	4b03      	ldr	r3, [pc, #12]	; (800bde4 <P2PS_APP_SW3_Button_Action+0x14>)
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	701a      	strb	r2, [r3, #0]
/*
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
    flag=1;
	APP_DBG_MSG("\r\nFLAG = 1\t Streaming \n");
*/
    return;
 800bdda:	bf00      	nop
  }
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	200018bc 	.word	0x200018bc

0800bde8 <P2PS_APP_Tim_Action>:

void P2PS_APP_Tim_Action(void){
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
	if (flag==1){
 800bdec:	4b05      	ldr	r3, [pc, #20]	; (800be04 <P2PS_APP_Tim_Action+0x1c>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d104      	bne.n	800bdfe <P2PS_APP_Tim_Action+0x16>
	UTIL_SEQ_SetTask(1<<CFG_TASK_TIMER_EVT_ID, CFG_SCH_PRIO_0);
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	2004      	movs	r0, #4
 800bdf8:	f000 fdf8 	bl	800c9ec <UTIL_SEQ_SetTask>
/*
	if (flag){
	UTIL_SEQ_SetTask(1<<CFG_TASK_TIMER_EVT_ID, CFG_SCH_PRIO_0);
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);}
*/
	return;
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
}
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200018bc 	.word	0x200018bc

0800be08 <P2PS_NOTIFY_INT8>:
#define COPY_MY_LED_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x41,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)
#define COPY_MY_SWITCH_CHAR_UUID(uuid_struct)    COPY_UUID_128(uuid_struct,0x00,0x00,0xfe,0x42,0x8e,0x22,0x45,0x41,0x9d,0x4c,0x21,0xed,0xae,0x82,0xed,0x19)

/* USER CODE BEGIN PF */
tBleStatus P2PS_NOTIFY_INT8(uint16_t UUID, uint8_t *pPayload, uint8_t size)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af02      	add	r7, sp, #8
 800be0e:	4603      	mov	r3, r0
 800be10:	6039      	str	r1, [r7, #0]
 800be12:	80fb      	strh	r3, [r7, #6]
 800be14:	4613      	mov	r3, r2
 800be16:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800be18:	2392      	movs	r3, #146	; 0x92
 800be1a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800be1c:	88fb      	ldrh	r3, [r7, #6]
 800be1e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800be22:	4293      	cmp	r3, r2
 800be24:	d10d      	bne.n	800be42 <P2PS_NOTIFY_INT8+0x3a>
  {
    case P2P_NOTIFY_CHAR_UUID:

     result = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800be26:	4b0a      	ldr	r3, [pc, #40]	; (800be50 <P2PS_NOTIFY_INT8+0x48>)
 800be28:	8818      	ldrh	r0, [r3, #0]
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <P2PS_NOTIFY_INT8+0x48>)
 800be2c:	8899      	ldrh	r1, [r3, #4]
 800be2e:	797a      	ldrb	r2, [r7, #5]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	4613      	mov	r3, r2
 800be36:	2200      	movs	r2, #0
 800be38:	f7fc ff02 	bl	8008c40 <aci_gatt_update_char_value>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73fb      	strb	r3, [r7, #15]
    		 	 	 	 	 CustomContext.CustomSwitch_CHdle,
                              0, /* charValOffset */
                             size, /* charValueLen */
                             (uint8_t *)  pPayload);

      break;
 800be40:	e000      	b.n	800be44 <P2PS_NOTIFY_INT8+0x3c>

    default:
      break;
 800be42:	bf00      	nop
  }

  return result;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20000168 	.word	0x20000168

0800be54 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800be5c:	2300      	movs	r3, #0
 800be5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3301      	adds	r3, #1
 800be66:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2bff      	cmp	r3, #255	; 0xff
 800be6e:	d15e      	bne.n	800bf2e <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800be70:	6a3b      	ldr	r3, [r7, #32]
 800be72:	3302      	adds	r3, #2
 800be74:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	f640 4214 	movw	r2, #3092	; 0xc14
 800be80:	4293      	cmp	r3, r2
 800be82:	d04e      	beq.n	800bf22 <Custom_STM_Event_Handler+0xce>
 800be84:	f640 4214 	movw	r2, #3092	; 0xc14
 800be88:	4293      	cmp	r3, r2
 800be8a:	dc4c      	bgt.n	800bf26 <Custom_STM_Event_Handler+0xd2>
 800be8c:	f640 4201 	movw	r2, #3073	; 0xc01
 800be90:	4293      	cmp	r3, r2
 800be92:	d003      	beq.n	800be9c <Custom_STM_Event_Handler+0x48>
 800be94:	f640 4213 	movw	r2, #3091	; 0xc13
 800be98:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800be9a:	e047      	b.n	800bf2c <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	3302      	adds	r3, #2
 800bea0:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	885b      	ldrh	r3, [r3, #2]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	4b24      	ldr	r3, [pc, #144]	; (800bf3c <Custom_STM_Event_Handler+0xe8>)
 800beac:	889b      	ldrh	r3, [r3, #4]
 800beae:	3302      	adds	r3, #2
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d119      	bne.n	800bee8 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800beb4:	2301      	movs	r3, #1
 800beb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	7a1b      	ldrb	r3, [r3, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <Custom_STM_Event_Handler+0x74>
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d008      	beq.n	800bed8 <Custom_STM_Event_Handler+0x84>
              break;
 800bec6:	e02b      	b.n	800bf20 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800bec8:	2303      	movs	r3, #3
 800beca:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff fddf 	bl	800ba94 <Custom_STM_App_Notification>
                break;
 800bed6:	e023      	b.n	800bf20 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800bed8:	2302      	movs	r3, #2
 800beda:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800bedc:	f107 0308 	add.w	r3, r7, #8
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fdd7 	bl	800ba94 <Custom_STM_App_Notification>
                break;
 800bee6:	e01b      	b.n	800bf20 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	885b      	ldrh	r3, [r3, #2]
 800beec:	b29b      	uxth	r3, r3
 800beee:	461a      	mov	r2, r3
 800bef0:	4b12      	ldr	r3, [pc, #72]	; (800bf3c <Custom_STM_Event_Handler+0xe8>)
 800bef2:	885b      	ldrh	r3, [r3, #2]
 800bef4:	3301      	adds	r3, #1
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d117      	bne.n	800bf2a <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800befa:	2301      	movs	r3, #1
 800befc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 800bf00:	2301      	movs	r3, #1
 800bf02:	723b      	strb	r3, [r7, #8]
                        Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	88db      	ldrh	r3, [r3, #6]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	743b      	strb	r3, [r7, #16]
                        Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	3308      	adds	r3, #8
 800bf12:	60fb      	str	r3, [r7, #12]
                        Custom_STM_App_Notification(&Notification);
 800bf14:	f107 0308 	add.w	r3, r7, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fdbb 	bl	800ba94 <Custom_STM_App_Notification>
          break;
 800bf1e:	e004      	b.n	800bf2a <Custom_STM_Event_Handler+0xd6>
 800bf20:	e003      	b.n	800bf2a <Custom_STM_Event_Handler+0xd6>
          break;
 800bf22:	bf00      	nop
 800bf24:	e004      	b.n	800bf30 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800bf26:	bf00      	nop
 800bf28:	e002      	b.n	800bf30 <Custom_STM_Event_Handler+0xdc>
          break;
 800bf2a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bf2c:	e000      	b.n	800bf30 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800bf2e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	; 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000168 	.word	0x20000168

0800bf40 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08c      	sub	sp, #48	; 0x30
 800bf44:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf46:	2392      	movs	r3, #146	; 0x92
 800bf48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bf4a:	487f      	ldr	r0, [pc, #508]	; (800c148 <SVCCTL_InitCustomSvc+0x208>)
 800bf4c:	f7fd f9d2 	bl	80092f4 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Switch_char +
   *                                1 for My_Switch_char configuration descriptor +
   *                              = 6
   */

  COPY_MYP2PS_UUID(uuid.Char_UUID_128);
 800bf50:	238f      	movs	r3, #143	; 0x8f
 800bf52:	713b      	strb	r3, [r7, #4]
 800bf54:	23e5      	movs	r3, #229	; 0xe5
 800bf56:	717b      	strb	r3, [r7, #5]
 800bf58:	23b3      	movs	r3, #179	; 0xb3
 800bf5a:	71bb      	strb	r3, [r7, #6]
 800bf5c:	23d5      	movs	r3, #213	; 0xd5
 800bf5e:	71fb      	strb	r3, [r7, #7]
 800bf60:	232e      	movs	r3, #46	; 0x2e
 800bf62:	723b      	strb	r3, [r7, #8]
 800bf64:	237f      	movs	r3, #127	; 0x7f
 800bf66:	727b      	strb	r3, [r7, #9]
 800bf68:	234a      	movs	r3, #74	; 0x4a
 800bf6a:	72bb      	strb	r3, [r7, #10]
 800bf6c:	2398      	movs	r3, #152	; 0x98
 800bf6e:	72fb      	strb	r3, [r7, #11]
 800bf70:	232a      	movs	r3, #42	; 0x2a
 800bf72:	733b      	strb	r3, [r7, #12]
 800bf74:	2348      	movs	r3, #72	; 0x48
 800bf76:	737b      	strb	r3, [r7, #13]
 800bf78:	237a      	movs	r3, #122	; 0x7a
 800bf7a:	73bb      	strb	r3, [r7, #14]
 800bf7c:	23cc      	movs	r3, #204	; 0xcc
 800bf7e:	73fb      	strb	r3, [r7, #15]
 800bf80:	2340      	movs	r3, #64	; 0x40
 800bf82:	743b      	strb	r3, [r7, #16]
 800bf84:	23fe      	movs	r3, #254	; 0xfe
 800bf86:	747b      	strb	r3, [r7, #17]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	74bb      	strb	r3, [r7, #18]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bf90:	1d39      	adds	r1, r7, #4
 800bf92:	4b6e      	ldr	r3, [pc, #440]	; (800c14c <SVCCTL_InitCustomSvc+0x20c>)
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	2306      	movs	r3, #6
 800bf98:	2201      	movs	r2, #1
 800bf9a:	2002      	movs	r0, #2
 800bf9c:	f7fc fc72 	bl	8008884 <aci_gatt_add_service>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomMyp2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00f      	beq.n	800bfca <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MyP2PS, error code: 0x%x \n\r", ret);
 800bfaa:	4869      	ldr	r0, [pc, #420]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800bfac:	f7fe f814 	bl	8009fd8 <DbgTraceGetFileName>
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	f240 133b 	movw	r3, #315	; 0x13b
 800bfb6:	4a67      	ldr	r2, [pc, #412]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800bfb8:	4867      	ldr	r0, [pc, #412]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800bfba:	f000 fe77 	bl	800ccac <iprintf>
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4866      	ldr	r0, [pc, #408]	; (800c15c <SVCCTL_InitCustomSvc+0x21c>)
 800bfc4:	f000 fe72 	bl	800ccac <iprintf>
 800bfc8:	e00c      	b.n	800bfe4 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MyP2PS \n\r");
 800bfca:	4861      	ldr	r0, [pc, #388]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800bfcc:	f7fe f804 	bl	8009fd8 <DbgTraceGetFileName>
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	f240 133f 	movw	r3, #319	; 0x13f
 800bfd6:	4a5f      	ldr	r2, [pc, #380]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800bfd8:	485f      	ldr	r0, [pc, #380]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800bfda:	f000 fe67 	bl	800ccac <iprintf>
 800bfde:	4860      	ldr	r0, [pc, #384]	; (800c160 <SVCCTL_InitCustomSvc+0x220>)
 800bfe0:	f000 fe64 	bl	800ccac <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800bfe4:	2319      	movs	r3, #25
 800bfe6:	713b      	strb	r3, [r7, #4]
 800bfe8:	23ed      	movs	r3, #237	; 0xed
 800bfea:	717b      	strb	r3, [r7, #5]
 800bfec:	2382      	movs	r3, #130	; 0x82
 800bfee:	71bb      	strb	r3, [r7, #6]
 800bff0:	23ae      	movs	r3, #174	; 0xae
 800bff2:	71fb      	strb	r3, [r7, #7]
 800bff4:	23ed      	movs	r3, #237	; 0xed
 800bff6:	723b      	strb	r3, [r7, #8]
 800bff8:	2321      	movs	r3, #33	; 0x21
 800bffa:	727b      	strb	r3, [r7, #9]
 800bffc:	234c      	movs	r3, #76	; 0x4c
 800bffe:	72bb      	strb	r3, [r7, #10]
 800c000:	239d      	movs	r3, #157	; 0x9d
 800c002:	72fb      	strb	r3, [r7, #11]
 800c004:	2341      	movs	r3, #65	; 0x41
 800c006:	733b      	strb	r3, [r7, #12]
 800c008:	2345      	movs	r3, #69	; 0x45
 800c00a:	737b      	strb	r3, [r7, #13]
 800c00c:	2322      	movs	r3, #34	; 0x22
 800c00e:	73bb      	strb	r3, [r7, #14]
 800c010:	238e      	movs	r3, #142	; 0x8e
 800c012:	73fb      	strb	r3, [r7, #15]
 800c014:	2341      	movs	r3, #65	; 0x41
 800c016:	743b      	strb	r3, [r7, #16]
 800c018:	23fe      	movs	r3, #254	; 0xfe
 800c01a:	747b      	strb	r3, [r7, #17]
 800c01c:	2300      	movs	r3, #0
 800c01e:	74bb      	strb	r3, [r7, #18]
 800c020:	2300      	movs	r3, #0
 800c022:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800c024:	4b49      	ldr	r3, [pc, #292]	; (800c14c <SVCCTL_InitCustomSvc+0x20c>)
 800c026:	8818      	ldrh	r0, [r3, #0]
 800c028:	4b4e      	ldr	r3, [pc, #312]	; (800c164 <SVCCTL_InitCustomSvc+0x224>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	1d3a      	adds	r2, r7, #4
 800c030:	494d      	ldr	r1, [pc, #308]	; (800c168 <SVCCTL_InitCustomSvc+0x228>)
 800c032:	9105      	str	r1, [sp, #20]
 800c034:	2101      	movs	r1, #1
 800c036:	9104      	str	r1, [sp, #16]
 800c038:	2110      	movs	r1, #16
 800c03a:	9103      	str	r1, [sp, #12]
 800c03c:	2101      	movs	r1, #1
 800c03e:	9102      	str	r1, [sp, #8]
 800c040:	2100      	movs	r1, #0
 800c042:	9101      	str	r1, [sp, #4]
 800c044:	2106      	movs	r1, #6
 800c046:	9100      	str	r1, [sp, #0]
 800c048:	2102      	movs	r1, #2
 800c04a:	f7fc fcf1 	bl	8008a30 <aci_gatt_add_char>
 800c04e:	4603      	mov	r3, r0
 800c050:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00f      	beq.n	800c078 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800c058:	483d      	ldr	r0, [pc, #244]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800c05a:	f7fd ffbd 	bl	8009fd8 <DbgTraceGetFileName>
 800c05e:	4601      	mov	r1, r0
 800c060:	f240 1351 	movw	r3, #337	; 0x151
 800c064:	4a3b      	ldr	r2, [pc, #236]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800c066:	483c      	ldr	r0, [pc, #240]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800c068:	f000 fe20 	bl	800ccac <iprintf>
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	4619      	mov	r1, r3
 800c070:	483e      	ldr	r0, [pc, #248]	; (800c16c <SVCCTL_InitCustomSvc+0x22c>)
 800c072:	f000 fe1b 	bl	800ccac <iprintf>
 800c076:	e00c      	b.n	800c092 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800c078:	4835      	ldr	r0, [pc, #212]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800c07a:	f7fd ffad 	bl	8009fd8 <DbgTraceGetFileName>
 800c07e:	4601      	mov	r1, r0
 800c080:	f240 1355 	movw	r3, #341	; 0x155
 800c084:	4a33      	ldr	r2, [pc, #204]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800c086:	4834      	ldr	r0, [pc, #208]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800c088:	f000 fe10 	bl	800ccac <iprintf>
 800c08c:	4838      	ldr	r0, [pc, #224]	; (800c170 <SVCCTL_InitCustomSvc+0x230>)
 800c08e:	f000 fe0d 	bl	800ccac <iprintf>
  }
  /**
   *  My_Switch_char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800c092:	2319      	movs	r3, #25
 800c094:	713b      	strb	r3, [r7, #4]
 800c096:	23ed      	movs	r3, #237	; 0xed
 800c098:	717b      	strb	r3, [r7, #5]
 800c09a:	2382      	movs	r3, #130	; 0x82
 800c09c:	71bb      	strb	r3, [r7, #6]
 800c09e:	23ae      	movs	r3, #174	; 0xae
 800c0a0:	71fb      	strb	r3, [r7, #7]
 800c0a2:	23ed      	movs	r3, #237	; 0xed
 800c0a4:	723b      	strb	r3, [r7, #8]
 800c0a6:	2321      	movs	r3, #33	; 0x21
 800c0a8:	727b      	strb	r3, [r7, #9]
 800c0aa:	234c      	movs	r3, #76	; 0x4c
 800c0ac:	72bb      	strb	r3, [r7, #10]
 800c0ae:	239d      	movs	r3, #157	; 0x9d
 800c0b0:	72fb      	strb	r3, [r7, #11]
 800c0b2:	2341      	movs	r3, #65	; 0x41
 800c0b4:	733b      	strb	r3, [r7, #12]
 800c0b6:	2345      	movs	r3, #69	; 0x45
 800c0b8:	737b      	strb	r3, [r7, #13]
 800c0ba:	2322      	movs	r3, #34	; 0x22
 800c0bc:	73bb      	strb	r3, [r7, #14]
 800c0be:	238e      	movs	r3, #142	; 0x8e
 800c0c0:	73fb      	strb	r3, [r7, #15]
 800c0c2:	2342      	movs	r3, #66	; 0x42
 800c0c4:	743b      	strb	r3, [r7, #16]
 800c0c6:	23fe      	movs	r3, #254	; 0xfe
 800c0c8:	747b      	strb	r3, [r7, #17]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	74bb      	strb	r3, [r7, #18]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMyp2PsHdle,
 800c0d2:	4b1e      	ldr	r3, [pc, #120]	; (800c14c <SVCCTL_InitCustomSvc+0x20c>)
 800c0d4:	8818      	ldrh	r0, [r3, #0]
 800c0d6:	4b27      	ldr	r3, [pc, #156]	; (800c174 <SVCCTL_InitCustomSvc+0x234>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	1d3a      	adds	r2, r7, #4
 800c0de:	4926      	ldr	r1, [pc, #152]	; (800c178 <SVCCTL_InitCustomSvc+0x238>)
 800c0e0:	9105      	str	r1, [sp, #20]
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	9104      	str	r1, [sp, #16]
 800c0e6:	2110      	movs	r1, #16
 800c0e8:	9103      	str	r1, [sp, #12]
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	9102      	str	r1, [sp, #8]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	9101      	str	r1, [sp, #4]
 800c0f2:	2110      	movs	r1, #16
 800c0f4:	9100      	str	r1, [sp, #0]
 800c0f6:	2102      	movs	r1, #2
 800c0f8:	f7fc fc9a 	bl	8008a30 <aci_gatt_add_char>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00f      	beq.n	800c126 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800c106:	4812      	ldr	r0, [pc, #72]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800c108:	f7fd ff66 	bl	8009fd8 <DbgTraceGetFileName>
 800c10c:	4601      	mov	r1, r0
 800c10e:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800c112:	4a10      	ldr	r2, [pc, #64]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800c114:	4810      	ldr	r0, [pc, #64]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800c116:	f000 fdc9 	bl	800ccac <iprintf>
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	4619      	mov	r1, r3
 800c11e:	4817      	ldr	r0, [pc, #92]	; (800c17c <SVCCTL_InitCustomSvc+0x23c>)
 800c120:	f000 fdc4 	bl	800ccac <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c124:	e00d      	b.n	800c142 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800c126:	480a      	ldr	r0, [pc, #40]	; (800c150 <SVCCTL_InitCustomSvc+0x210>)
 800c128:	f7fd ff56 	bl	8009fd8 <DbgTraceGetFileName>
 800c12c:	4601      	mov	r1, r0
 800c12e:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800c132:	4a08      	ldr	r2, [pc, #32]	; (800c154 <SVCCTL_InitCustomSvc+0x214>)
 800c134:	4808      	ldr	r0, [pc, #32]	; (800c158 <SVCCTL_InitCustomSvc+0x218>)
 800c136:	f000 fdb9 	bl	800ccac <iprintf>
 800c13a:	4811      	ldr	r0, [pc, #68]	; (800c180 <SVCCTL_InitCustomSvc+0x240>)
 800c13c:	f000 fdb6 	bl	800ccac <iprintf>
  return;
 800c140:	bf00      	nop
}
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	0800be55 	.word	0x0800be55
 800c14c:	20000168 	.word	0x20000168
 800c150:	0800eecc 	.word	0x0800eecc
 800c154:	0800f4c8 	.word	0x0800f4c8
 800c158:	0800eeec 	.word	0x0800eeec
 800c15c:	0800ef00 	.word	0x0800ef00
 800c160:	0800ef48 	.word	0x0800ef48
 800c164:	20000023 	.word	0x20000023
 800c168:	2000016a 	.word	0x2000016a
 800c16c:	0800ef7c 	.word	0x0800ef7c
 800c170:	0800efc0 	.word	0x0800efc0
 800c174:	20000024 	.word	0x20000024
 800c178:	2000016c 	.word	0x2000016c
 800c17c:	0800eff4 	.word	0x0800eff4
 800c180:	0800f03c 	.word	0x0800f03c

0800c184 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af02      	add	r7, sp, #8
 800c18a:	4603      	mov	r3, r0
 800c18c:	6039      	str	r1, [r7, #0]
 800c18e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c190:	2392      	movs	r3, #146	; 0x92
 800c192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c194:	79fb      	ldrb	r3, [r7, #7]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <Custom_STM_App_Update_Char+0x1c>
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d02f      	beq.n	800c1fe <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800c19e:	e05d      	b.n	800c25c <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800c1a0:	4b31      	ldr	r3, [pc, #196]	; (800c268 <Custom_STM_App_Update_Char+0xe4>)
 800c1a2:	8818      	ldrh	r0, [r3, #0]
 800c1a4:	4b30      	ldr	r3, [pc, #192]	; (800c268 <Custom_STM_App_Update_Char+0xe4>)
 800c1a6:	8859      	ldrh	r1, [r3, #2]
 800c1a8:	4b30      	ldr	r3, [pc, #192]	; (800c26c <Custom_STM_App_Update_Char+0xe8>)
 800c1aa:	781a      	ldrb	r2, [r3, #0]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7fc fd44 	bl	8008c40 <aci_gatt_update_char_value>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00f      	beq.n	800c1e2 <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800c1c2:	482b      	ldr	r0, [pc, #172]	; (800c270 <Custom_STM_App_Update_Char+0xec>)
 800c1c4:	f7fd ff08 	bl	8009fd8 <DbgTraceGetFileName>
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800c1ce:	4a29      	ldr	r2, [pc, #164]	; (800c274 <Custom_STM_App_Update_Char+0xf0>)
 800c1d0:	4829      	ldr	r0, [pc, #164]	; (800c278 <Custom_STM_App_Update_Char+0xf4>)
 800c1d2:	f000 fd6b 	bl	800ccac <iprintf>
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4828      	ldr	r0, [pc, #160]	; (800c27c <Custom_STM_App_Update_Char+0xf8>)
 800c1dc:	f000 fd66 	bl	800ccac <iprintf>
      break;
 800c1e0:	e03c      	b.n	800c25c <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 800c1e2:	4823      	ldr	r0, [pc, #140]	; (800c270 <Custom_STM_App_Update_Char+0xec>)
 800c1e4:	f7fd fef8 	bl	8009fd8 <DbgTraceGetFileName>
 800c1e8:	4601      	mov	r1, r0
 800c1ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c1ee:	4a21      	ldr	r2, [pc, #132]	; (800c274 <Custom_STM_App_Update_Char+0xf0>)
 800c1f0:	4821      	ldr	r0, [pc, #132]	; (800c278 <Custom_STM_App_Update_Char+0xf4>)
 800c1f2:	f000 fd5b 	bl	800ccac <iprintf>
 800c1f6:	4822      	ldr	r0, [pc, #136]	; (800c280 <Custom_STM_App_Update_Char+0xfc>)
 800c1f8:	f000 fd58 	bl	800ccac <iprintf>
      break;
 800c1fc:	e02e      	b.n	800c25c <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomMyp2PsHdle,
 800c1fe:	4b1a      	ldr	r3, [pc, #104]	; (800c268 <Custom_STM_App_Update_Char+0xe4>)
 800c200:	8818      	ldrh	r0, [r3, #0]
 800c202:	4b19      	ldr	r3, [pc, #100]	; (800c268 <Custom_STM_App_Update_Char+0xe4>)
 800c204:	8899      	ldrh	r1, [r3, #4]
 800c206:	4b1f      	ldr	r3, [pc, #124]	; (800c284 <Custom_STM_App_Update_Char+0x100>)
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	2200      	movs	r2, #0
 800c212:	f7fc fd15 	bl	8008c40 <aci_gatt_update_char_value>
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00f      	beq.n	800c240 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800c220:	4813      	ldr	r0, [pc, #76]	; (800c270 <Custom_STM_App_Update_Char+0xec>)
 800c222:	f7fd fed9 	bl	8009fd8 <DbgTraceGetFileName>
 800c226:	4601      	mov	r1, r0
 800c228:	f240 139f 	movw	r3, #415	; 0x19f
 800c22c:	4a11      	ldr	r2, [pc, #68]	; (800c274 <Custom_STM_App_Update_Char+0xf0>)
 800c22e:	4812      	ldr	r0, [pc, #72]	; (800c278 <Custom_STM_App_Update_Char+0xf4>)
 800c230:	f000 fd3c 	bl	800ccac <iprintf>
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	4619      	mov	r1, r3
 800c238:	4813      	ldr	r0, [pc, #76]	; (800c288 <Custom_STM_App_Update_Char+0x104>)
 800c23a:	f000 fd37 	bl	800ccac <iprintf>
      break;
 800c23e:	e00c      	b.n	800c25a <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800c240:	480b      	ldr	r0, [pc, #44]	; (800c270 <Custom_STM_App_Update_Char+0xec>)
 800c242:	f7fd fec9 	bl	8009fd8 <DbgTraceGetFileName>
 800c246:	4601      	mov	r1, r0
 800c248:	f240 13a3 	movw	r3, #419	; 0x1a3
 800c24c:	4a09      	ldr	r2, [pc, #36]	; (800c274 <Custom_STM_App_Update_Char+0xf0>)
 800c24e:	480a      	ldr	r0, [pc, #40]	; (800c278 <Custom_STM_App_Update_Char+0xf4>)
 800c250:	f000 fd2c 	bl	800ccac <iprintf>
 800c254:	480d      	ldr	r0, [pc, #52]	; (800c28c <Custom_STM_App_Update_Char+0x108>)
 800c256:	f000 fd29 	bl	800ccac <iprintf>
      break;
 800c25a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000168 	.word	0x20000168
 800c26c:	20000023 	.word	0x20000023
 800c270:	0800eecc 	.word	0x0800eecc
 800c274:	0800f4e0 	.word	0x0800f4e0
 800c278:	0800eeec 	.word	0x0800eeec
 800c27c:	0800f074 	.word	0x0800f074
 800c280:	0800f0bc 	.word	0x0800f0bc
 800c284:	20000024 	.word	0x20000024
 800c288:	0800f0f4 	.word	0x0800f0f4
 800c28c:	0800f140 	.word	0x0800f140

0800c290 <LL_PWR_EnableBootC2>:
{
 800c290:	b480      	push	{r7}
 800c292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <LL_PWR_EnableBootC2+0x1c>)
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	4a04      	ldr	r2, [pc, #16]	; (800c2ac <LL_PWR_EnableBootC2+0x1c>)
 800c29a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c29e:	60d3      	str	r3, [r2, #12]
}
 800c2a0:	bf00      	nop
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	58000400 	.word	0x58000400

0800c2b0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c2b8:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c2ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c2be:	4905      	ldr	r1, [pc, #20]	; (800c2d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	58000800 	.word	0x58000800

0800c2d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c2e2:	6a1a      	ldr	r2, [r3, #32]
 800c2e4:	4904      	ldr	r1, [pc, #16]	; (800c2f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	620b      	str	r3, [r1, #32]
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	58000800 	.word	0x58000800

0800c2fc <LL_AHB3_GRP1_EnableClock>:
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c30a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4313      	orrs	r3, r2
 800c312:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4013      	ands	r3, r2
 800c31e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	bf00      	nop
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c33a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c33e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4313      	orrs	r3, r2
 800c346:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c34a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c34e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4013      	ands	r3, r2
 800c356:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c358:	68fb      	ldr	r3, [r7, #12]
}
 800c35a:	bf00      	nop
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <LL_C1_IPCC_EnableIT_TXF>:
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	601a      	str	r2, [r3, #0]
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <LL_C1_IPCC_EnableIT_RXO>:
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f043 0201 	orr.w	r2, r3, #1
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	041b      	lsls	r3, r3, #16
 800c3b8:	43db      	mvns	r3, r3
 800c3ba:	401a      	ands	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	605a      	str	r2, [r3, #4]
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	041b      	lsls	r3, r3, #16
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	605a      	str	r2, [r3, #4]
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	43db      	mvns	r3, r3
 800c402:	401a      	ands	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	605a      	str	r2, [r3, #4]
}
 800c408:	bf00      	nop
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	609a      	str	r2, [r3, #8]
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	041a      	lsls	r2, r3, #16
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	609a      	str	r2, [r3, #8]
}
 800c442:	bf00      	nop
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68da      	ldr	r2, [r3, #12]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	4013      	ands	r3, r2
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	429a      	cmp	r2, r3
 800c464:	d101      	bne.n	800c46a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	69da      	ldr	r2, [r3, #28]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	4013      	ands	r3, r2
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d101      	bne.n	800c494 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c490:	2301      	movs	r3, #1
 800c492:	e000      	b.n	800c496 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
	...

0800c4a4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c4a8:	2102      	movs	r1, #2
 800c4aa:	4819      	ldr	r0, [pc, #100]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4ac:	f7ff ffe4 	bl	800c478 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d009      	beq.n	800c4ca <HW_IPCC_Rx_Handler+0x26>
 800c4b6:	4b16      	ldr	r3, [pc, #88]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	43db      	mvns	r3, r3
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c4c4:	f000 f8da 	bl	800c67c <HW_IPCC_SYS_EvtHandler>
 800c4c8:	e01f      	b.n	800c50a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	4810      	ldr	r0, [pc, #64]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4ce:	f7ff ffd3 	bl	800c478 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d008      	beq.n	800c4ea <HW_IPCC_Rx_Handler+0x46>
 800c4d8:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	f003 0301 	and.w	r3, r3, #1
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d102      	bne.n	800c4ea <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c4e4:	f000 f88e 	bl	800c604 <HW_IPCC_BLE_EvtHandler>
 800c4e8:	e00f      	b.n	800c50a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c4ea:	2108      	movs	r1, #8
 800c4ec:	4808      	ldr	r0, [pc, #32]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4ee:	f7ff ffc3 	bl	800c478 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <HW_IPCC_Rx_Handler+0x68>
 800c4f8:	4b05      	ldr	r3, [pc, #20]	; (800c510 <HW_IPCC_Rx_Handler+0x6c>)
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	43db      	mvns	r3, r3
 800c4fe:	f003 0308 	and.w	r3, r3, #8
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c506:	f000 f905 	bl	800c714 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
}
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	58000c00 	.word	0x58000c00

0800c514 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c518:	2102      	movs	r1, #2
 800c51a:	481a      	ldr	r0, [pc, #104]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c51c:	f7ff ff97 	bl	800c44e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d109      	bne.n	800c53a <HW_IPCC_Tx_Handler+0x26>
 800c526:	4b17      	ldr	r3, [pc, #92]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	43db      	mvns	r3, r3
 800c52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c534:	f000 f896 	bl	800c664 <HW_IPCC_SYS_CmdEvtHandler>
 800c538:	e020      	b.n	800c57c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c53a:	2108      	movs	r1, #8
 800c53c:	4811      	ldr	r0, [pc, #68]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c53e:	f7ff ff86 	bl	800c44e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d109      	bne.n	800c55c <HW_IPCC_Tx_Handler+0x48>
 800c548:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	43db      	mvns	r3, r3
 800c54e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c556:	f000 f8bf 	bl	800c6d8 <HW_IPCC_MM_FreeBufHandler>
 800c55a:	e00f      	b.n	800c57c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c55c:	2120      	movs	r1, #32
 800c55e:	4809      	ldr	r0, [pc, #36]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c560:	f7ff ff75 	bl	800c44e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d109      	bne.n	800c57e <HW_IPCC_Tx_Handler+0x6a>
 800c56a:	4b06      	ldr	r3, [pc, #24]	; (800c584 <HW_IPCC_Tx_Handler+0x70>)
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	43db      	mvns	r3, r3
 800c570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c578:	f000 f850 	bl	800c61c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c57c:	bf00      	nop
 800c57e:	bf00      	nop
}
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	58000c00 	.word	0x58000c00

0800c588 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c58c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c590:	f7ff fecd 	bl	800c32e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c594:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c598:	f7ff fe9e 	bl	800c2d8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c59c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c5a0:	f7ff fe86 	bl	800c2b0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c5a4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c5a6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c5a8:	f7ff fe72 	bl	800c290 <LL_PWR_EnableBootC2>

  return;
 800c5ac:	bf00      	nop
}
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c5b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c5b8:	f7ff fea0 	bl	800c2fc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c5bc:	4806      	ldr	r0, [pc, #24]	; (800c5d8 <HW_IPCC_Init+0x28>)
 800c5be:	f7ff fee2 	bl	800c386 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c5c2:	4805      	ldr	r0, [pc, #20]	; (800c5d8 <HW_IPCC_Init+0x28>)
 800c5c4:	f7ff fecf 	bl	800c366 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c5c8:	202c      	movs	r0, #44	; 0x2c
 800c5ca:	f7f6 ff7e 	bl	80034ca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c5ce:	202d      	movs	r0, #45	; 0x2d
 800c5d0:	f7f6 ff7b 	bl	80034ca <HAL_NVIC_EnableIRQ>

  return;
 800c5d4:	bf00      	nop
}
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	58000c00 	.word	0x58000c00

0800c5dc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	4802      	ldr	r0, [pc, #8]	; (800c5ec <HW_IPCC_BLE_Init+0x10>)
 800c5e4:	f7ff ff04 	bl	800c3f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c5e8:	bf00      	nop
}
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	58000c00 	.word	0x58000c00

0800c5f0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	4802      	ldr	r0, [pc, #8]	; (800c600 <HW_IPCC_BLE_SendCmd+0x10>)
 800c5f8:	f7ff ff1a 	bl	800c430 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c5fc:	bf00      	nop
}
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	58000c00 	.word	0x58000c00

0800c604 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c608:	f7fd fb2e 	bl	8009c68 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c60c:	2101      	movs	r1, #1
 800c60e:	4802      	ldr	r0, [pc, #8]	; (800c618 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c610:	f7ff ff00 	bl	800c414 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c614:	bf00      	nop
}
 800c616:	bd80      	pop	{r7, pc}
 800c618:	58000c00 	.word	0x58000c00

0800c61c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c620:	2120      	movs	r1, #32
 800c622:	4803      	ldr	r0, [pc, #12]	; (800c630 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c624:	f7ff fed2 	bl	800c3cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c628:	f7fd fb4e 	bl	8009cc8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c62c:	bf00      	nop
}
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	58000c00 	.word	0x58000c00

0800c634 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c638:	2102      	movs	r1, #2
 800c63a:	4802      	ldr	r0, [pc, #8]	; (800c644 <HW_IPCC_SYS_Init+0x10>)
 800c63c:	f7ff fed8 	bl	800c3f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c640:	bf00      	nop
}
 800c642:	bd80      	pop	{r7, pc}
 800c644:	58000c00 	.word	0x58000c00

0800c648 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c64c:	2102      	movs	r1, #2
 800c64e:	4804      	ldr	r0, [pc, #16]	; (800c660 <HW_IPCC_SYS_SendCmd+0x18>)
 800c650:	f7ff feee 	bl	800c430 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c654:	2102      	movs	r1, #2
 800c656:	4802      	ldr	r0, [pc, #8]	; (800c660 <HW_IPCC_SYS_SendCmd+0x18>)
 800c658:	f7ff fea5 	bl	800c3a6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c65c:	bf00      	nop
}
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	58000c00 	.word	0x58000c00

0800c664 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c668:	2102      	movs	r1, #2
 800c66a:	4803      	ldr	r0, [pc, #12]	; (800c678 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c66c:	f7ff feae 	bl	800c3cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c670:	f7fd fb7a 	bl	8009d68 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c674:	bf00      	nop
}
 800c676:	bd80      	pop	{r7, pc}
 800c678:	58000c00 	.word	0x58000c00

0800c67c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c680:	f7fd fb88 	bl	8009d94 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c684:	2102      	movs	r1, #2
 800c686:	4802      	ldr	r0, [pc, #8]	; (800c690 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c688:	f7ff fec4 	bl	800c414 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c68c:	bf00      	nop
}
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	58000c00 	.word	0x58000c00

0800c694 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c69c:	2108      	movs	r1, #8
 800c69e:	480c      	ldr	r0, [pc, #48]	; (800c6d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6a0:	f7ff fed5 	bl	800c44e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c6aa:	4a0a      	ldr	r2, [pc, #40]	; (800c6d4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6b0:	2108      	movs	r1, #8
 800c6b2:	4807      	ldr	r0, [pc, #28]	; (800c6d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6b4:	f7ff fe77 	bl	800c3a6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c6b8:	e006      	b.n	800c6c8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6be:	2108      	movs	r1, #8
 800c6c0:	4803      	ldr	r0, [pc, #12]	; (800c6d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6c2:	f7ff feb5 	bl	800c430 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c6c6:	bf00      	nop
}
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	58000c00 	.word	0x58000c00
 800c6d4:	20001988 	.word	0x20001988

0800c6d8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6dc:	2108      	movs	r1, #8
 800c6de:	4806      	ldr	r0, [pc, #24]	; (800c6f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c6e0:	f7ff fe74 	bl	800c3cc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6ea:	2108      	movs	r1, #8
 800c6ec:	4802      	ldr	r0, [pc, #8]	; (800c6f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c6ee:	f7ff fe9f 	bl	800c430 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c6f2:	bf00      	nop
}
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	58000c00 	.word	0x58000c00
 800c6fc:	20001988 	.word	0x20001988

0800c700 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c704:	2108      	movs	r1, #8
 800c706:	4802      	ldr	r0, [pc, #8]	; (800c710 <HW_IPCC_TRACES_Init+0x10>)
 800c708:	f7ff fe72 	bl	800c3f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c70c:	bf00      	nop
}
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	58000c00 	.word	0x58000c00

0800c714 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c718:	f7fd fbe4 	bl	8009ee4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c71c:	2108      	movs	r1, #8
 800c71e:	4802      	ldr	r0, [pc, #8]	; (800c728 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c720:	f7ff fe78 	bl	800c414 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c724:	bf00      	nop
}
 800c726:	bd80      	pop	{r7, pc}
 800c728:	58000c00 	.word	0x58000c00

0800c72c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c72c:	b480      	push	{r7}
 800c72e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <UTIL_LPM_Init+0x1c>)
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c736:	4b05      	ldr	r3, [pc, #20]	; (800c74c <UTIL_LPM_Init+0x20>)
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c73c:	bf00      	nop
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	2000198c 	.word	0x2000198c
 800c74c:	20001990 	.word	0x20001990

0800c750 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c75c:	f3ef 8310 	mrs	r3, PRIMASK
 800c760:	613b      	str	r3, [r7, #16]
  return(result);
 800c762:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c766:	b672      	cpsid	i
}
 800c768:	bf00      	nop
  
  switch(state)
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <UTIL_LPM_SetOffMode+0x32>
 800c770:	2b01      	cmp	r3, #1
 800c772:	d10e      	bne.n	800c792 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c774:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <UTIL_LPM_SetOffMode+0x5c>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	4a0b      	ldr	r2, [pc, #44]	; (800c7ac <UTIL_LPM_SetOffMode+0x5c>)
 800c77e:	6013      	str	r3, [r2, #0]
      break;
 800c780:	e008      	b.n	800c794 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	43da      	mvns	r2, r3
 800c786:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <UTIL_LPM_SetOffMode+0x5c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4013      	ands	r3, r2
 800c78c:	4a07      	ldr	r2, [pc, #28]	; (800c7ac <UTIL_LPM_SetOffMode+0x5c>)
 800c78e:	6013      	str	r3, [r2, #0]
      break;
 800c790:	e000      	b.n	800c794 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c792:	bf00      	nop
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f383 8810 	msr	PRIMASK, r3
}
 800c79e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c7a0:	bf00      	nop
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	20001990 	.word	0x20001990

0800c7b0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b090      	sub	sp, #64	; 0x40
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c7b8:	4b73      	ldr	r3, [pc, #460]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c7be:	4b72      	ldr	r3, [pc, #456]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	4a70      	ldr	r2, [pc, #448]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c7c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c7ca:	4b70      	ldr	r3, [pc, #448]	; (800c98c <UTIL_SEQ_Run+0x1dc>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c7d0:	4b6f      	ldr	r3, [pc, #444]	; (800c990 <UTIL_SEQ_Run+0x1e0>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c7d6:	4b6f      	ldr	r3, [pc, #444]	; (800c994 <UTIL_SEQ_Run+0x1e4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c7dc:	4b6e      	ldr	r3, [pc, #440]	; (800c998 <UTIL_SEQ_Run+0x1e8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c7e2:	e08d      	b.n	800c900 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c7e8:	e002      	b.n	800c7f0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c7f0:	4a6a      	ldr	r2, [pc, #424]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	401a      	ands	r2, r3
 800c7fc:	4b62      	ldr	r3, [pc, #392]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4013      	ands	r3, r2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0f1      	beq.n	800c7ea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c806:	4a65      	ldr	r2, [pc, #404]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	401a      	ands	r2, r3
 800c812:	4b5d      	ldr	r3, [pc, #372]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4013      	ands	r3, r2
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c81a:	4a60      	ldr	r2, [pc, #384]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4413      	add	r3, r2
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	4013      	ands	r3, r2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d106      	bne.n	800c83a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c82c:	4a5b      	ldr	r2, [pc, #364]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	4413      	add	r3, r2
 800c834:	f04f 32ff 	mov.w	r2, #4294967295
 800c838:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c83a:	4a58      	ldr	r2, [pc, #352]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	4413      	add	r3, r2
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	4013      	ands	r3, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f000 f9b3 	bl	800cbb4 <SEQ_BitPosition>
 800c84e:	4603      	mov	r3, r0
 800c850:	461a      	mov	r2, r3
 800c852:	4b53      	ldr	r3, [pc, #332]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c854:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c856:	4a51      	ldr	r2, [pc, #324]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	4413      	add	r3, r2
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	4b4f      	ldr	r3, [pc, #316]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2101      	movs	r1, #1
 800c866:	fa01 f303 	lsl.w	r3, r1, r3
 800c86a:	43db      	mvns	r3, r3
 800c86c:	401a      	ands	r2, r3
 800c86e:	494b      	ldr	r1, [pc, #300]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	440b      	add	r3, r1
 800c876:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c878:	f3ef 8310 	mrs	r3, PRIMASK
 800c87c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c87e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c882:	b672      	cpsid	i
}
 800c884:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c886:	4b46      	ldr	r3, [pc, #280]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2201      	movs	r2, #1
 800c88c:	fa02 f303 	lsl.w	r3, r2, r3
 800c890:	43da      	mvns	r2, r3
 800c892:	4b3e      	ldr	r3, [pc, #248]	; (800c98c <UTIL_SEQ_Run+0x1dc>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4013      	ands	r3, r2
 800c898:	4a3c      	ldr	r2, [pc, #240]	; (800c98c <UTIL_SEQ_Run+0x1dc>)
 800c89a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c89c:	2302      	movs	r3, #2
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a0:	e013      	b.n	800c8ca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	4a3d      	ldr	r2, [pc, #244]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c8a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c8ac:	4b3c      	ldr	r3, [pc, #240]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b6:	43da      	mvns	r2, r3
 800c8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	400a      	ands	r2, r1
 800c8be:	4937      	ldr	r1, [pc, #220]	; (800c99c <UTIL_SEQ_Run+0x1ec>)
 800c8c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e8      	bne.n	800c8a2 <UTIL_SEQ_Run+0xf2>
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f383 8810 	msr	PRIMASK, r3
}
 800c8da:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c8dc:	4b30      	ldr	r3, [pc, #192]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a30      	ldr	r2, [pc, #192]	; (800c9a4 <UTIL_SEQ_Run+0x1f4>)
 800c8e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e6:	4798      	blx	r3

    local_taskset = TaskSet;
 800c8e8:	4b28      	ldr	r3, [pc, #160]	; (800c98c <UTIL_SEQ_Run+0x1dc>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c8ee:	4b28      	ldr	r3, [pc, #160]	; (800c990 <UTIL_SEQ_Run+0x1e0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c8f4:	4b27      	ldr	r3, [pc, #156]	; (800c994 <UTIL_SEQ_Run+0x1e4>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c8fa:	4b27      	ldr	r3, [pc, #156]	; (800c998 <UTIL_SEQ_Run+0x1e8>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c904:	401a      	ands	r2, r3
 800c906:	4b20      	ldr	r3, [pc, #128]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <UTIL_SEQ_Run+0x16c>
 800c910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	4013      	ands	r3, r2
 800c916:	2b00      	cmp	r3, #0
 800c918:	f43f af64 	beq.w	800c7e4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c91c:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <UTIL_SEQ_Run+0x1f0>)
 800c91e:	f04f 32ff 	mov.w	r2, #4294967295
 800c922:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c924:	f000 f938 	bl	800cb98 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c928:	f3ef 8310 	mrs	r3, PRIMASK
 800c92c:	613b      	str	r3, [r7, #16]
  return(result);
 800c92e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c932:	b672      	cpsid	i
}
 800c934:	bf00      	nop
  local_taskset = TaskSet;
 800c936:	4b15      	ldr	r3, [pc, #84]	; (800c98c <UTIL_SEQ_Run+0x1dc>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c93c:	4b14      	ldr	r3, [pc, #80]	; (800c990 <UTIL_SEQ_Run+0x1e0>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <UTIL_SEQ_Run+0x1e4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	401a      	ands	r2, r3
 800c94e:	4b0e      	ldr	r3, [pc, #56]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4013      	ands	r3, r2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d107      	bne.n	800c968 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c958:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <UTIL_SEQ_Run+0x1e8>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	4013      	ands	r3, r2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d101      	bne.n	800c968 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c964:	f7f4 fe26 	bl	80015b4 <UTIL_SEQ_Idle>
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f383 8810 	msr	PRIMASK, r3
}
 800c972:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c974:	f000 f917 	bl	800cba6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c978:	4a03      	ldr	r2, [pc, #12]	; (800c988 <UTIL_SEQ_Run+0x1d8>)
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	6013      	str	r3, [r2, #0]

  return;
 800c97e:	bf00      	nop
}
 800c980:	3740      	adds	r7, #64	; 0x40
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	2000002c 	.word	0x2000002c
 800c98c:	20001994 	.word	0x20001994
 800c990:	20001998 	.word	0x20001998
 800c994:	20000028 	.word	0x20000028
 800c998:	2000199c 	.word	0x2000199c
 800c99c:	20001a24 	.word	0x20001a24
 800c9a0:	200019a0 	.word	0x200019a0
 800c9a4:	200019a4 	.word	0x200019a4

0800c9a8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b8:	617b      	str	r3, [r7, #20]
  return(result);
 800c9ba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c9bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9be:	b672      	cpsid	i
}
 800c9c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 f8f6 	bl	800cbb4 <SEQ_BitPosition>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4a06      	ldr	r2, [pc, #24]	; (800c9e8 <UTIL_SEQ_RegTask+0x40>)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	f383 8810 	msr	PRIMASK, r3
}
 800c9de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c9e0:	bf00      	nop
}
 800c9e2:	3720      	adds	r7, #32
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200019a4 	.word	0x200019a4

0800c9ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c9fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca00:	b672      	cpsid	i
}
 800ca02:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ca04:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <UTIL_SEQ_SetTask+0x50>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	4a0b      	ldr	r2, [pc, #44]	; (800ca3c <UTIL_SEQ_SetTask+0x50>)
 800ca0e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ca10:	4a0b      	ldr	r2, [pc, #44]	; (800ca40 <UTIL_SEQ_SetTask+0x54>)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	4908      	ldr	r1, [pc, #32]	; (800ca40 <UTIL_SEQ_SetTask+0x54>)
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f383 8810 	msr	PRIMASK, r3
}
 800ca2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca30:	bf00      	nop
}
 800ca32:	371c      	adds	r7, #28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20001994 	.word	0x20001994
 800ca40:	20001a24 	.word	0x20001a24

0800ca44 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca56:	b672      	cpsid	i
}
 800ca58:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	43da      	mvns	r2, r3
 800ca5e:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <UTIL_SEQ_PauseTask+0x3c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4013      	ands	r3, r2
 800ca64:	4a06      	ldr	r2, [pc, #24]	; (800ca80 <UTIL_SEQ_PauseTask+0x3c>)
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	f383 8810 	msr	PRIMASK, r3
}
 800ca72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca74:	bf00      	nop
}
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	20000028 	.word	0x20000028

0800ca84 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca96:	b672      	cpsid	i
}
 800ca98:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ca9a:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	4a07      	ldr	r2, [pc, #28]	; (800cac0 <UTIL_SEQ_ResumeTask+0x3c>)
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f383 8810 	msr	PRIMASK, r3
}
 800cab0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cab2:	bf00      	nop
}
 800cab4:	371c      	adds	r7, #28
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	20000028 	.word	0x20000028

0800cac4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cacc:	f3ef 8310 	mrs	r3, PRIMASK
 800cad0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cad2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cad6:	b672      	cpsid	i
}
 800cad8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800cada:	4b09      	ldr	r3, [pc, #36]	; (800cb00 <UTIL_SEQ_SetEvt+0x3c>)
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	4a07      	ldr	r2, [pc, #28]	; (800cb00 <UTIL_SEQ_SetEvt+0x3c>)
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f383 8810 	msr	PRIMASK, r3
}
 800caf0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800caf2:	bf00      	nop
}
 800caf4:	371c      	adds	r7, #28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20001998 	.word	0x20001998

0800cb04 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cb0c:	4b1f      	ldr	r3, [pc, #124]	; (800cb8c <UTIL_SEQ_WaitEvt+0x88>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cb12:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <UTIL_SEQ_WaitEvt+0x88>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d102      	bne.n	800cb22 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	61fb      	str	r3, [r7, #28]
 800cb20:	e005      	b.n	800cb2e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cb22:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <UTIL_SEQ_WaitEvt+0x88>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2201      	movs	r2, #1
 800cb28:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cb2e:	4b18      	ldr	r3, [pc, #96]	; (800cb90 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cb34:	4a16      	ldr	r2, [pc, #88]	; (800cb90 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cb3a:	e003      	b.n	800cb44 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	69f8      	ldr	r0, [r7, #28]
 800cb40:	f7f4 fd3f 	bl	80015c2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cb44:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <UTIL_SEQ_WaitEvt+0x90>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d0f5      	beq.n	800cb3c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cb50:	4a0e      	ldr	r2, [pc, #56]	; (800cb8c <UTIL_SEQ_WaitEvt+0x88>)
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb56:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb5c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb60:	b672      	cpsid	i
}
 800cb62:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	43da      	mvns	r2, r3
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <UTIL_SEQ_WaitEvt+0x90>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	4a09      	ldr	r2, [pc, #36]	; (800cb94 <UTIL_SEQ_WaitEvt+0x90>)
 800cb70:	6013      	str	r3, [r2, #0]
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f383 8810 	msr	PRIMASK, r3
}
 800cb7c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cb7e:	4a04      	ldr	r2, [pc, #16]	; (800cb90 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	6013      	str	r3, [r2, #0]
  return;
 800cb84:	bf00      	nop
}
 800cb86:	3720      	adds	r7, #32
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	200019a0 	.word	0x200019a0
 800cb90:	2000199c 	.word	0x2000199c
 800cb94:	20001998 	.word	0x20001998

0800cb98 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cb9c:	bf00      	nop
}
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cba6:	b480      	push	{r7}
 800cba8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cbaa:	bf00      	nop
}
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	0c1b      	lsrs	r3, r3, #16
 800cbc8:	041b      	lsls	r3, r3, #16
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d104      	bne.n	800cbd8 <SEQ_BitPosition+0x24>
 800cbce:	2310      	movs	r3, #16
 800cbd0:	73fb      	strb	r3, [r7, #15]
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	041b      	lsls	r3, r3, #16
 800cbd6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d105      	bne.n	800cbee <SEQ_BitPosition+0x3a>
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	73fb      	strb	r3, [r7, #15]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d105      	bne.n	800cc04 <SEQ_BitPosition+0x50>
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	73fb      	strb	r3, [r7, #15]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	011b      	lsls	r3, r3, #4
 800cc02:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	0f1b      	lsrs	r3, r3, #28
 800cc08:	4a07      	ldr	r2, [pc, #28]	; (800cc28 <SEQ_BitPosition+0x74>)
 800cc0a:	5cd2      	ldrb	r2, [r2, r3]
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	4413      	add	r3, r2
 800cc10:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cc12:	7bfb      	ldrb	r3, [r7, #15]
 800cc14:	f1c3 031f 	rsb	r3, r3, #31
 800cc18:	b2db      	uxtb	r3, r3
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	0800f4fc 	.word	0x0800f4fc

0800cc2c <__errno>:
 800cc2c:	4b01      	ldr	r3, [pc, #4]	; (800cc34 <__errno+0x8>)
 800cc2e:	6818      	ldr	r0, [r3, #0]
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	20000030 	.word	0x20000030

0800cc38 <__libc_init_array>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	4d0d      	ldr	r5, [pc, #52]	; (800cc70 <__libc_init_array+0x38>)
 800cc3c:	4c0d      	ldr	r4, [pc, #52]	; (800cc74 <__libc_init_array+0x3c>)
 800cc3e:	1b64      	subs	r4, r4, r5
 800cc40:	10a4      	asrs	r4, r4, #2
 800cc42:	2600      	movs	r6, #0
 800cc44:	42a6      	cmp	r6, r4
 800cc46:	d109      	bne.n	800cc5c <__libc_init_array+0x24>
 800cc48:	4d0b      	ldr	r5, [pc, #44]	; (800cc78 <__libc_init_array+0x40>)
 800cc4a:	4c0c      	ldr	r4, [pc, #48]	; (800cc7c <__libc_init_array+0x44>)
 800cc4c:	f001 f8b0 	bl	800ddb0 <_init>
 800cc50:	1b64      	subs	r4, r4, r5
 800cc52:	10a4      	asrs	r4, r4, #2
 800cc54:	2600      	movs	r6, #0
 800cc56:	42a6      	cmp	r6, r4
 800cc58:	d105      	bne.n	800cc66 <__libc_init_array+0x2e>
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc60:	4798      	blx	r3
 800cc62:	3601      	adds	r6, #1
 800cc64:	e7ee      	b.n	800cc44 <__libc_init_array+0xc>
 800cc66:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6a:	4798      	blx	r3
 800cc6c:	3601      	adds	r6, #1
 800cc6e:	e7f2      	b.n	800cc56 <__libc_init_array+0x1e>
 800cc70:	0800f5ac 	.word	0x0800f5ac
 800cc74:	0800f5ac 	.word	0x0800f5ac
 800cc78:	0800f5ac 	.word	0x0800f5ac
 800cc7c:	0800f5b0 	.word	0x0800f5b0

0800cc80 <memcpy>:
 800cc80:	440a      	add	r2, r1
 800cc82:	4291      	cmp	r1, r2
 800cc84:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc88:	d100      	bne.n	800cc8c <memcpy+0xc>
 800cc8a:	4770      	bx	lr
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc96:	4291      	cmp	r1, r2
 800cc98:	d1f9      	bne.n	800cc8e <memcpy+0xe>
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <memset>:
 800cc9c:	4402      	add	r2, r0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d100      	bne.n	800cca6 <memset+0xa>
 800cca4:	4770      	bx	lr
 800cca6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccaa:	e7f9      	b.n	800cca0 <memset+0x4>

0800ccac <iprintf>:
 800ccac:	b40f      	push	{r0, r1, r2, r3}
 800ccae:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <iprintf+0x2c>)
 800ccb0:	b513      	push	{r0, r1, r4, lr}
 800ccb2:	681c      	ldr	r4, [r3, #0]
 800ccb4:	b124      	cbz	r4, 800ccc0 <iprintf+0x14>
 800ccb6:	69a3      	ldr	r3, [r4, #24]
 800ccb8:	b913      	cbnz	r3, 800ccc0 <iprintf+0x14>
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fa88 	bl	800d1d0 <__sinit>
 800ccc0:	ab05      	add	r3, sp, #20
 800ccc2:	9a04      	ldr	r2, [sp, #16]
 800ccc4:	68a1      	ldr	r1, [r4, #8]
 800ccc6:	9301      	str	r3, [sp, #4]
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 fc91 	bl	800d5f0 <_vfiprintf_r>
 800ccce:	b002      	add	sp, #8
 800ccd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd4:	b004      	add	sp, #16
 800ccd6:	4770      	bx	lr
 800ccd8:	20000030 	.word	0x20000030

0800ccdc <putchar>:
 800ccdc:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <putchar+0x28>)
 800ccde:	b513      	push	{r0, r1, r4, lr}
 800cce0:	681c      	ldr	r4, [r3, #0]
 800cce2:	4601      	mov	r1, r0
 800cce4:	b134      	cbz	r4, 800ccf4 <putchar+0x18>
 800cce6:	69a3      	ldr	r3, [r4, #24]
 800cce8:	b923      	cbnz	r3, 800ccf4 <putchar+0x18>
 800ccea:	9001      	str	r0, [sp, #4]
 800ccec:	4620      	mov	r0, r4
 800ccee:	f000 fa6f 	bl	800d1d0 <__sinit>
 800ccf2:	9901      	ldr	r1, [sp, #4]
 800ccf4:	68a2      	ldr	r2, [r4, #8]
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	b002      	add	sp, #8
 800ccfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccfe:	f000 bf3b 	b.w	800db78 <_putc_r>
 800cd02:	bf00      	nop
 800cd04:	20000030 	.word	0x20000030

0800cd08 <_puts_r>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	460e      	mov	r6, r1
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	b118      	cbz	r0, 800cd18 <_puts_r+0x10>
 800cd10:	6983      	ldr	r3, [r0, #24]
 800cd12:	b90b      	cbnz	r3, 800cd18 <_puts_r+0x10>
 800cd14:	f000 fa5c 	bl	800d1d0 <__sinit>
 800cd18:	69ab      	ldr	r3, [r5, #24]
 800cd1a:	68ac      	ldr	r4, [r5, #8]
 800cd1c:	b913      	cbnz	r3, 800cd24 <_puts_r+0x1c>
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 fa56 	bl	800d1d0 <__sinit>
 800cd24:	4b2c      	ldr	r3, [pc, #176]	; (800cdd8 <_puts_r+0xd0>)
 800cd26:	429c      	cmp	r4, r3
 800cd28:	d120      	bne.n	800cd6c <_puts_r+0x64>
 800cd2a:	686c      	ldr	r4, [r5, #4]
 800cd2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd2e:	07db      	lsls	r3, r3, #31
 800cd30:	d405      	bmi.n	800cd3e <_puts_r+0x36>
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	0598      	lsls	r0, r3, #22
 800cd36:	d402      	bmi.n	800cd3e <_puts_r+0x36>
 800cd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd3a:	f000 fae7 	bl	800d30c <__retarget_lock_acquire_recursive>
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	0719      	lsls	r1, r3, #28
 800cd42:	d51d      	bpl.n	800cd80 <_puts_r+0x78>
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	b1db      	cbz	r3, 800cd80 <_puts_r+0x78>
 800cd48:	3e01      	subs	r6, #1
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd50:	3b01      	subs	r3, #1
 800cd52:	60a3      	str	r3, [r4, #8]
 800cd54:	bb39      	cbnz	r1, 800cda6 <_puts_r+0x9e>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da38      	bge.n	800cdcc <_puts_r+0xc4>
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	210a      	movs	r1, #10
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f000 f85c 	bl	800ce1c <__swbuf_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	d011      	beq.n	800cd8c <_puts_r+0x84>
 800cd68:	250a      	movs	r5, #10
 800cd6a:	e011      	b.n	800cd90 <_puts_r+0x88>
 800cd6c:	4b1b      	ldr	r3, [pc, #108]	; (800cddc <_puts_r+0xd4>)
 800cd6e:	429c      	cmp	r4, r3
 800cd70:	d101      	bne.n	800cd76 <_puts_r+0x6e>
 800cd72:	68ac      	ldr	r4, [r5, #8]
 800cd74:	e7da      	b.n	800cd2c <_puts_r+0x24>
 800cd76:	4b1a      	ldr	r3, [pc, #104]	; (800cde0 <_puts_r+0xd8>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	bf08      	it	eq
 800cd7c:	68ec      	ldreq	r4, [r5, #12]
 800cd7e:	e7d5      	b.n	800cd2c <_puts_r+0x24>
 800cd80:	4621      	mov	r1, r4
 800cd82:	4628      	mov	r0, r5
 800cd84:	f000 f89c 	bl	800cec0 <__swsetup_r>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d0dd      	beq.n	800cd48 <_puts_r+0x40>
 800cd8c:	f04f 35ff 	mov.w	r5, #4294967295
 800cd90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd92:	07da      	lsls	r2, r3, #31
 800cd94:	d405      	bmi.n	800cda2 <_puts_r+0x9a>
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	059b      	lsls	r3, r3, #22
 800cd9a:	d402      	bmi.n	800cda2 <_puts_r+0x9a>
 800cd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd9e:	f000 fab6 	bl	800d30e <__retarget_lock_release_recursive>
 800cda2:	4628      	mov	r0, r5
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	da04      	bge.n	800cdb4 <_puts_r+0xac>
 800cdaa:	69a2      	ldr	r2, [r4, #24]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	dc06      	bgt.n	800cdbe <_puts_r+0xb6>
 800cdb0:	290a      	cmp	r1, #10
 800cdb2:	d004      	beq.n	800cdbe <_puts_r+0xb6>
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	6022      	str	r2, [r4, #0]
 800cdba:	7019      	strb	r1, [r3, #0]
 800cdbc:	e7c5      	b.n	800cd4a <_puts_r+0x42>
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 f82b 	bl	800ce1c <__swbuf_r>
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d1bf      	bne.n	800cd4a <_puts_r+0x42>
 800cdca:	e7df      	b.n	800cd8c <_puts_r+0x84>
 800cdcc:	6823      	ldr	r3, [r4, #0]
 800cdce:	250a      	movs	r5, #10
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	6022      	str	r2, [r4, #0]
 800cdd4:	701d      	strb	r5, [r3, #0]
 800cdd6:	e7db      	b.n	800cd90 <_puts_r+0x88>
 800cdd8:	0800f530 	.word	0x0800f530
 800cddc:	0800f550 	.word	0x0800f550
 800cde0:	0800f510 	.word	0x0800f510

0800cde4 <puts>:
 800cde4:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <puts+0xc>)
 800cde6:	4601      	mov	r1, r0
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	f7ff bf8d 	b.w	800cd08 <_puts_r>
 800cdee:	bf00      	nop
 800cdf0:	20000030 	.word	0x20000030

0800cdf4 <strrchr>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	b969      	cbnz	r1, 800ce18 <strrchr+0x24>
 800cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce00:	f000 bf55 	b.w	800dcae <strchr>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	4605      	mov	r5, r0
 800ce08:	4621      	mov	r1, r4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 ff4f 	bl	800dcae <strchr>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1f7      	bne.n	800ce04 <strrchr+0x10>
 800ce14:	4628      	mov	r0, r5
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	2500      	movs	r5, #0
 800ce1a:	e7f5      	b.n	800ce08 <strrchr+0x14>

0800ce1c <__swbuf_r>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	460e      	mov	r6, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	4605      	mov	r5, r0
 800ce24:	b118      	cbz	r0, 800ce2e <__swbuf_r+0x12>
 800ce26:	6983      	ldr	r3, [r0, #24]
 800ce28:	b90b      	cbnz	r3, 800ce2e <__swbuf_r+0x12>
 800ce2a:	f000 f9d1 	bl	800d1d0 <__sinit>
 800ce2e:	4b21      	ldr	r3, [pc, #132]	; (800ceb4 <__swbuf_r+0x98>)
 800ce30:	429c      	cmp	r4, r3
 800ce32:	d12b      	bne.n	800ce8c <__swbuf_r+0x70>
 800ce34:	686c      	ldr	r4, [r5, #4]
 800ce36:	69a3      	ldr	r3, [r4, #24]
 800ce38:	60a3      	str	r3, [r4, #8]
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	071a      	lsls	r2, r3, #28
 800ce3e:	d52f      	bpl.n	800cea0 <__swbuf_r+0x84>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	b36b      	cbz	r3, 800cea0 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	1ac0      	subs	r0, r0, r3
 800ce4a:	6963      	ldr	r3, [r4, #20]
 800ce4c:	b2f6      	uxtb	r6, r6
 800ce4e:	4283      	cmp	r3, r0
 800ce50:	4637      	mov	r7, r6
 800ce52:	dc04      	bgt.n	800ce5e <__swbuf_r+0x42>
 800ce54:	4621      	mov	r1, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	f000 f926 	bl	800d0a8 <_fflush_r>
 800ce5c:	bb30      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	60a3      	str	r3, [r4, #8]
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	6022      	str	r2, [r4, #0]
 800ce6a:	701e      	strb	r6, [r3, #0]
 800ce6c:	6963      	ldr	r3, [r4, #20]
 800ce6e:	3001      	adds	r0, #1
 800ce70:	4283      	cmp	r3, r0
 800ce72:	d004      	beq.n	800ce7e <__swbuf_r+0x62>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	07db      	lsls	r3, r3, #31
 800ce78:	d506      	bpl.n	800ce88 <__swbuf_r+0x6c>
 800ce7a:	2e0a      	cmp	r6, #10
 800ce7c:	d104      	bne.n	800ce88 <__swbuf_r+0x6c>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f000 f911 	bl	800d0a8 <_fflush_r>
 800ce86:	b988      	cbnz	r0, 800ceac <__swbuf_r+0x90>
 800ce88:	4638      	mov	r0, r7
 800ce8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <__swbuf_r+0x9c>)
 800ce8e:	429c      	cmp	r4, r3
 800ce90:	d101      	bne.n	800ce96 <__swbuf_r+0x7a>
 800ce92:	68ac      	ldr	r4, [r5, #8]
 800ce94:	e7cf      	b.n	800ce36 <__swbuf_r+0x1a>
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <__swbuf_r+0xa0>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	bf08      	it	eq
 800ce9c:	68ec      	ldreq	r4, [r5, #12]
 800ce9e:	e7ca      	b.n	800ce36 <__swbuf_r+0x1a>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 f80c 	bl	800cec0 <__swsetup_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d0cb      	beq.n	800ce44 <__swbuf_r+0x28>
 800ceac:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb0:	e7ea      	b.n	800ce88 <__swbuf_r+0x6c>
 800ceb2:	bf00      	nop
 800ceb4:	0800f530 	.word	0x0800f530
 800ceb8:	0800f550 	.word	0x0800f550
 800cebc:	0800f510 	.word	0x0800f510

0800cec0 <__swsetup_r>:
 800cec0:	4b32      	ldr	r3, [pc, #200]	; (800cf8c <__swsetup_r+0xcc>)
 800cec2:	b570      	push	{r4, r5, r6, lr}
 800cec4:	681d      	ldr	r5, [r3, #0]
 800cec6:	4606      	mov	r6, r0
 800cec8:	460c      	mov	r4, r1
 800ceca:	b125      	cbz	r5, 800ced6 <__swsetup_r+0x16>
 800cecc:	69ab      	ldr	r3, [r5, #24]
 800cece:	b913      	cbnz	r3, 800ced6 <__swsetup_r+0x16>
 800ced0:	4628      	mov	r0, r5
 800ced2:	f000 f97d 	bl	800d1d0 <__sinit>
 800ced6:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <__swsetup_r+0xd0>)
 800ced8:	429c      	cmp	r4, r3
 800ceda:	d10f      	bne.n	800cefc <__swsetup_r+0x3c>
 800cedc:	686c      	ldr	r4, [r5, #4]
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cee4:	0719      	lsls	r1, r3, #28
 800cee6:	d42c      	bmi.n	800cf42 <__swsetup_r+0x82>
 800cee8:	06dd      	lsls	r5, r3, #27
 800ceea:	d411      	bmi.n	800cf10 <__swsetup_r+0x50>
 800ceec:	2309      	movs	r3, #9
 800ceee:	6033      	str	r3, [r6, #0]
 800cef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	f04f 30ff 	mov.w	r0, #4294967295
 800cefa:	e03e      	b.n	800cf7a <__swsetup_r+0xba>
 800cefc:	4b25      	ldr	r3, [pc, #148]	; (800cf94 <__swsetup_r+0xd4>)
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d101      	bne.n	800cf06 <__swsetup_r+0x46>
 800cf02:	68ac      	ldr	r4, [r5, #8]
 800cf04:	e7eb      	b.n	800cede <__swsetup_r+0x1e>
 800cf06:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <__swsetup_r+0xd8>)
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	bf08      	it	eq
 800cf0c:	68ec      	ldreq	r4, [r5, #12]
 800cf0e:	e7e6      	b.n	800cede <__swsetup_r+0x1e>
 800cf10:	0758      	lsls	r0, r3, #29
 800cf12:	d512      	bpl.n	800cf3a <__swsetup_r+0x7a>
 800cf14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf16:	b141      	cbz	r1, 800cf2a <__swsetup_r+0x6a>
 800cf18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf1c:	4299      	cmp	r1, r3
 800cf1e:	d002      	beq.n	800cf26 <__swsetup_r+0x66>
 800cf20:	4630      	mov	r0, r6
 800cf22:	f000 fa5b 	bl	800d3dc <_free_r>
 800cf26:	2300      	movs	r3, #0
 800cf28:	6363      	str	r3, [r4, #52]	; 0x34
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	2300      	movs	r3, #0
 800cf34:	6063      	str	r3, [r4, #4]
 800cf36:	6923      	ldr	r3, [r4, #16]
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	f043 0308 	orr.w	r3, r3, #8
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	b94b      	cbnz	r3, 800cf5a <__swsetup_r+0x9a>
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf50:	d003      	beq.n	800cf5a <__swsetup_r+0x9a>
 800cf52:	4621      	mov	r1, r4
 800cf54:	4630      	mov	r0, r6
 800cf56:	f000 fa01 	bl	800d35c <__smakebuf_r>
 800cf5a:	89a0      	ldrh	r0, [r4, #12]
 800cf5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf60:	f010 0301 	ands.w	r3, r0, #1
 800cf64:	d00a      	beq.n	800cf7c <__swsetup_r+0xbc>
 800cf66:	2300      	movs	r3, #0
 800cf68:	60a3      	str	r3, [r4, #8]
 800cf6a:	6963      	ldr	r3, [r4, #20]
 800cf6c:	425b      	negs	r3, r3
 800cf6e:	61a3      	str	r3, [r4, #24]
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	b943      	cbnz	r3, 800cf86 <__swsetup_r+0xc6>
 800cf74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf78:	d1ba      	bne.n	800cef0 <__swsetup_r+0x30>
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}
 800cf7c:	0781      	lsls	r1, r0, #30
 800cf7e:	bf58      	it	pl
 800cf80:	6963      	ldrpl	r3, [r4, #20]
 800cf82:	60a3      	str	r3, [r4, #8]
 800cf84:	e7f4      	b.n	800cf70 <__swsetup_r+0xb0>
 800cf86:	2000      	movs	r0, #0
 800cf88:	e7f7      	b.n	800cf7a <__swsetup_r+0xba>
 800cf8a:	bf00      	nop
 800cf8c:	20000030 	.word	0x20000030
 800cf90:	0800f530 	.word	0x0800f530
 800cf94:	0800f550 	.word	0x0800f550
 800cf98:	0800f510 	.word	0x0800f510

0800cf9c <__sflush_r>:
 800cf9c:	898a      	ldrh	r2, [r1, #12]
 800cf9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	0710      	lsls	r0, r2, #28
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	d458      	bmi.n	800d05c <__sflush_r+0xc0>
 800cfaa:	684b      	ldr	r3, [r1, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dc05      	bgt.n	800cfbc <__sflush_r+0x20>
 800cfb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	dc02      	bgt.n	800cfbc <__sflush_r+0x20>
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfbe:	2e00      	cmp	r6, #0
 800cfc0:	d0f9      	beq.n	800cfb6 <__sflush_r+0x1a>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cfc8:	682f      	ldr	r7, [r5, #0]
 800cfca:	602b      	str	r3, [r5, #0]
 800cfcc:	d032      	beq.n	800d034 <__sflush_r+0x98>
 800cfce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfd0:	89a3      	ldrh	r3, [r4, #12]
 800cfd2:	075a      	lsls	r2, r3, #29
 800cfd4:	d505      	bpl.n	800cfe2 <__sflush_r+0x46>
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	1ac0      	subs	r0, r0, r3
 800cfda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfdc:	b10b      	cbz	r3, 800cfe2 <__sflush_r+0x46>
 800cfde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfe0:	1ac0      	subs	r0, r0, r3
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfe8:	6a21      	ldr	r1, [r4, #32]
 800cfea:	4628      	mov	r0, r5
 800cfec:	47b0      	blx	r6
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	d106      	bne.n	800d002 <__sflush_r+0x66>
 800cff4:	6829      	ldr	r1, [r5, #0]
 800cff6:	291d      	cmp	r1, #29
 800cff8:	d82c      	bhi.n	800d054 <__sflush_r+0xb8>
 800cffa:	4a2a      	ldr	r2, [pc, #168]	; (800d0a4 <__sflush_r+0x108>)
 800cffc:	40ca      	lsrs	r2, r1
 800cffe:	07d6      	lsls	r6, r2, #31
 800d000:	d528      	bpl.n	800d054 <__sflush_r+0xb8>
 800d002:	2200      	movs	r2, #0
 800d004:	6062      	str	r2, [r4, #4]
 800d006:	04d9      	lsls	r1, r3, #19
 800d008:	6922      	ldr	r2, [r4, #16]
 800d00a:	6022      	str	r2, [r4, #0]
 800d00c:	d504      	bpl.n	800d018 <__sflush_r+0x7c>
 800d00e:	1c42      	adds	r2, r0, #1
 800d010:	d101      	bne.n	800d016 <__sflush_r+0x7a>
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	b903      	cbnz	r3, 800d018 <__sflush_r+0x7c>
 800d016:	6560      	str	r0, [r4, #84]	; 0x54
 800d018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d01a:	602f      	str	r7, [r5, #0]
 800d01c:	2900      	cmp	r1, #0
 800d01e:	d0ca      	beq.n	800cfb6 <__sflush_r+0x1a>
 800d020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d024:	4299      	cmp	r1, r3
 800d026:	d002      	beq.n	800d02e <__sflush_r+0x92>
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 f9d7 	bl	800d3dc <_free_r>
 800d02e:	2000      	movs	r0, #0
 800d030:	6360      	str	r0, [r4, #52]	; 0x34
 800d032:	e7c1      	b.n	800cfb8 <__sflush_r+0x1c>
 800d034:	6a21      	ldr	r1, [r4, #32]
 800d036:	2301      	movs	r3, #1
 800d038:	4628      	mov	r0, r5
 800d03a:	47b0      	blx	r6
 800d03c:	1c41      	adds	r1, r0, #1
 800d03e:	d1c7      	bne.n	800cfd0 <__sflush_r+0x34>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d0c4      	beq.n	800cfd0 <__sflush_r+0x34>
 800d046:	2b1d      	cmp	r3, #29
 800d048:	d001      	beq.n	800d04e <__sflush_r+0xb2>
 800d04a:	2b16      	cmp	r3, #22
 800d04c:	d101      	bne.n	800d052 <__sflush_r+0xb6>
 800d04e:	602f      	str	r7, [r5, #0]
 800d050:	e7b1      	b.n	800cfb6 <__sflush_r+0x1a>
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d058:	81a3      	strh	r3, [r4, #12]
 800d05a:	e7ad      	b.n	800cfb8 <__sflush_r+0x1c>
 800d05c:	690f      	ldr	r7, [r1, #16]
 800d05e:	2f00      	cmp	r7, #0
 800d060:	d0a9      	beq.n	800cfb6 <__sflush_r+0x1a>
 800d062:	0793      	lsls	r3, r2, #30
 800d064:	680e      	ldr	r6, [r1, #0]
 800d066:	bf08      	it	eq
 800d068:	694b      	ldreq	r3, [r1, #20]
 800d06a:	600f      	str	r7, [r1, #0]
 800d06c:	bf18      	it	ne
 800d06e:	2300      	movne	r3, #0
 800d070:	eba6 0807 	sub.w	r8, r6, r7
 800d074:	608b      	str	r3, [r1, #8]
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	dd9c      	ble.n	800cfb6 <__sflush_r+0x1a>
 800d07c:	6a21      	ldr	r1, [r4, #32]
 800d07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d080:	4643      	mov	r3, r8
 800d082:	463a      	mov	r2, r7
 800d084:	4628      	mov	r0, r5
 800d086:	47b0      	blx	r6
 800d088:	2800      	cmp	r0, #0
 800d08a:	dc06      	bgt.n	800d09a <__sflush_r+0xfe>
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d092:	81a3      	strh	r3, [r4, #12]
 800d094:	f04f 30ff 	mov.w	r0, #4294967295
 800d098:	e78e      	b.n	800cfb8 <__sflush_r+0x1c>
 800d09a:	4407      	add	r7, r0
 800d09c:	eba8 0800 	sub.w	r8, r8, r0
 800d0a0:	e7e9      	b.n	800d076 <__sflush_r+0xda>
 800d0a2:	bf00      	nop
 800d0a4:	20400001 	.word	0x20400001

0800d0a8 <_fflush_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	690b      	ldr	r3, [r1, #16]
 800d0ac:	4605      	mov	r5, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	b913      	cbnz	r3, 800d0b8 <_fflush_r+0x10>
 800d0b2:	2500      	movs	r5, #0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	b118      	cbz	r0, 800d0c2 <_fflush_r+0x1a>
 800d0ba:	6983      	ldr	r3, [r0, #24]
 800d0bc:	b90b      	cbnz	r3, 800d0c2 <_fflush_r+0x1a>
 800d0be:	f000 f887 	bl	800d1d0 <__sinit>
 800d0c2:	4b14      	ldr	r3, [pc, #80]	; (800d114 <_fflush_r+0x6c>)
 800d0c4:	429c      	cmp	r4, r3
 800d0c6:	d11b      	bne.n	800d100 <_fflush_r+0x58>
 800d0c8:	686c      	ldr	r4, [r5, #4]
 800d0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0ef      	beq.n	800d0b2 <_fflush_r+0xa>
 800d0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0d4:	07d0      	lsls	r0, r2, #31
 800d0d6:	d404      	bmi.n	800d0e2 <_fflush_r+0x3a>
 800d0d8:	0599      	lsls	r1, r3, #22
 800d0da:	d402      	bmi.n	800d0e2 <_fflush_r+0x3a>
 800d0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0de:	f000 f915 	bl	800d30c <__retarget_lock_acquire_recursive>
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f7ff ff59 	bl	800cf9c <__sflush_r>
 800d0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0ec:	07da      	lsls	r2, r3, #31
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	d4e0      	bmi.n	800d0b4 <_fflush_r+0xc>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	059b      	lsls	r3, r3, #22
 800d0f6:	d4dd      	bmi.n	800d0b4 <_fflush_r+0xc>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fa:	f000 f908 	bl	800d30e <__retarget_lock_release_recursive>
 800d0fe:	e7d9      	b.n	800d0b4 <_fflush_r+0xc>
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <_fflush_r+0x70>)
 800d102:	429c      	cmp	r4, r3
 800d104:	d101      	bne.n	800d10a <_fflush_r+0x62>
 800d106:	68ac      	ldr	r4, [r5, #8]
 800d108:	e7df      	b.n	800d0ca <_fflush_r+0x22>
 800d10a:	4b04      	ldr	r3, [pc, #16]	; (800d11c <_fflush_r+0x74>)
 800d10c:	429c      	cmp	r4, r3
 800d10e:	bf08      	it	eq
 800d110:	68ec      	ldreq	r4, [r5, #12]
 800d112:	e7da      	b.n	800d0ca <_fflush_r+0x22>
 800d114:	0800f530 	.word	0x0800f530
 800d118:	0800f550 	.word	0x0800f550
 800d11c:	0800f510 	.word	0x0800f510

0800d120 <std>:
 800d120:	2300      	movs	r3, #0
 800d122:	b510      	push	{r4, lr}
 800d124:	4604      	mov	r4, r0
 800d126:	e9c0 3300 	strd	r3, r3, [r0]
 800d12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d12e:	6083      	str	r3, [r0, #8]
 800d130:	8181      	strh	r1, [r0, #12]
 800d132:	6643      	str	r3, [r0, #100]	; 0x64
 800d134:	81c2      	strh	r2, [r0, #14]
 800d136:	6183      	str	r3, [r0, #24]
 800d138:	4619      	mov	r1, r3
 800d13a:	2208      	movs	r2, #8
 800d13c:	305c      	adds	r0, #92	; 0x5c
 800d13e:	f7ff fdad 	bl	800cc9c <memset>
 800d142:	4b05      	ldr	r3, [pc, #20]	; (800d158 <std+0x38>)
 800d144:	6263      	str	r3, [r4, #36]	; 0x24
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <std+0x3c>)
 800d148:	62a3      	str	r3, [r4, #40]	; 0x28
 800d14a:	4b05      	ldr	r3, [pc, #20]	; (800d160 <std+0x40>)
 800d14c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d14e:	4b05      	ldr	r3, [pc, #20]	; (800d164 <std+0x44>)
 800d150:	6224      	str	r4, [r4, #32]
 800d152:	6323      	str	r3, [r4, #48]	; 0x30
 800d154:	bd10      	pop	{r4, pc}
 800d156:	bf00      	nop
 800d158:	0800dc29 	.word	0x0800dc29
 800d15c:	0800dc4b 	.word	0x0800dc4b
 800d160:	0800dc83 	.word	0x0800dc83
 800d164:	0800dca7 	.word	0x0800dca7

0800d168 <_cleanup_r>:
 800d168:	4901      	ldr	r1, [pc, #4]	; (800d170 <_cleanup_r+0x8>)
 800d16a:	f000 b8af 	b.w	800d2cc <_fwalk_reent>
 800d16e:	bf00      	nop
 800d170:	0800d0a9 	.word	0x0800d0a9

0800d174 <__sfmoreglue>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	2268      	movs	r2, #104	; 0x68
 800d178:	1e4d      	subs	r5, r1, #1
 800d17a:	4355      	muls	r5, r2
 800d17c:	460e      	mov	r6, r1
 800d17e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d182:	f000 f997 	bl	800d4b4 <_malloc_r>
 800d186:	4604      	mov	r4, r0
 800d188:	b140      	cbz	r0, 800d19c <__sfmoreglue+0x28>
 800d18a:	2100      	movs	r1, #0
 800d18c:	e9c0 1600 	strd	r1, r6, [r0]
 800d190:	300c      	adds	r0, #12
 800d192:	60a0      	str	r0, [r4, #8]
 800d194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d198:	f7ff fd80 	bl	800cc9c <memset>
 800d19c:	4620      	mov	r0, r4
 800d19e:	bd70      	pop	{r4, r5, r6, pc}

0800d1a0 <__sfp_lock_acquire>:
 800d1a0:	4801      	ldr	r0, [pc, #4]	; (800d1a8 <__sfp_lock_acquire+0x8>)
 800d1a2:	f000 b8b3 	b.w	800d30c <__retarget_lock_acquire_recursive>
 800d1a6:	bf00      	nop
 800d1a8:	20001a35 	.word	0x20001a35

0800d1ac <__sfp_lock_release>:
 800d1ac:	4801      	ldr	r0, [pc, #4]	; (800d1b4 <__sfp_lock_release+0x8>)
 800d1ae:	f000 b8ae 	b.w	800d30e <__retarget_lock_release_recursive>
 800d1b2:	bf00      	nop
 800d1b4:	20001a35 	.word	0x20001a35

0800d1b8 <__sinit_lock_acquire>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	; (800d1c0 <__sinit_lock_acquire+0x8>)
 800d1ba:	f000 b8a7 	b.w	800d30c <__retarget_lock_acquire_recursive>
 800d1be:	bf00      	nop
 800d1c0:	20001a36 	.word	0x20001a36

0800d1c4 <__sinit_lock_release>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	; (800d1cc <__sinit_lock_release+0x8>)
 800d1c6:	f000 b8a2 	b.w	800d30e <__retarget_lock_release_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	20001a36 	.word	0x20001a36

0800d1d0 <__sinit>:
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	f7ff fff0 	bl	800d1b8 <__sinit_lock_acquire>
 800d1d8:	69a3      	ldr	r3, [r4, #24]
 800d1da:	b11b      	cbz	r3, 800d1e4 <__sinit+0x14>
 800d1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e0:	f7ff bff0 	b.w	800d1c4 <__sinit_lock_release>
 800d1e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1e8:	6523      	str	r3, [r4, #80]	; 0x50
 800d1ea:	4b13      	ldr	r3, [pc, #76]	; (800d238 <__sinit+0x68>)
 800d1ec:	4a13      	ldr	r2, [pc, #76]	; (800d23c <__sinit+0x6c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1f2:	42a3      	cmp	r3, r4
 800d1f4:	bf04      	itt	eq
 800d1f6:	2301      	moveq	r3, #1
 800d1f8:	61a3      	streq	r3, [r4, #24]
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f000 f820 	bl	800d240 <__sfp>
 800d200:	6060      	str	r0, [r4, #4]
 800d202:	4620      	mov	r0, r4
 800d204:	f000 f81c 	bl	800d240 <__sfp>
 800d208:	60a0      	str	r0, [r4, #8]
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 f818 	bl	800d240 <__sfp>
 800d210:	2200      	movs	r2, #0
 800d212:	60e0      	str	r0, [r4, #12]
 800d214:	2104      	movs	r1, #4
 800d216:	6860      	ldr	r0, [r4, #4]
 800d218:	f7ff ff82 	bl	800d120 <std>
 800d21c:	68a0      	ldr	r0, [r4, #8]
 800d21e:	2201      	movs	r2, #1
 800d220:	2109      	movs	r1, #9
 800d222:	f7ff ff7d 	bl	800d120 <std>
 800d226:	68e0      	ldr	r0, [r4, #12]
 800d228:	2202      	movs	r2, #2
 800d22a:	2112      	movs	r1, #18
 800d22c:	f7ff ff78 	bl	800d120 <std>
 800d230:	2301      	movs	r3, #1
 800d232:	61a3      	str	r3, [r4, #24]
 800d234:	e7d2      	b.n	800d1dc <__sinit+0xc>
 800d236:	bf00      	nop
 800d238:	0800f50c 	.word	0x0800f50c
 800d23c:	0800d169 	.word	0x0800d169

0800d240 <__sfp>:
 800d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d242:	4607      	mov	r7, r0
 800d244:	f7ff ffac 	bl	800d1a0 <__sfp_lock_acquire>
 800d248:	4b1e      	ldr	r3, [pc, #120]	; (800d2c4 <__sfp+0x84>)
 800d24a:	681e      	ldr	r6, [r3, #0]
 800d24c:	69b3      	ldr	r3, [r6, #24]
 800d24e:	b913      	cbnz	r3, 800d256 <__sfp+0x16>
 800d250:	4630      	mov	r0, r6
 800d252:	f7ff ffbd 	bl	800d1d0 <__sinit>
 800d256:	3648      	adds	r6, #72	; 0x48
 800d258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	d503      	bpl.n	800d268 <__sfp+0x28>
 800d260:	6833      	ldr	r3, [r6, #0]
 800d262:	b30b      	cbz	r3, 800d2a8 <__sfp+0x68>
 800d264:	6836      	ldr	r6, [r6, #0]
 800d266:	e7f7      	b.n	800d258 <__sfp+0x18>
 800d268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d26c:	b9d5      	cbnz	r5, 800d2a4 <__sfp+0x64>
 800d26e:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <__sfp+0x88>)
 800d270:	60e3      	str	r3, [r4, #12]
 800d272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d276:	6665      	str	r5, [r4, #100]	; 0x64
 800d278:	f000 f847 	bl	800d30a <__retarget_lock_init_recursive>
 800d27c:	f7ff ff96 	bl	800d1ac <__sfp_lock_release>
 800d280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d288:	6025      	str	r5, [r4, #0]
 800d28a:	61a5      	str	r5, [r4, #24]
 800d28c:	2208      	movs	r2, #8
 800d28e:	4629      	mov	r1, r5
 800d290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d294:	f7ff fd02 	bl	800cc9c <memset>
 800d298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d29c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2a4:	3468      	adds	r4, #104	; 0x68
 800d2a6:	e7d9      	b.n	800d25c <__sfp+0x1c>
 800d2a8:	2104      	movs	r1, #4
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7ff ff62 	bl	800d174 <__sfmoreglue>
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	6030      	str	r0, [r6, #0]
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d1d5      	bne.n	800d264 <__sfp+0x24>
 800d2b8:	f7ff ff78 	bl	800d1ac <__sfp_lock_release>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	603b      	str	r3, [r7, #0]
 800d2c0:	e7ee      	b.n	800d2a0 <__sfp+0x60>
 800d2c2:	bf00      	nop
 800d2c4:	0800f50c 	.word	0x0800f50c
 800d2c8:	ffff0001 	.word	0xffff0001

0800d2cc <_fwalk_reent>:
 800d2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d0:	4606      	mov	r6, r0
 800d2d2:	4688      	mov	r8, r1
 800d2d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2d8:	2700      	movs	r7, #0
 800d2da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2de:	f1b9 0901 	subs.w	r9, r9, #1
 800d2e2:	d505      	bpl.n	800d2f0 <_fwalk_reent+0x24>
 800d2e4:	6824      	ldr	r4, [r4, #0]
 800d2e6:	2c00      	cmp	r4, #0
 800d2e8:	d1f7      	bne.n	800d2da <_fwalk_reent+0xe>
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f0:	89ab      	ldrh	r3, [r5, #12]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d907      	bls.n	800d306 <_fwalk_reent+0x3a>
 800d2f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	d003      	beq.n	800d306 <_fwalk_reent+0x3a>
 800d2fe:	4629      	mov	r1, r5
 800d300:	4630      	mov	r0, r6
 800d302:	47c0      	blx	r8
 800d304:	4307      	orrs	r7, r0
 800d306:	3568      	adds	r5, #104	; 0x68
 800d308:	e7e9      	b.n	800d2de <_fwalk_reent+0x12>

0800d30a <__retarget_lock_init_recursive>:
 800d30a:	4770      	bx	lr

0800d30c <__retarget_lock_acquire_recursive>:
 800d30c:	4770      	bx	lr

0800d30e <__retarget_lock_release_recursive>:
 800d30e:	4770      	bx	lr

0800d310 <__swhatbuf_r>:
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	460e      	mov	r6, r1
 800d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d318:	2900      	cmp	r1, #0
 800d31a:	b096      	sub	sp, #88	; 0x58
 800d31c:	4614      	mov	r4, r2
 800d31e:	461d      	mov	r5, r3
 800d320:	da08      	bge.n	800d334 <__swhatbuf_r+0x24>
 800d322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	602a      	str	r2, [r5, #0]
 800d32a:	061a      	lsls	r2, r3, #24
 800d32c:	d410      	bmi.n	800d350 <__swhatbuf_r+0x40>
 800d32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d332:	e00e      	b.n	800d352 <__swhatbuf_r+0x42>
 800d334:	466a      	mov	r2, sp
 800d336:	f000 fce9 	bl	800dd0c <_fstat_r>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	dbf1      	blt.n	800d322 <__swhatbuf_r+0x12>
 800d33e:	9a01      	ldr	r2, [sp, #4]
 800d340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d348:	425a      	negs	r2, r3
 800d34a:	415a      	adcs	r2, r3
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	e7ee      	b.n	800d32e <__swhatbuf_r+0x1e>
 800d350:	2340      	movs	r3, #64	; 0x40
 800d352:	2000      	movs	r0, #0
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	b016      	add	sp, #88	; 0x58
 800d358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d35c <__smakebuf_r>:
 800d35c:	898b      	ldrh	r3, [r1, #12]
 800d35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d360:	079d      	lsls	r5, r3, #30
 800d362:	4606      	mov	r6, r0
 800d364:	460c      	mov	r4, r1
 800d366:	d507      	bpl.n	800d378 <__smakebuf_r+0x1c>
 800d368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	2301      	movs	r3, #1
 800d372:	6163      	str	r3, [r4, #20]
 800d374:	b002      	add	sp, #8
 800d376:	bd70      	pop	{r4, r5, r6, pc}
 800d378:	ab01      	add	r3, sp, #4
 800d37a:	466a      	mov	r2, sp
 800d37c:	f7ff ffc8 	bl	800d310 <__swhatbuf_r>
 800d380:	9900      	ldr	r1, [sp, #0]
 800d382:	4605      	mov	r5, r0
 800d384:	4630      	mov	r0, r6
 800d386:	f000 f895 	bl	800d4b4 <_malloc_r>
 800d38a:	b948      	cbnz	r0, 800d3a0 <__smakebuf_r+0x44>
 800d38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d390:	059a      	lsls	r2, r3, #22
 800d392:	d4ef      	bmi.n	800d374 <__smakebuf_r+0x18>
 800d394:	f023 0303 	bic.w	r3, r3, #3
 800d398:	f043 0302 	orr.w	r3, r3, #2
 800d39c:	81a3      	strh	r3, [r4, #12]
 800d39e:	e7e3      	b.n	800d368 <__smakebuf_r+0xc>
 800d3a0:	4b0d      	ldr	r3, [pc, #52]	; (800d3d8 <__smakebuf_r+0x7c>)
 800d3a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	6020      	str	r0, [r4, #0]
 800d3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	9b00      	ldr	r3, [sp, #0]
 800d3b0:	6163      	str	r3, [r4, #20]
 800d3b2:	9b01      	ldr	r3, [sp, #4]
 800d3b4:	6120      	str	r0, [r4, #16]
 800d3b6:	b15b      	cbz	r3, 800d3d0 <__smakebuf_r+0x74>
 800d3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f000 fcb7 	bl	800dd30 <_isatty_r>
 800d3c2:	b128      	cbz	r0, 800d3d0 <__smakebuf_r+0x74>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	f023 0303 	bic.w	r3, r3, #3
 800d3ca:	f043 0301 	orr.w	r3, r3, #1
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	89a0      	ldrh	r0, [r4, #12]
 800d3d2:	4305      	orrs	r5, r0
 800d3d4:	81a5      	strh	r5, [r4, #12]
 800d3d6:	e7cd      	b.n	800d374 <__smakebuf_r+0x18>
 800d3d8:	0800d169 	.word	0x0800d169

0800d3dc <_free_r>:
 800d3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d044      	beq.n	800d46c <_free_r+0x90>
 800d3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e6:	9001      	str	r0, [sp, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ee:	bfb8      	it	lt
 800d3f0:	18e4      	addlt	r4, r4, r3
 800d3f2:	f000 fcbf 	bl	800dd74 <__malloc_lock>
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <_free_r+0x94>)
 800d3f8:	9801      	ldr	r0, [sp, #4]
 800d3fa:	6813      	ldr	r3, [r2, #0]
 800d3fc:	b933      	cbnz	r3, 800d40c <_free_r+0x30>
 800d3fe:	6063      	str	r3, [r4, #4]
 800d400:	6014      	str	r4, [r2, #0]
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d408:	f000 bcba 	b.w	800dd80 <__malloc_unlock>
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d908      	bls.n	800d422 <_free_r+0x46>
 800d410:	6825      	ldr	r5, [r4, #0]
 800d412:	1961      	adds	r1, r4, r5
 800d414:	428b      	cmp	r3, r1
 800d416:	bf01      	itttt	eq
 800d418:	6819      	ldreq	r1, [r3, #0]
 800d41a:	685b      	ldreq	r3, [r3, #4]
 800d41c:	1949      	addeq	r1, r1, r5
 800d41e:	6021      	streq	r1, [r4, #0]
 800d420:	e7ed      	b.n	800d3fe <_free_r+0x22>
 800d422:	461a      	mov	r2, r3
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	b10b      	cbz	r3, 800d42c <_free_r+0x50>
 800d428:	42a3      	cmp	r3, r4
 800d42a:	d9fa      	bls.n	800d422 <_free_r+0x46>
 800d42c:	6811      	ldr	r1, [r2, #0]
 800d42e:	1855      	adds	r5, r2, r1
 800d430:	42a5      	cmp	r5, r4
 800d432:	d10b      	bne.n	800d44c <_free_r+0x70>
 800d434:	6824      	ldr	r4, [r4, #0]
 800d436:	4421      	add	r1, r4
 800d438:	1854      	adds	r4, r2, r1
 800d43a:	42a3      	cmp	r3, r4
 800d43c:	6011      	str	r1, [r2, #0]
 800d43e:	d1e0      	bne.n	800d402 <_free_r+0x26>
 800d440:	681c      	ldr	r4, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	6053      	str	r3, [r2, #4]
 800d446:	4421      	add	r1, r4
 800d448:	6011      	str	r1, [r2, #0]
 800d44a:	e7da      	b.n	800d402 <_free_r+0x26>
 800d44c:	d902      	bls.n	800d454 <_free_r+0x78>
 800d44e:	230c      	movs	r3, #12
 800d450:	6003      	str	r3, [r0, #0]
 800d452:	e7d6      	b.n	800d402 <_free_r+0x26>
 800d454:	6825      	ldr	r5, [r4, #0]
 800d456:	1961      	adds	r1, r4, r5
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf04      	itt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	6063      	str	r3, [r4, #4]
 800d462:	bf04      	itt	eq
 800d464:	1949      	addeq	r1, r1, r5
 800d466:	6021      	streq	r1, [r4, #0]
 800d468:	6054      	str	r4, [r2, #4]
 800d46a:	e7ca      	b.n	800d402 <_free_r+0x26>
 800d46c:	b003      	add	sp, #12
 800d46e:	bd30      	pop	{r4, r5, pc}
 800d470:	20001a38 	.word	0x20001a38

0800d474 <sbrk_aligned>:
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	4e0e      	ldr	r6, [pc, #56]	; (800d4b0 <sbrk_aligned+0x3c>)
 800d478:	460c      	mov	r4, r1
 800d47a:	6831      	ldr	r1, [r6, #0]
 800d47c:	4605      	mov	r5, r0
 800d47e:	b911      	cbnz	r1, 800d486 <sbrk_aligned+0x12>
 800d480:	f000 fbc2 	bl	800dc08 <_sbrk_r>
 800d484:	6030      	str	r0, [r6, #0]
 800d486:	4621      	mov	r1, r4
 800d488:	4628      	mov	r0, r5
 800d48a:	f000 fbbd 	bl	800dc08 <_sbrk_r>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d00a      	beq.n	800d4a8 <sbrk_aligned+0x34>
 800d492:	1cc4      	adds	r4, r0, #3
 800d494:	f024 0403 	bic.w	r4, r4, #3
 800d498:	42a0      	cmp	r0, r4
 800d49a:	d007      	beq.n	800d4ac <sbrk_aligned+0x38>
 800d49c:	1a21      	subs	r1, r4, r0
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f000 fbb2 	bl	800dc08 <_sbrk_r>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d101      	bne.n	800d4ac <sbrk_aligned+0x38>
 800d4a8:	f04f 34ff 	mov.w	r4, #4294967295
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	20001a3c 	.word	0x20001a3c

0800d4b4 <_malloc_r>:
 800d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b8:	1ccd      	adds	r5, r1, #3
 800d4ba:	f025 0503 	bic.w	r5, r5, #3
 800d4be:	3508      	adds	r5, #8
 800d4c0:	2d0c      	cmp	r5, #12
 800d4c2:	bf38      	it	cc
 800d4c4:	250c      	movcc	r5, #12
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	db01      	blt.n	800d4d0 <_malloc_r+0x1c>
 800d4cc:	42a9      	cmp	r1, r5
 800d4ce:	d905      	bls.n	800d4dc <_malloc_r+0x28>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	4e2e      	ldr	r6, [pc, #184]	; (800d598 <_malloc_r+0xe4>)
 800d4de:	f000 fc49 	bl	800dd74 <__malloc_lock>
 800d4e2:	6833      	ldr	r3, [r6, #0]
 800d4e4:	461c      	mov	r4, r3
 800d4e6:	bb34      	cbnz	r4, 800d536 <_malloc_r+0x82>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	f7ff ffc2 	bl	800d474 <sbrk_aligned>
 800d4f0:	1c43      	adds	r3, r0, #1
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	d14d      	bne.n	800d592 <_malloc_r+0xde>
 800d4f6:	6834      	ldr	r4, [r6, #0]
 800d4f8:	4626      	mov	r6, r4
 800d4fa:	2e00      	cmp	r6, #0
 800d4fc:	d140      	bne.n	800d580 <_malloc_r+0xcc>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	4631      	mov	r1, r6
 800d502:	4638      	mov	r0, r7
 800d504:	eb04 0803 	add.w	r8, r4, r3
 800d508:	f000 fb7e 	bl	800dc08 <_sbrk_r>
 800d50c:	4580      	cmp	r8, r0
 800d50e:	d13a      	bne.n	800d586 <_malloc_r+0xd2>
 800d510:	6821      	ldr	r1, [r4, #0]
 800d512:	3503      	adds	r5, #3
 800d514:	1a6d      	subs	r5, r5, r1
 800d516:	f025 0503 	bic.w	r5, r5, #3
 800d51a:	3508      	adds	r5, #8
 800d51c:	2d0c      	cmp	r5, #12
 800d51e:	bf38      	it	cc
 800d520:	250c      	movcc	r5, #12
 800d522:	4629      	mov	r1, r5
 800d524:	4638      	mov	r0, r7
 800d526:	f7ff ffa5 	bl	800d474 <sbrk_aligned>
 800d52a:	3001      	adds	r0, #1
 800d52c:	d02b      	beq.n	800d586 <_malloc_r+0xd2>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	442b      	add	r3, r5
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	e00e      	b.n	800d554 <_malloc_r+0xa0>
 800d536:	6822      	ldr	r2, [r4, #0]
 800d538:	1b52      	subs	r2, r2, r5
 800d53a:	d41e      	bmi.n	800d57a <_malloc_r+0xc6>
 800d53c:	2a0b      	cmp	r2, #11
 800d53e:	d916      	bls.n	800d56e <_malloc_r+0xba>
 800d540:	1961      	adds	r1, r4, r5
 800d542:	42a3      	cmp	r3, r4
 800d544:	6025      	str	r5, [r4, #0]
 800d546:	bf18      	it	ne
 800d548:	6059      	strne	r1, [r3, #4]
 800d54a:	6863      	ldr	r3, [r4, #4]
 800d54c:	bf08      	it	eq
 800d54e:	6031      	streq	r1, [r6, #0]
 800d550:	5162      	str	r2, [r4, r5]
 800d552:	604b      	str	r3, [r1, #4]
 800d554:	4638      	mov	r0, r7
 800d556:	f104 060b 	add.w	r6, r4, #11
 800d55a:	f000 fc11 	bl	800dd80 <__malloc_unlock>
 800d55e:	f026 0607 	bic.w	r6, r6, #7
 800d562:	1d23      	adds	r3, r4, #4
 800d564:	1af2      	subs	r2, r6, r3
 800d566:	d0b6      	beq.n	800d4d6 <_malloc_r+0x22>
 800d568:	1b9b      	subs	r3, r3, r6
 800d56a:	50a3      	str	r3, [r4, r2]
 800d56c:	e7b3      	b.n	800d4d6 <_malloc_r+0x22>
 800d56e:	6862      	ldr	r2, [r4, #4]
 800d570:	42a3      	cmp	r3, r4
 800d572:	bf0c      	ite	eq
 800d574:	6032      	streq	r2, [r6, #0]
 800d576:	605a      	strne	r2, [r3, #4]
 800d578:	e7ec      	b.n	800d554 <_malloc_r+0xa0>
 800d57a:	4623      	mov	r3, r4
 800d57c:	6864      	ldr	r4, [r4, #4]
 800d57e:	e7b2      	b.n	800d4e6 <_malloc_r+0x32>
 800d580:	4634      	mov	r4, r6
 800d582:	6876      	ldr	r6, [r6, #4]
 800d584:	e7b9      	b.n	800d4fa <_malloc_r+0x46>
 800d586:	230c      	movs	r3, #12
 800d588:	603b      	str	r3, [r7, #0]
 800d58a:	4638      	mov	r0, r7
 800d58c:	f000 fbf8 	bl	800dd80 <__malloc_unlock>
 800d590:	e7a1      	b.n	800d4d6 <_malloc_r+0x22>
 800d592:	6025      	str	r5, [r4, #0]
 800d594:	e7de      	b.n	800d554 <_malloc_r+0xa0>
 800d596:	bf00      	nop
 800d598:	20001a38 	.word	0x20001a38

0800d59c <__sfputc_r>:
 800d59c:	6893      	ldr	r3, [r2, #8]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	b410      	push	{r4}
 800d5a4:	6093      	str	r3, [r2, #8]
 800d5a6:	da08      	bge.n	800d5ba <__sfputc_r+0x1e>
 800d5a8:	6994      	ldr	r4, [r2, #24]
 800d5aa:	42a3      	cmp	r3, r4
 800d5ac:	db01      	blt.n	800d5b2 <__sfputc_r+0x16>
 800d5ae:	290a      	cmp	r1, #10
 800d5b0:	d103      	bne.n	800d5ba <__sfputc_r+0x1e>
 800d5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b6:	f7ff bc31 	b.w	800ce1c <__swbuf_r>
 800d5ba:	6813      	ldr	r3, [r2, #0]
 800d5bc:	1c58      	adds	r0, r3, #1
 800d5be:	6010      	str	r0, [r2, #0]
 800d5c0:	7019      	strb	r1, [r3, #0]
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <__sfputs_r>:
 800d5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	460f      	mov	r7, r1
 800d5d0:	4614      	mov	r4, r2
 800d5d2:	18d5      	adds	r5, r2, r3
 800d5d4:	42ac      	cmp	r4, r5
 800d5d6:	d101      	bne.n	800d5dc <__sfputs_r+0x12>
 800d5d8:	2000      	movs	r0, #0
 800d5da:	e007      	b.n	800d5ec <__sfputs_r+0x22>
 800d5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e0:	463a      	mov	r2, r7
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f7ff ffda 	bl	800d59c <__sfputc_r>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d1f3      	bne.n	800d5d4 <__sfputs_r+0xa>
 800d5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5f0 <_vfiprintf_r>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	b09d      	sub	sp, #116	; 0x74
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	4698      	mov	r8, r3
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	b118      	cbz	r0, 800d608 <_vfiprintf_r+0x18>
 800d600:	6983      	ldr	r3, [r0, #24]
 800d602:	b90b      	cbnz	r3, 800d608 <_vfiprintf_r+0x18>
 800d604:	f7ff fde4 	bl	800d1d0 <__sinit>
 800d608:	4b89      	ldr	r3, [pc, #548]	; (800d830 <_vfiprintf_r+0x240>)
 800d60a:	429d      	cmp	r5, r3
 800d60c:	d11b      	bne.n	800d646 <_vfiprintf_r+0x56>
 800d60e:	6875      	ldr	r5, [r6, #4]
 800d610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d612:	07d9      	lsls	r1, r3, #31
 800d614:	d405      	bmi.n	800d622 <_vfiprintf_r+0x32>
 800d616:	89ab      	ldrh	r3, [r5, #12]
 800d618:	059a      	lsls	r2, r3, #22
 800d61a:	d402      	bmi.n	800d622 <_vfiprintf_r+0x32>
 800d61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d61e:	f7ff fe75 	bl	800d30c <__retarget_lock_acquire_recursive>
 800d622:	89ab      	ldrh	r3, [r5, #12]
 800d624:	071b      	lsls	r3, r3, #28
 800d626:	d501      	bpl.n	800d62c <_vfiprintf_r+0x3c>
 800d628:	692b      	ldr	r3, [r5, #16]
 800d62a:	b9eb      	cbnz	r3, 800d668 <_vfiprintf_r+0x78>
 800d62c:	4629      	mov	r1, r5
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff fc46 	bl	800cec0 <__swsetup_r>
 800d634:	b1c0      	cbz	r0, 800d668 <_vfiprintf_r+0x78>
 800d636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d638:	07dc      	lsls	r4, r3, #31
 800d63a:	d50e      	bpl.n	800d65a <_vfiprintf_r+0x6a>
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295
 800d640:	b01d      	add	sp, #116	; 0x74
 800d642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d646:	4b7b      	ldr	r3, [pc, #492]	; (800d834 <_vfiprintf_r+0x244>)
 800d648:	429d      	cmp	r5, r3
 800d64a:	d101      	bne.n	800d650 <_vfiprintf_r+0x60>
 800d64c:	68b5      	ldr	r5, [r6, #8]
 800d64e:	e7df      	b.n	800d610 <_vfiprintf_r+0x20>
 800d650:	4b79      	ldr	r3, [pc, #484]	; (800d838 <_vfiprintf_r+0x248>)
 800d652:	429d      	cmp	r5, r3
 800d654:	bf08      	it	eq
 800d656:	68f5      	ldreq	r5, [r6, #12]
 800d658:	e7da      	b.n	800d610 <_vfiprintf_r+0x20>
 800d65a:	89ab      	ldrh	r3, [r5, #12]
 800d65c:	0598      	lsls	r0, r3, #22
 800d65e:	d4ed      	bmi.n	800d63c <_vfiprintf_r+0x4c>
 800d660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d662:	f7ff fe54 	bl	800d30e <__retarget_lock_release_recursive>
 800d666:	e7e9      	b.n	800d63c <_vfiprintf_r+0x4c>
 800d668:	2300      	movs	r3, #0
 800d66a:	9309      	str	r3, [sp, #36]	; 0x24
 800d66c:	2320      	movs	r3, #32
 800d66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d672:	f8cd 800c 	str.w	r8, [sp, #12]
 800d676:	2330      	movs	r3, #48	; 0x30
 800d678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d83c <_vfiprintf_r+0x24c>
 800d67c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d680:	f04f 0901 	mov.w	r9, #1
 800d684:	4623      	mov	r3, r4
 800d686:	469a      	mov	sl, r3
 800d688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68c:	b10a      	cbz	r2, 800d692 <_vfiprintf_r+0xa2>
 800d68e:	2a25      	cmp	r2, #37	; 0x25
 800d690:	d1f9      	bne.n	800d686 <_vfiprintf_r+0x96>
 800d692:	ebba 0b04 	subs.w	fp, sl, r4
 800d696:	d00b      	beq.n	800d6b0 <_vfiprintf_r+0xc0>
 800d698:	465b      	mov	r3, fp
 800d69a:	4622      	mov	r2, r4
 800d69c:	4629      	mov	r1, r5
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ff93 	bl	800d5ca <__sfputs_r>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	f000 80aa 	beq.w	800d7fe <_vfiprintf_r+0x20e>
 800d6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ac:	445a      	add	r2, fp
 800d6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 80a2 	beq.w	800d7fe <_vfiprintf_r+0x20e>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6c4:	f10a 0a01 	add.w	sl, sl, #1
 800d6c8:	9304      	str	r3, [sp, #16]
 800d6ca:	9307      	str	r3, [sp, #28]
 800d6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6d2:	4654      	mov	r4, sl
 800d6d4:	2205      	movs	r2, #5
 800d6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6da:	4858      	ldr	r0, [pc, #352]	; (800d83c <_vfiprintf_r+0x24c>)
 800d6dc:	f7f2 fd58 	bl	8000190 <memchr>
 800d6e0:	9a04      	ldr	r2, [sp, #16]
 800d6e2:	b9d8      	cbnz	r0, 800d71c <_vfiprintf_r+0x12c>
 800d6e4:	06d1      	lsls	r1, r2, #27
 800d6e6:	bf44      	itt	mi
 800d6e8:	2320      	movmi	r3, #32
 800d6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ee:	0713      	lsls	r3, r2, #28
 800d6f0:	bf44      	itt	mi
 800d6f2:	232b      	movmi	r3, #43	; 0x2b
 800d6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d6fe:	d015      	beq.n	800d72c <_vfiprintf_r+0x13c>
 800d700:	9a07      	ldr	r2, [sp, #28]
 800d702:	4654      	mov	r4, sl
 800d704:	2000      	movs	r0, #0
 800d706:	f04f 0c0a 	mov.w	ip, #10
 800d70a:	4621      	mov	r1, r4
 800d70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d710:	3b30      	subs	r3, #48	; 0x30
 800d712:	2b09      	cmp	r3, #9
 800d714:	d94e      	bls.n	800d7b4 <_vfiprintf_r+0x1c4>
 800d716:	b1b0      	cbz	r0, 800d746 <_vfiprintf_r+0x156>
 800d718:	9207      	str	r2, [sp, #28]
 800d71a:	e014      	b.n	800d746 <_vfiprintf_r+0x156>
 800d71c:	eba0 0308 	sub.w	r3, r0, r8
 800d720:	fa09 f303 	lsl.w	r3, r9, r3
 800d724:	4313      	orrs	r3, r2
 800d726:	9304      	str	r3, [sp, #16]
 800d728:	46a2      	mov	sl, r4
 800d72a:	e7d2      	b.n	800d6d2 <_vfiprintf_r+0xe2>
 800d72c:	9b03      	ldr	r3, [sp, #12]
 800d72e:	1d19      	adds	r1, r3, #4
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	9103      	str	r1, [sp, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	bfbb      	ittet	lt
 800d738:	425b      	neglt	r3, r3
 800d73a:	f042 0202 	orrlt.w	r2, r2, #2
 800d73e:	9307      	strge	r3, [sp, #28]
 800d740:	9307      	strlt	r3, [sp, #28]
 800d742:	bfb8      	it	lt
 800d744:	9204      	strlt	r2, [sp, #16]
 800d746:	7823      	ldrb	r3, [r4, #0]
 800d748:	2b2e      	cmp	r3, #46	; 0x2e
 800d74a:	d10c      	bne.n	800d766 <_vfiprintf_r+0x176>
 800d74c:	7863      	ldrb	r3, [r4, #1]
 800d74e:	2b2a      	cmp	r3, #42	; 0x2a
 800d750:	d135      	bne.n	800d7be <_vfiprintf_r+0x1ce>
 800d752:	9b03      	ldr	r3, [sp, #12]
 800d754:	1d1a      	adds	r2, r3, #4
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	9203      	str	r2, [sp, #12]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfb8      	it	lt
 800d75e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d762:	3402      	adds	r4, #2
 800d764:	9305      	str	r3, [sp, #20]
 800d766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d84c <_vfiprintf_r+0x25c>
 800d76a:	7821      	ldrb	r1, [r4, #0]
 800d76c:	2203      	movs	r2, #3
 800d76e:	4650      	mov	r0, sl
 800d770:	f7f2 fd0e 	bl	8000190 <memchr>
 800d774:	b140      	cbz	r0, 800d788 <_vfiprintf_r+0x198>
 800d776:	2340      	movs	r3, #64	; 0x40
 800d778:	eba0 000a 	sub.w	r0, r0, sl
 800d77c:	fa03 f000 	lsl.w	r0, r3, r0
 800d780:	9b04      	ldr	r3, [sp, #16]
 800d782:	4303      	orrs	r3, r0
 800d784:	3401      	adds	r4, #1
 800d786:	9304      	str	r3, [sp, #16]
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	482c      	ldr	r0, [pc, #176]	; (800d840 <_vfiprintf_r+0x250>)
 800d78e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d792:	2206      	movs	r2, #6
 800d794:	f7f2 fcfc 	bl	8000190 <memchr>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d03f      	beq.n	800d81c <_vfiprintf_r+0x22c>
 800d79c:	4b29      	ldr	r3, [pc, #164]	; (800d844 <_vfiprintf_r+0x254>)
 800d79e:	bb1b      	cbnz	r3, 800d7e8 <_vfiprintf_r+0x1f8>
 800d7a0:	9b03      	ldr	r3, [sp, #12]
 800d7a2:	3307      	adds	r3, #7
 800d7a4:	f023 0307 	bic.w	r3, r3, #7
 800d7a8:	3308      	adds	r3, #8
 800d7aa:	9303      	str	r3, [sp, #12]
 800d7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ae:	443b      	add	r3, r7
 800d7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b2:	e767      	b.n	800d684 <_vfiprintf_r+0x94>
 800d7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	e7a5      	b.n	800d70a <_vfiprintf_r+0x11a>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	9305      	str	r3, [sp, #20]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f04f 0c0a 	mov.w	ip, #10
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7d0:	3a30      	subs	r2, #48	; 0x30
 800d7d2:	2a09      	cmp	r2, #9
 800d7d4:	d903      	bls.n	800d7de <_vfiprintf_r+0x1ee>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0c5      	beq.n	800d766 <_vfiprintf_r+0x176>
 800d7da:	9105      	str	r1, [sp, #20]
 800d7dc:	e7c3      	b.n	800d766 <_vfiprintf_r+0x176>
 800d7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e7f0      	b.n	800d7ca <_vfiprintf_r+0x1da>
 800d7e8:	ab03      	add	r3, sp, #12
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	462a      	mov	r2, r5
 800d7ee:	4b16      	ldr	r3, [pc, #88]	; (800d848 <_vfiprintf_r+0x258>)
 800d7f0:	a904      	add	r1, sp, #16
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f3af 8000 	nop.w
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	1c78      	adds	r0, r7, #1
 800d7fc:	d1d6      	bne.n	800d7ac <_vfiprintf_r+0x1bc>
 800d7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d800:	07d9      	lsls	r1, r3, #31
 800d802:	d405      	bmi.n	800d810 <_vfiprintf_r+0x220>
 800d804:	89ab      	ldrh	r3, [r5, #12]
 800d806:	059a      	lsls	r2, r3, #22
 800d808:	d402      	bmi.n	800d810 <_vfiprintf_r+0x220>
 800d80a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d80c:	f7ff fd7f 	bl	800d30e <__retarget_lock_release_recursive>
 800d810:	89ab      	ldrh	r3, [r5, #12]
 800d812:	065b      	lsls	r3, r3, #25
 800d814:	f53f af12 	bmi.w	800d63c <_vfiprintf_r+0x4c>
 800d818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d81a:	e711      	b.n	800d640 <_vfiprintf_r+0x50>
 800d81c:	ab03      	add	r3, sp, #12
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	462a      	mov	r2, r5
 800d822:	4b09      	ldr	r3, [pc, #36]	; (800d848 <_vfiprintf_r+0x258>)
 800d824:	a904      	add	r1, sp, #16
 800d826:	4630      	mov	r0, r6
 800d828:	f000 f880 	bl	800d92c <_printf_i>
 800d82c:	e7e4      	b.n	800d7f8 <_vfiprintf_r+0x208>
 800d82e:	bf00      	nop
 800d830:	0800f530 	.word	0x0800f530
 800d834:	0800f550 	.word	0x0800f550
 800d838:	0800f510 	.word	0x0800f510
 800d83c:	0800f570 	.word	0x0800f570
 800d840:	0800f57a 	.word	0x0800f57a
 800d844:	00000000 	.word	0x00000000
 800d848:	0800d5cb 	.word	0x0800d5cb
 800d84c:	0800f576 	.word	0x0800f576

0800d850 <_printf_common>:
 800d850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d854:	4616      	mov	r6, r2
 800d856:	4699      	mov	r9, r3
 800d858:	688a      	ldr	r2, [r1, #8]
 800d85a:	690b      	ldr	r3, [r1, #16]
 800d85c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d860:	4293      	cmp	r3, r2
 800d862:	bfb8      	it	lt
 800d864:	4613      	movlt	r3, r2
 800d866:	6033      	str	r3, [r6, #0]
 800d868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d86c:	4607      	mov	r7, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	b10a      	cbz	r2, 800d876 <_printf_common+0x26>
 800d872:	3301      	adds	r3, #1
 800d874:	6033      	str	r3, [r6, #0]
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	0699      	lsls	r1, r3, #26
 800d87a:	bf42      	ittt	mi
 800d87c:	6833      	ldrmi	r3, [r6, #0]
 800d87e:	3302      	addmi	r3, #2
 800d880:	6033      	strmi	r3, [r6, #0]
 800d882:	6825      	ldr	r5, [r4, #0]
 800d884:	f015 0506 	ands.w	r5, r5, #6
 800d888:	d106      	bne.n	800d898 <_printf_common+0x48>
 800d88a:	f104 0a19 	add.w	sl, r4, #25
 800d88e:	68e3      	ldr	r3, [r4, #12]
 800d890:	6832      	ldr	r2, [r6, #0]
 800d892:	1a9b      	subs	r3, r3, r2
 800d894:	42ab      	cmp	r3, r5
 800d896:	dc26      	bgt.n	800d8e6 <_printf_common+0x96>
 800d898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d89c:	1e13      	subs	r3, r2, #0
 800d89e:	6822      	ldr	r2, [r4, #0]
 800d8a0:	bf18      	it	ne
 800d8a2:	2301      	movne	r3, #1
 800d8a4:	0692      	lsls	r2, r2, #26
 800d8a6:	d42b      	bmi.n	800d900 <_printf_common+0xb0>
 800d8a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	47c0      	blx	r8
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d01e      	beq.n	800d8f4 <_printf_common+0xa4>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	68e5      	ldr	r5, [r4, #12]
 800d8ba:	6832      	ldr	r2, [r6, #0]
 800d8bc:	f003 0306 	and.w	r3, r3, #6
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	bf08      	it	eq
 800d8c4:	1aad      	subeq	r5, r5, r2
 800d8c6:	68a3      	ldr	r3, [r4, #8]
 800d8c8:	6922      	ldr	r2, [r4, #16]
 800d8ca:	bf0c      	ite	eq
 800d8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8d0:	2500      	movne	r5, #0
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	bfc4      	itt	gt
 800d8d6:	1a9b      	subgt	r3, r3, r2
 800d8d8:	18ed      	addgt	r5, r5, r3
 800d8da:	2600      	movs	r6, #0
 800d8dc:	341a      	adds	r4, #26
 800d8de:	42b5      	cmp	r5, r6
 800d8e0:	d11a      	bne.n	800d918 <_printf_common+0xc8>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e008      	b.n	800d8f8 <_printf_common+0xa8>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4652      	mov	r2, sl
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	47c0      	blx	r8
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d103      	bne.n	800d8fc <_printf_common+0xac>
 800d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fc:	3501      	adds	r5, #1
 800d8fe:	e7c6      	b.n	800d88e <_printf_common+0x3e>
 800d900:	18e1      	adds	r1, r4, r3
 800d902:	1c5a      	adds	r2, r3, #1
 800d904:	2030      	movs	r0, #48	; 0x30
 800d906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d90a:	4422      	add	r2, r4
 800d90c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d914:	3302      	adds	r3, #2
 800d916:	e7c7      	b.n	800d8a8 <_printf_common+0x58>
 800d918:	2301      	movs	r3, #1
 800d91a:	4622      	mov	r2, r4
 800d91c:	4649      	mov	r1, r9
 800d91e:	4638      	mov	r0, r7
 800d920:	47c0      	blx	r8
 800d922:	3001      	adds	r0, #1
 800d924:	d0e6      	beq.n	800d8f4 <_printf_common+0xa4>
 800d926:	3601      	adds	r6, #1
 800d928:	e7d9      	b.n	800d8de <_printf_common+0x8e>
	...

0800d92c <_printf_i>:
 800d92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d930:	7e0f      	ldrb	r7, [r1, #24]
 800d932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d934:	2f78      	cmp	r7, #120	; 0x78
 800d936:	4691      	mov	r9, r2
 800d938:	4680      	mov	r8, r0
 800d93a:	460c      	mov	r4, r1
 800d93c:	469a      	mov	sl, r3
 800d93e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d942:	d807      	bhi.n	800d954 <_printf_i+0x28>
 800d944:	2f62      	cmp	r7, #98	; 0x62
 800d946:	d80a      	bhi.n	800d95e <_printf_i+0x32>
 800d948:	2f00      	cmp	r7, #0
 800d94a:	f000 80d8 	beq.w	800dafe <_printf_i+0x1d2>
 800d94e:	2f58      	cmp	r7, #88	; 0x58
 800d950:	f000 80a3 	beq.w	800da9a <_printf_i+0x16e>
 800d954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d95c:	e03a      	b.n	800d9d4 <_printf_i+0xa8>
 800d95e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d962:	2b15      	cmp	r3, #21
 800d964:	d8f6      	bhi.n	800d954 <_printf_i+0x28>
 800d966:	a101      	add	r1, pc, #4	; (adr r1, 800d96c <_printf_i+0x40>)
 800d968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d96c:	0800d9c5 	.word	0x0800d9c5
 800d970:	0800d9d9 	.word	0x0800d9d9
 800d974:	0800d955 	.word	0x0800d955
 800d978:	0800d955 	.word	0x0800d955
 800d97c:	0800d955 	.word	0x0800d955
 800d980:	0800d955 	.word	0x0800d955
 800d984:	0800d9d9 	.word	0x0800d9d9
 800d988:	0800d955 	.word	0x0800d955
 800d98c:	0800d955 	.word	0x0800d955
 800d990:	0800d955 	.word	0x0800d955
 800d994:	0800d955 	.word	0x0800d955
 800d998:	0800dae5 	.word	0x0800dae5
 800d99c:	0800da09 	.word	0x0800da09
 800d9a0:	0800dac7 	.word	0x0800dac7
 800d9a4:	0800d955 	.word	0x0800d955
 800d9a8:	0800d955 	.word	0x0800d955
 800d9ac:	0800db07 	.word	0x0800db07
 800d9b0:	0800d955 	.word	0x0800d955
 800d9b4:	0800da09 	.word	0x0800da09
 800d9b8:	0800d955 	.word	0x0800d955
 800d9bc:	0800d955 	.word	0x0800d955
 800d9c0:	0800dacf 	.word	0x0800dacf
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	1d1a      	adds	r2, r3, #4
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	602a      	str	r2, [r5, #0]
 800d9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e0a3      	b.n	800db20 <_printf_i+0x1f4>
 800d9d8:	6820      	ldr	r0, [r4, #0]
 800d9da:	6829      	ldr	r1, [r5, #0]
 800d9dc:	0606      	lsls	r6, r0, #24
 800d9de:	f101 0304 	add.w	r3, r1, #4
 800d9e2:	d50a      	bpl.n	800d9fa <_printf_i+0xce>
 800d9e4:	680e      	ldr	r6, [r1, #0]
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	da03      	bge.n	800d9f4 <_printf_i+0xc8>
 800d9ec:	232d      	movs	r3, #45	; 0x2d
 800d9ee:	4276      	negs	r6, r6
 800d9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9f4:	485e      	ldr	r0, [pc, #376]	; (800db70 <_printf_i+0x244>)
 800d9f6:	230a      	movs	r3, #10
 800d9f8:	e019      	b.n	800da2e <_printf_i+0x102>
 800d9fa:	680e      	ldr	r6, [r1, #0]
 800d9fc:	602b      	str	r3, [r5, #0]
 800d9fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da02:	bf18      	it	ne
 800da04:	b236      	sxthne	r6, r6
 800da06:	e7ef      	b.n	800d9e8 <_printf_i+0xbc>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	6820      	ldr	r0, [r4, #0]
 800da0c:	1d19      	adds	r1, r3, #4
 800da0e:	6029      	str	r1, [r5, #0]
 800da10:	0601      	lsls	r1, r0, #24
 800da12:	d501      	bpl.n	800da18 <_printf_i+0xec>
 800da14:	681e      	ldr	r6, [r3, #0]
 800da16:	e002      	b.n	800da1e <_printf_i+0xf2>
 800da18:	0646      	lsls	r6, r0, #25
 800da1a:	d5fb      	bpl.n	800da14 <_printf_i+0xe8>
 800da1c:	881e      	ldrh	r6, [r3, #0]
 800da1e:	4854      	ldr	r0, [pc, #336]	; (800db70 <_printf_i+0x244>)
 800da20:	2f6f      	cmp	r7, #111	; 0x6f
 800da22:	bf0c      	ite	eq
 800da24:	2308      	moveq	r3, #8
 800da26:	230a      	movne	r3, #10
 800da28:	2100      	movs	r1, #0
 800da2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da2e:	6865      	ldr	r5, [r4, #4]
 800da30:	60a5      	str	r5, [r4, #8]
 800da32:	2d00      	cmp	r5, #0
 800da34:	bfa2      	ittt	ge
 800da36:	6821      	ldrge	r1, [r4, #0]
 800da38:	f021 0104 	bicge.w	r1, r1, #4
 800da3c:	6021      	strge	r1, [r4, #0]
 800da3e:	b90e      	cbnz	r6, 800da44 <_printf_i+0x118>
 800da40:	2d00      	cmp	r5, #0
 800da42:	d04d      	beq.n	800dae0 <_printf_i+0x1b4>
 800da44:	4615      	mov	r5, r2
 800da46:	fbb6 f1f3 	udiv	r1, r6, r3
 800da4a:	fb03 6711 	mls	r7, r3, r1, r6
 800da4e:	5dc7      	ldrb	r7, [r0, r7]
 800da50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da54:	4637      	mov	r7, r6
 800da56:	42bb      	cmp	r3, r7
 800da58:	460e      	mov	r6, r1
 800da5a:	d9f4      	bls.n	800da46 <_printf_i+0x11a>
 800da5c:	2b08      	cmp	r3, #8
 800da5e:	d10b      	bne.n	800da78 <_printf_i+0x14c>
 800da60:	6823      	ldr	r3, [r4, #0]
 800da62:	07de      	lsls	r6, r3, #31
 800da64:	d508      	bpl.n	800da78 <_printf_i+0x14c>
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	6861      	ldr	r1, [r4, #4]
 800da6a:	4299      	cmp	r1, r3
 800da6c:	bfde      	ittt	le
 800da6e:	2330      	movle	r3, #48	; 0x30
 800da70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da78:	1b52      	subs	r2, r2, r5
 800da7a:	6122      	str	r2, [r4, #16]
 800da7c:	f8cd a000 	str.w	sl, [sp]
 800da80:	464b      	mov	r3, r9
 800da82:	aa03      	add	r2, sp, #12
 800da84:	4621      	mov	r1, r4
 800da86:	4640      	mov	r0, r8
 800da88:	f7ff fee2 	bl	800d850 <_printf_common>
 800da8c:	3001      	adds	r0, #1
 800da8e:	d14c      	bne.n	800db2a <_printf_i+0x1fe>
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	b004      	add	sp, #16
 800da96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9a:	4835      	ldr	r0, [pc, #212]	; (800db70 <_printf_i+0x244>)
 800da9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daa0:	6829      	ldr	r1, [r5, #0]
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	f851 6b04 	ldr.w	r6, [r1], #4
 800daa8:	6029      	str	r1, [r5, #0]
 800daaa:	061d      	lsls	r5, r3, #24
 800daac:	d514      	bpl.n	800dad8 <_printf_i+0x1ac>
 800daae:	07df      	lsls	r7, r3, #31
 800dab0:	bf44      	itt	mi
 800dab2:	f043 0320 	orrmi.w	r3, r3, #32
 800dab6:	6023      	strmi	r3, [r4, #0]
 800dab8:	b91e      	cbnz	r6, 800dac2 <_printf_i+0x196>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	f023 0320 	bic.w	r3, r3, #32
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	2310      	movs	r3, #16
 800dac4:	e7b0      	b.n	800da28 <_printf_i+0xfc>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	f043 0320 	orr.w	r3, r3, #32
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	2378      	movs	r3, #120	; 0x78
 800dad0:	4828      	ldr	r0, [pc, #160]	; (800db74 <_printf_i+0x248>)
 800dad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dad6:	e7e3      	b.n	800daa0 <_printf_i+0x174>
 800dad8:	0659      	lsls	r1, r3, #25
 800dada:	bf48      	it	mi
 800dadc:	b2b6      	uxthmi	r6, r6
 800dade:	e7e6      	b.n	800daae <_printf_i+0x182>
 800dae0:	4615      	mov	r5, r2
 800dae2:	e7bb      	b.n	800da5c <_printf_i+0x130>
 800dae4:	682b      	ldr	r3, [r5, #0]
 800dae6:	6826      	ldr	r6, [r4, #0]
 800dae8:	6961      	ldr	r1, [r4, #20]
 800daea:	1d18      	adds	r0, r3, #4
 800daec:	6028      	str	r0, [r5, #0]
 800daee:	0635      	lsls	r5, r6, #24
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	d501      	bpl.n	800daf8 <_printf_i+0x1cc>
 800daf4:	6019      	str	r1, [r3, #0]
 800daf6:	e002      	b.n	800dafe <_printf_i+0x1d2>
 800daf8:	0670      	lsls	r0, r6, #25
 800dafa:	d5fb      	bpl.n	800daf4 <_printf_i+0x1c8>
 800dafc:	8019      	strh	r1, [r3, #0]
 800dafe:	2300      	movs	r3, #0
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	4615      	mov	r5, r2
 800db04:	e7ba      	b.n	800da7c <_printf_i+0x150>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	1d1a      	adds	r2, r3, #4
 800db0a:	602a      	str	r2, [r5, #0]
 800db0c:	681d      	ldr	r5, [r3, #0]
 800db0e:	6862      	ldr	r2, [r4, #4]
 800db10:	2100      	movs	r1, #0
 800db12:	4628      	mov	r0, r5
 800db14:	f7f2 fb3c 	bl	8000190 <memchr>
 800db18:	b108      	cbz	r0, 800db1e <_printf_i+0x1f2>
 800db1a:	1b40      	subs	r0, r0, r5
 800db1c:	6060      	str	r0, [r4, #4]
 800db1e:	6863      	ldr	r3, [r4, #4]
 800db20:	6123      	str	r3, [r4, #16]
 800db22:	2300      	movs	r3, #0
 800db24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db28:	e7a8      	b.n	800da7c <_printf_i+0x150>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	462a      	mov	r2, r5
 800db2e:	4649      	mov	r1, r9
 800db30:	4640      	mov	r0, r8
 800db32:	47d0      	blx	sl
 800db34:	3001      	adds	r0, #1
 800db36:	d0ab      	beq.n	800da90 <_printf_i+0x164>
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	079b      	lsls	r3, r3, #30
 800db3c:	d413      	bmi.n	800db66 <_printf_i+0x23a>
 800db3e:	68e0      	ldr	r0, [r4, #12]
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	4298      	cmp	r0, r3
 800db44:	bfb8      	it	lt
 800db46:	4618      	movlt	r0, r3
 800db48:	e7a4      	b.n	800da94 <_printf_i+0x168>
 800db4a:	2301      	movs	r3, #1
 800db4c:	4632      	mov	r2, r6
 800db4e:	4649      	mov	r1, r9
 800db50:	4640      	mov	r0, r8
 800db52:	47d0      	blx	sl
 800db54:	3001      	adds	r0, #1
 800db56:	d09b      	beq.n	800da90 <_printf_i+0x164>
 800db58:	3501      	adds	r5, #1
 800db5a:	68e3      	ldr	r3, [r4, #12]
 800db5c:	9903      	ldr	r1, [sp, #12]
 800db5e:	1a5b      	subs	r3, r3, r1
 800db60:	42ab      	cmp	r3, r5
 800db62:	dcf2      	bgt.n	800db4a <_printf_i+0x21e>
 800db64:	e7eb      	b.n	800db3e <_printf_i+0x212>
 800db66:	2500      	movs	r5, #0
 800db68:	f104 0619 	add.w	r6, r4, #25
 800db6c:	e7f5      	b.n	800db5a <_printf_i+0x22e>
 800db6e:	bf00      	nop
 800db70:	0800f581 	.word	0x0800f581
 800db74:	0800f592 	.word	0x0800f592

0800db78 <_putc_r>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	460d      	mov	r5, r1
 800db7c:	4614      	mov	r4, r2
 800db7e:	4606      	mov	r6, r0
 800db80:	b118      	cbz	r0, 800db8a <_putc_r+0x12>
 800db82:	6983      	ldr	r3, [r0, #24]
 800db84:	b90b      	cbnz	r3, 800db8a <_putc_r+0x12>
 800db86:	f7ff fb23 	bl	800d1d0 <__sinit>
 800db8a:	4b1c      	ldr	r3, [pc, #112]	; (800dbfc <_putc_r+0x84>)
 800db8c:	429c      	cmp	r4, r3
 800db8e:	d124      	bne.n	800dbda <_putc_r+0x62>
 800db90:	6874      	ldr	r4, [r6, #4]
 800db92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db94:	07d8      	lsls	r0, r3, #31
 800db96:	d405      	bmi.n	800dba4 <_putc_r+0x2c>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	0599      	lsls	r1, r3, #22
 800db9c:	d402      	bmi.n	800dba4 <_putc_r+0x2c>
 800db9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba0:	f7ff fbb4 	bl	800d30c <__retarget_lock_acquire_recursive>
 800dba4:	68a3      	ldr	r3, [r4, #8]
 800dba6:	3b01      	subs	r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	60a3      	str	r3, [r4, #8]
 800dbac:	da05      	bge.n	800dbba <_putc_r+0x42>
 800dbae:	69a2      	ldr	r2, [r4, #24]
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	db1c      	blt.n	800dbee <_putc_r+0x76>
 800dbb4:	b2eb      	uxtb	r3, r5
 800dbb6:	2b0a      	cmp	r3, #10
 800dbb8:	d019      	beq.n	800dbee <_putc_r+0x76>
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	6022      	str	r2, [r4, #0]
 800dbc0:	701d      	strb	r5, [r3, #0]
 800dbc2:	b2ed      	uxtb	r5, r5
 800dbc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbc6:	07da      	lsls	r2, r3, #31
 800dbc8:	d405      	bmi.n	800dbd6 <_putc_r+0x5e>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	059b      	lsls	r3, r3, #22
 800dbce:	d402      	bmi.n	800dbd6 <_putc_r+0x5e>
 800dbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbd2:	f7ff fb9c 	bl	800d30e <__retarget_lock_release_recursive>
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	bd70      	pop	{r4, r5, r6, pc}
 800dbda:	4b09      	ldr	r3, [pc, #36]	; (800dc00 <_putc_r+0x88>)
 800dbdc:	429c      	cmp	r4, r3
 800dbde:	d101      	bne.n	800dbe4 <_putc_r+0x6c>
 800dbe0:	68b4      	ldr	r4, [r6, #8]
 800dbe2:	e7d6      	b.n	800db92 <_putc_r+0x1a>
 800dbe4:	4b07      	ldr	r3, [pc, #28]	; (800dc04 <_putc_r+0x8c>)
 800dbe6:	429c      	cmp	r4, r3
 800dbe8:	bf08      	it	eq
 800dbea:	68f4      	ldreq	r4, [r6, #12]
 800dbec:	e7d1      	b.n	800db92 <_putc_r+0x1a>
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f7ff f912 	bl	800ce1c <__swbuf_r>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	e7e3      	b.n	800dbc4 <_putc_r+0x4c>
 800dbfc:	0800f530 	.word	0x0800f530
 800dc00:	0800f550 	.word	0x0800f550
 800dc04:	0800f510 	.word	0x0800f510

0800dc08 <_sbrk_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d06      	ldr	r5, [pc, #24]	; (800dc24 <_sbrk_r+0x1c>)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	4604      	mov	r4, r0
 800dc10:	4608      	mov	r0, r1
 800dc12:	602b      	str	r3, [r5, #0]
 800dc14:	f7f5 f992 	bl	8002f3c <_sbrk>
 800dc18:	1c43      	adds	r3, r0, #1
 800dc1a:	d102      	bne.n	800dc22 <_sbrk_r+0x1a>
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	b103      	cbz	r3, 800dc22 <_sbrk_r+0x1a>
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	bd38      	pop	{r3, r4, r5, pc}
 800dc24:	20001a40 	.word	0x20001a40

0800dc28 <__sread>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc30:	f000 f8ac 	bl	800dd8c <_read_r>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	bfab      	itete	ge
 800dc38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc3a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc3c:	181b      	addge	r3, r3, r0
 800dc3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc42:	bfac      	ite	ge
 800dc44:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc46:	81a3      	strhlt	r3, [r4, #12]
 800dc48:	bd10      	pop	{r4, pc}

0800dc4a <__swrite>:
 800dc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4e:	461f      	mov	r7, r3
 800dc50:	898b      	ldrh	r3, [r1, #12]
 800dc52:	05db      	lsls	r3, r3, #23
 800dc54:	4605      	mov	r5, r0
 800dc56:	460c      	mov	r4, r1
 800dc58:	4616      	mov	r6, r2
 800dc5a:	d505      	bpl.n	800dc68 <__swrite+0x1e>
 800dc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc60:	2302      	movs	r3, #2
 800dc62:	2200      	movs	r2, #0
 800dc64:	f000 f874 	bl	800dd50 <_lseek_r>
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc72:	81a3      	strh	r3, [r4, #12]
 800dc74:	4632      	mov	r2, r6
 800dc76:	463b      	mov	r3, r7
 800dc78:	4628      	mov	r0, r5
 800dc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7e:	f000 b823 	b.w	800dcc8 <_write_r>

0800dc82 <__sseek>:
 800dc82:	b510      	push	{r4, lr}
 800dc84:	460c      	mov	r4, r1
 800dc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8a:	f000 f861 	bl	800dd50 <_lseek_r>
 800dc8e:	1c43      	adds	r3, r0, #1
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	bf15      	itete	ne
 800dc94:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc9e:	81a3      	strheq	r3, [r4, #12]
 800dca0:	bf18      	it	ne
 800dca2:	81a3      	strhne	r3, [r4, #12]
 800dca4:	bd10      	pop	{r4, pc}

0800dca6 <__sclose>:
 800dca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcaa:	f000 b81f 	b.w	800dcec <_close_r>

0800dcae <strchr>:
 800dcae:	b2c9      	uxtb	r1, r1
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb6:	b11a      	cbz	r2, 800dcc0 <strchr+0x12>
 800dcb8:	428a      	cmp	r2, r1
 800dcba:	d1f9      	bne.n	800dcb0 <strchr+0x2>
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	4770      	bx	lr
 800dcc0:	2900      	cmp	r1, #0
 800dcc2:	bf18      	it	ne
 800dcc4:	2300      	movne	r3, #0
 800dcc6:	e7f9      	b.n	800dcbc <strchr+0xe>

0800dcc8 <_write_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	; (800dce8 <_write_r+0x20>)
 800dccc:	4604      	mov	r4, r0
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f7fc f9f4 	bl	800a0c4 <_write>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_write_r+0x1e>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_write_r+0x1e>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	20001a40 	.word	0x20001a40

0800dcec <_close_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d06      	ldr	r5, [pc, #24]	; (800dd08 <_close_r+0x1c>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	f7f5 f8eb 	bl	8002ed2 <_close>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_close_r+0x1a>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_close_r+0x1a>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	20001a40 	.word	0x20001a40

0800dd0c <_fstat_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	; (800dd2c <_fstat_r+0x20>)
 800dd10:	2300      	movs	r3, #0
 800dd12:	4604      	mov	r4, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	4611      	mov	r1, r2
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	f7f5 f8e6 	bl	8002eea <_fstat>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	d102      	bne.n	800dd28 <_fstat_r+0x1c>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	b103      	cbz	r3, 800dd28 <_fstat_r+0x1c>
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20001a40 	.word	0x20001a40

0800dd30 <_isatty_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d06      	ldr	r5, [pc, #24]	; (800dd4c <_isatty_r+0x1c>)
 800dd34:	2300      	movs	r3, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	4608      	mov	r0, r1
 800dd3a:	602b      	str	r3, [r5, #0]
 800dd3c:	f7f5 f8e5 	bl	8002f0a <_isatty>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_isatty_r+0x1a>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_isatty_r+0x1a>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	20001a40 	.word	0x20001a40

0800dd50 <_lseek_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d07      	ldr	r5, [pc, #28]	; (800dd70 <_lseek_r+0x20>)
 800dd54:	4604      	mov	r4, r0
 800dd56:	4608      	mov	r0, r1
 800dd58:	4611      	mov	r1, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	602a      	str	r2, [r5, #0]
 800dd5e:	461a      	mov	r2, r3
 800dd60:	f7f5 f8de 	bl	8002f20 <_lseek>
 800dd64:	1c43      	adds	r3, r0, #1
 800dd66:	d102      	bne.n	800dd6e <_lseek_r+0x1e>
 800dd68:	682b      	ldr	r3, [r5, #0]
 800dd6a:	b103      	cbz	r3, 800dd6e <_lseek_r+0x1e>
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	bd38      	pop	{r3, r4, r5, pc}
 800dd70:	20001a40 	.word	0x20001a40

0800dd74 <__malloc_lock>:
 800dd74:	4801      	ldr	r0, [pc, #4]	; (800dd7c <__malloc_lock+0x8>)
 800dd76:	f7ff bac9 	b.w	800d30c <__retarget_lock_acquire_recursive>
 800dd7a:	bf00      	nop
 800dd7c:	20001a34 	.word	0x20001a34

0800dd80 <__malloc_unlock>:
 800dd80:	4801      	ldr	r0, [pc, #4]	; (800dd88 <__malloc_unlock+0x8>)
 800dd82:	f7ff bac4 	b.w	800d30e <__retarget_lock_release_recursive>
 800dd86:	bf00      	nop
 800dd88:	20001a34 	.word	0x20001a34

0800dd8c <_read_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_read_r+0x20>)
 800dd90:	4604      	mov	r4, r0
 800dd92:	4608      	mov	r0, r1
 800dd94:	4611      	mov	r1, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	602a      	str	r2, [r5, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f7f5 f87c 	bl	8002e98 <_read>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_read_r+0x1e>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_read_r+0x1e>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	20001a40 	.word	0x20001a40

0800ddb0 <_init>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	bf00      	nop
 800ddb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb6:	bc08      	pop	{r3}
 800ddb8:	469e      	mov	lr, r3
 800ddba:	4770      	bx	lr

0800ddbc <_fini>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	bf00      	nop
 800ddc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc2:	bc08      	pop	{r3}
 800ddc4:	469e      	mov	lr, r3
 800ddc6:	4770      	bx	lr
